



//-----------------------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by the XAFBuild tool.
//		Template file DBIGenerationTemplate.xml
//		Vault version 131
//		XAFBuild title: Thinkage.XAFBuild.StudioAddin in Thinkage ToolKit 3.0.3.0
//		Changes to this file will be lost if the code is regenerated.
// #defines
//  <TableName>RowChangedEvents to have row changed events enabled
//	DefineForeignKeyConstraints - for the ForeignKeyConstraints to be enabled
//	DefineUniqueConstraints - for the UniqueConstraints to be enabled
//  SerializationSupport - for the Serialization of the dataset Constructor to be enabled
// </autogenerated>
//-----------------------------------------------------------------------------------------------

namespace Thinkage.MainBoss.Database {
	using System.Linq;
	using System;
	using System.Xml;
	using System.Runtime.Serialization;
	using Thinkage.Libraries.XAF.Database.Layout;
	using Thinkage.Libraries.XAF.Database.Service;
	using Thinkage.Libraries.DBAccess;
	using System.Collections.Generic;

	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2229:ImplementSerializationConstructors"), Serializable()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.ComponentModel.ToolboxItem(true)]
	[Thinkage.Libraries.Translation.Invariant]
	public class dsSqlServers : DBDataSet {

		#region Database Variables VAccessor
		public VAccessor V {
			get {
				if (_V == null)
					_V = new VAccessor(this);
				return _V;
			}
		}
		private VAccessor _V;
		[Thinkage.Libraries.Translation.Invariant]
		public class VAccessor {
			#region Typed Variable Accessors
			#endregion
			#region VAccessor Construction
			public VAccessor(dsSqlServers this_dataset )
			{
			}
			#endregion
		}
		#endregion


		#region Custom DataSet Construction
		internal void CommonCTOR() {
			InitClass();
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			VariablesChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		[Obsolete("Do not call this, it is only here to support DataSet.Clone.", true)]
		public dsSqlServers() : base() {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsSqlServers(DBClient db) : base(Schema, db) {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsSqlServers(IServer server) : base(Schema, server) {
			CommonCTOR();
		}
#if SerializationSupport
		protected dsSqlServers(SerializationInfo info, StreamingContext context) {
			/// ExtendedProperties are not copied in this CTOR if they are not part of the input stream. In particular, any delegate extended properties
			/// we put on datatables may not be copied. If we end up with any delegate extended properties on datatables, then we will need to
			/// amend the code below to propogate the properties itself
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null)) {
				var ds = new System.Data.DataSet();
				ds.ReadXmlSchema(XmlReader.Create(new System.IO.StringReader(strSchema)));
				TODO: Variables need streaming support
				if ((ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.SqlServers) != null)) {
					this.Tables.Add(new SqlServersDataTable(ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.SqlServers)));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			}
			else
				this.InitClass();

			this.GetSerializationData(info, context);
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			DataVariables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
#endif
		protected override void InitClass() {
			this.DataSetName = "dsSqlServers";
			this.Prefix = "";
			this.EnforceConstraints = false;
			base.InitClass();
			#region Foreign Key Constraints
			#if DefineForeignKeyConstraints

			#endif
			#endregion

		}
		#endregion

		#region Table Accessor Struct
		public TAccessor T {
			get {
				if (_T == null)
					_T = new TAccessor(this);
				return _T;
			}
		}
		private TAccessor _T;
		public class TAccessor {
			public TAccessor( dsSqlServers this_dataset ) {
				this.SqlServers = (SqlServersDataTable)this_dataset.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.SqlServers);
			}
			public readonly SqlServersDataTable SqlServers;
		}
		#endregion
		#region Default-table accessor struct
		public DTAccessor DT {
			get {
				if (_DT == null)
					_DT = new DTAccessor(this);
				return _DT;
			}
		}
		private DTAccessor _DT;
		public class DTAccessor {
			public DTAccessor( dsSqlServers this_dataset ) {
			}
		}
		#endregion
		#region DataSet Streaming
		#if SerializationSupport
		protected override bool ShouldSerializeTables() {
			return false;
		}
		protected override bool ShouldSerializeRelations() {
			return false;
		}
		protected override void ReadXmlSerializable(XmlReader reader) {
			this.Reset();
			var ds = new System.Data.DataSet();
			ds.ReadXml(reader);
			TODO: Variables need streaming support
			if ((ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.SqlServers) != null)) {
				this.Tables.Add(new SqlServersDataTable(ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.SqlServers)));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(XmlWriter.Create(stream));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(XmlReader.Create(stream), null);
		}
		#endif
		#endregion

		#region Custom-derived DataTable Classes
		#region SqlServersDataTable
		private bool ShouldSerializeSqlServers() {
			return false;
		}
#if SqlServersRowChangeEvents
		public delegate void SqlServersRowChangeEventHandler(object sender, SqlServersRowChangeEvent e);
#endif

		[Thinkage.Libraries.Translation.Invariant]
		public class SqlServersDataTable : DBICustomDataTable<SqlServersRow> {
			#region Construction
			internal SqlServersDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal SqlServersDataTable(System.Data.DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(SqlServersDataTable t) {
				  this.Id = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SqlServers.F.Id);
				  this.Name = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SqlServers.F.Name);
				  this.Server = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SqlServers.F.Server);
				  this.Instance = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SqlServers.F.Instance);
				  this.Version = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SqlServers.F.Version);
				  this.IsClustered = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SqlServers.F.IsClustered);
				}
				/// <summary>
				/// Denotes the SqlServers's Id column with type blob(nonnull, minlength 1, (maxlength 2,147,483,647)) with labelkey='Id'
				/// </summary>
				public readonly DBIDataColumn Id;
				/// <summary>
				/// Denotes the SqlServers's Name column with type string(nonnull, minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Name'
				/// </summary>
				public readonly DBIDataColumn Name;
				/// <summary>
				/// Denotes the SqlServers's Server column with type string(nonnull, minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Server'
				/// </summary>
				public readonly DBIDataColumn Server;
				/// <summary>
				/// Denotes the SqlServers's Instance column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Instance'
				/// </summary>
				public readonly DBIDataColumn Instance;
				/// <summary>
				/// Denotes the SqlServers's Version column with type string(minlength 1, maxlength 23, maxlines 0) with labelkey='Version'
				/// </summary>
				public readonly DBIDataColumn Version;
				/// <summary>
				/// Denotes the SqlServers's IsClustered column with type bool(nonnull) with labelkey='IsClustered'
				/// </summary>
				public readonly DBIDataColumn IsClustered;
			}
			#endregion
			#region EventHandlers
			#if SqlServersRowChangeEvents
			public event SqlServersRowChangeEventHandler SqlServersRowChanged;
			public event SqlServersRowChangeEventHandler SqlServersRowChanging;
			public event SqlServersRowChangeEventHandler SqlServersRowDeleted;
			public event SqlServersRowChangeEventHandler SqlServersRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				this.SqlServersRowChanged?.Invoke(this, new SqlServersRowChangeEvent(((SqlServersRow)(e.Row)), e.Action));
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				this.SqlServersRowChanging?.Invoke(this, new SqlServersRowChangeEvent(((SqlServersRow)(e.Row)), e.Action));
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				this.SqlServersRowDeleted?.Invoke(this, new SqlServersRowChangeEvent(((SqlServersRow)(e.Row)), e.Action));
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				this.SqlServersRowDeleting?.Invoke(this, new SqlServersRowChangeEvent(((SqlServersRow)(e.Row)), e.Action));
			}
			#endif
			#endregion
			protected override DBIDataTable CreateDBIInstance() => new SqlServersDataTable(Schema, Server);
			public SqlServersRow AddNewRow() => (SqlServersRow)DataSet.DB.AddNewRowAndBasesForGeneratedClass(DataSet, dsSqlServers.Schema.T.SqlServers);
			protected override DBIDataRow NewDBIRowFromBuilder(System.Data.DataRowBuilder builder) => new SqlServersRow(builder);
			public new dsSqlServers DataSet => (dsSqlServers)base.DataSet;
		}
		#region SqlServersRow
		[Thinkage.Libraries.Translation.Invariant]
		public class SqlServersRow : DBICustomDataRow<SqlServersDataTable> {
			#region Construction
			internal SqlServersRow(System.Data.DataRowBuilder rb)
				: base(rb) {
			}
			#endregion
			#region Typed Column accessor
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly SqlServersDataTable this_table;
				private readonly SqlServersRow this_row;
				public FAccessor( SqlServersRow this_row )
				{
					this.this_table = ((SqlServersDataTable)(this_row.Table));
					this.this_row = this_row;
				}
				/// <summary>
				/// Denotes the SqlServers's Id column with type blob(nonnull, minlength 1, (maxlength 2,147,483,647)) with labelkey='Id'
				/// </summary>
				public System.Byte[] Id {
					get {
							return (System.Byte[])Schema.T.SqlServers.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Byte[]));
					}
				}
				/// <summary>
				/// Denotes the SqlServers's Name column with type string(nonnull, minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Name'
				/// </summary>
				public System.String Name {
					get {
							return (System.String)Schema.T.SqlServers.F.Name.EffectiveType.GenericAsNativeType(this_table.F.Name[this_row], typeof(System.String));
					}
					set {this_table.F.Name[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SqlServers's Server column with type string(nonnull, minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Server'
				/// </summary>
				public System.String Server {
					get {
							return (System.String)Schema.T.SqlServers.F.Server.EffectiveType.GenericAsNativeType(this_table.F.Server[this_row], typeof(System.String));
					}
					set {this_table.F.Server[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SqlServers's Instance column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Instance'
				/// </summary>
				public System.String Instance {
					get {
							return (System.String)Schema.T.SqlServers.F.Instance.EffectiveType.GenericAsNativeType(this_table.F.Instance[this_row], typeof(System.String));
					}
					set {this_table.F.Instance[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SqlServers's Version column with type string(minlength 1, maxlength 23, maxlines 0) with labelkey='Version'
				/// </summary>
				public System.String Version {
					get {
							return (System.String)Schema.T.SqlServers.F.Version.EffectiveType.GenericAsNativeType(this_table.F.Version[this_row], typeof(System.String));
					}
					set {this_table.F.Version[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SqlServers's IsClustered column with type bool(nonnull) with labelkey='IsClustered'
				/// </summary>
				public System.Boolean IsClustered {
					get {
							return (System.Boolean)Schema.T.SqlServers.F.IsClustered.EffectiveType.GenericAsNativeType(this_table.F.IsClustered[this_row], typeof(System.Boolean));
					}
					set {this_table.F.IsClustered[this_row] = value; }
				}
			}
			#endregion
			#region Referenced-record accessors
			#endregion
			#region Referring-record accessors
			#endregion
		}
		#endregion
		#region SqlServersRowChangeEvent
#if SqlServersRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class SqlServersRowChangeEvent : EventArgs {

			private SqlServersRow eventRow;

			private DataRowAction eventAction;

			public SqlServersRowChangeEvent(SqlServersRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public SqlServersRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#endregion

		#region Custom database schema definitions
		#region - the custom Schema class
		/// <summary>
		/// Singleton class containing the schema of all tables,
		/// columns, and relationships in a database.
		/// </summary>
		[Thinkage.Libraries.Translation.Invariant]
		public class SchemaClass : DBI_Database {
			#region singleton construction
			private SchemaClass() {
				_T = new TAccessor(this);
				vstruct = new VAccessor(this);
				__SqlServers = new DBI_SqlServers();
				Tables.Add( __SqlServers);
				CompleteDBI(System.Reflection.Assembly.GetExecutingAssembly(), "manifest://localhost/Thinkage/MainBoss/Database/PseudoDatabases/SqlServers/SqlServers.xafdb", typeof(dsSqlServers)
				);
			 }
			/// <summary>
			/// The instantiation of the singleton SchemaClass object
			/// </summary>
			public static readonly SchemaClass Instance = new SchemaClass();
			#endregion
			#region Custom DBI_Table derivations and their private reference in the schema object
			#region - SqlServers table
			private DBI_SqlServers __SqlServers;

			/// <summary>
			/// Class to describe a SqlServers table
			/// </summary>
			public class DBI_SqlServers : DBIDataDBI_Table {
				public FAccessor F;
				private DBI_Column __Id;
				private DBI_Column __Name;
				private DBI_Column __Server;
				private DBI_Column __Instance;
				private DBI_Column __Version;
				private DBI_Column __IsClustered;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_SqlServers this_table;
					public FAccessor( DBI_SqlServers this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the SqlServers's Id column with type blob(nonnull, minlength 1, (maxlength 2,147,483,647)) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the SqlServers's Name column with type string(nonnull, minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Name'
					/// </summary>
					public DBI_Column Name { get { return this_table.__Name; } }
					/// <summary>
					/// Denotes the SqlServers's Server column with type string(nonnull, minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Server'
					/// </summary>
					public DBI_Column Server { get { return this_table.__Server; } }
					/// <summary>
					/// Denotes the SqlServers's Instance column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Instance'
					/// </summary>
					public DBI_Column Instance { get { return this_table.__Instance; } }
					/// <summary>
					/// Denotes the SqlServers's Version column with type string(minlength 1, maxlength 23, maxlines 0) with labelkey='Version'
					/// </summary>
					public DBI_Column Version { get { return this_table.__Version; } }
					/// <summary>
					/// Denotes the SqlServers's IsClustered column with type bool(nonnull) with labelkey='IsClustered'
					/// </summary>
					public DBI_Column IsClustered { get { return this_table.__IsClustered; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_SqlServers()
					: base("SqlServers", (DBI_Table tableSchema, IServer s) => new SqlServersDataTable(tableSchema, s)) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 6, "Table 'SqlServers' column count mismatch");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__Name = Columns["Name"];
					System.Diagnostics.Debug.Assert(__Name != null, "Column 'Name' not found");
					__Server = Columns["Server"];
					System.Diagnostics.Debug.Assert(__Server != null, "Column 'Server' not found");
					__Instance = Columns["Instance"];
					System.Diagnostics.Debug.Assert(__Instance != null, "Column 'Instance' not found");
					__Version = Columns["Version"];
					System.Diagnostics.Debug.Assert(__Version != null, "Column 'Version' not found");
					__IsClustered = Columns["IsClustered"];
					System.Diagnostics.Debug.Assert(__IsClustered != null, "Column 'IsClustered' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#endregion
			#region T - the public portal for getting the custom-typed DBI_Table objects for each table
			public struct TAccessor {
				private SchemaClass this_schema;
				public TAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Accessors
				/// <summary>
				/// Denotes the SqlServers table with labelkey='SQL Servers'
				/// </summary>
				public DBI_SqlServers SqlServers { get { return this_schema.__SqlServers; }}
				#endregion
			}
			public TAccessor T { get { return _T; } }
			private TAccessor _T;
			#endregion
			#region V - the public portal for getting the DBI_Variable objects for Database Variables
			public struct VAccessor {
				private SchemaClass this_schema;
				public VAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Variable Accessors
				#endregion
			}
			public VAccessor V { get { return vstruct; } }	// Variables
			private VAccessor vstruct;
			#endregion
		}
		#endregion
		#region - The static member that contains the Schema
		public readonly static SchemaClass Schema = SchemaClass.Instance;
		// make a member variable in the class for reference in a dynamic type instance of this object
		public readonly SchemaClass SchemaDynamic = Schema;
		#endregion
		#endregion
		#region Database Path definitions
		[Thinkage.Libraries.Translation.Invariant]
		public class PathClass {
			/// <summary>
			/// Class containing the relationship paths of all tables,
			/// </summary>
			public readonly TAccessor T;
			/// <summary>
			/// Private constructor for singleton creation
			/// </summary>
			private PathClass() {
				T = new TAccessor(this);
			}

			/// <summary>
			/// The instantiation of the singleton Path object
			/// </summary>
			public static readonly PathClass Instance = new PathClass();
			#region DBI_Path Definitions

			#region DBI_Path SqlServers
			private PathToSqlServersRow __pSqlServers = new PathToSqlServersRow( SchemaClass.Instance.T.SqlServers );

			/// <summary>
			/// The SqlServers path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSqlServersRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _Id;
				private PathToField _Name;
				private PathToField _Server;
				private PathToField _Instance;
				private PathToField _Version;
				private PathToField _IsClustered;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToSqlServersRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToSqlServersRow _BasePath;
					/// <summary>
					/// Provides the path to SqlServers's Id with type blob(nonnull, minlength 1, (maxlength 2,147,483,647)) and labelkey='Id'
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.SqlServers.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to SqlServers's Name with type string(nonnull, minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) and labelkey='Name'
					/// </summary>
					public PathToField Name { get { if (_BasePath._Name == null) _BasePath._Name = new PathToField(_BasePath, Schema.T.SqlServers.F.Name ); return _BasePath._Name; } }
					/// <summary>
					/// Provides the path to SqlServers's Server with type string(nonnull, minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) and labelkey='Server'
					/// </summary>
					public PathToField Server { get { if (_BasePath._Server == null) _BasePath._Server = new PathToField(_BasePath, Schema.T.SqlServers.F.Server ); return _BasePath._Server; } }
					/// <summary>
					/// Provides the path to SqlServers's Instance with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) and labelkey='Instance'
					/// </summary>
					public PathToField Instance { get { if (_BasePath._Instance == null) _BasePath._Instance = new PathToField(_BasePath, Schema.T.SqlServers.F.Instance ); return _BasePath._Instance; } }
					/// <summary>
					/// Provides the path to SqlServers's Version with type string(minlength 1, maxlength 23, maxlines 0) and labelkey='Version'
					/// </summary>
					public PathToField Version { get { if (_BasePath._Version == null) _BasePath._Version = new PathToField(_BasePath, Schema.T.SqlServers.F.Version ); return _BasePath._Version; } }
					/// <summary>
					/// Provides the path to SqlServers's IsClustered with type bool(nonnull) and labelkey='IsClustered'
					/// </summary>
					public PathToField IsClustered { get { if (_BasePath._IsClustered == null) _BasePath._IsClustered = new PathToField(_BasePath, Schema.T.SqlServers.F.IsClustered ); return _BasePath._IsClustered; } }
				}

				internal PathToSqlServersRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToSqlServersRow( DBI_Table t ) : base( t ) { }
				internal PathToSqlServersRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSqlServersLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToSqlServersRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToSqlServersRow PathToReferencedRow { get { return (PathToSqlServersRow)base.PathToReferencedRow; } }

				internal PathToSqlServersLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToSqlServersRow(rootTableSchema, columns);
				}
			}
			public class LinkToSqlServers {
				public LinkToSqlServers(DBI_Path referencing_path) {
					Id = new PathToSqlServersRow(referencing_path.PathThroughLinkage(Schema.T.SqlServers.F.Id));
					Name = new PathToSqlServersRow(referencing_path.PathThroughLinkage(Schema.T.SqlServers.F.Name));
				}
				public readonly PathToSqlServersRow Id;
				public readonly PathToSqlServersRow Name;
			}
			#endregion
			public class PathToField : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				[System.Obsolete("This field is not a linkage field", true)]
				public new PathToField PathToReferencedRow { get { return null; } }

				internal PathToField( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
			}
			#endregion
			public struct TAccessor {
				private PathClass this_path;
				public TAccessor( PathClass this_path )
				{
					this.this_path = this_path;
				}
				#region Accessors
				/// <summary>
				/// Provides the root path for SqlServers with labelkey='SQL Servers'
				/// </summary>
				public PathToSqlServersRow SqlServers { get { return this_path.__pSqlServers; } }
				#endregion
			}
			public class LAccessorBase {
				protected LAccessorBase(DBI_Path basePath) {
					BasePath = basePath;
				}
				protected readonly DBI_Path BasePath;
				#region Cached Accessor results
				protected PathClass.LinkToSqlServers _SqlServers;
				#endregion
			}
			public class LAccessor : LAccessorBase {
				public LAccessor( DBI_Path this_path ) 
					: base(this_path) {
				}
				#region Accessors
				public PathClass.LinkToSqlServers SqlServers { get { if (base._SqlServers == null) base._SqlServers = new PathClass.LinkToSqlServers(base.BasePath); return base._SqlServers; } }
				#endregion
			}
		}
		public static readonly PathClass Path = PathClass.Instance;
		#endregion
		#region Label Key Building
		public class LabelKeyBuilder : Thinkage.Libraries.Translation.GeneralKeyBuilder {
			static LabelKeyBuilder Instance = new LabelKeyBuilder();
			private LabelKeyBuilder() {
			}
			protected override Thinkage.Libraries.Translation.ContextReference GetContext() {
				return Thinkage.Libraries.Translation.ContextReference.New("dsSqlServersLabel");
			}
			public static Thinkage.Libraries.Translation.Key K([Thinkage.Libraries.Translation.Context("dsSqlServersLabel")]string s) {
				return Instance.BuildKey(s);
			}
		}
		#endregion
	}
	#region LabelKeys
	#if DEFINELABELKEYS
	internal static class dsSqlServersDefineKeysFordsSqlServersLabel {
		static private Thinkage.Libraries.Translation.Key SqlServers = dsSqlServers.LabelKeyBuilder.K("SQL Servers");
		static private Thinkage.Libraries.Translation.Key SqlServers_Id = dsSqlServers.LabelKeyBuilder.K("Id");
		static private Thinkage.Libraries.Translation.Key SqlServers_Name = dsSqlServers.LabelKeyBuilder.K("Name");
		static private Thinkage.Libraries.Translation.Key SqlServers_Server = dsSqlServers.LabelKeyBuilder.K("Server");
		static private Thinkage.Libraries.Translation.Key SqlServers_Instance = dsSqlServers.LabelKeyBuilder.K("Instance");
		static private Thinkage.Libraries.Translation.Key SqlServers_Version = dsSqlServers.LabelKeyBuilder.K("Version");
		static private Thinkage.Libraries.Translation.Key SqlServers_IsClustered = dsSqlServers.LabelKeyBuilder.K("IsClustered");
	}
	#endif
	#endregion
}
