<?xml version="1.0" encoding="utf-8"?>
<database xmlns="http://www.thinkage.ca/XmlNamespaces/XAF">
  <types uri="..\Types.xafdb"/>
  <table name="LocationDerivationsAndItemLocations" defaults="false" log="false" id="Id" labelkey="">
	<doc>
		  This view provides Path information from the base Location record to all the most derived xxxLocation tables
		  and onto the ItemLocation records that refer to the derived xxxLocation record.
		  Also provides record type information and a record to edit ID for all the most-derived Location derivations.
		  This is a flat composite view which allows editing of all derived record types.
	</doc>
	<field name="Id" read="RequiredGUID">
	  <doc>ID of root Location or ItemLocation record</doc>
	</field>
	<field name="LocationID" type="GUIDREF" link="Location" labelkey="">
	  <doc>ID of the base Location record if the TableEnum indicates this is a Location derivation</doc>
	</field>
	<field name="ItemLocationID" type="GUIDREF" link="ItemLocation" labelkey="">
	  <doc>ID of the base ItemLocation record if the TableEnum indicates this is an ItemLocation derivation</doc>
	</field>
	<extension name="query">
			select Id, Id, null
			  from Location
		  union all
			select Id, null, Id
			  from ItemLocation as IL
	</extension>
	<extension name="dependson">Location.Id</extension>  <!-- to prevent augmenting with all fields being dependencies -->
	<extension name="dependson">ItemLocation</extension>
	<extension name="dependson">Location</extension>
  </table>
  <table name="ItemLocationContainment" defaults="false" log="false" id="Id"  labelkey="">
	<doc>
			Returns rows of the form (ContainedLocationID, ContainingLocationID).  Both LocationID's can actually
			refer to either a Location or an ItemLocation, and thus are declared to instead refer to a
			LocationDerivationsAndItemLocations record. The records	identified by the ContainedLocationID
			is the same record as or another record contained (possibly indirectly) within ContainingLocationID.
			Note that this view represents "improper" containment, where an object is considered to contain itself.
	</doc>
	<field name="Id" read="RequiredGUID"/>
	<field name="ContainedLocationID" type="GUIDREF" link="LocationDerivationsAndItemLocations" labelkey="Contained Location"/>
	<field name="ContainingLocationID" type="RequiredGUIDREF" link="LocationDerivationsAndItemLocations" labelkey="Containing Location"/>
	<extension name="query">
			-- The complete containment information of all Locations
	select NewID(), ContainedLocationID, ContainingLocationID
  		from LocationContainment
		union all
			-- ItemLocation records contain themselves
	select NewID(), ID, ID
		from ItemLocation
		union all
			-- Indirect containing locations of each ItemLocation. Note that LocationContainment represents improper containment
			-- so this SELECT will also show the ItemLocations as being contained in their immediate Location
	select NewID(), IL.ID, ContainingLocationID
		from ItemLocation as IL
			join LocationContainment as LC on IL.LocationID = LC.ContainedLocationID
	</extension>
	<extension name="dependson">ItemLocation.Id</extension>  <!-- to prevent augmenting with all fields being dependencies -->
	<extension name="dependson">ItemLocation</extension>
	<extension name="dependson">LocationContainment</extension>
  </table>
  <table name="ItemLocation"/>
  <table name="Location"/>
  <table name="LocationContainment"/>
</database>