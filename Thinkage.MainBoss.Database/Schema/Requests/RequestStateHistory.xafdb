<?xml version="1.0" encoding="utf-8"?>
<database xmlns="http://www.thinkage.ca/XmlNamespaces/XAF">
  <types uri="..\Types.xafdb"/>
  <table name="RequestStateHistory" defaults="true" log="false" id="Id" xid="RequestID EffectiveDate" labelkey="Request State History">
	<doc>
		 Records all RequestState transitions for a Request.
		 Each new record here will be reported back to he originator of the request if submitted through @Requests.
		</doc>
	<field name="Id" read="RequiredGUID" />
	<field name="Comment" type="Comment">
	  <doc>Comment intended for internal use as to why this particular history record exists</doc>
	</field>
	<field name="EntryDate" type="RequiredDateTime">
	  <doc>The actual date/time the record was created</doc>
	  <extension name="serversetsDateTime"/>
	</field>
	<field name="EffectiveDate" type="RequiredDateTime">
	  <doc>The effective date this record applies to the Request.</doc>
	  <extension name="servergetsDateTime"/>
	</field>
	<field name="UserID" type="GUIDREF" link="User">
	  <doc>Link to the originator of this record; may be null because generation of request state may be done by non mainboss user processes</doc>
	  <extension name="linkage">captive</extension>
	</field>
	<field name="EffectiveDateReadonly" type="Requiredbool">
	  <doc>True if this particular state requires that the EffectiveDate not be changeable.</doc>
	</field>
	<field name="RequestID" type="RequiredGUIDREF" link="Request">
	  <doc>The Request record to which this history record applies.</doc>
	  <extension name="linkage">owner</extension>
	</field>
	<field name="PreviousRequestStateHistoryID" read="GUIDREF" link="RequestStateHistory" unique="true" where="PreviousRequestStateHistoryID is not null" labelkey="Previous State History">
	  <doc>Calculated reference to the previous RequestStateHistory record.</doc>
	  <result hosting="cached">
		cast(RequestStateHistory.id as link(RequestStateHistory, null))
	  </result>
	  <extension name="dependson">RequestStateHistory@RequestStateHistory</extension>
	</field>
	<unique>
	  <field name="EffectiveDate"/>
	  <field name="RequestID"/>
	</unique>
	<field labelkey="State" name="RequestStateID" type="RequiredGUIDREF" link="RequestState">
	  <doc>The actual state for this entry.</doc>
	  <extension name="linkage">captive</extension>
	</field>
	<field labelkey="Status" name="RequestStateHistoryStatusID" type="GUIDREF" link="RequestStateHistoryStatus">
	  <doc>The state history status associated with this instance</doc>
	  <extension name="linkage">captive</extension>
	</field>
	<field name="CommentToRequestor" type="Comment" labelkey="Comment To Requestor">
	  <doc>Comments intended to be communicated to the Requestor of the Request as to the current disposition of the Request</doc>
	</field>
	<field name="PredictedCloseDate" type="DateTime">
	  <doc>
			Optional value intended to be communicated to the Requestor of when the Request is expected to be completed/closed.
			Can also be used to analyze requests that may be overdue, etc.
			</doc>
	</field>
	<!-- We only want to limit the Requests that refer to us, not our records themselves so we specify a null lastupdate designation to avoid the default EffectiveDate from being used -->
	<extension name="costrights">UnitValue</extension>
	<extension name="lastupdate"></extension>
  </table>
  <table name="Request"/>
  <table name="User"/>
  <table name="RequestState"/>
  <table name="RequestStateHistoryStatus"/>
  <object class="trigger" name="mbtg_RequestStateHistory_Updates_Request">
	<doc></doc>
	<extension name="body">
	  on RequestStateHistory
	  after insert
	  as
	  begin
		  <!-- Theoretically we should do this after updates and before deletes too
			but those operations are not allowed by the app (at least, not in any
			manner that alters the result of the calculation). The "before delete" would
			have to exclude the to-be-deleted records from the subquery and also be
			prepared to find no records, thus setting the field to null. Because some
			of the triggers are before and some after, two triggers would be needed. -->
		<!-- Verify the new records post-date the latest existing one -->
		if exists(select * from inserted as NSH
					join Request as R on R.Id = NSH.RequestID
					join RequestStateHistory as CSH on CSH.Id = R.CurrentRequestStateHistoryID
					where CSH.EffectiveDate >= NSH.EffectiveDate) begin
		  raiserror('EffectiveDate-order of records in table ''%s'' cannot be altered', 16, 1, 'RequestStateHistory')
		  rollback transaction
		end
		if (select count(*) from inserted) = (select count(distinct RequestID) from inserted) begin
		  <!-- This is the simple case, only one new record per Request -->
		  <!-- Link the new StateHistory record to the previous Current -->
		  update RequestStateHistory
			set PreviousRequestStateHistoryID = R.CurrentRequestStateHistoryID
			from
				inserted
			  join
				RequestStateHistory as RSH on RSH.Id = inserted.Id
			  join
				Request as R on R.Id = RSH.RequestID
		  <!-- Set the new Current -->
		  update Request
			set CurrentRequestStateHistoryID = RSH.Id
			from
				inserted
			  join
				RequestStateHistory as RSH on RSH.Id = inserted.Id
			  join
				Request as R on R.Id = RSH.RequestID
		end
		else begin
		  <!-- This is the hard but rare case, more than one new record per Request. We process the records one at a time in ascending EffectiveDate order using a cursor. -->
		  declare ByDate cursor for select Id from inserted order by RequestID, EffectiveDate asc
		  open ByDate

		  declare @RSHID Uniqueidentifier
		  while 1 = 1
		  begin
			fetch next from ByDate into @RSHID
			if @@fetch_status != 0
			  break
			<!-- Link the new StateHistory record to the previous Current -->
			update RequestStateHistory
			  set PreviousRequestStateHistoryID = R.CurrentRequestStateHistoryID
			  from
				  RequestStateHistory as RSH
				join
				  Request as R on R.Id = RSH.RequestID
			  where RSH.Id = @RSHID
			<!-- Set the new Current -->
			update Request
			  set CurrentRequestStateHistoryID = RSH.Id
			  from
				  RequestStateHistory as RSH
				join
				  Request as R on R.Id = RSH.RequestID
			  where RSH.Id = @RSHID
		  end
		  close ByDate
		  deallocate ByDate
		end
	  end
	</extension>
	<extension name="references">Request</extension>
  </object>
  <object class="trigger" name="mbtg_EnforceRequestStateHistoryOrdering">
	<doc>This enforces the fact that updates to history records cannot alter their existing EffectiveDate ordering for any particular Request</doc>
	<extension name="body">
	  on RequestStateHistory
	  for update
	  as
		<!-- If we just looked at the individual RSH records we would need teo queries, one looking at the previous and one at the next record.
			  Instead, we just validate all the RSH records for the related Request. Note that we only need to look at inserted; deleted will name
			  Requests that history records are removed from, and this operation cannot violate well-ordering. -->
		if exists(select * from RequestStateHistory as SH
					join RequestStateHistory as PSH on PSH.Id = SH.PreviousRequestStateHistoryID
					where PSH.EffectiveDate >= SH.EffectiveDate and SH.RequestID in (select RequestID from inserted)) begin
		  raiserror('EffectiveDate-order of records in table ''%s'' cannot be altered', 16, 1, 'RequestStateHistory')
		  rollback transaction
		end
	</extension>
	<extension name="references">RequestStateHistory</extension>
  </object>
</database>
