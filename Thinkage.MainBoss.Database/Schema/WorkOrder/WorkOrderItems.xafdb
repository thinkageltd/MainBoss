<?xml version="1.0" encoding="utf-8"?>
<database xmlns="http://www.thinkage.ca/XmlNamespaces/XAF">
  <types uri="..\Types.xafdb"/>
  <table name="WorkOrderItems" defaults="false" log="false" id="Id" labelkey="Work Order Items">
	<doc>This is the row data for the simplified WO Items browsette</doc>
	<field name="Id" read="RequiredGUID" />
	<!-- the base linkages of the unified records -->
	<field name="ItemID" type="GUIDREF" link="Item">
	  <doc>the Item record linkage</doc>
	</field>
	<field name="DemandID" type="GUIDREF" link="Demand">
	  <doc>the base Demand record linkage for resources derived from this (demands)</doc>
	</field>
	<!-- Other fields required by restrictions in Tbl etc representations -->
	<field name="WorkOrderExpenseModelEntryID" type="GUIDREF" link="WorkOrderExpenseModelEntry">
	  <!-- This has to be here because the double-field join operation is not followable in XAF -->
	  <doc>the Id of the WorkOrderExpenseModelEntry associated with a Demand record based on the WorkOrder's expense model which determines the C/C to actualize to.
	  This will be null if there is no model entry (preventing actualization) and for all non-Demand and non-Actual record types.</doc>
	</field>
	<!-- Other fields required for filtering/parentage: None. Since only one variant has a non-null filter or parent the value can be represented
	by just a path in the tbl.-->
	<extension name="query">
				select I.ID, I.ID, NULL, NULL
					from Item as I
			union all
				select D.ID, NULL, D.ID, WOXME.ID
					from
						Demand as D
					join
						DemandItem as DI on DI.DemandID = D.Id
					join
						WorkOrder as WO on WO.ID = D.WorkOrderID
					left join
						WorkOrderExpenseModelEntry as WOXME
							on WOXME.WorkOrderExpenseModelID = WO.WorkOrderExpenseModelID
							and WOXME.WorkOrderExpenseCategoryID = D.WorkOrderExpenseCategoryID
		</extension>
	<extension name="dependson">Item</extension>
	<extension name="dependson">Demand</extension>
	<extension name="dependson">DemandItem</extension>
	<extension name="dependson">WorkOrderExpenseModelEntry</extension>
	<extension name="costrights">WorkOrderItem</extension>
  </table>
  <table name="WorkOrderItemsTreeView" defaults="false" log="false" id="Id" labelkey="Work Order Items">
	<doc>This is the filter/display driver for the WorkOrderItems view required for the tree-structured display</doc>
	<field name="Id" read="RequiredGUID" />
	<field name="FilterID" type="GUIDREF" link="WorkOrderItems">
	</field>
	<field name="DisplayID" type="GUIDREF" link="WorkOrderItems">
	</field>
	<extension name="query">
			<!-- We don't need self-containment for the Item records since they are never primary -->
				select DI.DemandID, DI.DemandID, DI.DemandID
					from DemandItem as DI
			union all
				select IL.ItemId, DI.DemandID, IL.ItemId
					from
						DemandItem as DI
					join
						ItemLocation as IL on IL.ID = DI.ItemLocationID
		</extension>
	<extension name="dependson">Item</extension>
	<extension name="dependson">DemandItem</extension>
	<extension name="costrights">WorkOrderItem</extension>
  </table>
  <table name="WorkOrderTemporaryStorage" defaults="false" log="false" id="Id" labelkey="Temporary Storage">
	<doc>
	  This view supplies the TemporaryLocation and TemporaryItemLocation records for a WO along with all the possible containing locations
	</doc>
	<field name="Id" read="RequiredGUID">
	</field>
	<field name="LocationID" type="GUIDREF" link="Location">
	  <doc>ID of the base Location record if the TableEnum indicates this is a Location derivation</doc>
	</field>
	<field name="ItemLocationID" type="GUIDREF" link="ItemLocation">
	  <doc>ID of the base ItemLocation record if the TableEnum indicates this is an ItemLocation derivation</doc>
	</field>
	<field name="WorkOrderID" type="GUIDREF" link="WorkOrder">
	  <doc>The ID of the work order for TemporaryStorage and TemporaryItemLocation records</doc>
	</field>
	<!-- Location variants in the following query that cannot contain a TemporaryItemLocation (i.e. TemplateItemLocation) have been pruned out -->
	<extension name="query">
				select LocationID, LocationID, null, null
					from PostalAddress as PA
			union all
				select LocationID, LocationID, null, TS.WOrkOrderID
					from TemporaryStorage as TS
			union all
				select LocationID, LocationID, null, null
					from RelativeLocation
			union all
				select IL.ID, NULL, IL.ID, TS.WorkOrderID
					from TemporaryItemLocation as TIL
						join ActualItemLocation as AIL on AIL.ID = TIL.ActualItemLocationID
						join ItemLocation as IL on IL.ID = AIL.ItemLocationID
						join TemporaryStorage as TS on TS.LocationID = IL.LocationID
		</extension>
	<extension name="dependson">PostalAddress</extension>
	<extension name="dependson">RelativeLocation</extension>
	<extension name="dependson">TemporaryStorage</extension>
	<extension name="dependson">TemporaryItemLocation</extension>
	<extension name="dependson">ActualItemLocation</extension>
	<extension name="dependson">ItemLocation</extension>
  </table>
  <table name="WorkOrderTemporaryStorageTreeView" defaults="false" log="false" id="Id" labelkey="Temporary Storage">
	<doc>This is the filter/display driver for the WorkOrderTemporaryStorage view required for the tree-structured display</doc>
	<field name="Id" read="RequiredGUID" />
	<field name="FilterID" type="GUIDREF" link="WorkOrderTemporaryStorage">
	</field>
	<field name="DisplayID" type="GUIDREF" link="WorkOrderTemporaryStorage">
	</field>
	<extension name="query">
				<!-- Containment (including self-containment) for all Locations -->
				select LC.ContainingLocationID, LC.ContainedLocationID, LC.ContainingLocationID
					from LocationContainment as LC
			union all
				<!-- Self-containment for TemporaryItemLocation records -->
				select AIL.ItemLocationID, AIL.ItemLocationID, AIL.ItemLocationID
					from
						TemporaryItemLocation as TIL
					inner join
						ActualItemLocation as AIL on AIL.ID = TIL.ActualItemLocationID
			union all
				<!-- Containment of all TemporaryItemLocation records within all the containing Locations -->
				select LC.ContainingLocationID, AIL.ItemLocationID, LC.ContainingLocationID
					from
						TemporaryItemLocation as TIL
					inner join
						ActualItemLocation as AIL on AIL.ID = TIL.ActualItemLocationID
					inner join
						ItemLocation as IL on IL.ID = AIL.ItemLocationID
					inner join
						LocationContainment as LC on LC.ContainedLocationID = IL.LocationID
		</extension>
	<extension name="dependson">LocationContainment</extension>
	<extension name="dependson">TemporaryItemLocation</extension>
	<extension name="dependson">ActualItemLocation</extension>
	<extension name="dependson">ItemLocation</extension>
  </table>
  <table name="Demand"/>
  <table name="DemandItem"/>
  <table name="ItemLocation"/>
  <table name="ActualItemLocation"/>
  <table name="TemporaryItemLocation"/>
  <table name="LocationContainment"/>
  <table name="TemporaryStorage"/>
  <table name="WorkOrder"/>
  <table name="WorkOrderExpenseModelEntry"/>
  <table name="Item"/>
  <table name="Location"/>
  <table name="PostalAddress"/>
  <table name="RelativeLocation"/>
</database>
