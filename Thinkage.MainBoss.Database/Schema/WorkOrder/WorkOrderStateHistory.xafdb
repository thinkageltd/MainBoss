<?xml version="1.0" encoding="utf-8"?>
<database xmlns="http://www.thinkage.ca/XmlNamespaces/XAF">
  <types uri="..\Types.xafdb"/>
  <table name="WorkOrderStateHistory" defaults="true" log="false" id="Id" xid="WorkOrderID EffectiveDate" labelkey="Work Order State History">
	<doc>Records all WorkOrderState transitions for a WorkOrder.</doc>
	<field name="Id" read="RequiredGUID" />
	<field name="EntryDate" type="RequiredDateTime">
	  <doc>The actual date/time the record was created</doc>
	  <extension name="serversetsDateTime"/>
	</field>
	<field name="EffectiveDate" type="RequiredDateTime">
	  <doc>The effective date this record applies to the WorkOrder.</doc>
	  <extension name="servergetsDateTime"/>
	</field>
	<field name="UserID" type="GUIDREF" link="User">
	  <doc>Link to the originator of this record; may be null because generation of state may be done by non mainboss user processes</doc>
	  <extension name="linkage">captive</extension>
	</field>
	<field name="EffectiveDateReadonly" type="Requiredbool">
	  <doc>True if this particular state requires that the EffectiveDate not be changeable.</doc>
	</field>
	<field name="WorkOrderID" type="RequiredGUIDREF" link="WorkOrder" cascade="true">
	  <doc>The WorkOrder record to which this history record applies.</doc>
	  <extension name="linkage">owner</extension>
	</field>
	<unique>
	  <field name="EffectiveDate"/>
	  <field name="WorkOrderID"/>
	</unique>
	<field name="PreviousWorkOrderStateHistoryID" read="GUIDREF" link="WorkOrderStateHistory" unique="true" where="PreviousWorkOrderStateHistoryID is not null" labelkey="Previous State History">
	  <doc>Calculated reference to the previous WorkOrderStateHistory record.</doc>
	  <result hosting="cached">
		cast(WorkOrderStateHistory.id as link(WorkOrderStateHistory, null))
	  </result>
	  <extension name="dependson">WorkOrderStateHistory@WorkOrderStateHistory</extension>
	</field>
	<field labelkey="State" name="WorkOrderStateID" type="RequiredGUIDREF" link="WorkOrderState">
	  <doc>The actual state for this entry.</doc>
	  <extension name="linkage">captive</extension>
	</field>
	<field labelkey="Status" name="WorkOrderStateHistoryStatusID" type="GUIDREF" link="WorkOrderStateHistoryStatus">
	  <doc>The state history status associated with this instance</doc>
	  <extension name="linkage">captive</extension>
	</field>
	<field name="Comment" type="Comment">
	  <doc>Comment as to why this particular history record exists</doc>
	</field>
	<extension name="costrights">UnitValue</extension>
	<extension name="lastupdate"></extension>
	<!-- We only want to limit the WorkOrders that refer to us, not our records themselves so we specify a null lastupdate designation to avoid the default EffectiveDate from being used -->
  </table>
  <object class="trigger" name="mbtg_WorkOrderStateHistory_Updates_WorkOrderEtAl">
	<doc>
	  Maintain the current state history reference in the WorkOrder.
	  Maintain ActualItemLocation that depends on the state of a workorder.
	  Optionally alter states or related Requests
	</doc>
	<extension name="body">
	<!--
	  When saving a new WO and a new RequestedWO record the code setting the request InProgress is only effective when the save order is
	  (new WO, new RequestedWO, new WOStateHistory). The equally-valid order (new WO, new WOStateHistory, new RequestedWO)
	  is handled by the RequestedWorkOrder trigger.
	  TODO: It is a total misuse of the "FilterAs..." flags here. The states should have separate flags for use by this trigger,
	  and the new request state should be identified by a db variable.
	-->
	  on WorkOrderStateHistory
	  after insert
	  as
	  begin
		  -- Theoretically we should do this after updates and before deletes too
		  -- but those operations are not allowed by the app (at least, not in any
		  -- manner that alters the result of the calculation).
		  -- First, before updating the current WO state history ID, we check if any Request state transitions should be created.
		  -- Request transistions are based solely on the New workorder state history value as defined in the ManageRequestTransition table
		  if dbo._vgetManageRequestStates() = 1 begin
				declare @datestamp datetime
				declare @includeWSHComment bit
				set @includeWSHComment = dbo._vgetCopyWSHCommentToRSH() -- TODO: in future a value in the WSH record itself to whether to include the WSH information
				set @datestamp = dbo._DClosestDivisions(getdate(), 100)

				-- Same state (non-transition) case (Request State History remains in existing state
				insert into RequestStateHistory (ID, EntryDate, EffectiveDate, EffectiveDateReadonly, UserID, RequestID, RequestStateID,
									CommentToRequestor,
									RequestStateHistoryStatusID, PredictedCloseDate)
				select newid(), @datestamp, @datestamp, WSH.EffectiveDateReadonly, WSH.UserID, R.ID, MRST.ChangeToRequestStateID,
					dbo.mbfn_UserMessageTranslateFromID(MRST.CommentToRequestorUserMessageKeyID, C.PreferredLanguage)
					+
					CASE WHEN @includeWSHComment = 1 and WStatus.Code IS NOT NULL
					THEN Char(13)+Char(10)+'----'+Char(13)+Char(10)+WStatus.Code
					ELSE ''
					END
					+
					CASE WHEN  @includeWSHComment = 1 and WSH.Comment IS NOT NULL
					THEN Char(13)+Char(10)+'----'+Char(13)+Char(10)+WSH.Comment
					ELSE ''
					END				
					,
					ORSH.RequestStateHistoryStatusID, ORSH.PredictedCloseDate

				from RequestedWorkOrder as RWO
				join Request as R on R.ID = RWO.RequestID
					join Requestor on Requestor.ID = R.RequestorID
					join Contact as C on C.Id = Requestor.ContactID	
					join RequestStateHistory as ORSH on ORSH.ID = R.CurrentRequestStateHistoryID
				
					join inserted as WSH on WSH.WorkOrderID = RWO.WorkOrderID
					left join WorkOrderStateHistoryStatus as WStatus on WStatus.ID = WSH.WorkOrderStateHistoryStatusID
			  
				join ManageRequestTransition as MRST
					on MRST.RequestStateID = ORSH.RequestStateID and MRST.WorkOrderStateID = WSH.WorkOrderStateID 
				where
					-- where new state of request is  the same state it is in (e.g. Add a comment)
					MRST.ChangeToRequestStateID = ORSH.RequestStateID
					and
					-- Only on requests where there is a single tied Work Order (this one)
					(select count(*) from RequestedWorkOrder as CRWO where CRWO.RequestID = RWO.RequestID) = 1

				-- Do the state transitions (where Request State History changes State)
				while 1 = 1
				begin
					set @datestamp = dateadd(ms, 1000, @datestamp) -- use a 1000 millisecond interval between successive inserts
					-- do the transition
					insert into RequestStateHistory (ID, EntryDate, EffectiveDate, EffectiveDateReadonly, UserID, RequestID, RequestStateID,
							 CommentToRequestor)
					select newid(), @datestamp, @datestamp, WSH.EffectiveDateReadonly, WSH.UserID, R.ID, MRST.ChangeToRequestStateID,
						 dbo.mbfn_UserMessageTranslateFromID(MRST.CommentToRequestorUserMessageKeyID, C.PreferredLanguage)
						+
						CASE WHEN @includeWSHComment = 1 and WStatus.Code IS NOT NULL
						THEN Char(13)+Char(10)+'----'+Char(13)+Char(10)+WStatus.Code
						ELSE ''
						END
						+
						CASE WHEN  @includeWSHComment = 1 and WSH.Comment IS NOT NULL
						THEN Char(13)+Char(10)+'----'+Char(13)+Char(10)+WSH.Comment
						ELSE ''
						END				
					
					from RequestedWorkOrder as RWO
					join Request as R on R.ID = RWO.RequestID
						join RequestStateHistory as ORSH on ORSH.ID = R.CurrentRequestStateHistoryID
					join Requestor on Requestor.ID = R.RequestorID
						join Contact as C on C.Id = Requestor.ContactID

					join inserted as WSH on WSH.WorkOrderID = RWO.WorkOrderID
					left join WorkOrderStateHistoryStatus as WStatus on WStatus.ID = WSH.WorkOrderStateHistoryStatusID
					join ManageRequestTransition as MRST
							on MRST.RequestStateID = ORSH.RequestStateID and MRST.WorkOrderStateID = WSH.WorkOrderStateID 
						where
							-- where new state of request is NOT the same state it is in (e.g. Add a comment)
							MRST.ChangeToRequestStateID &lt;&gt; ORSH.RequestStateID
							and							-- Only on requests where there is a single tied Work Order (this one)
							(select count(*) from RequestedWorkOrder as CRWO where CRWO.RequestID = RWO.RequestID) = 1
					-- we are done if there were no transitions, otherwise continue if the New Request State requires more transitions
					-- or we transitioned from the same state to the same state; we create only ONE new history record
					if @@ROWCOUNT = 0
						break
					set @includeWSHComment = 0 -- only include WSH comment ONCE if we do multiple transition records
				end
		  end

		  <!-- Theoretically we should do this after updates and before deletes too
			but those operations are not allowed by the app (at least, not in any
			manner that alters the result of the calculation). The "before delete" would
			have to exclude the to-be-deleted records from the subquery and also be
			prepared to find no records, thus setting the field to null. Because some
			of the triggers are before and some after, two triggers would be needed. -->
		<!-- Verify the new records post-date the latest existing one -->
		if exists(select * from inserted as NSH
					join WorkOrder as WO on WO.Id = NSH.WorkOrderID
					join WorkOrderStateHistory as CSH on CSH.Id = WO.CurrentWorkOrderStateHistoryID
					where CSH.EffectiveDate >= NSH.EffectiveDate) begin
		  raiserror('EffectiveDate-order of records in table ''%s'' cannot be altered', 16, 1, 'WorkOrderStateHistory')
		  rollback transaction
		end
		if (select count(*) from inserted) = (select count(distinct WorkOrderID) from inserted) begin
		  <!-- This is the simple case, only one new record per WorkOrder -->
		  <!-- Update PreviousWorkedDays, this must happen before linking the new record -->
		  update WorkOrder
			set PreviousWorkedDays = dbo._IAdd(PreviousWorkedDays,
			  dbo._INew(case when OS.FilterAsOpen != 0
							then 1 + datediff(day,
												  case when cast(OSH.EffectiveDate as date) > WorkOrder.StartDateEstimate
													then cast(OSH.EffectiveDate as date)
													else WorkOrder.StartDateEstimate end,
												  cast(inserted.EffectiveDate as date))
							else 0 end
						  - case when NS.FilterAsOpen != 0 then 1 else 0 end, 0, 0, 0, 0))
			from
				inserted
			  join
				WorkOrder on WorkOrder.Id = inserted.WorkOrderID
			  join
				WorkOrderStateHistory as OSH on OSH.Id = WorkORder.CurrentWorkOrderStateHistoryID
			  join
				WorkOrderState as NS on NS.Id = inserted.WorkOrderStateID
			  join
				WorkOrderState as OS on OS.Id = OSH.WOrkOrderStateID
			where
			  cast(inserted.EffectiveDate as date) >= WorkOrder.StartDateEstimate
		  <!-- Link the new StateHistory record to the previous Current -->
		  update WorkOrderStateHistory
			set PreviousWorkOrderStateHistoryID = WO.CurrentWorkOrderStateHistoryID
			from
				inserted
			  join
				WorkOrderStateHistory as WOSH on WOSH.Id = inserted.Id
			  join
				WorkOrder as WO on WO.Id = WOSH.WorkOrderID
		  <!-- Set the First -->
		  update WorkOrder
			set FirstWorkOrderStateHistoryID = inserted.Id
			from
				inserted
			  join
				WorkOrder as WO on WO.Id = inserted.WorkOrderID
			where
			  FirstWorkOrderStateHistoryID is null
		  <!-- Set the new Current -->
		  update WorkOrder
			set CurrentWorkOrderStateHistoryID = inserted.Id
			from
				inserted
			  join
				WorkOrder as WO on WO.Id = inserted.WorkOrderID
		  <!-- Set the first Open -->
		  update WorkOrder
			set FirstOpenWorkOrderStateHistoryID = inserted.Id
			from
				inserted
			  join
				WorkOrder as WO on WO.Id = inserted.WorkOrderID
			  join
				WorkOrderState as WOS on WOS.Id = inserted.WorkOrderStateID
			where
			  FirstOpenWorkOrderStateHistoryID is null
			  and WOS.FilterAsOpen != 0
		  <!-- Set the Completion -->
		  update WorkOrder
			set CompletionWorkOrderStateHistoryID = inserted.Id
			from
				inserted
			  join
				WorkOrder as WO on WO.Id = inserted.WorkOrderID
			  join
				WorkOrderState as WOS on WOS.Id = inserted.WorkOrderStateID
			where
			  CompletionWorkOrderStateHistoryID is null
			  and WOS.FilterAsClosed != 0
		  <!-- Clear the Completion -->
		  update WorkOrder
			set CompletionWorkOrderStateHistoryID = null
			from
				inserted
			  join
				WorkOrder as WO on WO.Id = inserted.WorkOrderID
			  join
				WorkOrderState as WOS on WOS.Id = inserted.WorkOrderStateID
			where
			  WOS.FilterAsDraft != 0
		end
		else begin
		  <!-- This is the hard but rare case, more than one new record per WorkOrder. We process the records one at a time in ascending EffectiveDate order using a cursor. -->
		  declare ByDate cursor for select Id from inserted order by WorkOrderID, EffectiveDate asc
		  open ByDate

		  declare @WOSHID Uniqueidentifier
		  while 1 = 1
		  begin
			fetch next from ByDate into @WOSHID
			if @@fetch_status != 0
			  break
			<!-- Update PreviousWorkedDays, this must happen before linking the new record -->
			update WorkOrder
			  set PreviousWorkedDays = dbo._IAdd(PreviousWorkedDays,
				dbo._INew(case when OS.FilterAsOpen != 0
								then 1 + datediff(day,
														case when cast(OSH.EffectiveDate as date) > WorkOrder.StartDateEstimate
														  then cast(OSH.EffectiveDate as date)
														  else WorkOrder.StartDateEstimate end,
														cast(WOSH.EffectiveDate as date))
								else 0 end
							- case when NS.FilterAsOpen != 0 then 1 else 0 end, 0, 0, 0, 0))
			  from
				  WorkOrderStateHistory as WOSH
				join
				  WorkOrder on WorkOrder.Id = WOSH.WorkOrderID
				join
				  WorkOrderStateHistory as OSH on OSH.Id = WorkOrder.CurrentWorkOrderStateHistoryID
				join
				  WorkOrderState as NS on NS.Id = WOSH.WorkOrderStateID
				join
				  WorkOrderState as OS on OS.Id = OSH.WOrkOrderStateID
			  where WOSH.Id = @WOSHID
				and cast(WOSH.EffectiveDate as date) >= WorkOrder.StartDateEstimate
			<!-- Link the new StateHistory record to the previous Current -->
			update WorkOrderStateHistory
			  set PreviousWorkOrderStateHistoryID = WO.CurrentWorkOrderStateHistoryID
			  from
				  WorkOrderStateHistory as WOSH
				join
				  WorkOrder as WO on WO.Id = WOSH.WorkOrderID
			  where WOSH.Id = @WOSHID
			<!-- Set the First -->
			update WorkOrder
			  set FirstWorkOrderStateHistoryID = @WOSHID
			  from
				  WorkOrderStateHistory as WOSH
				join
				  WorkOrder as WO on WO.Id = WOSH.WorkOrderID
			  where WOSH.Id = @WOSHID
				and FirstWorkOrderStateHistoryID is null
			<!-- Set the new Current -->
			update WorkOrder
			  set CurrentWorkOrderStateHistoryID = @WOSHID
			  from
				  WorkOrderStateHistory as WOSH
				join
				  WorkOrder as WO on WO.Id = WOSH.WorkOrderID
			  where WOSH.Id = @WOSHID
			<!-- Set the first Open -->
			update WorkOrder
			  set FirstOpenWorkOrderStateHistoryID = @WOSHID
			  from
				  WorkOrderStateHistory as WOSH
				join
				  WorkOrder as WO on WO.Id = WOSH.WorkOrderID
				join
				  WorkOrderState as WOS on WOS.Id = WOSH.WorkOrderStateID
			  where WOSH.Id = @WOSHID
				and FirstOpenWorkOrderStateHistoryID is null
				and WOS.FilterAsOpen != 0
			<!-- Set the Completion -->
			update WorkOrder
			  set CompletionWorkOrderStateHistoryID = @WOSHID
			  from
				  WorkOrderStateHistory as WOSH
				join
				  WorkOrder as WO on WO.Id = WOSH.WorkOrderID
				join
				  WorkOrderState as WOS on WOS.Id = WOSH.WorkOrderStateID
			  where WOSH.Id = @WOSHID
				and CompletionWorkOrderStateHistoryID is null
				and WOS.FilterAsClosed != 0
			<!-- Clear the Completion -->
			update WorkOrder
			  set CompletionWorkOrderStateHistoryID = null
			  from
				  WorkOrderStateHistory as WOSH
				join
				  WorkOrder as WO on WO.Id = WOSH.WorkOrderID
				join
				  WorkOrderState as WOS on WOS.Id = WOSH.WorkOrderStateID
			  where WOSH.Id = @WOSHID
				and WOS.FilterAsDraft != 0
		  end
		  close ByDate
		  deallocate ByDate
		end

		-- Now that the work order state has changed, update the OnReserve counts of ItemLocations mentioned in Demands.
		update ActualItemLocation
			set OnReserve = dbo.mbfn_ActualItemLocation_OnReserve(ActualItemLocation.ID)
			where ActualItemLocation.ItemLocationID in (
					 select distinct ItemLocationID from DemandItem
						   join Demand on DemandID = Demand.ID
						   join WorkOrder on WorkOrder.ID = Demand.WorkOrderID
						   join inserted on inserted.ID = WorkOrder.CurrentWorkOrderStateHistoryID
					  )

	  end
	;
	</extension>
	<extension name="references">WorkOrder</extension>
	<extension name="references">WorkOrderStateHistory</extension>
	<extension name="references">WorkOrderState</extension>
	<extension name="references">Request</extension>
	<extension name="references">Requestor</extension>
	<extension name="references">Contact</extension>
	<extension name="references">mbfn_UserMessageTranslate()</extension>
	<extension name="references">RequestStateHistory</extension>
	<extension name="references">RequestState</extension>
	<extension name="references">RequestedWorkOrder</extension>
	<extension name="references">mbfn_ActualItemLocation_OnReserve()</extension>
	<!-- <extension name="dependson">ManageRequestStates</extension> We have no syntax to express depensency on a Variable -->
  </object>
  <variable name="ManageRequestStates" type="RequiredBool">
	<doc>A flag indicating that MainBoss should attempt to automatically manage Request states based on related WO states to mimic MB Basic behaviour.</doc>
  </variable>
  <variable name="CopyWSHCommentToRSH" type="RequiredBool">
	<doc>A flag indicating the WOSH Comment contents and Status should be copied to the RSH CommentToRequestor on a Request state transition driven by an addition to the WOSH</doc>
  </variable>
  <object class="trigger" name="mbtg_WorkOrderStateHistoryUpdate_Updates_WorkOrder">
	<extension name="body">
	  on WorkOrderStateHistory
	  for update
	  as
		if update(EffectiveDate) begin
		  update WorkOrder
			set PreviousWorkedDays = dbo.mbfn_WorkOrder_PreviousWorkedDays(Id)
			where Id in (select inserted.WorkOrderID from inserted join deleted on inserted.Id = deleted.Id where inserted.EffectiveDate != deleted.EffectiveDate)
		end
	</extension>
  </object>
  <object class="trigger" name="mbtg_EnforceWorkOrderStateHistoryOrdering">
	<doc>This enforces the fact that updates to history records cannot alter their existing EffectiveDate ordering for any particular WO</doc>
	<extension name="body">
	  on WorkOrderStateHistory
	  for update
	  as
		<!-- If we just looked at the individual WOSH records we would need teo queries, one looking at the previous and one at the next record.
			  Instead, we just validate all the WOSH records for the related WorkOrder. Note that we only need to look at inserted; deleted will name
			  WorkOrders that history records are removed from, and this operation cannot violate well-ordering. -->
		if exists(select * from WorkOrderStateHistory as SH
					join WorkOrderStateHistory as PSH on PSH.Id = SH.PreviousWorkOrderStateHistoryID
					where PSH.EffectiveDate >= SH.EffectiveDate and SH.WorkOrderID in (select WorkOrderID from inserted)) begin
		  raiserror('EffectiveDate-order of records in table ''%s'' cannot be altered', 16, 1, 'WorkOrderStateHistory')
		  rollback transaction
		end
	</extension>
	<extension name="references">WorkOrderStateHistory</extension>
  </object>
  <table name="WorkOrder"/>
  <table name="WorkOrderState"/>
  <table name="WorkOrderStateHistoryStatus"/>
  <table name="Request"/>
  <table name="Requestor"/>
  <table name="Contact"/>
  <table name="RequestStateHistory"/>
  <table name="RequestState"/>
  <table name="RequestedWorkOrder"/>
  <table name="User"/>
</database>
