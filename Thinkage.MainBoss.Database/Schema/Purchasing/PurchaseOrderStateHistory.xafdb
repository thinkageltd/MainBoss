<?xml version="1.0" encoding="utf-8"?>
<database name="http://thinkage.ca/MB3/dsMB.xsd:PurchaseOrderStateHistory" xmlns="http://www.thinkage.ca/XmlNamespaces/XAF">
  <types uri="..\Types.xafdb"/>
  <table name="PurchaseOrderStateHistory" defaults="true" log="false" id="Id" xid="PurchaseOrderID EffectiveDate" labelkey="Purchase Order State History">
    <doc>This record represents a state transition in a Purchase Order</doc>
    <field name="Id" read="RequiredGUID" />
    <field name="Comment" type="Comment"  />
    <field name="EntryDate" type="RequiredDateTime">
      <doc>The date this record was created</doc>
      <extension name="serversetsDateTime"/>
    </field>
    <field name="EffectiveDate" type="RequiredDateTime">
      <doc>The date when the transition takes effect</doc>
      <extension name="servergetsDateTime"/>
    </field>
    <field name="UserID" type="GUIDREF" link="User">
      <doc>Link to the originator of this record; may be null because generation of state may be done by non mainboss user processes</doc>
      <extension name="linkage">captive</extension>
    </field>
    <field name="EffectiveDateReadonly" type="Requiredbool">
      <doc>Control over whether the Effective date should be editable (because it was manually entered) or not</doc>
    </field>
    <field name="PurchaseOrderID" type="RequiredGUIDREF" link="PurchaseOrder">
      <doc>The Purchase Order to which this state transition belongs</doc>
      <extension name="linkage">owner</extension>
    </field>
    <unique>
      <field name="EffectiveDate"/>
      <field name="PurchaseOrderID"/>
    </unique>
	<field name="PreviousPurchaseOrderStateHistoryID" read="GUIDREF" link="PurchaseOrderStateHistory" unique="true" where="PreviousPurchaseOrderStateHistoryID is not null" labelkey="Previous State History">
	  <doc>Calculated reference to the previous PurchaseOrderStateHistory record.</doc>
	  <result hosting="cached">
		cast(PurchaseOrderStateHistory.id as link(PurchaseOrderStateHistory, null))
	  </result>
	  <extension name="dependson">PurchaseOrderStateHistory@PurchaseOrderStateHistory</extension>
	</field>
	<field labelkey="State" name="PurchaseOrderStateID" type="RequiredGUIDREF" link="PurchaseOrderState">
      <doc>The Purchase Order State to which the transition occurred</doc>
      <extension name="linkage">captive</extension>
		</field>
    <field labelkey="Status" name="PurchaseOrderStateHistoryStatusID" type="GUIDREF" link="PurchaseOrderStateHistoryStatus">
      <doc>The state history status associated with this instance</doc>
      <extension name="linkage">captive</extension>
		</field>
    <!-- We only want to limit the PurchaseOrder that refer to us, not our records themselves so we specify a null lastupdate designation to avoid the default EffectiveDate from being used -->
	<extension name="costrights">PurchaseOrderItem,PurchaseOrderLabor,PurchaseOrderMiscellaneous</extension>
    <extension name="lastupdate"></extension>
  </table>
  <table name="PurchaseOrder"/>
  <table name="PurchaseOrderState"/>
  <table name="PurchaseOrderStateHistoryStatus"/>
  <table name="User"/>
  <table name="ActualItemLocation"/>
  <table name="POLineItem"/>
  <table name="POLine"/>
  <object class="trigger" name="mbtg_PurchaseOrderStateHistory_Updates_PurchaseOrderEtAl">
	<doc></doc>
	<extension name="body">
	  on PurchaseOrderStateHistory
	  after insert
	  as
	  begin
		  <!-- Theoretically we should do this after updates and before deletes too
			but those operations are not allowed by the app (at least, not in any
			manner that alters the result of the calculation). The "before delete" would
			have to exclude the to-be-deleted records from the subquery and also be
			prepared to find no records, thus setting the field to null. Because some
			of the triggers are before and some after, two triggers would be needed. -->
		<!-- Verify the new records post-date the latest existing one -->
		if exists(select * from inserted as NSH
					join PurchaseOrder as PO on PO.Id = NSH.PurchaseOrderID
					join PurchaseOrderStateHistory as CSH on CSH.Id = PO.CurrentPurchaseOrderStateHistoryID
					where CSH.EffectiveDate >= NSH.EffectiveDate) begin
		  raiserror('EffectiveDate-order of records in table ''%s'' cannot be altered', 16, 1, 'PurchaseOrderStateHistory')
		  rollback transaction
		end
		if (select count(*) from inserted) = (select count(distinct PurchaseOrderID) from inserted) begin
		  <!-- This is the simple case, only one new record per PurchaseOrder -->
		  <!-- Link the new StateHistory record to the previous Current -->
		  update PurchaseOrderStateHistory
			set PreviousPurchaseOrderStateHistoryID = PO.CurrentPurchaseOrderStateHistoryID
			from
				inserted
			  join
				PurchaseOrderStateHistory as POSH on POSH.Id = inserted.Id
			  join
				PurchaseOrder as PO on PO.Id = POSH.PurchaseOrderID
		  <!-- Set the new Current -->
		  update PurchaseOrder
			set CurrentPurchaseOrderStateHistoryID = POSH.Id
			from
				inserted
			  join
				PurchaseOrderStateHistory as POSH on POSH.Id = inserted.Id
			  join
				PurchaseOrder as PO on PO.Id = POSH.PurchaseOrderID
		end
		else begin
		  <!-- This is the hard but rare case, more than one new record per PurchaseOrder. We process the records one at a time in ascending EffectiveDate order using a cursor. -->
		  declare ByDate cursor for select Id from inserted order by PurchaseOrderID, EffectiveDate asc
		  open ByDate

		  declare @RSHID Uniqueidentifier
		  while 1 = 1
		  begin
			fetch next from ByDate into @RSHID
			if @@fetch_status != 0
			  break
			<!-- Link the new StateHistory record to the previous Current -->
			update PurchaseOrderStateHistory
			  set PreviousPurchaseOrderStateHistoryID = PO.CurrentPurchaseOrderStateHistoryID
			  from
				  PurchaseOrderStateHistory as POSH
				join
				  PurchaseOrder as PO on PO.Id = POSH.PurchaseOrderID
			  where POSH.Id = @RSHID
			<!-- Set the new Current -->
			update PurchaseOrder
			  set CurrentPurchaseOrderStateHistoryID = POSH.Id
			  from
				  PurchaseOrderStateHistory as POSH
				join
				  PurchaseOrder as PO on PO.Id = POSH.PurchaseOrderID
			  where POSH.Id = @RSHID
		  end
		  close ByDate
		  deallocate ByDate
		end

		update ActualItemLocation
			set OnOrder = dbo.mbfn_ActualItemLocation_OnOrder(ActualItemLocation.ID)
			where ActualItemLocation.ItemLocationID in (
					  select distinct ItemLocationID from POLineItem
							join POLine on POLineID = POLine.ID
							join PurchaseOrder on PurchaseOrder.ID = POLine.PurchaseOrderID
							join inserted on inserted.ID = PurchaseOrder.CurrentPurchaseOrderStateHistoryID
					  )
	  end
	</extension>
	<extension name="references">PurchaseOrderStateHistory</extension>
	<extension name="references">PurchaseOrder</extension>
	<extension name="references">ActualItemLocation</extension>
	<extension name="references">POLineItem</extension>
	<extension name="references">POLine</extension>
	<extension name="references">mbfn_ActualItemLocation_OnOrder()</extension>
  </object>
  <object class="trigger" name="mbtg_EnforcePurchaseOrderStateHistoryOrdering">
	<doc>This enforces the fact that updates to history records cannot alter their existing EffectiveDate ordering for any particular PO</doc>
	<extension name="body">
	  on PurchaseOrderStateHistory
	  for update
	  as
		<!-- If we just looked at the individual POSH records we would need teo queries, one looking at the previous and one at the next record.
			  Instead, we just validate all the POSH records for the related PurchaseOrder. Note that we only need to look at inserted; deleted will name
			  PurchaseOrders that history records are removed from, and this operation cannot violate well-ordering. -->
		if exists(select * from PurchaseOrderStateHistory as SH
					join PurchaseOrderStateHistory as PSH on PSH.Id = SH.PreviousPurchaseOrderStateHistoryID
					where PSH.EffectiveDate >= SH.EffectiveDate and SH.PurchaseOrderID in (select PurchaseOrderID from inserted)) begin
		  raiserror('EffectiveDate-order of records in table ''%s'' cannot be altered', 16, 1, 'PurchaseOrderStateHistory')
		  rollback transaction
		end
	</extension>
	<extension name="references">PurchaseOrderStateHistory</extension>
  </object>
</database>
