<?xml version="1.0" encoding="utf-8"?>
<database xmlns="http://www.thinkage.ca/XmlNamespaces/XAF">
  <types uri="..\Types.xafdb"/>
  <table name="ReceiveItemNonPO" defaults="true" log="false" id="Id" xid="ItemLocationID" labelkey="Receive Item">
	<doc>
	  This record represents the receipt of an Item into storage where the purchase was done without a purchase order.
	  It can also represent a correction of another ReceiveItemNonPO record. The correction may be either to correct an entry
	  error or to return previously received items or receive more as part of the same shipment.
	</doc>
	<field name="Id" read="RequiredGUID" />
	<field name="AccountingTransactionID" read="RequiredGUIDREF"  base="AccountingTransaction"/>
	<field name="ItemLocationID" type="RequiredGUIDREF" link="ItemLocation">
	  <doc>The item and location where the item was actually received to.</doc>
	  <extension name="linkage">captive</extension>
	  <extension name="pickfrom">Thinkage.MainBoss.Controls.TILocations.AllActualItemLocationPickerTblCreator,Thinkage.MainBoss.Controls</extension>
	</field>
	<field name="VendorID" type="RequiredGUIDREF"  link="Vendor">
	  <doc>The vendor the item was purchased from.</doc>
	  <extension name="linkage">captive</extension>
	</field>
	<field name="PaymentTermID" type="GUIDREF"  link="PaymentTerm">
	  <doc>Payment terms for this purchase</doc>
	  <extension name="linkage">property</extension>
	</field>
	<field name="Quantity" type="RequiredQuantity">
	  <doc>The quantity received by this record. This value is negative for a correction record representing a return.</doc>
	</field>
	<field name="CorrectionID" type="RequiredGUIDREF" link="ReceiveItemNonPO" labelkey="Receive Item Correction">
	  <doc>The ID of the original ReceiveItemNonPO record for a family of original record and its corrections</doc>
	  <extension name="linkage">captive</extension>
	</field>
	<field name="CorrectedQuantity" read="Quantity">
	  <doc>
		The corrected quantity of this ReceiveItemNonPO and all corrections (all those with a CorrectionID linking
		to this record).  Note this is only stored in the main ReceiveItemNonPO record (with CorrectionID==ID),
		not in the correction records.
	  </doc>
	  <result hosting="cached">
		cast(42 as Quantity)
	  </result>
	  <extension name="dependson">mbfn_ReceiveItemNonPO_CorrectedQuantity()</extension>
	</field>
	<field name="CorrectedCost" read="Currency">
	  <doc>
		The corrected cost of this ReceiveItemNonPO and all corrections (all those with a CorrectionID linking
		to this record).  Note this is only stored in the main ReceiveItemNonPO record (with CorrectionID==ID),
		not in the correction records.
	  </doc>
	  <result hosting="cached">
		cast(42 as Currency)
	  </result>
	  <extension name="dependson">mbfn_ReceiveItemNonPO_CorrectedCost()</extension>
	</field>
	<field name="TotalQuantity" read="RequiredQuantity">
	  <doc>The total quantity as a result of this adjustment record</doc>
	  <result hosting="cached">
		cast(420000 as RequiredQuantity)
	  </result>
	  <extension name="dependson">ItemAdjustment</extension>
	  <extension name="dependson">ItemIssue</extension>
	  <extension name="dependson">ItemTransfer</extension>
	  <extension name="dependson">ReceiveItemPO</extension>
	  <extension name="dependson">ReceiveItemNonPO</extension>
	  <extension name="dependson">ActualItem</extension>
	  <extension name="dependson">ItemCountValue</extension>
	  <extension name="dependson">ItemCountValueVoid</extension>
	</field>
	<field name="TotalCost" read="RequiredCurrency">
	  <doc>The total cost as a result of this adjustment record</doc>
	  <result hosting="cached">
		cast(420000 as RequiredCurrency)
	  </result>
	  <extension name="dependson">ItemAdjustment</extension>
	  <extension name="dependson">ItemIssue</extension>
	  <extension name="dependson">ItemTransfer</extension>
	  <extension name="dependson">ReceiveItemPO</extension>
	  <extension name="dependson">ReceiveItemNonPO</extension>
	  <extension name="dependson">ActualItem</extension>
	  <extension name="dependson">ItemCountValue</extension>
	  <extension name="dependson">ItemCountValueVoid</extension>
	</field>
	<extension name="costrights">InventoryActivity</extension>
  </table>
  <table name="Vendor"/>
  <table name="PaymentTerm"/>
  <object class="function" name="mbfn_ReceiveItemNonPO_CorrectedQuantity">
	<doc>
	</doc>
	<extension name="body">
	  (
		@RIPOID uniqueidentifier -- ReceiveItemNonPO
	  )
	  RETURNS integer
	  as
	  begin
		return (
		  select sum(Quantity)
			  from ReceiveItemNonPO
			  where CorrectionID = @RIPOID
		)
	  end
	</extension>
	<extension name="dependson">ReceiveItemNonPO.Id</extension> <!-- Prevent inferral from dependency on table to dependency on all its fields. -->
	<extension name="dependson">ReceiveItemNonPO</extension>
  </object>
  <object class="function" name="mbfn_ReceiveItemNonPO_CorrectedCost">
	<doc>
	</doc>
	<extension name="body">
	  (
		@RIPOID uniqueidentifier -- ReceiveItemNonPO
	  )
	  RETURNS money
	  as
	  begin
		return(
		  select sum(Cost)
			  from ReceiveItemNonPO
					join AccountingTransaction on AccountingTransaction.ID = ReceiveItemNonPO.AccountingTransactionID
			  where CorrectionID = @RIPOID
		)
	  end
	</extension>
	<extension name="dependson">ReceiveItemNonPO.Id</extension> <!-- Prevent inferral from dependency on table to dependency on all its fields. -->
	<extension name="dependson">ReceiveItemNonPO</extension>
  </object>
  <object class="trigger" name="mbtg_ReceiveItemNonPO_Updates_Corrected">
	<doc>
	  Maintain the Corrected Quantity and Cost values in ReceiveItemNonPO
	</doc>
	<extension name="body">
	  on ReceiveItemNonPO
	  after insert
	  as
	  begin
		  update ReceiveItemNonPO
			  set CorrectedQuantity = dbo.mbfn_ReceiveItemNonPO_CorrectedQuantity(ReceiveItemNonPO.ID),
				  CorrectedCost = dbo.mbfn_ReceiveItemNonPO_CorrectedCost(ReceiveItemNonPO.ID)
			  where ReceiveItemNonPO.ID in (
					  select distinct CorrectionID from inserted
				union select distinct CorrectionID from deleted
				)
	  end
	</extension>
	<extension name="references">mbfn_ReceiveItemNonPO_CorrectedQuantity()</extension>
	<extension name="references">mbfn_ReceiveItemNonPO_CorrectedCost()</extension>
  </object>
  <object class="trigger" name="mbtg_ReceiveItemNonPO_Updates_ActualItemLocation">
	<doc>
	  Maintain the TotalCost and OnHand quantities in ActualItemLocation and also verify EffectiveDate ordering validity
	</doc>
	<extension name="body">
	  on ReceiveItemNonPO
	  after insert
	  as
	  begin
		if exists(select *
					from inserted
					  join ActualItemLocation as AIL on inserted.ItemLocationID = AIL.ItemLocationID
					  join PermanentItemLocation as PIL on AIL.ID = PIL.ActualItemLocationID
					  join ItemCountValue as CICV on CICV.ID = PIL.CurrentItemCountValueID
					  join AccountingTransaction as CTX on CTX.ID = CICV.AccountingTransactionID
					  join AccountingTransaction as TX on TX.ID = inserted.AccountingTransactionID
					where CTX.EffectiveDate &gt;= TX.EffectiveDate) begin
		  raiserror('''%s'' record predates the latest Physical Count', 16, 1, 'ReceiveItemNonPO')
		  rollback transaction
		end
  		update ReceiveItemNonPO
	  	  set TotalQuantity = coalesce(
				(select top 1 X.TotalQuantity
									from RationalizedInventoryActivityDeltas as X
									where
									  X.ItemLocationID = inserted.ItemLocationID
									  and (TX.EffectiveDate > X.EffectiveDate or (TX.EffectiveDate = X.EffectiveDate and TX.EntryDate > X.EntryDate))
									order by EffectiveDate desc, EntryDate desc), 0),
			  TotalCost = coalesce(
				(select top 1 X.TotalCost
									from RationalizedInventoryActivityDeltas as X
									where
									  X.ItemLocationID = inserted.ItemLocationID
									  and (TX.EffectiveDate > X.EffectiveDate or (TX.EffectiveDate = X.EffectiveDate and TX.EntryDate > X.EntryDate))
									order by EffectiveDate desc, EntryDate desc), 0)
		  from ReceiveItemNonPO
		  join inserted on ReceiveItemNonPO.ID = inserted.ID
		  join AccountingTransaction as TX on TX.Id = inserted.AccountingTransactionID
		<!-- If we could be sure there was only one record per IL, we could do the work here with 14 update calls (for the various inv tx tables)
			However that would represent a lot of code duplication (over 7 types of inv tx, not to mention ICV and ICVV), so instead we set up
			a cursor which yields the IL, cost delta, and quantity delta, and call a procedure to do the updating. -->
		declare Deltas cursor local fast_forward
		for
		  select inserted.ItemLocationID, TX.EffectiveDate, TX.EntryDate, inserted.Quantity, TX.Cost
		  from inserted
		  join AccountingTransaction as TX on TX.Id = inserted.AccountingTransactionID
		  
		declare @ILID uniqueidentifier
		declare @EffectiveDate datetime
		declare @EntryDate datetime
		declare @DeltaQuantity integer
		declare @DeltaCost money
		open Deltas
		fetch next from Deltas into @ILID, @EffectiveDate, @EntryDate, @DeltaQuantity, @DeltaCost
		while @@Fetch_Status = 0
		begin
		  exec mbsp_AddInventoryDeltas @ILID, @EffectiveDate, @EntryDate, @DeltaQuantity, @DeltaCost
		  fetch next from Deltas into @ILID, @EffectiveDate, @EntryDate, @DeltaQuantity, @DeltaCost
		end
	  end
	</extension>
	<extension name="references">ActualItemLocation</extension>
	<extension name="references">PermanentItemLocation</extension>
	<extension name="references">ItemCountValue</extension>
	<extension name="references">AccountingTransaction</extension>
	<extension name="references">ReceiveItemNonPO</extension>
	<extension name="references">ItemLocation</extension>
	<extension name="references">RationalizedInventoryActivityDeltas</extension>
	<extension name="references">mbsp_AddInventoryDeltas[]</extension>
  </object>
  <table name="ActualItemLocation"/>
  <table name="PermanentItemLocation"/>
  <table name="ItemAdjustment"/>
  <table name="ItemIssue"/>
  <table name="ItemTransfer"/>
  <table name="ReceiveItemPO"/>
  <table name="ActualItem"/>
  <table name="ItemCountValueVoid"/>
  <table name="ItemCountValue" />
  <table name="AccountingTransaction" />
  <table name="ItemLocation" />
  <table name="RationalizedInventoryActivityDeltas" />
</database>
