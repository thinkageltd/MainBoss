<?xml version="1.0" encoding="utf-8"?>
<database xmlns="http://www.thinkage.ca/XmlNamespaces/XAF">
  <types uri="..\Types.xafdb"/>
  <table name="PostalAddress" defaults="true" log="false" id="Id" xid="Code Hidden" xunique="true" labelkey="Postal Address">
	<doc>Location derivation of an actual physical location with some form of municipal postal address</doc>
	<field name="Id" read="RequiredGUID"/>
	<field name="Code" type="RequiredCode"/>
	<field name="Hidden" type="GenerationValue"/>
	<field name="LocationID" read="RequiredGUIDREF"  base="Location"/>
	<field name="Address1" type="Address"/>
	<field name="Address2" type="Address"/>
	<field name="City" type="Address"/>
	<field name="Territory" type="Address"/>
	<field name="Country" type="Address"/>
	<field name="PostalCode" type="PostalCode"/>

	<extension name="deletemethod">hide</extension>
  </table>
  <object class="trigger" name="mbtg_SetNewPostalAddressCodes">
	<doc>This trigger updates the codes for all new PostalAddress records</doc>
	<extension name="body">
	  on PostalAddress
	  for insert
	  as
	  -- Set the compound Location.Code for all our new records and for anything they contain.
	  -- In general multiple records inserted at once will not be containers for each other but it is possible for the importer
	  -- for instance to create a whole bunch of Location records without their derived records, then all the corresponding RelativeLocation
	  -- records, so we have to handle this case anyway.
	  update Location set Location.Code = inserted.Code
		from Location
		  join inserted on Location.ID = inserted.LocationID
	  declare @codeUpdateTarget uniqueidentifier
	  declare c cursor local fast_forward for
		  select LC.ContainedLocationID from
			  inserted
			  join LocationContainment as LC on inserted.LocationID = LC.ContainingLocationID
			  where LC.Depth &gt; 0
			  order by LC.Depth asc
	  open c
	  fetch next from c into @codeUpdateTarget
	  while @@fetch_status = 0 begin
		update Location set Code = RL.Code + ' @ ' + CGL.Code
			from Location
				join RelativeLocation as RL on RL.LocationID = Location.ID
				join Location as CGL on RL.ContainingLocationID = CGL.ID
			where Location.ID = @codeUpdateTarget
		update Location set Code = WO.Number + ' @ ' + CGL.Code
			from Location
				join TemporaryStorage as TS on TS.LocationID = Location.ID
				join WorkOrder as WO on TS.WorkOrderID = WO.ID
				join Location as CGL on TS.ContainingLocationID = CGL.ID
			where Location.ID = @codeUpdateTarget
		fetch next from c into @codeUpdateTarget
	  end
	</extension>
	<extension name="references">LocationContainment</extension>
	<extension name="references">RelativeLocation</extension>
	<extension name="references">Location</extension>
	<extension name="references">TemporaryStorage</extension>
	<extension name="references">WorkOrder</extension>
  </object>
  <object class="trigger" name="mbtg_SetUpdatedPostalAddressCodes">
	<doc>This trigger updates the codes for all updated PostalAddress records</doc>
	<extension name="body">
	  on PostalAddress
	  for update
	  as
	  if update(Code) begin
		  -- Update the compound codes of all the altered records and everything contained in them.
		  update Location set Location.Code = inserted.Code
			from Location
			  join inserted on Location.ID = inserted.LocationID
			  join deleted on inserted.id = deleted.id
			  where convert(varbinary(max), inserted.code) != convert(varbinary(max), deleted.code)
		  declare @codeUpdateTarget uniqueidentifier
		  declare c cursor local fast_forward for
			  select LC.ContainedLocationID from
				  inserted
				  join deleted on inserted.id = deleted.id
				  join LocationContainment as LC on inserted.LocationID = LC.ContainingLocationID
				  where convert(varbinary(max), inserted.code) != convert(varbinary(max), deleted.code) and LC.depth &gt; 0
				  order by LC.Depth asc
		  open c
		  fetch next from c into @codeUpdateTarget
		  while @@fetch_status = 0 begin
			update Location set Code = RL.Code + ' @ ' + CGL.Code
				from Location
					join RelativeLocation as RL on RL.LocationID = Location.ID
					join Location as CGL on RL.ContainingLocationID = CGL.ID
				where Location.ID = @codeUpdateTarget
			update Location set Code = WO.Number + ' @ ' + CGL.Code
				from Location
					join TemporaryStorage as TS on TS.LocationID = Location.ID
					join WorkOrder as WO on TS.WorkOrderID = WO.ID
					join Location as CGL on TS.ContainingLocationID = CGL.ID
				where Location.ID = @codeUpdateTarget
			fetch next from c into @codeUpdateTarget
		  end
	  end
	</extension>
	<extension name="references">LocationContainment</extension>
	<extension name="references">RelativeLocation</extension>
	<extension name="references">Location</extension>
	<extension name="references">TemporaryStorage</extension>
	<extension name="references">WorkOrder</extension>
  </object>
  <table name="Location" id="Id"/>
  <table name="LocationContainment" id="Id"/>
  <table name="RelativeLocation" id="Id"/>
  <table name="TemporaryStorage" id="Id"/>
  <table name="WorkOrder" id="Id"/>
</database>
