



//-----------------------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by the XAFBuild tool.
//		Template file DBIGenerationTemplate.xml
//		Vault version 119
//		XAFBuild title: Thinkage.XAFBuild.StudioAddin in Thinkage ToolKit 3.0.3.0
//		Changes to this file will be lost if the code is regenerated.
// #defines
//  <TableName>RowChangedEvents to have row changed events enabled
//	DefineForeignKeyConstraints - for the ForeignKeyConstraints to be enabled
//	DefineUniqueConstraints - for the UniqueConstraints to be enabled
//  SerializationSupport - for the Serialization of the dataset Constructor to be enabled
// </autogenerated>
//-----------------------------------------------------------------------------------------------

namespace Thinkage.MainBoss.Database {
	using System.Linq;
	using System;
	using System.Data;
	using System.Xml;
	using System.Runtime.Serialization;
	using Thinkage.Libraries.XAF.Database.Layout;
	using Thinkage.Libraries.XAF.Database.Service;
	using Thinkage.Libraries.DBAccess;
	using System.Collections.Generic;

	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2229:ImplementSerializationConstructors"), Serializable()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.ComponentModel.ToolboxItem(true)]
	[Thinkage.Libraries.Translation.Invariant]
	public class dsDatabaseHistory_1_0_0_337 : DBDataSet {

		#region Database Variables VAccessor
		public VAccessor V {
			get {
				if (_V == null)
					_V = new VAccessor(this);
				return _V;
			}
		}
		private VAccessor _V;
		[Thinkage.Libraries.Translation.Invariant]
		public class VAccessor {
			#region Typed Variable Accessors
			#endregion
			#region VAccessor Construction
			public VAccessor(dsDatabaseHistory_1_0_0_337 this_dataset )
			{
			}
			#endregion
		}
		#endregion


		#region DataSet Construction

		internal void CommonCTOR() {
			InitClass();
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			VariablesChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		[Obsolete("Do not call this, it is only here to support DataSet.Clone.", true)]
		public dsDatabaseHistory_1_0_0_337() : base() {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsDatabaseHistory_1_0_0_337(DBClient db) : base(Schema, db) {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsDatabaseHistory_1_0_0_337(IServer server) : base(Schema, server) {
			CommonCTOR();
		}
#if SerializationSupport
		protected dsDatabaseHistory_1_0_0_337(SerializationInfo info, StreamingContext context) {
			/// ExtendedProperties are not copied in this CTOR if they are not part of the input stream. In particular, any delgate extended properties
			/// we put on datatables may not be copied. If we end up with any delegate extended properties on datatables, then we will need to
			/// amend the code below to propogate the properties itself
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null)) {
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(XmlReader.Create(new System.IO.StringReader(strSchema)));
				if (ds.Tables["__Variables"] != null)
					this.Tables.Add( new DataVariable.__VariablesDataTable(ds.Tables["__Variables"]));
				if ((ds.Tables["DatabaseHistory"] != null)) {
					this.Tables.Add(new DatabaseHistoryDataTable(ds.Tables["DatabaseHistory"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			}
			else
				this.InitClass();

			this.GetSerializationData(info, context);
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			DataVariables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
#endif
		protected override void InitClass() {
			this.DataSetName = "dsDatabaseHistory_1_0_0_337";
			this.Prefix = "";
			this.EnforceConstraints = false;
			base.InitClass();
			#region Foreign Key Constraints
			#if DefineForeignKeyConstraints

			#endif
			#endregion

		}
		#endregion

		#region Table Accessor Struct
		public TAccessor T {
			get {
				if (_T == null)
					_T = new TAccessor(this);
				return _T;
			}
		}
		private TAccessor _T;
		public class TAccessor {
			public TAccessor( dsDatabaseHistory_1_0_0_337 this_dataset ) {
				this.DatabaseHistory = (DatabaseHistoryDataTable)this_dataset.Tables["DatabaseHistory"];
			}
			public readonly DatabaseHistoryDataTable DatabaseHistory;
		}
		#endregion
		#region Default-table accessor struct
		public DTAccessor DT {
			get {
				if (_DT == null)
					_DT = new DTAccessor(this);
				return _DT;
			}
		}
		private DTAccessor _DT;
		public class DTAccessor {
			public DTAccessor( dsDatabaseHistory_1_0_0_337 this_dataset ) {
				this.DatabaseHistory = (DatabaseHistoryDataTable)this_dataset.Tables["_DDatabaseHistory"];
			}
			public readonly DatabaseHistoryDataTable DatabaseHistory;
		}
		#endregion
		#region DataSet Streaming
		#if SerializationSupport
		protected override bool ShouldSerializeTables() {
			return false;
		}
		protected override bool ShouldSerializeRelations() {
			return false;
		}
		protected override void ReadXmlSerializable(XmlReader reader) {
			this.Reset();
			DataSet ds = new DataSet();
			ds.ReadXml(reader);
			if ((ds.Tables["__Variables"] != null))
				this.Tables.Add( new DataVariable.__VariablesDataTable(ds.Tables["__Variables"]));
			if ((ds.Tables["DatabaseHistory"] != null)) {
				this.Tables.Add(new DatabaseHistoryDataTable(ds.Tables["DatabaseHistory"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(XmlWriter.Create(stream));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(XmlReader.Create(stream), null);
		}
		#endif
		#endregion

		#region DataTable Classes
		#region DatabaseHistory
		private bool ShouldSerializeDatabaseHistory() {
			return false;
		}
#if DatabaseHistoryRowChangeEvents
		public delegate void DatabaseHistoryRowChangeEventHandler(object sender, DatabaseHistoryRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class DatabaseHistoryDataTable : DBIDataTable {
			#region Construction
			internal DatabaseHistoryDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal DatabaseHistoryDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(DatabaseHistoryDataTable t) {
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.EntryDate = (DBIDataColumn)t.Columns["EntryDate"];
				  this.Subject = (DBIDataColumn)t.Columns["Subject"];
				  this.Description = (DBIDataColumn)t.Columns["Description"];
				}
				/// <summary>
				/// Denotes the DatabaseHistory's Id column with type id(nonnull) with labelkey='Id'
				/// </summary>
				public readonly DBIDataColumn Id;
				/// <summary>
				/// Denotes the DatabaseHistory's EntryDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EntryDate'
				/// </summary>
				public readonly DBIDataColumn EntryDate;
				/// <summary>
				/// Denotes the DatabaseHistory's Subject column with type string(nonnull, minlength 1, maxlength 100, maxlines 0, trim) with labelkey='Subject'
				/// </summary>
				public readonly DBIDataColumn Subject;
				/// <summary>
				/// Denotes the DatabaseHistory's Description column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Description'
				/// </summary>
				public readonly DBIDataColumn Description;
			}
			#endregion
			#region EventHandlers
			#if DatabaseHistoryRowChangeEvents
			public event DatabaseHistoryRowChangeEventHandler DatabaseHistoryRowChanged;
			public event DatabaseHistoryRowChangeEventHandler DatabaseHistoryRowChanging;
			public event DatabaseHistoryRowChangeEventHandler DatabaseHistoryRowDeleted;
			public event DatabaseHistoryRowChangeEventHandler DatabaseHistoryRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				this.DatabaseHistoryRowChanged?.Invoke(this, new DatabaseHistoryRowChangeEvent(((DatabaseHistoryRow)(e.Row)), e.Action));
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				this.DatabaseHistoryRowChanging?.Invoke(this, new DatabaseHistoryRowChangeEvent(((DatabaseHistoryRow)(e.Row)), e.Action));
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				this.DatabaseHistoryRowDeleted?.Invoke(this, new DatabaseHistoryRowChangeEvent(((DatabaseHistoryRow)(e.Row)), e.Action));
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				this.DatabaseHistoryRowDeleting?.Invoke(this, new DatabaseHistoryRowChangeEvent(((DatabaseHistoryRow)(e.Row)), e.Action));
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new DatabaseHistoryDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public DatabaseHistoryRow this[int index] {
				get {
					return ((DatabaseHistoryRow)(this.Rows[index]));
				}
			}
			public void AddDatabaseHistoryRow(DatabaseHistoryRow row) {
				this.Rows.Add(row);
			}
			public DatabaseHistoryRow AddNewDatabaseHistoryRow() {
				return ((DatabaseHistoryRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, dsDatabaseHistory_1_0_0_337.Schema.T.DatabaseHistory)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new DatabaseHistoryRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(DatabaseHistoryRow);
			}
			public void RemoveDatabaseHistoryRow(DatabaseHistoryRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region DatabaseHistoryRow
		[Thinkage.Libraries.Translation.Invariant]
		public class DatabaseHistoryRow : DBIDataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal DatabaseHistoryRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly DatabaseHistoryDataTable this_table;
				private readonly DatabaseHistoryRow this_row;
				public FAccessor( DatabaseHistoryRow this_row )
				{
					this.this_table = ((DatabaseHistoryDataTable)(this_row.Table));
					this.this_row = this_row;
				}
				/// <summary>
				/// Denotes the DatabaseHistory's Id column with type id(nonnull) with labelkey='Id'
				/// </summary>
				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.DatabaseHistory.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}
				/// <summary>
				/// Denotes the DatabaseHistory's EntryDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EntryDate'
				/// </summary>
				public System.DateTime EntryDate {
					get {
							return (System.DateTime)Schema.T.DatabaseHistory.F.EntryDate.EffectiveType.GenericAsNativeType(this_table.F.EntryDate[this_row], typeof(System.DateTime));
					}
					set {this_table.F.EntryDate[this_row] = value; }
				}
				/// <summary>
				/// Denotes the DatabaseHistory's Subject column with type string(nonnull, minlength 1, maxlength 100, maxlines 0, trim) with labelkey='Subject'
				/// </summary>
				public System.String Subject {
					get {
							return (System.String)Schema.T.DatabaseHistory.F.Subject.EffectiveType.GenericAsNativeType(this_table.F.Subject[this_row], typeof(System.String));
					}
					set {this_table.F.Subject[this_row] = value; }
				}
				/// <summary>
				/// Denotes the DatabaseHistory's Description column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Description'
				/// </summary>
				public System.String Description {
					get {
							return (System.String)Schema.T.DatabaseHistory.F.Description.EffectiveType.GenericAsNativeType(this_table.F.Description[this_row], typeof(System.String));
					}
					set {this_table.F.Description[this_row] = value; }
				}
			}
		}
		#endregion
		#region DatabaseHistoryRowChangeEvent
#if DatabaseHistoryRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class DatabaseHistoryRowChangeEvent : EventArgs {

			private DatabaseHistoryRow eventRow;

			private DataRowAction eventAction;

			public DatabaseHistoryRowChangeEvent(DatabaseHistoryRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public DatabaseHistoryRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#endregion

		#region Custom database schema definitions
		#region - the custom Schema class
		/// <summary>
		/// Singleton class containing the schema of all tables,
		/// columns, and relationships in a database.
		/// </summary>
		[Thinkage.Libraries.Translation.Invariant]
		public class SchemaClass : DBI_Database {
			#region singleton construction
			private SchemaClass() {
				_T = new TAccessor(this);
				vstruct = new VAccessor(this);
				__DatabaseHistory = new DBI_DatabaseHistory();
				Tables.Add( __DatabaseHistory);
				CompleteDBI(System.Reflection.Assembly.GetExecutingAssembly(), "manifest://localhost/Thinkage/MainBoss/Database/Upgrade/Schema/dsDatabaseHistory_1_0_0_337.xafdb", typeof(dsDatabaseHistory_1_0_0_337)
				);
			 }
			/// <summary>
			/// The instantiation of the singleton SchemaClass object
			/// </summary>
			public static readonly SchemaClass Instance = new SchemaClass();
			#endregion
			#region Custom DBI_Table derivations and their private reference in the schema object
			#region - DatabaseHistory table
			private DBI_DatabaseHistory __DatabaseHistory;

			/// <summary>
			/// Class to describe a DatabaseHistory table
			/// </summary>
			public class DBI_DatabaseHistory : DBIDataDBI_Table {
				public FAccessor F;
				private DBI_Column __Id;
				private DBI_Column __EntryDate;
				private DBI_Column __Subject;
				private DBI_Column __Description;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_DatabaseHistory this_table;
					public FAccessor( DBI_DatabaseHistory this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the DatabaseHistory's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the DatabaseHistory's EntryDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EntryDate'
					/// </summary>
					public DBI_Column EntryDate { get { return this_table.__EntryDate; } }
					/// <summary>
					/// Denotes the DatabaseHistory's Subject column with type string(nonnull, minlength 1, maxlength 100, maxlines 0, trim) with labelkey='Subject'
					/// </summary>
					public DBI_Column Subject { get { return this_table.__Subject; } }
					/// <summary>
					/// Denotes the DatabaseHistory's Description column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Description'
					/// </summary>
					public DBI_Column Description { get { return this_table.__Description; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_DatabaseHistory()
					: base("DatabaseHistory", (DBI_Table tableSchema, IServer s) => new DatabaseHistoryDataTable(tableSchema, s)) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'DatabaseHistory' column count mismatch");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__EntryDate = Columns["EntryDate"];
					System.Diagnostics.Debug.Assert(__EntryDate != null, "Column 'EntryDate' not found");
					__Subject = Columns["Subject"];
					System.Diagnostics.Debug.Assert(__Subject != null, "Column 'Subject' not found");
					__Description = Columns["Description"];
					System.Diagnostics.Debug.Assert(__Description != null, "Column 'Description' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#endregion
			#region T - the public portal for getting the custom-typed DBI_Table objects for each table
			public struct TAccessor {
				private SchemaClass this_schema;
				public TAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Accessors
				/// <summary>
				/// Denotes the DatabaseHistory table with labelkey='Database History'
				/// </summary>
				public DBI_DatabaseHistory DatabaseHistory { get { return this_schema.__DatabaseHistory; }}
				#endregion
			}
			public TAccessor T { get { return _T; } }
			private TAccessor _T;
			#endregion
			#region V - the public portal for getting the DBI_Variable objects for Database Variables
			public struct VAccessor {
				private SchemaClass this_schema;
				public VAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Variable Accessors
				#endregion
			}
			public VAccessor V { get { return vstruct; } }	// Variables
			private VAccessor vstruct;
			#endregion
		}
		#endregion
		#region - The static member that contains the Schema
		public readonly static SchemaClass Schema = SchemaClass.Instance;
		// make a member variable in the class for reference in a dynamic type instance of this object
		public readonly SchemaClass SchemaDynamic = Schema;
		#endregion
		#endregion
		#region Database Path definitions
		[Thinkage.Libraries.Translation.Invariant]
		public class PathClass {
			/// <summary>
			/// Class containing the relationship paths of all tables,
			/// </summary>
			public readonly TAccessor T;
			/// <summary>
			/// Private constructor for singleton creation
			/// </summary>
			private PathClass() {
				T = new TAccessor(this);
			}

			/// <summary>
			/// The instantiation of the singleton Path object
			/// </summary>
			public static readonly PathClass Instance = new PathClass();
			#region DBI_Path Definitions

			#region DBI_Path DatabaseHistory
			private PathToDatabaseHistoryRow __pDatabaseHistory = new PathToDatabaseHistoryRow( SchemaClass.Instance.T.DatabaseHistory );

			/// <summary>
			/// The DatabaseHistory path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToDatabaseHistoryRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _Id;
				private PathToField _EntryDate;
				private PathToField _Subject;
				private PathToField _Description;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToDatabaseHistoryRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToDatabaseHistoryRow _BasePath;
					/// <summary>
					/// Provides the path to DatabaseHistory's Id with type id(nonnull) and labelkey='Id'
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.DatabaseHistory.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to DatabaseHistory's EntryDate with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) and labelkey='EntryDate'
					/// </summary>
					public PathToField EntryDate { get { if (_BasePath._EntryDate == null) _BasePath._EntryDate = new PathToField(_BasePath, Schema.T.DatabaseHistory.F.EntryDate ); return _BasePath._EntryDate; } }
					/// <summary>
					/// Provides the path to DatabaseHistory's Subject with type string(nonnull, minlength 1, maxlength 100, maxlines 0, trim) and labelkey='Subject'
					/// </summary>
					public PathToField Subject { get { if (_BasePath._Subject == null) _BasePath._Subject = new PathToField(_BasePath, Schema.T.DatabaseHistory.F.Subject ); return _BasePath._Subject; } }
					/// <summary>
					/// Provides the path to DatabaseHistory's Description with type string(minlength 1, (maxlength 1,073,741,823), trim) and labelkey='Description'
					/// </summary>
					public PathToField Description { get { if (_BasePath._Description == null) _BasePath._Description = new PathToField(_BasePath, Schema.T.DatabaseHistory.F.Description ); return _BasePath._Description; } }
				}

				internal PathToDatabaseHistoryRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToDatabaseHistoryRow( DBI_Table t ) : base( t ) { }
				internal PathToDatabaseHistoryRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToDatabaseHistoryLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToDatabaseHistoryRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToDatabaseHistoryRow PathToReferencedRow { get { return (PathToDatabaseHistoryRow)base.PathToReferencedRow; } }

				internal PathToDatabaseHistoryLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToDatabaseHistoryRow(rootTableSchema, columns);
				}
			}
			public class LinkToDatabaseHistory {
				public LinkToDatabaseHistory(DBI_Path referencing_path) {
					Id = new PathToDatabaseHistoryRow(referencing_path.PathThroughLinkage(Schema.T.DatabaseHistory.F.Id));
				}
				public readonly PathToDatabaseHistoryRow Id;
			}
			#endregion
			public class PathToField : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				[System.Obsolete("This field is not a linkage field", true)]
				public new PathToField PathToReferencedRow { get { return null; } }

				internal PathToField( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
			}
			#endregion
			public struct TAccessor {
				private PathClass this_path;
				public TAccessor( PathClass this_path )
				{
					this.this_path = this_path;
				}
				#region Accessors
				/// <summary>
				/// Provides the root path for DatabaseHistory with labelkey='Database History'
				/// </summary>
				public PathToDatabaseHistoryRow DatabaseHistory { get { return this_path.__pDatabaseHistory; } }
				#endregion
			}
			public class LAccessorBase {
				protected LAccessorBase(DBI_Path basePath) {
					BasePath = basePath;
				}
				protected readonly DBI_Path BasePath;
				#region Cached Accessor results
				protected PathClass.LinkToDatabaseHistory _DatabaseHistory;
				#endregion
			}
			public class LAccessor : LAccessorBase {
				public LAccessor( DBI_Path this_path ) 
					: base(this_path) {
				}
				#region Accessors
				public PathClass.LinkToDatabaseHistory DatabaseHistory { get { if (base._DatabaseHistory == null) base._DatabaseHistory = new PathClass.LinkToDatabaseHistory(base.BasePath); return base._DatabaseHistory; } }
				#endregion
			}
		}
		public static readonly PathClass Path = PathClass.Instance;
		#endregion
		#region Label Key Building
		public class LabelKeyBuilder : Thinkage.Libraries.Translation.GeneralKeyBuilder {
			static LabelKeyBuilder Instance = new LabelKeyBuilder();
			private LabelKeyBuilder() {
			}
			protected override Thinkage.Libraries.Translation.ContextReference GetContext() {
				return Thinkage.Libraries.Translation.ContextReference.New("");
			}
			public static Thinkage.Libraries.Translation.Key K([Thinkage.Libraries.Translation.Context("")]string s) {
				return Instance.BuildKey(s);
			}
		}
		#endregion
	}
}
