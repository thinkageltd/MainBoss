



//-----------------------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by the XAFBuild tool.
//		Template file DBIGenerationTemplate.xml
//		Vault version 106
//		XAFBuild title: Thinkage.XAFBuild.StudioAddin in Thinkage ToolKit 2.0.17.0
//		Changes to this file will be lost if the code is regenerated.
// #defines
//  <TableName>RowChangedEvents to have row changed events enabled
//	DefineForeignKeyConstraints - for the ForeignKeyConstraints to be enabled
//	DefineUniqueConstraints - for the UniqueConstraints to be enabled
//  SerializationSupport - for the Serialization of the dataset Constructor to be enabled
// </autogenerated>
//-----------------------------------------------------------------------------------------------

namespace Thinkage.MainBoss.Database {
	using System;
	using System.Data;
	using System.Xml;
	using System.Runtime.Serialization;
	using Thinkage.Libraries.DBILibrary;
	using Thinkage.Libraries.DBAccess;

	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2229:ImplementSerializationConstructors"), Serializable()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.ComponentModel.ToolboxItem(true)]
	[Thinkage.Libraries.Translation.Invariant]
	public class dsEmailRequest : XAFDataSet {

		#region Database Variables VAccessor
		public VAccessor V {
			get {
				if (_V == null)
					_V = new VAccessor(this);
				return _V;
			}
		}
		private VAccessor _V;
		[Thinkage.Libraries.Translation.Invariant]
		public class VAccessor {
			#region Typed Variable Accessors
			#endregion
			#region VAccessor Construction
			public VAccessor(dsEmailRequest this_dataset )
			{
			}
			#endregion
		}
		#endregion


		#region DataSet Construction

		internal void CommonCTOR() {
			InitClass();
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			DataVariables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		[Obsolete("Do not call this, it is only here to support DataSet.Clone.", true)]
		public dsEmailRequest() : base() {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsEmailRequest(XAFClient db) : base(Schema, db) {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsEmailRequest(IServer server) : base(Schema, server) {
			CommonCTOR();
		}
#if SerializationSupport
		protected dsEmailRequest(SerializationInfo info, StreamingContext context) {
			/// ExtendedProperties are not copied in this CTOR if they are not part of the input stream. In particular, any delgate extended properties
			/// we put on datatables may not be copied. If we end up with any delegate extended properties on datatables, then we will need to
			/// amend the code below to propogate the properties itself
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null)) {
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(XmlReader.Create(new System.IO.StringReader(strSchema)));
				if (ds.Tables["__Variables"] != null)
					this.Tables.Add( new DataVariable.__VariablesDataTable(ds.Tables["__Variables"]));
				if ((ds.Tables["Request"] != null)) {
					this.Tables.Add(new RequestDataTable(ds.Tables["Request"]));
				}
				if ((ds.Tables["EmailRequest"] != null)) {
					this.Tables.Add(new EmailRequestDataTable(ds.Tables["EmailRequest"]));
				}
				if ((ds.Tables["EmailPart"] != null)) {
					this.Tables.Add(new EmailPartDataTable(ds.Tables["EmailPart"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			}
			else
				this.InitClass();

			this.GetSerializationData(info, context);
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			DataVariables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
#endif

		protected override void InitClass() {
			this.DataSetName = "dsEmailRequest";
			this.Prefix = "";
			this.EnforceConstraints = false;
			base.InitClass();
			#region Foreign Key Constraints
			#if DefineForeignKeyConstraints

			ForeignKeyConstraint fkc;
			fkc = new ForeignKeyConstraint("", new DataColumn[] {
						this.tableRequest.IdColumn}, new DataColumn[] {
						this.tableEmailRequest.F.RequestID});
			this.tableEmailRequest.Constraints.Add(fkc);
			fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
			fkc.DeleteRule = System.Data.Rule.None;
			fkc.UpdateRule = System.Data.Rule.Cascade;
			fkc = new ForeignKeyConstraint("", new DataColumn[] {
						this.tableEmailPart.IdColumn}, new DataColumn[] {
						this.tableEmailPart.F.ParentID});
			this.tableEmailPart.Constraints.Add(fkc);
			fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
			fkc.DeleteRule = System.Data.Rule.None;
			fkc.UpdateRule = System.Data.Rule.Cascade;
			fkc = new ForeignKeyConstraint("", new DataColumn[] {
						this.tableEmailRequest.IdColumn}, new DataColumn[] {
						this.tableEmailPart.F.EmailRequestID});
			this.tableEmailPart.Constraints.Add(fkc);
			fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
			fkc.DeleteRule = System.Data.Rule.None;
			fkc.UpdateRule = System.Data.Rule.Cascade;
			#endif
			#endregion

		}
		#endregion

		#region Table Accessor Struct
		public TAccessor T {
			get {
				if (_T == null)
					_T = new TAccessor(this);
				return _T;
			}
		}
		private TAccessor _T;
		public class TAccessor {
			public TAccessor( dsEmailRequest this_dataset ) {
				this.Request = (RequestDataTable)this_dataset.Tables["Request"];
				this.EmailRequest = (EmailRequestDataTable)this_dataset.Tables["EmailRequest"];
				this.EmailPart = (EmailPartDataTable)this_dataset.Tables["EmailPart"];
			}
			public readonly RequestDataTable Request;
			public readonly EmailRequestDataTable EmailRequest;
			public readonly EmailPartDataTable EmailPart;
		}
		#endregion
		#region Default-table accessor struct
		public DTAccessor DT {
			get {
				if (_DT == null)
					_DT = new DTAccessor(this);
				return _DT;
			}
		}
		private DTAccessor _DT;
		public class DTAccessor {
			public DTAccessor( dsEmailRequest this_dataset ) {
				this.Request = (RequestDataTable)this_dataset.Tables["_DRequest"];
				this.EmailRequest = (EmailRequestDataTable)this_dataset.Tables["_DEmailRequest"];
				this.EmailPart = (EmailPartDataTable)this_dataset.Tables["_DEmailPart"];
			}
			public readonly RequestDataTable Request;
			public readonly EmailRequestDataTable EmailRequest;
			public readonly EmailPartDataTable EmailPart;
		}
		#endregion
		#region DataSet Streaming
		#if SerializationSupport
		protected override bool ShouldSerializeTables() {
			return false;
		}
		protected override bool ShouldSerializeRelations() {
			return false;
		}
		protected override void ReadXmlSerializable(XmlReader reader) {
			this.Reset();
			DataSet ds = new DataSet();
			ds.ReadXml(reader);
			if ((ds.Tables["__Variables"] != null))
				this.Tables.Add( new DataVariable.__VariablesDataTable(ds.Tables["__Variables"]));
			if ((ds.Tables["Request"] != null)) {
				this.Tables.Add(new RequestDataTable(ds.Tables["Request"]));
			}
			if ((ds.Tables["EmailRequest"] != null)) {
				this.Tables.Add(new EmailRequestDataTable(ds.Tables["EmailRequest"]));
			}
			if ((ds.Tables["EmailPart"] != null)) {
				this.Tables.Add(new EmailPartDataTable(ds.Tables["EmailPart"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(XmlWriter.Create(stream));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(XmlReader.Create(stream), null);
		}
		#endif
		#endregion

		#region DataTable Classes
		#region Request
		private bool ShouldSerializeRequest() {
			return false;
		}
#if RequestRowChangeEvents
		public delegate void RequestRowChangeEventHandler(object sender, RequestRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class RequestDataTable : DBIDataTable {
			#region Construction
			internal RequestDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal RequestDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(RequestDataTable t) {
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				}
				public readonly DBIDataColumn Id;
			}
			#endregion
			#region EventHandlers
			#if RequestRowChangeEvents
			public event RequestRowChangeEventHandler RequestRowChanged;
			public event RequestRowChangeEventHandler RequestRowChanging;
			public event RequestRowChangeEventHandler RequestRowDeleted;
			public event RequestRowChangeEventHandler RequestRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.RequestRowChanged != null)) {
					this.RequestRowChanged(this, new RequestRowChangeEvent(((RequestRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.RequestRowChanging != null)) {
					this.RequestRowChanging(this, new RequestRowChangeEvent(((RequestRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.RequestRowDeleted != null)) {
					this.RequestRowDeleted(this, new RequestRowChangeEvent(((RequestRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.RequestRowDeleting != null)) {
					 this.RequestRowDeleting(this, new RequestRowChangeEvent(((RequestRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new RequestDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public RequestRow this[int index] {
				get {
					return ((RequestRow)(this.Rows[index]));
				}
			}
			public void AddRequestRow(RequestRow row) {
				this.Rows.Add(row);
			}
			public RequestRow AddNewRequestRow() {
				return ((RequestRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, dsEmailRequest.Schema.T.Request)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new RequestRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(RequestRow);
			}
			public void RemoveRequestRow(RequestRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region RequestRow
		[Thinkage.Libraries.Translation.Invariant]
		public class RequestRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal RequestRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly RequestDataTable this_table;
				private readonly RequestRow this_row;
				public FAccessor( RequestRow this_row )
				{
					this.this_table = ((RequestDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Request.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}
			}
			public EmailRequestRow[] GetEmailRequestRequestIDChildRows() {
				return ((EmailRequestRow[])(Path.T.EmailRequest.F.RequestID.GetChildRows(this)));
			}
		}
		#endregion
		#region RequestRowChangeEvent
#if RequestRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class RequestRowChangeEvent : EventArgs {

			private RequestRow eventRow;

			private DataRowAction eventAction;

			public RequestRowChangeEvent(RequestRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public RequestRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region EmailRequest
		private bool ShouldSerializeEmailRequest() {
			return false;
		}
#if EmailRequestRowChangeEvents
		public delegate void EmailRequestRowChangeEventHandler(object sender, EmailRequestRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class EmailRequestDataTable : DBIDataTable {
			#region Construction
			internal EmailRequestDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal EmailRequestDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(EmailRequestDataTable t) {
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.FromEmailAddress = (DBIDataColumn)t.Columns["FromEmailAddress"];
				  this.RequestorEmailAddress = (DBIDataColumn)t.Columns["RequestorEmailAddress"];
				  this.RequestorEmailDisplayName = (DBIDataColumn)t.Columns["RequestorEmailDisplayName"];
				  this.ProcessingState = (DBIDataColumn)t.Columns["ProcessingState"];
				  this.Comment = (DBIDataColumn)t.Columns["Comment"];
				  this.ReceiveDate = (DBIDataColumn)t.Columns["ReceiveDate"];
				  this.MailHeader = (DBIDataColumn)t.Columns["MailHeader"];
				  this.MailMessage = (DBIDataColumn)t.Columns["MailMessage"];
				  this.RequestID = (DBIDataColumn)t.Columns["RequestID"];
				  this.PreferredLanguage = (DBIDataColumn)t.Columns["PreferredLanguage"];
				}
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn FromEmailAddress;
				public readonly DBIDataColumn RequestorEmailAddress;
				public readonly DBIDataColumn RequestorEmailDisplayName;
				public readonly DBIDataColumn ProcessingState;
				public readonly DBIDataColumn Comment;
				public readonly DBIDataColumn ReceiveDate;
				public readonly DBIDataColumn MailHeader;
				public readonly DBIDataColumn MailMessage;
				public readonly DBIDataColumn RequestID;
				public readonly DBIDataColumn PreferredLanguage;
			}
			#endregion
			#region EventHandlers
			#if EmailRequestRowChangeEvents
			public event EmailRequestRowChangeEventHandler EmailRequestRowChanged;
			public event EmailRequestRowChangeEventHandler EmailRequestRowChanging;
			public event EmailRequestRowChangeEventHandler EmailRequestRowDeleted;
			public event EmailRequestRowChangeEventHandler EmailRequestRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.EmailRequestRowChanged != null)) {
					this.EmailRequestRowChanged(this, new EmailRequestRowChangeEvent(((EmailRequestRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.EmailRequestRowChanging != null)) {
					this.EmailRequestRowChanging(this, new EmailRequestRowChangeEvent(((EmailRequestRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.EmailRequestRowDeleted != null)) {
					this.EmailRequestRowDeleted(this, new EmailRequestRowChangeEvent(((EmailRequestRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.EmailRequestRowDeleting != null)) {
					 this.EmailRequestRowDeleting(this, new EmailRequestRowChangeEvent(((EmailRequestRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new EmailRequestDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public EmailRequestRow this[int index] {
				get {
					return ((EmailRequestRow)(this.Rows[index]));
				}
			}
			public void AddEmailRequestRow(EmailRequestRow row) {
				this.Rows.Add(row);
			}
			public EmailRequestRow AddNewEmailRequestRow() {
				return ((EmailRequestRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, dsEmailRequest.Schema.T.EmailRequest)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new EmailRequestRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(EmailRequestRow);
			}
			public void RemoveEmailRequestRow(EmailRequestRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region EmailRequestRow
		[Thinkage.Libraries.Translation.Invariant]
		public class EmailRequestRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal EmailRequestRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly EmailRequestDataTable this_table;
				private readonly EmailRequestRow this_row;
				public FAccessor( EmailRequestRow this_row )
				{
					this.this_table = ((EmailRequestDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.EmailRequest.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String FromEmailAddress {
					get {
							return (System.String)Schema.T.EmailRequest.F.FromEmailAddress.EffectiveType.GenericAsNativeType(this_table.F.FromEmailAddress[this_row], typeof(System.String));
					}
					set {this_table.F.FromEmailAddress[this_row] = value; }
				}

				public System.String RequestorEmailAddress {
					get {
							return (System.String)Schema.T.EmailRequest.F.RequestorEmailAddress.EffectiveType.GenericAsNativeType(this_table.F.RequestorEmailAddress[this_row], typeof(System.String));
					}
					set {this_table.F.RequestorEmailAddress[this_row] = value; }
				}

				public System.String RequestorEmailDisplayName {
					get {
							return (System.String)Schema.T.EmailRequest.F.RequestorEmailDisplayName.EffectiveType.GenericAsNativeType(this_table.F.RequestorEmailDisplayName[this_row], typeof(System.String));
					}
					set {this_table.F.RequestorEmailDisplayName[this_row] = value; }
				}

				public System.Int16 ProcessingState {
					get {
							return (System.Int16)Schema.T.EmailRequest.F.ProcessingState.EffectiveType.GenericAsNativeType(this_table.F.ProcessingState[this_row], typeof(System.Int16));
					}
					set {this_table.F.ProcessingState[this_row] = value; }
				}

				public System.String Comment {
					get {
							return (System.String)Schema.T.EmailRequest.F.Comment.EffectiveType.GenericAsNativeType(this_table.F.Comment[this_row], typeof(System.String));
					}
					set {this_table.F.Comment[this_row] = value; }
				}

				public System.DateTime ReceiveDate {
					get {
							return (System.DateTime)Schema.T.EmailRequest.F.ReceiveDate.EffectiveType.GenericAsNativeType(this_table.F.ReceiveDate[this_row], typeof(System.DateTime));
					}
					set {this_table.F.ReceiveDate[this_row] = value; }
				}

				public System.String MailHeader {
					get {
							return (System.String)Schema.T.EmailRequest.F.MailHeader.EffectiveType.GenericAsNativeType(this_table.F.MailHeader[this_row], typeof(System.String));
					}
					set {this_table.F.MailHeader[this_row] = value; }
				}

				public System.String MailMessage {
					get {
							return (System.String)Schema.T.EmailRequest.F.MailMessage.EffectiveType.GenericAsNativeType(this_table.F.MailMessage[this_row], typeof(System.String));
					}
					set {this_table.F.MailMessage[this_row] = value; }
				}

				public System.Guid? RequestID {
					get {
							return (System.Guid?)Schema.T.EmailRequest.F.RequestID.EffectiveType.GenericAsNativeType(this_table.F.RequestID[this_row], typeof(System.Guid?));
					}
					set {this_table.F.RequestID[this_row] = value; }
				}

				public System.Int32? PreferredLanguage {
					get {
							return (System.Int32?)Schema.T.EmailRequest.F.PreferredLanguage.EffectiveType.GenericAsNativeType(this_table.F.PreferredLanguage[this_row], typeof(System.Int32?));
					}
					set {this_table.F.PreferredLanguage[this_row] = value; }
				}
			}
			public RequestRow RequestIDParentRow {
				get {
					return ((RequestRow)(Path.T.EmailRequest.F.RequestID.GetParentRow(this)));
				}
			}

			public EmailPartRow[] GetEmailPartEmailRequestIDChildRows() {
				return ((EmailPartRow[])(Path.T.EmailPart.F.EmailRequestID.GetChildRows(this)));
			}
		}
		#endregion
		#region EmailRequestRowChangeEvent
#if EmailRequestRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class EmailRequestRowChangeEvent : EventArgs {

			private EmailRequestRow eventRow;

			private DataRowAction eventAction;

			public EmailRequestRowChangeEvent(EmailRequestRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public EmailRequestRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region EmailPart
		private bool ShouldSerializeEmailPart() {
			return false;
		}
#if EmailPartRowChangeEvents
		public delegate void EmailPartRowChangeEventHandler(object sender, EmailPartRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class EmailPartDataTable : DBIDataTable {
			#region Construction
			internal EmailPartDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal EmailPartDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(EmailPartDataTable t) {
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.ParentID = (DBIDataColumn)t.Columns["ParentID"];
				  this.EmailRequestID = (DBIDataColumn)t.Columns["EmailRequestID"];
				  this.ContentType = (DBIDataColumn)t.Columns["ContentType"];
				  this.Header = (DBIDataColumn)t.Columns["Header"];
				  this.ContentLength = (DBIDataColumn)t.Columns["ContentLength"];
				  this.Name = (DBIDataColumn)t.Columns["Name"];
				  this.Order = (DBIDataColumn)t.Columns["Order"];
				  this.Content = (DBIDataColumn)t.Columns["Content"];
				}
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn ParentID;
				public readonly DBIDataColumn EmailRequestID;
				public readonly DBIDataColumn ContentType;
				public readonly DBIDataColumn Header;
				public readonly DBIDataColumn ContentLength;
				public readonly DBIDataColumn Name;
				public readonly DBIDataColumn Order;
				public readonly DBIDataColumn Content;
			}
			#endregion
			#region EventHandlers
			#if EmailPartRowChangeEvents
			public event EmailPartRowChangeEventHandler EmailPartRowChanged;
			public event EmailPartRowChangeEventHandler EmailPartRowChanging;
			public event EmailPartRowChangeEventHandler EmailPartRowDeleted;
			public event EmailPartRowChangeEventHandler EmailPartRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.EmailPartRowChanged != null)) {
					this.EmailPartRowChanged(this, new EmailPartRowChangeEvent(((EmailPartRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.EmailPartRowChanging != null)) {
					this.EmailPartRowChanging(this, new EmailPartRowChangeEvent(((EmailPartRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.EmailPartRowDeleted != null)) {
					this.EmailPartRowDeleted(this, new EmailPartRowChangeEvent(((EmailPartRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.EmailPartRowDeleting != null)) {
					 this.EmailPartRowDeleting(this, new EmailPartRowChangeEvent(((EmailPartRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new EmailPartDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public EmailPartRow this[int index] {
				get {
					return ((EmailPartRow)(this.Rows[index]));
				}
			}
			public void AddEmailPartRow(EmailPartRow row) {
				this.Rows.Add(row);
			}
			public EmailPartRow AddNewEmailPartRow() {
				return ((EmailPartRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, dsEmailRequest.Schema.T.EmailPart)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new EmailPartRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(EmailPartRow);
			}
			public void RemoveEmailPartRow(EmailPartRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region EmailPartRow
		[Thinkage.Libraries.Translation.Invariant]
		public class EmailPartRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal EmailPartRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly EmailPartDataTable this_table;
				private readonly EmailPartRow this_row;
				public FAccessor( EmailPartRow this_row )
				{
					this.this_table = ((EmailPartDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.EmailPart.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Guid? ParentID {
					get {
							return (System.Guid?)Schema.T.EmailPart.F.ParentID.EffectiveType.GenericAsNativeType(this_table.F.ParentID[this_row], typeof(System.Guid?));
					}
					set {this_table.F.ParentID[this_row] = value; }
				}

				public System.Guid EmailRequestID {
					get {
							return (System.Guid)Schema.T.EmailPart.F.EmailRequestID.EffectiveType.GenericAsNativeType(this_table.F.EmailRequestID[this_row], typeof(System.Guid));
					}
					set {this_table.F.EmailRequestID[this_row] = value; }
				}

				public System.String ContentType {
					get {
							return (System.String)Schema.T.EmailPart.F.ContentType.EffectiveType.GenericAsNativeType(this_table.F.ContentType[this_row], typeof(System.String));
					}
					set {this_table.F.ContentType[this_row] = value; }
				}

				public System.String Header {
					get {
							return (System.String)Schema.T.EmailPart.F.Header.EffectiveType.GenericAsNativeType(this_table.F.Header[this_row], typeof(System.String));
					}
					set {this_table.F.Header[this_row] = value; }
				}

				public System.Int32 ContentLength {
					get {
							return (System.Int32)Schema.T.EmailPart.F.ContentLength.EffectiveType.GenericAsNativeType(this_table.F.ContentLength[this_row], typeof(System.Int32));
					}
					set {this_table.F.ContentLength[this_row] = value; }
				}

				public System.String Name {
					get {
							return (System.String)Schema.T.EmailPart.F.Name.EffectiveType.GenericAsNativeType(this_table.F.Name[this_row], typeof(System.String));
					}
					set {this_table.F.Name[this_row] = value; }
				}

				public System.Int16 Order {
					get {
							return (System.Int16)Schema.T.EmailPart.F.Order.EffectiveType.GenericAsNativeType(this_table.F.Order[this_row], typeof(System.Int16));
					}
					set {this_table.F.Order[this_row] = value; }
				}

				public System.Byte[] Content {
					get {
							return (System.Byte[])Schema.T.EmailPart.F.Content.EffectiveType.GenericAsNativeType(this_table.F.Content[this_row], typeof(System.Byte[]));
					}
					set {this_table.F.Content[this_row] = value; }
				}
			}
			public EmailPartRow ParentIDParentRow {
				get {
					return ((EmailPartRow)(Path.T.EmailPart.F.ParentID.GetParentRow(this)));
				}
			}

			public EmailRequestRow EmailRequestIDParentRow {
				get {
					return ((EmailRequestRow)(Path.T.EmailPart.F.EmailRequestID.GetParentRow(this)));
				}
			}

			public EmailPartRow[] GetEmailPartParentIDChildRows() {
				return ((EmailPartRow[])(Path.T.EmailPart.F.ParentID.GetChildRows(this)));
			}
		}
		#endregion
		#region EmailPartRowChangeEvent
#if EmailPartRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class EmailPartRowChangeEvent : EventArgs {

			private EmailPartRow eventRow;

			private DataRowAction eventAction;

			public EmailPartRowChangeEvent(EmailPartRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public EmailPartRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#endregion

		#region Custom database schema definitions
		#region - the custom Schema class
		/// <summary>
		/// Singleton class containing the schema of all tables,
		/// columns, and relationships in a database.
		/// </summary>
		[Thinkage.Libraries.Translation.Invariant]
		public class SchemaClass : DBI_Database {
			#region singleton construction
			private SchemaClass() {
				_T = new TAccessor(this);
				vstruct = new VAccessor(this);
				__Request = new DBI_Request();
				Tables.Add( __Request);
				__EmailRequest = new DBI_EmailRequest();
				Tables.Add( __EmailRequest);
				__EmailPart = new DBI_EmailPart();
				Tables.Add( __EmailPart);
				CompleteDBI(System.Reflection.Assembly.GetExecutingAssembly(), "manifest://localhost/Thinkage/MainBoss/Database/Upgrade/Schema/dsEmailMessageToPartsUpgradeStep.xafdb", typeof(dsEmailRequest));
			 }
			/// <summary>
			/// The instantiation of the singleton SchemaClass object
			/// </summary>
			public static readonly SchemaClass Instance = new SchemaClass();
			#endregion
			#region Custom DBI_Table derivations and their private reference in the schema object
			#region - Request table
			private DBI_Request __Request;

			/// <summary>
			/// Class to describe a Request table
			/// </summary>
			public class DBI_Request : DBI_Table {
				public FAccessor F;
				private DBI_Column __Id;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Request this_table;
					public FAccessor( DBI_Request this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Request's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Request()
					: base( "Request",
							delegate(DBI_Table tableSchema, IServer s) {
								return new RequestDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 1, "Table 'Request' column count mismatch");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - EmailRequest table
			private DBI_EmailRequest __EmailRequest;

			/// <summary>
			/// Class to describe a EmailRequest table
			/// </summary>
			public class DBI_EmailRequest : DBI_Table {
				public FAccessor F;
				private DBI_Column __Id;
				private DBI_Column __FromEmailAddress;
				private DBI_Column __RequestorEmailAddress;
				private DBI_Column __RequestorEmailDisplayName;
				private DBI_Column __ProcessingState;
				private DBI_Column __Comment;
				private DBI_Column __ReceiveDate;
				private DBI_Column __MailHeader;
				private DBI_Column __MailMessage;
				private DBI_Column __RequestID;
				private DBI_Column __PreferredLanguage;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_EmailRequest this_table;
					public FAccessor( DBI_EmailRequest this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the EmailRequest's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the EmailRequest's FromEmailAddress column with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) with labelkey='FromEmailAddress'
					/// </summary>
					public DBI_Column FromEmailAddress { get { return this_table.__FromEmailAddress; } }
					/// <summary>
					/// Denotes the EmailRequest's RequestorEmailAddress column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='RequestorEmailAddress'
					/// </summary>
					public DBI_Column RequestorEmailAddress { get { return this_table.__RequestorEmailAddress; } }
					/// <summary>
					/// Denotes the EmailRequest's RequestorEmailDisplayName column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='RequestorEmailDisplayName'
					/// </summary>
					public DBI_Column RequestorEmailDisplayName { get { return this_table.__RequestorEmailDisplayName; } }
					/// <summary>
					/// Denotes the EmailRequest's ProcessingState column with type integer(nonnull, 16) with labelkey='ProcessingState'
					/// </summary>
					public DBI_Column ProcessingState { get { return this_table.__ProcessingState; } }
					/// <summary>
					/// Denotes the EmailRequest's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
					/// </summary>
					public DBI_Column Comment { get { return this_table.__Comment; } }
					/// <summary>
					/// Denotes the EmailRequest's ReceiveDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='ReceiveDate'
					/// </summary>
					public DBI_Column ReceiveDate { get { return this_table.__ReceiveDate; } }
					/// <summary>
					/// Denotes the EmailRequest's MailHeader column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='MailHeader'
					/// </summary>
					public DBI_Column MailHeader { get { return this_table.__MailHeader; } }
					/// <summary>
					/// Denotes the EmailRequest's MailMessage column with type string(nonnull, minlength 1, (maxlength 1,073,741,823), trim) with labelkey='MailMessage'
					/// </summary>
					public DBI_Column MailMessage { get { return this_table.__MailMessage; } }
					/// <summary>
					/// Denotes the EmailRequest's RequestID column with type link(field Request.Id) with labelkey='Request'
					/// </summary>
					public DBI_Column RequestID { get { return this_table.__RequestID; } }
					/// <summary>
					/// Denotes the EmailRequest's PreferredLanguage column with type integer(32) with labelkey='PreferredLanguage'
					/// </summary>
					public DBI_Column PreferredLanguage { get { return this_table.__PreferredLanguage; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_EmailRequest()
					: base( "EmailRequest",
							delegate(DBI_Table tableSchema, IServer s) {
								return new EmailRequestDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 11, "Table 'EmailRequest' column count mismatch");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__FromEmailAddress = Columns["FromEmailAddress"];
					System.Diagnostics.Debug.Assert(__FromEmailAddress != null, "Column 'FromEmailAddress' not found");
					__RequestorEmailAddress = Columns["RequestorEmailAddress"];
					System.Diagnostics.Debug.Assert(__RequestorEmailAddress != null, "Column 'RequestorEmailAddress' not found");
					__RequestorEmailDisplayName = Columns["RequestorEmailDisplayName"];
					System.Diagnostics.Debug.Assert(__RequestorEmailDisplayName != null, "Column 'RequestorEmailDisplayName' not found");
					__ProcessingState = Columns["ProcessingState"];
					System.Diagnostics.Debug.Assert(__ProcessingState != null, "Column 'ProcessingState' not found");
					__Comment = Columns["Comment"];
					System.Diagnostics.Debug.Assert(__Comment != null, "Column 'Comment' not found");
					__ReceiveDate = Columns["ReceiveDate"];
					System.Diagnostics.Debug.Assert(__ReceiveDate != null, "Column 'ReceiveDate' not found");
					__MailHeader = Columns["MailHeader"];
					System.Diagnostics.Debug.Assert(__MailHeader != null, "Column 'MailHeader' not found");
					__MailMessage = Columns["MailMessage"];
					System.Diagnostics.Debug.Assert(__MailMessage != null, "Column 'MailMessage' not found");
					__RequestID = Columns["RequestID"];
					System.Diagnostics.Debug.Assert(__RequestID != null, "Column 'RequestID' not found");
					__PreferredLanguage = Columns["PreferredLanguage"];
					System.Diagnostics.Debug.Assert(__PreferredLanguage != null, "Column 'PreferredLanguage' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - EmailPart table
			private DBI_EmailPart __EmailPart;

			/// <summary>
			/// Class to describe a EmailPart table
			/// </summary>
			public class DBI_EmailPart : DBI_Table {
				public FAccessor F;
				private DBI_Column __Id;
				private DBI_Column __ParentID;
				private DBI_Column __EmailRequestID;
				private DBI_Column __ContentType;
				private DBI_Column __Header;
				private DBI_Column __ContentLength;
				private DBI_Column __Name;
				private DBI_Column __Order;
				private DBI_Column __Content;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_EmailPart this_table;
					public FAccessor( DBI_EmailPart this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the EmailPart's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the EmailPart's ParentID column with type link(field EmailPart.Id) with labelkey='Email Part'
					/// </summary>
					public DBI_Column ParentID { get { return this_table.__ParentID; } }
					/// <summary>
					/// Denotes the EmailPart's EmailRequestID column with type link(nonnull, field EmailRequest.Id) with labelkey='EmailRequest'
					/// </summary>
					public DBI_Column EmailRequestID { get { return this_table.__EmailRequestID; } }
					/// <summary>
					/// Denotes the EmailPart's ContentType column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='ContentType'
					/// </summary>
					public DBI_Column ContentType { get { return this_table.__ContentType; } }
					/// <summary>
					/// Denotes the EmailPart's Header column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Header'
					/// </summary>
					public DBI_Column Header { get { return this_table.__Header; } }
					/// <summary>
					/// Denotes the EmailPart's ContentLength column with type integer(nonnull, unsigned 31) with labelkey='ContentLength'
					/// </summary>
					public DBI_Column ContentLength { get { return this_table.__ContentLength; } }
					/// <summary>
					/// Denotes the EmailPart's Name column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='Name'
					/// </summary>
					public DBI_Column Name { get { return this_table.__Name; } }
					/// <summary>
					/// Denotes the EmailPart's Order column with type integer(nonnull, 16) with labelkey='Order'
					/// </summary>
					public DBI_Column Order { get { return this_table.__Order; } }
					/// <summary>
					/// Denotes the EmailPart's Content column with type blob((maxlength 2,147,483,647)) with labelkey='Content'
					/// </summary>
					public DBI_Column Content { get { return this_table.__Content; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_EmailPart()
					: base( "EmailPart",
							delegate(DBI_Table tableSchema, IServer s) {
								return new EmailPartDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 9, "Table 'EmailPart' column count mismatch");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__ParentID = Columns["ParentID"];
					System.Diagnostics.Debug.Assert(__ParentID != null, "Column 'ParentID' not found");
					__EmailRequestID = Columns["EmailRequestID"];
					System.Diagnostics.Debug.Assert(__EmailRequestID != null, "Column 'EmailRequestID' not found");
					__ContentType = Columns["ContentType"];
					System.Diagnostics.Debug.Assert(__ContentType != null, "Column 'ContentType' not found");
					__Header = Columns["Header"];
					System.Diagnostics.Debug.Assert(__Header != null, "Column 'Header' not found");
					__ContentLength = Columns["ContentLength"];
					System.Diagnostics.Debug.Assert(__ContentLength != null, "Column 'ContentLength' not found");
					__Name = Columns["Name"];
					System.Diagnostics.Debug.Assert(__Name != null, "Column 'Name' not found");
					__Order = Columns["Order"];
					System.Diagnostics.Debug.Assert(__Order != null, "Column 'Order' not found");
					__Content = Columns["Content"];
					System.Diagnostics.Debug.Assert(__Content != null, "Column 'Content' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#endregion
			#region T - the public portal for getting the custom-typed DBI_Table objects for each table
			public struct TAccessor {
				private SchemaClass this_schema;
				public TAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Accessors
				/// <summary>
				/// Denotes the Request table with labelkey='Request'
				/// </summary>
				public DBI_Request Request { get { return this_schema.__Request; }}
				/// <summary>
				/// Denotes the EmailRequest table with labelkey='EmailRequest'
				/// </summary>
				public DBI_EmailRequest EmailRequest { get { return this_schema.__EmailRequest; }}
				/// <summary>
				/// Denotes the EmailPart table with labelkey='EmailPart'
				/// </summary>
				public DBI_EmailPart EmailPart { get { return this_schema.__EmailPart; }}
				#endregion
			}
			public TAccessor T { get { return _T; } }
			private TAccessor _T;
			#endregion
			#region V - the public portal for getting the DBI_Variable objects for Database Variables
			public struct VAccessor {
				private SchemaClass this_schema;
				public VAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Variable Accessors
				#endregion
			}
			public VAccessor V { get { return vstruct; } }	// Variables
			private VAccessor vstruct;
			#endregion
		}
		#endregion
		#region - The static member that contains the Schema
		public readonly static SchemaClass Schema = SchemaClass.Instance;
		#endregion
		#endregion
		#region Database Path definitions
		[Thinkage.Libraries.Translation.Invariant]
		public class PathClass {
			/// <summary>
			/// Class containing the relationship paths of all tables,
			/// </summary>
			public readonly TAccessor T;
			/// <summary>
			/// Private constructor for singleton creation
			/// </summary>
			private PathClass() {
				T = new TAccessor(this);
			}

			/// <summary>
			/// The instantiation of the singleton Path object
			/// </summary>
			public static readonly PathClass Instance = new PathClass();
			#region DBI_Path Definitions

			#region DBI_Path Request
			private PathToRequestRow __pRequest = new PathToRequestRow( SchemaClass.Instance.T.Request );

			/// <summary>
			/// The Request path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToRequestRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _Id;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToRequestRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToRequestRow _BasePath;
					/// <summary>
					/// Provides the path to Request's Id with type id(nonnull) and labelkey='Id'
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Request.F.Id ); return _BasePath._Id; } }
				}

				internal PathToRequestRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToRequestRow( DBI_Table t ) : base( t ) { }
				internal PathToRequestRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToRequestLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToRequestRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToRequestRow PathToReferencedRow { get { return (PathToRequestRow)base.PathToReferencedRow; } }

				internal PathToRequestLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToRequestRow(rootTableSchema, columns);
				}
			}
			public class LinkToRequest {
				public LinkToRequest(DBI_Path referencing_path) {
					Id = new PathToRequestRow(referencing_path.PathThroughLinkage(Schema.T.Request.F.Id));
				}
				public readonly PathToRequestRow Id;
			}
			#endregion

			#region DBI_Path EmailRequest
			private PathToEmailRequestRow __pEmailRequest = new PathToEmailRequestRow( SchemaClass.Instance.T.EmailRequest );

			/// <summary>
			/// The EmailRequest path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToEmailRequestRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _Id;
				private PathToField _FromEmailAddress;
				private PathToField _RequestorEmailAddress;
				private PathToField _RequestorEmailDisplayName;
				private PathToField _ProcessingState;
				private PathToField _Comment;
				private PathToField _ReceiveDate;
				private PathToField _MailHeader;
				private PathToField _MailMessage;
				private PathToRequestLink _RequestID;
				private PathToField _PreferredLanguage;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToEmailRequestRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToEmailRequestRow _BasePath;
					/// <summary>
					/// Provides the path to EmailRequest's Id with type id(nonnull) and labelkey='Id'
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.EmailRequest.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to EmailRequest's FromEmailAddress with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) and labelkey='FromEmailAddress'
					/// </summary>
					public PathToField FromEmailAddress { get { if (_BasePath._FromEmailAddress == null) _BasePath._FromEmailAddress = new PathToField(_BasePath, Schema.T.EmailRequest.F.FromEmailAddress ); return _BasePath._FromEmailAddress; } }
					/// <summary>
					/// Provides the path to EmailRequest's RequestorEmailAddress with type string(minlength 1, maxlength 128, maxlines 0, trim) and labelkey='RequestorEmailAddress'
					/// </summary>
					public PathToField RequestorEmailAddress { get { if (_BasePath._RequestorEmailAddress == null) _BasePath._RequestorEmailAddress = new PathToField(_BasePath, Schema.T.EmailRequest.F.RequestorEmailAddress ); return _BasePath._RequestorEmailAddress; } }
					/// <summary>
					/// Provides the path to EmailRequest's RequestorEmailDisplayName with type string(minlength 1, maxlength 128, maxlines 0, trim) and labelkey='RequestorEmailDisplayName'
					/// </summary>
					public PathToField RequestorEmailDisplayName { get { if (_BasePath._RequestorEmailDisplayName == null) _BasePath._RequestorEmailDisplayName = new PathToField(_BasePath, Schema.T.EmailRequest.F.RequestorEmailDisplayName ); return _BasePath._RequestorEmailDisplayName; } }
					/// <summary>
					/// Provides the path to EmailRequest's ProcessingState with type integer(nonnull, 16) and labelkey='ProcessingState'
					/// </summary>
					public PathToField ProcessingState { get { if (_BasePath._ProcessingState == null) _BasePath._ProcessingState = new PathToField(_BasePath, Schema.T.EmailRequest.F.ProcessingState ); return _BasePath._ProcessingState; } }
					/// <summary>
					/// Provides the path to EmailRequest's Comment with type string(minlength 1, (maxlength 1,073,741,823), trim) and labelkey='Comment'
					/// </summary>
					public PathToField Comment { get { if (_BasePath._Comment == null) _BasePath._Comment = new PathToField(_BasePath, Schema.T.EmailRequest.F.Comment ); return _BasePath._Comment; } }
					/// <summary>
					/// Provides the path to EmailRequest's ReceiveDate with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) and labelkey='ReceiveDate'
					/// </summary>
					public PathToField ReceiveDate { get { if (_BasePath._ReceiveDate == null) _BasePath._ReceiveDate = new PathToField(_BasePath, Schema.T.EmailRequest.F.ReceiveDate ); return _BasePath._ReceiveDate; } }
					/// <summary>
					/// Provides the path to EmailRequest's MailHeader with type string(minlength 1, (maxlength 1,073,741,823), trim) and labelkey='MailHeader'
					/// </summary>
					public PathToField MailHeader { get { if (_BasePath._MailHeader == null) _BasePath._MailHeader = new PathToField(_BasePath, Schema.T.EmailRequest.F.MailHeader ); return _BasePath._MailHeader; } }
					/// <summary>
					/// Provides the path to EmailRequest's MailMessage with type string(nonnull, minlength 1, (maxlength 1,073,741,823), trim) and labelkey='MailMessage'
					/// </summary>
					public PathToField MailMessage { get { if (_BasePath._MailMessage == null) _BasePath._MailMessage = new PathToField(_BasePath, Schema.T.EmailRequest.F.MailMessage ); return _BasePath._MailMessage; } }
					/// <summary>
					/// Provides the path to EmailRequest's RequestID with type link(field Request.Id) and labelkey='Request'
					/// </summary>
					public PathToRequestLink RequestID { get { if (_BasePath._RequestID == null) _BasePath._RequestID = new PathToRequestLink(_BasePath, Schema.T.EmailRequest.F.RequestID ); return _BasePath._RequestID; } }
					/// <summary>
					/// Provides the path to EmailRequest's PreferredLanguage with type integer(32) and labelkey='PreferredLanguage'
					/// </summary>
					public PathToField PreferredLanguage { get { if (_BasePath._PreferredLanguage == null) _BasePath._PreferredLanguage = new PathToField(_BasePath, Schema.T.EmailRequest.F.PreferredLanguage ); return _BasePath._PreferredLanguage; } }
				}

				internal PathToEmailRequestRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToEmailRequestRow( DBI_Table t ) : base( t ) { }
				internal PathToEmailRequestRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToEmailRequestLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToEmailRequestRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToEmailRequestRow PathToReferencedRow { get { return (PathToEmailRequestRow)base.PathToReferencedRow; } }

				internal PathToEmailRequestLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToEmailRequestRow(rootTableSchema, columns);
				}
			}
			public class LinkToEmailRequest {
				public LinkToEmailRequest(DBI_Path referencing_path) {
					Id = new PathToEmailRequestRow(referencing_path.PathThroughLinkage(Schema.T.EmailRequest.F.Id));
				}
				public readonly PathToEmailRequestRow Id;
			}
			#endregion

			#region DBI_Path EmailPart
			private PathToEmailPartRow __pEmailPart = new PathToEmailPartRow( SchemaClass.Instance.T.EmailPart );

			/// <summary>
			/// The EmailPart path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToEmailPartRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _Id;
				private PathToEmailPartLink _ParentID;
				private PathToEmailRequestLink _EmailRequestID;
				private PathToField _ContentType;
				private PathToField _Header;
				private PathToField _ContentLength;
				private PathToField _Name;
				private PathToField _Order;
				private PathToField _Content;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToEmailPartRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToEmailPartRow _BasePath;
					/// <summary>
					/// Provides the path to EmailPart's Id with type id(nonnull) and labelkey='Id'
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.EmailPart.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to EmailPart's ParentID with type link(field EmailPart.Id) and labelkey='Email Part'
					/// </summary>
					public PathToEmailPartLink ParentID { get { if (_BasePath._ParentID == null) _BasePath._ParentID = new PathToEmailPartLink(_BasePath, Schema.T.EmailPart.F.ParentID ); return _BasePath._ParentID; } }
					/// <summary>
					/// Provides the path to EmailPart's EmailRequestID with type link(nonnull, field EmailRequest.Id) and labelkey='EmailRequest'
					/// </summary>
					public PathToEmailRequestLink EmailRequestID { get { if (_BasePath._EmailRequestID == null) _BasePath._EmailRequestID = new PathToEmailRequestLink(_BasePath, Schema.T.EmailPart.F.EmailRequestID ); return _BasePath._EmailRequestID; } }
					/// <summary>
					/// Provides the path to EmailPart's ContentType with type string(minlength 1, maxlength 128, maxlines 0, trim) and labelkey='ContentType'
					/// </summary>
					public PathToField ContentType { get { if (_BasePath._ContentType == null) _BasePath._ContentType = new PathToField(_BasePath, Schema.T.EmailPart.F.ContentType ); return _BasePath._ContentType; } }
					/// <summary>
					/// Provides the path to EmailPart's Header with type string(minlength 1, (maxlength 1,073,741,823), trim) and labelkey='Header'
					/// </summary>
					public PathToField Header { get { if (_BasePath._Header == null) _BasePath._Header = new PathToField(_BasePath, Schema.T.EmailPart.F.Header ); return _BasePath._Header; } }
					/// <summary>
					/// Provides the path to EmailPart's ContentLength with type integer(nonnull, unsigned 31) and labelkey='ContentLength'
					/// </summary>
					public PathToField ContentLength { get { if (_BasePath._ContentLength == null) _BasePath._ContentLength = new PathToField(_BasePath, Schema.T.EmailPart.F.ContentLength ); return _BasePath._ContentLength; } }
					/// <summary>
					/// Provides the path to EmailPart's Name with type string(minlength 1, maxlength 128, maxlines 0, trim) and labelkey='Name'
					/// </summary>
					public PathToField Name { get { if (_BasePath._Name == null) _BasePath._Name = new PathToField(_BasePath, Schema.T.EmailPart.F.Name ); return _BasePath._Name; } }
					/// <summary>
					/// Provides the path to EmailPart's Order with type integer(nonnull, 16) and labelkey='Order'
					/// </summary>
					public PathToField Order { get { if (_BasePath._Order == null) _BasePath._Order = new PathToField(_BasePath, Schema.T.EmailPart.F.Order ); return _BasePath._Order; } }
					/// <summary>
					/// Provides the path to EmailPart's Content with type blob((maxlength 2,147,483,647)) and labelkey='Content'
					/// </summary>
					public PathToField Content { get { if (_BasePath._Content == null) _BasePath._Content = new PathToField(_BasePath, Schema.T.EmailPart.F.Content ); return _BasePath._Content; } }
				}

				internal PathToEmailPartRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToEmailPartRow( DBI_Table t ) : base( t ) { }
				internal PathToEmailPartRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToEmailPartLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToEmailPartRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToEmailPartRow PathToReferencedRow { get { return (PathToEmailPartRow)base.PathToReferencedRow; } }

				internal PathToEmailPartLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToEmailPartRow(rootTableSchema, columns);
				}
			}
			public class LinkToEmailPart {
				public LinkToEmailPart(DBI_Path referencing_path) {
					Id = new PathToEmailPartRow(referencing_path.PathThroughLinkage(Schema.T.EmailPart.F.Id));
				}
				public readonly PathToEmailPartRow Id;
			}
			#endregion
			public class PathToField : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				[System.Obsolete("This field is not a linkage field", true)]
				public new PathToField PathToReferencedRow { get { return null; } }

				internal PathToField( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
			}
			#endregion
			public struct TAccessor {
				private PathClass this_path;
				public TAccessor( PathClass this_path )
				{
					this.this_path = this_path;
				}
				#region Accessors
				/// <summary>
				/// Provides the root path for Request with labelkey='Request'
				/// </summary>
				public PathToRequestRow Request { get { return this_path.__pRequest; } }
				/// <summary>
				/// Provides the root path for EmailRequest with labelkey='EmailRequest'
				/// </summary>
				public PathToEmailRequestRow EmailRequest { get { return this_path.__pEmailRequest; } }
				/// <summary>
				/// Provides the root path for EmailPart with labelkey='EmailPart'
				/// </summary>
				public PathToEmailPartRow EmailPart { get { return this_path.__pEmailPart; } }
				#endregion
			}
			public class LAccessorBase {
				protected LAccessorBase(DBI_Path basePath) {
					BasePath = basePath;
				}
				protected readonly DBI_Path BasePath;
				#region Cached Accessor results
				protected PathClass.LinkToRequest _Request;
				protected PathClass.LinkToEmailRequest _EmailRequest;
				protected PathClass.LinkToEmailPart _EmailPart;
				#endregion
			}
			public class LAccessor : LAccessorBase {
				public LAccessor( DBI_Path this_path ) 
					: base(this_path) {
				}
				#region Accessors
				public PathClass.LinkToRequest Request { get { if (base._Request == null) base._Request = new PathClass.LinkToRequest(base.BasePath); return base._Request; } }
				public PathClass.LinkToEmailRequest EmailRequest { get { if (base._EmailRequest == null) base._EmailRequest = new PathClass.LinkToEmailRequest(base.BasePath); return base._EmailRequest; } }
				public PathClass.LinkToEmailPart EmailPart { get { if (base._EmailPart == null) base._EmailPart = new PathClass.LinkToEmailPart(base.BasePath); return base._EmailPart; } }
				#endregion
			}
		}
		public static readonly PathClass Path = PathClass.Instance;
		#endregion
		#region Label Key Building
		public class LabelKeyBuilder : Thinkage.Libraries.Translation.GeneralKeyBuilder {
			static LabelKeyBuilder Instance = new LabelKeyBuilder();
			private LabelKeyBuilder() {
			}
			protected override Thinkage.Libraries.Translation.ContextReference GetContext() {
				return Thinkage.Libraries.Translation.ContextReference.New("");
			}
			public static Thinkage.Libraries.Translation.Key K([Thinkage.Libraries.Translation.Context("")]string s) {
				return Instance.BuildKey(s);
			}
		}
		#endregion
	}
}
