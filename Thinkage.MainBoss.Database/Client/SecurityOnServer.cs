



//-----------------------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by the XAFBuild tool.
//		Template file DBIGenerationTemplate.xml
//		Vault version 131
//		XAFBuild title: Thinkage.XAFBuild.StudioAddin in Thinkage ToolKit 3.0.3.0
//		Changes to this file will be lost if the code is regenerated.
// #defines
//  <TableName>RowChangedEvents to have row changed events enabled
//	DefineForeignKeyConstraints - for the ForeignKeyConstraints to be enabled
//	DefineUniqueConstraints - for the UniqueConstraints to be enabled
//  SerializationSupport - for the Serialization of the dataset Constructor to be enabled
// </autogenerated>
//-----------------------------------------------------------------------------------------------

namespace Thinkage.MainBoss.Database {
	using System.Linq;
	using System;
	using System.Xml;
	using System.Runtime.Serialization;
	using Thinkage.Libraries.XAF.Database.Layout;
	using Thinkage.Libraries.XAF.Database.Service;
	using Thinkage.Libraries.DBAccess;
	using System.Collections.Generic;

	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2229:ImplementSerializationConstructors"), Serializable()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.ComponentModel.ToolboxItem(true)]
	[Thinkage.Libraries.Translation.Invariant]
	public class dsSecurityOnServer : DBDataSet {

		#region Database Variables VAccessor
		public VAccessor V {
			get {
				if (_V == null)
					_V = new VAccessor(this);
				return _V;
			}
		}
		private VAccessor _V;
		[Thinkage.Libraries.Translation.Invariant]
		public class VAccessor {
			#region Typed Variable Accessors
			#endregion
			#region VAccessor Construction
			public VAccessor(dsSecurityOnServer this_dataset )
			{
			}
			#endregion
		}
		#endregion


		#region Custom DataSet Construction
		internal void CommonCTOR() {
			InitClass();
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			VariablesChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		[Obsolete("Do not call this, it is only here to support DataSet.Clone.", true)]
		public dsSecurityOnServer() : base() {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsSecurityOnServer(DBClient db) : base(Schema, db) {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsSecurityOnServer(IServer server) : base(Schema, server) {
			CommonCTOR();
		}
#if SerializationSupport
		protected dsSecurityOnServer(SerializationInfo info, StreamingContext context) {
			/// ExtendedProperties are not copied in this CTOR if they are not part of the input stream. In particular, any delgate extended properties
			/// we put on datatables may not be copied. If we end up with any delegate extended properties on datatables, then we will need to
			/// amend the code below to propogate the properties itself
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null)) {
				var ds = new System.Data.DataSet();
				ds.ReadXmlSchema(XmlReader.Create(new System.IO.StringReader(strSchema)));
				TODO: Variables need streaming support
				if ((ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer) != null)) {
					this.Tables.Add(new SecurityOnServerDataTable(ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer)));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			}
			else
				this.InitClass();

			this.GetSerializationData(info, context);
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			DataVariables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
#endif
		protected override void InitClass() {
			this.DataSetName = "dsSecurityOnServer";
			this.Prefix = "";
			this.EnforceConstraints = false;
			base.InitClass();
			#region Foreign Key Constraints
			#if DefineForeignKeyConstraints

			#endif
			#endregion

		}
		#endregion

		#region Table Accessor Struct
		public TAccessor T {
			get {
				if (_T == null)
					_T = new TAccessor(this);
				return _T;
			}
		}
		private TAccessor _T;
		public class TAccessor {
			public TAccessor( dsSecurityOnServer this_dataset ) {
				this.SecurityOnServer = (SecurityOnServerDataTable)this_dataset.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer);
			}
			public readonly SecurityOnServerDataTable SecurityOnServer;
		}
		#endregion
		#region Default-table accessor struct
		public DTAccessor DT {
			get {
				if (_DT == null)
					_DT = new DTAccessor(this);
				return _DT;
			}
		}
		private DTAccessor _DT;
		public class DTAccessor {
			public DTAccessor( dsSecurityOnServer this_dataset ) {
			}
		}
		#endregion
		#region DataSet Streaming
		#if SerializationSupport
		protected override bool ShouldSerializeTables() {
			return false;
		}
		protected override bool ShouldSerializeRelations() {
			return false;
		}
		protected override void ReadXmlSerializable(XmlReader reader) {
			this.Reset();
			var ds = new System.Data.DataSet();
			ds.ReadXml(reader);
			TODO: Variables need streaming support
			if ((ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer) != null)) {
				this.Tables.Add(new SecurityOnServerDataTable(ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer)));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(XmlWriter.Create(stream));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(XmlReader.Create(stream), null);
		}
		#endif
		#endregion

		#region Custom-derived DataTable Classes
		#region SecurityOnServerDataTable
		private bool ShouldSerializeSecurityOnServer() {
			return false;
		}
#if SecurityOnServerRowChangeEvents
		public delegate void SecurityOnServerRowChangeEventHandler(object sender, SecurityOnServerRowChangeEvent e);
#endif

		[Thinkage.Libraries.Translation.Invariant]
		public class SecurityOnServerDataTable : DBICustomDataTable<SecurityOnServerRow> {
			#region Construction
			internal SecurityOnServerDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal SecurityOnServerDataTable(System.Data.DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(SecurityOnServerDataTable t) {
				  this.Id = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer.F.Id);
				  this.CredentialAuthenticationMethod = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer.F.CredentialAuthenticationMethod);
				  this.DBUserName = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer.F.DBUserName);
				  this.LoginName = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer.F.LoginName);
				  this.Password = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer.F.Password);
				  this.InMainBossRole = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer.F.InMainBossRole);
				  this.IsSysAdmin = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer.F.IsSysAdmin);
				  this.IsDBO = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer.F.IsDBO);
				  this.IsLoginManager = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer.F.IsLoginManager);
				  this.Enabled = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer.F.Enabled);
				  this.Generation = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.SecurityOnServer.F.Generation);
				}
				/// <summary>
				/// Denotes the SecurityOnServer's Id column with type id(nonnull) with labelkey='Id'
				/// </summary>
				public readonly DBIDataColumn Id;
				/// <summary>
				/// Denotes the SecurityOnServer's CredentialAuthenticationMethod column with type integer(nonnull, unsigned 2) with labelkey='Authentication'
				/// </summary>
				public readonly DBIDataColumn CredentialAuthenticationMethod;
				/// <summary>
				/// Denotes the SecurityOnServer's DBUserName column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='User name'
				/// </summary>
				public readonly DBIDataColumn DBUserName;
				/// <summary>
				/// Denotes the SecurityOnServer's LoginName column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='Login name'
				/// </summary>
				public readonly DBIDataColumn LoginName;
				/// <summary>
				/// Denotes the SecurityOnServer's Password column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='Password'
				/// </summary>
				public readonly DBIDataColumn Password;
				/// <summary>
				/// Denotes the SecurityOnServer's InMainBossRole column with type bool with labelkey='InMainBossRole'
				/// </summary>
				public readonly DBIDataColumn InMainBossRole;
				/// <summary>
				/// Denotes the SecurityOnServer's IsSysAdmin column with type bool with labelkey='IsSysAdmin'
				/// </summary>
				public readonly DBIDataColumn IsSysAdmin;
				/// <summary>
				/// Denotes the SecurityOnServer's IsDBO column with type bool with labelkey='IsDBO'
				/// </summary>
				public readonly DBIDataColumn IsDBO;
				/// <summary>
				/// Denotes the SecurityOnServer's IsLoginManager column with type bool with labelkey='IsLoginManager'
				/// </summary>
				public readonly DBIDataColumn IsLoginManager;
				/// <summary>
				/// Denotes the SecurityOnServer's Enabled column with type bool with labelkey='Enabled'
				/// </summary>
				public readonly DBIDataColumn Enabled;
				/// <summary>
				/// Denotes the SecurityOnServer's Generation column with type integer(nonnull, 32) with labelkey='Generation'
				/// </summary>
				public readonly DBIDataColumn Generation;
			}
			#endregion
			#region EventHandlers
			#if SecurityOnServerRowChangeEvents
			public event SecurityOnServerRowChangeEventHandler SecurityOnServerRowChanged;
			public event SecurityOnServerRowChangeEventHandler SecurityOnServerRowChanging;
			public event SecurityOnServerRowChangeEventHandler SecurityOnServerRowDeleted;
			public event SecurityOnServerRowChangeEventHandler SecurityOnServerRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				this.SecurityOnServerRowChanged?.Invoke(this, new SecurityOnServerRowChangeEvent(((SecurityOnServerRow)(e.Row)), e.Action));
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				this.SecurityOnServerRowChanging?.Invoke(this, new SecurityOnServerRowChangeEvent(((SecurityOnServerRow)(e.Row)), e.Action));
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				this.SecurityOnServerRowDeleted?.Invoke(this, new SecurityOnServerRowChangeEvent(((SecurityOnServerRow)(e.Row)), e.Action));
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				this.SecurityOnServerRowDeleting?.Invoke(this, new SecurityOnServerRowChangeEvent(((SecurityOnServerRow)(e.Row)), e.Action));
			}
			#endif
			#endregion
			protected override DBIDataTable CreateDBIInstance() => new SecurityOnServerDataTable(Schema, Server);
			public SecurityOnServerRow AddNewRow() => (SecurityOnServerRow)DataSet.DB.AddNewRowAndBasesForGeneratedClass(DataSet, dsSecurityOnServer.Schema.T.SecurityOnServer);
			protected override DBIDataRow NewDBIRowFromBuilder(System.Data.DataRowBuilder builder) => new SecurityOnServerRow(builder);
			public new dsSecurityOnServer DataSet => (dsSecurityOnServer)base.DataSet;
		}
		#region SecurityOnServerRow
		[Thinkage.Libraries.Translation.Invariant]
		public class SecurityOnServerRow : DBICustomDataRow<SecurityOnServerDataTable> {
			#region Construction
			internal SecurityOnServerRow(System.Data.DataRowBuilder rb)
				: base(rb) {
			}
			#endregion
			#region Typed Column accessor
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly SecurityOnServerDataTable this_table;
				private readonly SecurityOnServerRow this_row;
				public FAccessor( SecurityOnServerRow this_row )
				{
					this.this_table = ((SecurityOnServerDataTable)(this_row.Table));
					this.this_row = this_row;
				}
				/// <summary>
				/// Denotes the SecurityOnServer's Id column with type id(nonnull) with labelkey='Id'
				/// </summary>
				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.SecurityOnServer.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}
				/// <summary>
				/// Denotes the SecurityOnServer's CredentialAuthenticationMethod column with type integer(nonnull, unsigned 2) with labelkey='Authentication'
				/// </summary>
				public System.SByte CredentialAuthenticationMethod {
					get {
							return (System.SByte)Schema.T.SecurityOnServer.F.CredentialAuthenticationMethod.EffectiveType.GenericAsNativeType(this_table.F.CredentialAuthenticationMethod[this_row], typeof(System.SByte));
					}
					set {this_table.F.CredentialAuthenticationMethod[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SecurityOnServer's DBUserName column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='User name'
				/// </summary>
				public System.String DBUserName {
					get {
							return (System.String)Schema.T.SecurityOnServer.F.DBUserName.EffectiveType.GenericAsNativeType(this_table.F.DBUserName[this_row], typeof(System.String));
					}
					set {this_table.F.DBUserName[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SecurityOnServer's LoginName column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='Login name'
				/// </summary>
				public System.String LoginName {
					get {
							return (System.String)Schema.T.SecurityOnServer.F.LoginName.EffectiveType.GenericAsNativeType(this_table.F.LoginName[this_row], typeof(System.String));
					}
					set {this_table.F.LoginName[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SecurityOnServer's Password column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='Password'
				/// </summary>
				public System.String Password {
					get {
							return (System.String)Schema.T.SecurityOnServer.F.Password.EffectiveType.GenericAsNativeType(this_table.F.Password[this_row], typeof(System.String));
					}
					set {this_table.F.Password[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SecurityOnServer's InMainBossRole column with type bool with labelkey='InMainBossRole'
				/// </summary>
				public System.Boolean? InMainBossRole {
					get {
							return (System.Boolean?)Schema.T.SecurityOnServer.F.InMainBossRole.EffectiveType.GenericAsNativeType(this_table.F.InMainBossRole[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.InMainBossRole[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SecurityOnServer's IsSysAdmin column with type bool with labelkey='IsSysAdmin'
				/// </summary>
				public System.Boolean? IsSysAdmin {
					get {
							return (System.Boolean?)Schema.T.SecurityOnServer.F.IsSysAdmin.EffectiveType.GenericAsNativeType(this_table.F.IsSysAdmin[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.IsSysAdmin[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SecurityOnServer's IsDBO column with type bool with labelkey='IsDBO'
				/// </summary>
				public System.Boolean? IsDBO {
					get {
							return (System.Boolean?)Schema.T.SecurityOnServer.F.IsDBO.EffectiveType.GenericAsNativeType(this_table.F.IsDBO[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.IsDBO[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SecurityOnServer's IsLoginManager column with type bool with labelkey='IsLoginManager'
				/// </summary>
				public System.Boolean? IsLoginManager {
					get {
							return (System.Boolean?)Schema.T.SecurityOnServer.F.IsLoginManager.EffectiveType.GenericAsNativeType(this_table.F.IsLoginManager[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.IsLoginManager[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SecurityOnServer's Enabled column with type bool with labelkey='Enabled'
				/// </summary>
				public System.Boolean? Enabled {
					get {
							return (System.Boolean?)Schema.T.SecurityOnServer.F.Enabled.EffectiveType.GenericAsNativeType(this_table.F.Enabled[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.Enabled[this_row] = value; }
				}
				/// <summary>
				/// Denotes the SecurityOnServer's Generation column with type integer(nonnull, 32) with labelkey='Generation'
				/// </summary>
				public System.Int32 Generation {
					get {
							return (System.Int32)Schema.T.SecurityOnServer.F.Generation.EffectiveType.GenericAsNativeType(this_table.F.Generation[this_row], typeof(System.Int32));
					}
					set {this_table.F.Generation[this_row] = value; }
				}
			}
			#endregion
			#region Referenced-record accessors
			#endregion
			#region Referring-record accessors
			#endregion
		}
		#endregion
		#region SecurityOnServerRowChangeEvent
#if SecurityOnServerRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class SecurityOnServerRowChangeEvent : EventArgs {

			private SecurityOnServerRow eventRow;

			private DataRowAction eventAction;

			public SecurityOnServerRowChangeEvent(SecurityOnServerRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public SecurityOnServerRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#endregion

		#region Custom database schema definitions
		#region - the custom Schema class
		/// <summary>
		/// Singleton class containing the schema of all tables,
		/// columns, and relationships in a database.
		/// </summary>
		[Thinkage.Libraries.Translation.Invariant]
		public class SchemaClass : DBI_Database {
			#region singleton construction
			private SchemaClass() {
				_T = new TAccessor(this);
				vstruct = new VAccessor(this);
				__SecurityOnServer = new DBI_SecurityOnServer();
				Tables.Add( __SecurityOnServer);
				CompleteDBI(System.Reflection.Assembly.GetExecutingAssembly(), "manifest://localhost/Thinkage/MainBoss/Database/Client/SecurityOnServer.xafdb", typeof(dsSecurityOnServer)
				);
			 }
			/// <summary>
			/// The instantiation of the singleton SchemaClass object
			/// </summary>
			public static readonly SchemaClass Instance = new SchemaClass();
			#endregion
			#region Custom DBI_Table derivations and their private reference in the schema object
			#region - SecurityOnServer table
			private DBI_SecurityOnServer __SecurityOnServer;

			/// <summary>
			/// Class to describe a SecurityOnServer table
			/// </summary>
			public class DBI_SecurityOnServer : DBIDataDBI_Table {
				public FAccessor F;
				private DBI_Column __Id;
				private DBI_Column __CredentialAuthenticationMethod;
				private DBI_Column __DBUserName;
				private DBI_Column __LoginName;
				private DBI_Column __Password;
				private DBI_Column __InMainBossRole;
				private DBI_Column __IsSysAdmin;
				private DBI_Column __IsDBO;
				private DBI_Column __IsLoginManager;
				private DBI_Column __Enabled;
				private DBI_Column __Generation;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_SecurityOnServer this_table;
					public FAccessor( DBI_SecurityOnServer this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the SecurityOnServer's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the SecurityOnServer's CredentialAuthenticationMethod column with type integer(nonnull, unsigned 2) with labelkey='Authentication'
					/// </summary>
					public DBI_Column CredentialAuthenticationMethod { get { return this_table.__CredentialAuthenticationMethod; } }
					/// <summary>
					/// Denotes the SecurityOnServer's DBUserName column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='User name'
					/// </summary>
					public DBI_Column DBUserName { get { return this_table.__DBUserName; } }
					/// <summary>
					/// Denotes the SecurityOnServer's LoginName column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='Login name'
					/// </summary>
					public DBI_Column LoginName { get { return this_table.__LoginName; } }
					/// <summary>
					/// Denotes the SecurityOnServer's Password column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='Password'
					/// </summary>
					public DBI_Column Password { get { return this_table.__Password; } }
					/// <summary>
					/// Denotes the SecurityOnServer's InMainBossRole column with type bool with labelkey='InMainBossRole'
					/// </summary>
					public DBI_Column InMainBossRole { get { return this_table.__InMainBossRole; } }
					/// <summary>
					/// Denotes the SecurityOnServer's IsSysAdmin column with type bool with labelkey='IsSysAdmin'
					/// </summary>
					public DBI_Column IsSysAdmin { get { return this_table.__IsSysAdmin; } }
					/// <summary>
					/// Denotes the SecurityOnServer's IsDBO column with type bool with labelkey='IsDBO'
					/// </summary>
					public DBI_Column IsDBO { get { return this_table.__IsDBO; } }
					/// <summary>
					/// Denotes the SecurityOnServer's IsLoginManager column with type bool with labelkey='IsLoginManager'
					/// </summary>
					public DBI_Column IsLoginManager { get { return this_table.__IsLoginManager; } }
					/// <summary>
					/// Denotes the SecurityOnServer's Enabled column with type bool with labelkey='Enabled'
					/// </summary>
					public DBI_Column Enabled { get { return this_table.__Enabled; } }
					/// <summary>
					/// Denotes the SecurityOnServer's Generation column with type integer(nonnull, 32) with labelkey='Generation'
					/// </summary>
					public DBI_Column Generation { get { return this_table.__Generation; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_SecurityOnServer()
					: base("SecurityOnServer", (DBI_Table tableSchema, IServer s) => new SecurityOnServerDataTable(tableSchema, s)) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 11, "Table 'SecurityOnServer' column count mismatch");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CredentialAuthenticationMethod = Columns["CredentialAuthenticationMethod"];
					System.Diagnostics.Debug.Assert(__CredentialAuthenticationMethod != null, "Column 'CredentialAuthenticationMethod' not found");
					__DBUserName = Columns["DBUserName"];
					System.Diagnostics.Debug.Assert(__DBUserName != null, "Column 'DBUserName' not found");
					__LoginName = Columns["LoginName"];
					System.Diagnostics.Debug.Assert(__LoginName != null, "Column 'LoginName' not found");
					__Password = Columns["Password"];
					System.Diagnostics.Debug.Assert(__Password != null, "Column 'Password' not found");
					__InMainBossRole = Columns["InMainBossRole"];
					System.Diagnostics.Debug.Assert(__InMainBossRole != null, "Column 'InMainBossRole' not found");
					__IsSysAdmin = Columns["IsSysAdmin"];
					System.Diagnostics.Debug.Assert(__IsSysAdmin != null, "Column 'IsSysAdmin' not found");
					__IsDBO = Columns["IsDBO"];
					System.Diagnostics.Debug.Assert(__IsDBO != null, "Column 'IsDBO' not found");
					__IsLoginManager = Columns["IsLoginManager"];
					System.Diagnostics.Debug.Assert(__IsLoginManager != null, "Column 'IsLoginManager' not found");
					__Enabled = Columns["Enabled"];
					System.Diagnostics.Debug.Assert(__Enabled != null, "Column 'Enabled' not found");
					__Generation = Columns["Generation"];
					System.Diagnostics.Debug.Assert(__Generation != null, "Column 'Generation' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#endregion
			#region T - the public portal for getting the custom-typed DBI_Table objects for each table
			public struct TAccessor {
				private SchemaClass this_schema;
				public TAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Accessors
				/// <summary>
				/// Denotes the SecurityOnServer table with labelkey='Authentication Credential'
				/// </summary>
				public DBI_SecurityOnServer SecurityOnServer { get { return this_schema.__SecurityOnServer; }}
				#endregion
			}
			public TAccessor T { get { return _T; } }
			private TAccessor _T;
			#endregion
			#region V - the public portal for getting the DBI_Variable objects for Database Variables
			public struct VAccessor {
				private SchemaClass this_schema;
				public VAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Variable Accessors
				#endregion
			}
			public VAccessor V { get { return vstruct; } }	// Variables
			private VAccessor vstruct;
			#endregion
		}
		#endregion
		#region - The static member that contains the Schema
		public readonly static SchemaClass Schema = SchemaClass.Instance;
		// make a member variable in the class for reference in a dynamic type instance of this object
		public readonly SchemaClass SchemaDynamic = Schema;
		#endregion
		#endregion
		#region Database Path definitions
		[Thinkage.Libraries.Translation.Invariant]
		public class PathClass {
			/// <summary>
			/// Class containing the relationship paths of all tables,
			/// </summary>
			public readonly TAccessor T;
			/// <summary>
			/// Private constructor for singleton creation
			/// </summary>
			private PathClass() {
				T = new TAccessor(this);
			}

			/// <summary>
			/// The instantiation of the singleton Path object
			/// </summary>
			public static readonly PathClass Instance = new PathClass();
			#region DBI_Path Definitions

			#region DBI_Path SecurityOnServer
			private PathToSecurityOnServerRow __pSecurityOnServer = new PathToSecurityOnServerRow( SchemaClass.Instance.T.SecurityOnServer );

			/// <summary>
			/// The SecurityOnServer path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSecurityOnServerRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _Id;
				private PathToField _CredentialAuthenticationMethod;
				private PathToField _DBUserName;
				private PathToField _LoginName;
				private PathToField _Password;
				private PathToField _InMainBossRole;
				private PathToField _IsSysAdmin;
				private PathToField _IsDBO;
				private PathToField _IsLoginManager;
				private PathToField _Enabled;
				private PathToField _Generation;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToSecurityOnServerRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToSecurityOnServerRow _BasePath;
					/// <summary>
					/// Provides the path to SecurityOnServer's Id with type id(nonnull) and labelkey='Id'
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.SecurityOnServer.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to SecurityOnServer's CredentialAuthenticationMethod with type integer(nonnull, unsigned 2) and labelkey='Authentication'
					/// </summary>
					public PathToField CredentialAuthenticationMethod { get { if (_BasePath._CredentialAuthenticationMethod == null) _BasePath._CredentialAuthenticationMethod = new PathToField(_BasePath, Schema.T.SecurityOnServer.F.CredentialAuthenticationMethod ); return _BasePath._CredentialAuthenticationMethod; } }
					/// <summary>
					/// Provides the path to SecurityOnServer's DBUserName with type string(minlength 1, maxlength 128, maxlines 0, trim) and labelkey='User name'
					/// </summary>
					public PathToField DBUserName { get { if (_BasePath._DBUserName == null) _BasePath._DBUserName = new PathToField(_BasePath, Schema.T.SecurityOnServer.F.DBUserName ); return _BasePath._DBUserName; } }
					/// <summary>
					/// Provides the path to SecurityOnServer's LoginName with type string(minlength 1, maxlength 128, maxlines 0, trim) and labelkey='Login name'
					/// </summary>
					public PathToField LoginName { get { if (_BasePath._LoginName == null) _BasePath._LoginName = new PathToField(_BasePath, Schema.T.SecurityOnServer.F.LoginName ); return _BasePath._LoginName; } }
					/// <summary>
					/// Provides the path to SecurityOnServer's Password with type string(minlength 1, maxlength 128, maxlines 0, trim) and labelkey='Password'
					/// </summary>
					public PathToField Password { get { if (_BasePath._Password == null) _BasePath._Password = new PathToField(_BasePath, Schema.T.SecurityOnServer.F.Password ); return _BasePath._Password; } }
					/// <summary>
					/// Provides the path to SecurityOnServer's InMainBossRole with type bool and labelkey='InMainBossRole'
					/// </summary>
					public PathToField InMainBossRole { get { if (_BasePath._InMainBossRole == null) _BasePath._InMainBossRole = new PathToField(_BasePath, Schema.T.SecurityOnServer.F.InMainBossRole ); return _BasePath._InMainBossRole; } }
					/// <summary>
					/// Provides the path to SecurityOnServer's IsSysAdmin with type bool and labelkey='IsSysAdmin'
					/// </summary>
					public PathToField IsSysAdmin { get { if (_BasePath._IsSysAdmin == null) _BasePath._IsSysAdmin = new PathToField(_BasePath, Schema.T.SecurityOnServer.F.IsSysAdmin ); return _BasePath._IsSysAdmin; } }
					/// <summary>
					/// Provides the path to SecurityOnServer's IsDBO with type bool and labelkey='IsDBO'
					/// </summary>
					public PathToField IsDBO { get { if (_BasePath._IsDBO == null) _BasePath._IsDBO = new PathToField(_BasePath, Schema.T.SecurityOnServer.F.IsDBO ); return _BasePath._IsDBO; } }
					/// <summary>
					/// Provides the path to SecurityOnServer's IsLoginManager with type bool and labelkey='IsLoginManager'
					/// </summary>
					public PathToField IsLoginManager { get { if (_BasePath._IsLoginManager == null) _BasePath._IsLoginManager = new PathToField(_BasePath, Schema.T.SecurityOnServer.F.IsLoginManager ); return _BasePath._IsLoginManager; } }
					/// <summary>
					/// Provides the path to SecurityOnServer's Enabled with type bool and labelkey='Enabled'
					/// </summary>
					public PathToField Enabled { get { if (_BasePath._Enabled == null) _BasePath._Enabled = new PathToField(_BasePath, Schema.T.SecurityOnServer.F.Enabled ); return _BasePath._Enabled; } }
					/// <summary>
					/// Provides the path to SecurityOnServer's Generation with type integer(nonnull, 32) and labelkey='Generation'
					/// </summary>
					public PathToField Generation { get { if (_BasePath._Generation == null) _BasePath._Generation = new PathToField(_BasePath, Schema.T.SecurityOnServer.F.Generation ); return _BasePath._Generation; } }
				}

				internal PathToSecurityOnServerRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToSecurityOnServerRow( DBI_Table t ) : base( t ) { }
				internal PathToSecurityOnServerRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSecurityOnServerLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToSecurityOnServerRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToSecurityOnServerRow PathToReferencedRow { get { return (PathToSecurityOnServerRow)base.PathToReferencedRow; } }

				internal PathToSecurityOnServerLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToSecurityOnServerRow(rootTableSchema, columns);
				}
			}
			public class LinkToSecurityOnServer {
				public LinkToSecurityOnServer(DBI_Path referencing_path) {
					Id = new PathToSecurityOnServerRow(referencing_path.PathThroughLinkage(Schema.T.SecurityOnServer.F.Id));
				}
				public readonly PathToSecurityOnServerRow Id;
			}
			#endregion
			public class PathToField : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				[System.Obsolete("This field is not a linkage field", true)]
				public new PathToField PathToReferencedRow { get { return null; } }

				internal PathToField( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
			}
			#endregion
			public struct TAccessor {
				private PathClass this_path;
				public TAccessor( PathClass this_path )
				{
					this.this_path = this_path;
				}
				#region Accessors
				/// <summary>
				/// Provides the root path for SecurityOnServer with labelkey='Authentication Credential'
				/// </summary>
				public PathToSecurityOnServerRow SecurityOnServer { get { return this_path.__pSecurityOnServer; } }
				#endregion
			}
			public class LAccessorBase {
				protected LAccessorBase(DBI_Path basePath) {
					BasePath = basePath;
				}
				protected readonly DBI_Path BasePath;
				#region Cached Accessor results
				protected PathClass.LinkToSecurityOnServer _SecurityOnServer;
				#endregion
			}
			public class LAccessor : LAccessorBase {
				public LAccessor( DBI_Path this_path ) 
					: base(this_path) {
				}
				#region Accessors
				public PathClass.LinkToSecurityOnServer SecurityOnServer { get { if (base._SecurityOnServer == null) base._SecurityOnServer = new PathClass.LinkToSecurityOnServer(base.BasePath); return base._SecurityOnServer; } }
				#endregion
			}
		}
		public static readonly PathClass Path = PathClass.Instance;
		#endregion
		#region Label Key Building
		public class LabelKeyBuilder : Thinkage.Libraries.Translation.GeneralKeyBuilder {
			static LabelKeyBuilder Instance = new LabelKeyBuilder();
			private LabelKeyBuilder() {
			}
			protected override Thinkage.Libraries.Translation.ContextReference GetContext() {
				return Thinkage.Libraries.Translation.ContextReference.New("dsSecurityOnServerLabel");
			}
			public static Thinkage.Libraries.Translation.Key K([Thinkage.Libraries.Translation.Context("dsSecurityOnServerLabel")]string s) {
				return Instance.BuildKey(s);
			}
		}
		#endregion
	}
	#region LabelKeys
	#if DEFINELABELKEYS
	internal static class dsSecurityOnServerDefineKeysFordsSecurityOnServerLabel {
		static private Thinkage.Libraries.Translation.Key SecurityOnServer = dsSecurityOnServer.LabelKeyBuilder.K("Authentication Credential");
		static private Thinkage.Libraries.Translation.Key SecurityOnServer_Id = dsSecurityOnServer.LabelKeyBuilder.K("Id");
		static private Thinkage.Libraries.Translation.Key SecurityOnServer_CredentialAuthenticationMethod = dsSecurityOnServer.LabelKeyBuilder.K("Authentication");
		static private Thinkage.Libraries.Translation.Key SecurityOnServer_DBUserName = dsSecurityOnServer.LabelKeyBuilder.K("User name");
		static private Thinkage.Libraries.Translation.Key SecurityOnServer_LoginName = dsSecurityOnServer.LabelKeyBuilder.K("Login name");
		static private Thinkage.Libraries.Translation.Key SecurityOnServer_Password = dsSecurityOnServer.LabelKeyBuilder.K("Password");
		static private Thinkage.Libraries.Translation.Key SecurityOnServer_InMainBossRole = dsSecurityOnServer.LabelKeyBuilder.K("InMainBossRole");
		static private Thinkage.Libraries.Translation.Key SecurityOnServer_IsSysAdmin = dsSecurityOnServer.LabelKeyBuilder.K("IsSysAdmin");
		static private Thinkage.Libraries.Translation.Key SecurityOnServer_IsDBO = dsSecurityOnServer.LabelKeyBuilder.K("IsDBO");
		static private Thinkage.Libraries.Translation.Key SecurityOnServer_IsLoginManager = dsSecurityOnServer.LabelKeyBuilder.K("IsLoginManager");
		static private Thinkage.Libraries.Translation.Key SecurityOnServer_Enabled = dsSecurityOnServer.LabelKeyBuilder.K("Enabled");
		static private Thinkage.Libraries.Translation.Key SecurityOnServer_Generation = dsSecurityOnServer.LabelKeyBuilder.K("Generation");
	}
	#endif
	#endregion
}
