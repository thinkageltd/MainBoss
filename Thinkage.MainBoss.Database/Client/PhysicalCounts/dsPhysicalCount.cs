



//-----------------------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by the XAFBuild tool.
//		Template file DBIGenerationTemplate.xml
//		Vault version 119
//		XAFBuild title: Thinkage.XAFBuild.StudioAddin in Thinkage ToolKit 3.0.3.0
//		Changes to this file will be lost if the code is regenerated.
// #defines
//  <TableName>RowChangedEvents to have row changed events enabled
//	DefineForeignKeyConstraints - for the ForeignKeyConstraints to be enabled
//	DefineUniqueConstraints - for the UniqueConstraints to be enabled
//  SerializationSupport - for the Serialization of the dataset Constructor to be enabled
// </autogenerated>
//-----------------------------------------------------------------------------------------------

namespace Thinkage.MainBoss.Database {
	using System.Linq;
	using System;
	using System.Data;
	using System.Xml;
	using System.Runtime.Serialization;
	using Thinkage.Libraries.XAF.Database.Layout;
	using Thinkage.Libraries.XAF.Database.Service;
	using Thinkage.Libraries.DBAccess;
	using System.Collections.Generic;

	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2229:ImplementSerializationConstructors"), Serializable()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.ComponentModel.ToolboxItem(true)]
	[Thinkage.Libraries.Translation.Invariant]
	public class dsPhysicalCount : DBDataSet {

		#region Database Variables VAccessor
		public VAccessor V {
			get {
				if (_V == null)
					_V = new VAccessor(this);
				return _V;
			}
		}
		private VAccessor _V;
		[Thinkage.Libraries.Translation.Invariant]
		public class VAccessor {
			#region Typed Variable Accessors
			#endregion
			#region VAccessor Construction
			public VAccessor(dsPhysicalCount this_dataset )
			{
			}
			#endregion
		}
		#endregion


		#region DataSet Construction

		internal void CommonCTOR() {
			InitClass();
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			VariablesChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		[Obsolete("Do not call this, it is only here to support DataSet.Clone.", true)]
		public dsPhysicalCount() : base() {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsPhysicalCount(DBClient db) : base(Schema, db) {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsPhysicalCount(IServer server) : base(Schema, server) {
			CommonCTOR();
		}
#if SerializationSupport
		protected dsPhysicalCount(SerializationInfo info, StreamingContext context) {
			/// ExtendedProperties are not copied in this CTOR if they are not part of the input stream. In particular, any delgate extended properties
			/// we put on datatables may not be copied. If we end up with any delegate extended properties on datatables, then we will need to
			/// amend the code below to propogate the properties itself
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null)) {
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(XmlReader.Create(new System.IO.StringReader(strSchema)));
				if (ds.Tables["__Variables"] != null)
					this.Tables.Add( new DataVariable.__VariablesDataTable(ds.Tables["__Variables"]));
				if ((ds.Tables["PhysicalCount"] != null)) {
					this.Tables.Add(new PhysicalCountDataTable(ds.Tables["PhysicalCount"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			}
			else
				this.InitClass();

			this.GetSerializationData(info, context);
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			DataVariables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
#endif
		protected override void InitClass() {
			this.DataSetName = "dsPhysicalCount";
			this.Prefix = "";
			this.EnforceConstraints = false;
			base.InitClass();
			#region Foreign Key Constraints
			#if DefineForeignKeyConstraints

			#endif
			#endregion

		}
		#endregion

		#region Table Accessor Struct
		public TAccessor T {
			get {
				if (_T == null)
					_T = new TAccessor(this);
				return _T;
			}
		}
		private TAccessor _T;
		public class TAccessor {
			public TAccessor( dsPhysicalCount this_dataset ) {
				this.PhysicalCount = (PhysicalCountDataTable)this_dataset.Tables["PhysicalCount"];
			}
			public readonly PhysicalCountDataTable PhysicalCount;
		}
		#endregion
		#region Default-table accessor struct
		public DTAccessor DT {
			get {
				if (_DT == null)
					_DT = new DTAccessor(this);
				return _DT;
			}
		}
		private DTAccessor _DT;
		public class DTAccessor {
			public DTAccessor( dsPhysicalCount this_dataset ) {
				this.PhysicalCount = (PhysicalCountDataTable)this_dataset.Tables["_DPhysicalCount"];
			}
			public readonly PhysicalCountDataTable PhysicalCount;
		}
		#endregion
		#region DataSet Streaming
		#if SerializationSupport
		protected override bool ShouldSerializeTables() {
			return false;
		}
		protected override bool ShouldSerializeRelations() {
			return false;
		}
		protected override void ReadXmlSerializable(XmlReader reader) {
			this.Reset();
			DataSet ds = new DataSet();
			ds.ReadXml(reader);
			if ((ds.Tables["__Variables"] != null))
				this.Tables.Add( new DataVariable.__VariablesDataTable(ds.Tables["__Variables"]));
			if ((ds.Tables["PhysicalCount"] != null)) {
				this.Tables.Add(new PhysicalCountDataTable(ds.Tables["PhysicalCount"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(XmlWriter.Create(stream));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(XmlReader.Create(stream), null);
		}
		#endif
		#endregion

		#region DataTable Classes
		#region PhysicalCount
		private bool ShouldSerializePhysicalCount() {
			return false;
		}
#if PhysicalCountRowChangeEvents
		public delegate void PhysicalCountRowChangeEventHandler(object sender, PhysicalCountRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class PhysicalCountDataTable : DBIDataTable {
			#region Construction
			internal PhysicalCountDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal PhysicalCountDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(PhysicalCountDataTable t) {
				  this.ID = (DBIDataColumn)t.Columns["ID"];
				  this.StoreroomAssignmentID = (DBIDataColumn)t.Columns["StoreroomAssignmentID"];
				  this.Quantity = (DBIDataColumn)t.Columns["Quantity"];
				  this.Cost = (DBIDataColumn)t.Columns["Cost"];
				}
				/// <summary>
				/// Denotes the PhysicalCount's ID column with type id(nonnull) with labelkey='ID'
				/// </summary>
				public readonly DBIDataColumn ID;
				/// <summary>
				/// Denotes the PhysicalCount's StoreroomAssignmentID column with type null(nonnull) with labelkey='StoreroomAssignmentID'
				/// </summary>
				public readonly DBIDataColumn StoreroomAssignmentID;
				/// <summary>
				/// Denotes the PhysicalCount's Quantity column with type integer(32) with labelkey='Quantity'
				/// </summary>
				public readonly DBIDataColumn Quantity;
				/// <summary>
				/// Denotes the PhysicalCount's Cost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
				/// </summary>
				public readonly DBIDataColumn Cost;
			}
			#endregion
			#region EventHandlers
			#if PhysicalCountRowChangeEvents
			public event PhysicalCountRowChangeEventHandler PhysicalCountRowChanged;
			public event PhysicalCountRowChangeEventHandler PhysicalCountRowChanging;
			public event PhysicalCountRowChangeEventHandler PhysicalCountRowDeleted;
			public event PhysicalCountRowChangeEventHandler PhysicalCountRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				this.PhysicalCountRowChanged?.Invoke(this, new PhysicalCountRowChangeEvent(((PhysicalCountRow)(e.Row)), e.Action));
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				this.PhysicalCountRowChanging?.Invoke(this, new PhysicalCountRowChangeEvent(((PhysicalCountRow)(e.Row)), e.Action));
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				this.PhysicalCountRowDeleted?.Invoke(this, new PhysicalCountRowChangeEvent(((PhysicalCountRow)(e.Row)), e.Action));
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				this.PhysicalCountRowDeleting?.Invoke(this, new PhysicalCountRowChangeEvent(((PhysicalCountRow)(e.Row)), e.Action));
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new PhysicalCountDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public PhysicalCountRow this[int index] {
				get {
					return ((PhysicalCountRow)(this.Rows[index]));
				}
			}
			public void AddPhysicalCountRow(PhysicalCountRow row) {
				this.Rows.Add(row);
			}
			public PhysicalCountRow AddNewPhysicalCountRow() {
				return ((PhysicalCountRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, dsPhysicalCount.Schema.T.PhysicalCount)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new PhysicalCountRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(PhysicalCountRow);
			}
			public void RemovePhysicalCountRow(PhysicalCountRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region PhysicalCountRow
		[Thinkage.Libraries.Translation.Invariant]
		public class PhysicalCountRow : DBIDataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal PhysicalCountRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly PhysicalCountDataTable this_table;
				private readonly PhysicalCountRow this_row;
				public FAccessor( PhysicalCountRow this_row )
				{
					this.this_table = ((PhysicalCountDataTable)(this_row.Table));
					this.this_row = this_row;
				}
				/// <summary>
				/// Denotes the PhysicalCount's ID column with type id(nonnull) with labelkey='ID'
				/// </summary>
				public System.Guid ID {
					get {
							return (System.Guid)Schema.T.PhysicalCount.F.ID.EffectiveType.GenericAsNativeType(this_table.F.ID[this_row], typeof(System.Guid));
					}
				}
				/// <summary>
				/// Denotes the PhysicalCount's StoreroomAssignmentID column with type null(nonnull) with labelkey='StoreroomAssignmentID'
				/// </summary>
				public System.Object StoreroomAssignmentID {
					get {
							return (System.Object)Schema.T.PhysicalCount.F.StoreroomAssignmentID.EffectiveType.GenericAsNativeType(this_table.F.StoreroomAssignmentID[this_row], typeof(System.Object));
					}
				}
				/// <summary>
				/// Denotes the PhysicalCount's Quantity column with type integer(32) with labelkey='Quantity'
				/// </summary>
				public System.Int32? Quantity {
					get {
							return (System.Int32?)Schema.T.PhysicalCount.F.Quantity.EffectiveType.GenericAsNativeType(this_table.F.Quantity[this_row], typeof(System.Int32?));
					}
					set {this_table.F.Quantity[this_row] = value; }
				}
				/// <summary>
				/// Denotes the PhysicalCount's Cost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
				/// </summary>
				public System.Decimal? Cost {
					get {
							return (System.Decimal?)Schema.T.PhysicalCount.F.Cost.EffectiveType.GenericAsNativeType(this_table.F.Cost[this_row], typeof(System.Decimal?));
					}
					set {this_table.F.Cost[this_row] = value; }
				}
			}
		}
		#endregion
		#region PhysicalCountRowChangeEvent
#if PhysicalCountRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class PhysicalCountRowChangeEvent : EventArgs {

			private PhysicalCountRow eventRow;

			private DataRowAction eventAction;

			public PhysicalCountRowChangeEvent(PhysicalCountRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public PhysicalCountRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#endregion

		#region Custom database schema definitions
		#region - the custom Schema class
		/// <summary>
		/// Singleton class containing the schema of all tables,
		/// columns, and relationships in a database.
		/// </summary>
		[Thinkage.Libraries.Translation.Invariant]
		public class SchemaClass : DBI_Database {
			#region singleton construction
			private SchemaClass() {
				_T = new TAccessor(this);
				vstruct = new VAccessor(this);
				__PhysicalCount = new DBI_PhysicalCount();
				Tables.Add( __PhysicalCount);
				CompleteDBI(System.Reflection.Assembly.GetExecutingAssembly(), "manifest://localhost/Thinkage/MainBoss/Database/Client/PhysicalCounts/dsPhysicalCount.xafdb", typeof(dsPhysicalCount)
				);
			 }
			/// <summary>
			/// The instantiation of the singleton SchemaClass object
			/// </summary>
			public static readonly SchemaClass Instance = new SchemaClass();
			#endregion
			#region Custom DBI_Table derivations and their private reference in the schema object
			#region - PhysicalCount table
			private DBI_PhysicalCount __PhysicalCount;

			/// <summary>
			/// Class to describe a PhysicalCount table
			/// </summary>
			public class DBI_PhysicalCount : DBIDataDBI_Table {
				public FAccessor F;
				private DBI_Column __ID;
				private DBI_Column __StoreroomAssignmentID;
				private DBI_Column __Quantity;
				private DBI_Column __Cost;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_PhysicalCount this_table;
					public FAccessor( DBI_PhysicalCount this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the PhysicalCount's ID column with type id(nonnull) with labelkey='ID'
					/// </summary>
					public DBI_Column ID { get { return this_table.__ID; } }
					/// <summary>
					/// Denotes the PhysicalCount's StoreroomAssignmentID column with type null(nonnull) with labelkey='StoreroomAssignmentID'
					/// </summary>
					public DBI_Column StoreroomAssignmentID { get { return this_table.__StoreroomAssignmentID; } }
					/// <summary>
					/// Denotes the PhysicalCount's Quantity column with type integer(32) with labelkey='Quantity'
					/// </summary>
					public DBI_Column Quantity { get { return this_table.__Quantity; } }
					/// <summary>
					/// Denotes the PhysicalCount's Cost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
					/// </summary>
					public DBI_Column Cost { get { return this_table.__Cost; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_PhysicalCount()
					: base("PhysicalCount", (DBI_Table tableSchema, IServer s) => new PhysicalCountDataTable(tableSchema, s)) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'PhysicalCount' column count mismatch");
					__ID = Columns["ID"];
					System.Diagnostics.Debug.Assert(__ID != null, "Column 'ID' not found");
					__StoreroomAssignmentID = Columns["StoreroomAssignmentID"];
					System.Diagnostics.Debug.Assert(__StoreroomAssignmentID != null, "Column 'StoreroomAssignmentID' not found");
					__Quantity = Columns["Quantity"];
					System.Diagnostics.Debug.Assert(__Quantity != null, "Column 'Quantity' not found");
					__Cost = Columns["Cost"];
					System.Diagnostics.Debug.Assert(__Cost != null, "Column 'Cost' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#endregion
			#region T - the public portal for getting the custom-typed DBI_Table objects for each table
			public struct TAccessor {
				private SchemaClass this_schema;
				public TAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Accessors
				/// <summary>
				/// Denotes the PhysicalCount table with labelkey='PhysicalCount'
				/// </summary>
				public DBI_PhysicalCount PhysicalCount { get { return this_schema.__PhysicalCount; }}
				#endregion
			}
			public TAccessor T { get { return _T; } }
			private TAccessor _T;
			#endregion
			#region V - the public portal for getting the DBI_Variable objects for Database Variables
			public struct VAccessor {
				private SchemaClass this_schema;
				public VAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Variable Accessors
				#endregion
			}
			public VAccessor V { get { return vstruct; } }	// Variables
			private VAccessor vstruct;
			#endregion
		}
		#endregion
		#region - The static member that contains the Schema
		public readonly static SchemaClass Schema = SchemaClass.Instance;
		// make a member variable in the class for reference in a dynamic type instance of this object
		public readonly SchemaClass SchemaDynamic = Schema;
		#endregion
		#endregion
		#region Database Path definitions
		[Thinkage.Libraries.Translation.Invariant]
		public class PathClass {
			/// <summary>
			/// Class containing the relationship paths of all tables,
			/// </summary>
			public readonly TAccessor T;
			/// <summary>
			/// Private constructor for singleton creation
			/// </summary>
			private PathClass() {
				T = new TAccessor(this);
			}

			/// <summary>
			/// The instantiation of the singleton Path object
			/// </summary>
			public static readonly PathClass Instance = new PathClass();
			#region DBI_Path Definitions

			#region DBI_Path PhysicalCount
			private PathToPhysicalCountRow __pPhysicalCount = new PathToPhysicalCountRow( SchemaClass.Instance.T.PhysicalCount );

			/// <summary>
			/// The PhysicalCount path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPhysicalCountRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _ID;
				private PathToField _StoreroomAssignmentID;
				private PathToField _Quantity;
				private PathToField _Cost;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToPhysicalCountRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToPhysicalCountRow _BasePath;
					/// <summary>
					/// Provides the path to PhysicalCount's ID with type id(nonnull) and labelkey='ID'
					/// </summary>
					public PathToField ID { get { if (_BasePath._ID == null) _BasePath._ID = new PathToField(_BasePath, Schema.T.PhysicalCount.F.ID ); return _BasePath._ID; } }
					/// <summary>
					/// Provides the path to PhysicalCount's StoreroomAssignmentID with type null(nonnull) and labelkey='StoreroomAssignmentID'
					/// </summary>
					public PathToField StoreroomAssignmentID { get { if (_BasePath._StoreroomAssignmentID == null) _BasePath._StoreroomAssignmentID = new PathToField(_BasePath, Schema.T.PhysicalCount.F.StoreroomAssignmentID ); return _BasePath._StoreroomAssignmentID; } }
					/// <summary>
					/// Provides the path to PhysicalCount's Quantity with type integer(32) and labelkey='Quantity'
					/// </summary>
					public PathToField Quantity { get { if (_BasePath._Quantity == null) _BasePath._Quantity = new PathToField(_BasePath, Schema.T.PhysicalCount.F.Quantity ); return _BasePath._Quantity; } }
					/// <summary>
					/// Provides the path to PhysicalCount's Cost with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) and labelkey='Cost'
					/// </summary>
					public PathToField Cost { get { if (_BasePath._Cost == null) _BasePath._Cost = new PathToField(_BasePath, Schema.T.PhysicalCount.F.Cost ); return _BasePath._Cost; } }
				}

				internal PathToPhysicalCountRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToPhysicalCountRow( DBI_Table t ) : base( t ) { }
				internal PathToPhysicalCountRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPhysicalCountLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToPhysicalCountRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToPhysicalCountRow PathToReferencedRow { get { return (PathToPhysicalCountRow)base.PathToReferencedRow; } }

				internal PathToPhysicalCountLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToPhysicalCountRow(rootTableSchema, columns);
				}
			}
			public class LinkToPhysicalCount {
				public LinkToPhysicalCount(DBI_Path referencing_path) {
					ID = new PathToPhysicalCountRow(referencing_path.PathThroughLinkage(Schema.T.PhysicalCount.F.ID));
				}
				public readonly PathToPhysicalCountRow ID;
			}
			#endregion
			public class PathToField : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				[System.Obsolete("This field is not a linkage field", true)]
				public new PathToField PathToReferencedRow { get { return null; } }

				internal PathToField( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
			}
			#endregion
			public struct TAccessor {
				private PathClass this_path;
				public TAccessor( PathClass this_path )
				{
					this.this_path = this_path;
				}
				#region Accessors
				/// <summary>
				/// Provides the root path for PhysicalCount with labelkey='PhysicalCount'
				/// </summary>
				public PathToPhysicalCountRow PhysicalCount { get { return this_path.__pPhysicalCount; } }
				#endregion
			}
			public class LAccessorBase {
				protected LAccessorBase(DBI_Path basePath) {
					BasePath = basePath;
				}
				protected readonly DBI_Path BasePath;
				#region Cached Accessor results
				protected PathClass.LinkToPhysicalCount _PhysicalCount;
				#endregion
			}
			public class LAccessor : LAccessorBase {
				public LAccessor( DBI_Path this_path ) 
					: base(this_path) {
				}
				#region Accessors
				public PathClass.LinkToPhysicalCount PhysicalCount { get { if (base._PhysicalCount == null) base._PhysicalCount = new PathClass.LinkToPhysicalCount(base.BasePath); return base._PhysicalCount; } }
				#endregion
			}
		}
		public static readonly PathClass Path = PathClass.Instance;
		#endregion
		#region Label Key Building
		public class LabelKeyBuilder : Thinkage.Libraries.Translation.GeneralKeyBuilder {
			static LabelKeyBuilder Instance = new LabelKeyBuilder();
			private LabelKeyBuilder() {
			}
			protected override Thinkage.Libraries.Translation.ContextReference GetContext() {
				return Thinkage.Libraries.Translation.ContextReference.New("");
			}
			public static Thinkage.Libraries.Translation.Key K([Thinkage.Libraries.Translation.Context("")]string s) {
				return Instance.BuildKey(s);
			}
		}
		#endregion
	}
}
