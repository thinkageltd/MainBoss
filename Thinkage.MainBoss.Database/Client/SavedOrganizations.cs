



//-----------------------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by the XAFBuild tool.
//		Template file DBIGenerationTemplate.xml
//		Vault version 131
//		XAFBuild title: Thinkage.XAFBuild.StudioAddin in Thinkage ToolKit 3.0.3.0
//		Changes to this file will be lost if the code is regenerated.
// #defines
//  <TableName>RowChangedEvents to have row changed events enabled
//	DefineForeignKeyConstraints - for the ForeignKeyConstraints to be enabled
//	DefineUniqueConstraints - for the UniqueConstraints to be enabled
//  SerializationSupport - for the Serialization of the dataset Constructor to be enabled
// </autogenerated>
//-----------------------------------------------------------------------------------------------

namespace Thinkage.MainBoss.Database {
	using System.Linq;
	using System;
	using System.Xml;
	using System.Runtime.Serialization;
	using Thinkage.Libraries.XAF.Database.Layout;
	using Thinkage.Libraries.XAF.Database.Service;
	using Thinkage.Libraries.DBAccess;
	using System.Collections.Generic;

	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2229:ImplementSerializationConstructors"), Serializable()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.ComponentModel.ToolboxItem(true)]
	[Thinkage.Libraries.Translation.Invariant]
	public class dsSavedOrganizations : DBDataSet {

		#region Database Variables VAccessor
		public VAccessor V {
			get {
				if (_V == null)
					_V = new VAccessor(this);
				return _V;
			}
		}
		private VAccessor _V;
		[Thinkage.Libraries.Translation.Invariant]
		public class VAccessor {
			#region Typed Variable Accessors
			public readonly DBIVariable DBVersion;
			public readonly DBIVariable PreferredOrganization;
			public readonly DBIVariable PreferredOrganizationDebug;
			public readonly DBIVariable SoloOrganization;
			#endregion
			#region VAccessor Construction
			public VAccessor(dsSavedOrganizations this_dataset )
			{
				this.DBVersion = this_dataset[Schema.V.DBVersion];
				this.PreferredOrganization = this_dataset[Schema.V.PreferredOrganization];
				this.PreferredOrganizationDebug = this_dataset[Schema.V.PreferredOrganizationDebug];
				this.SoloOrganization = this_dataset[Schema.V.SoloOrganization];
			}
			#endregion
		}
		#endregion


		#region Custom DataSet Construction
		internal void CommonCTOR() {
			InitClass();
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			VariablesChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		[Obsolete("Do not call this, it is only here to support DataSet.Clone.", true)]
		public dsSavedOrganizations() : base() {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsSavedOrganizations(DBClient db) : base(Schema, db) {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsSavedOrganizations(IServer server) : base(Schema, server) {
			CommonCTOR();
		}
#if SerializationSupport
		protected dsSavedOrganizations(SerializationInfo info, StreamingContext context) {
			/// ExtendedProperties are not copied in this CTOR if they are not part of the input stream. In particular, any delgate extended properties
			/// we put on datatables may not be copied. If we end up with any delegate extended properties on datatables, then we will need to
			/// amend the code below to propogate the properties itself
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null)) {
				var ds = new System.Data.DataSet();
				ds.ReadXmlSchema(XmlReader.Create(new System.IO.StringReader(strSchema)));
				TODO: Variables need streaming support
				if ((ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.Organizations) != null)) {
					this.Tables.Add(new OrganizationsDataTable(ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.Organizations)));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			}
			else
				this.InitClass();

			this.GetSerializationData(info, context);
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			DataVariables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
#endif
		protected override void InitClass() {
			this.DataSetName = "dsSavedOrganizations";
			this.Prefix = "";
			this.EnforceConstraints = false;
			base.InitClass();
			#region Foreign Key Constraints
			#if DefineForeignKeyConstraints

			#endif
			#endregion

		}
		#endregion

		#region Table Accessor Struct
		public TAccessor T {
			get {
				if (_T == null)
					_T = new TAccessor(this);
				return _T;
			}
		}
		private TAccessor _T;
		public class TAccessor {
			public TAccessor( dsSavedOrganizations this_dataset ) {
				this.Organizations = (OrganizationsDataTable)this_dataset.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.Organizations);
			}
			public readonly OrganizationsDataTable Organizations;
		}
		#endregion
		#region Default-table accessor struct
		public DTAccessor DT {
			get {
				if (_DT == null)
					_DT = new DTAccessor(this);
				return _DT;
			}
		}
		private DTAccessor _DT;
		public class DTAccessor {
			public DTAccessor( dsSavedOrganizations this_dataset ) {
			}
		}
		#endregion
		#region DataSet Streaming
		#if SerializationSupport
		protected override bool ShouldSerializeTables() {
			return false;
		}
		protected override bool ShouldSerializeRelations() {
			return false;
		}
		protected override void ReadXmlSerializable(XmlReader reader) {
			this.Reset();
			var ds = new System.Data.DataSet();
			ds.ReadXml(reader);
			TODO: Variables need streaming support
			if ((ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.Organizations) != null)) {
				this.Tables.Add(new OrganizationsDataTable(ds.Tables.FindTableDuringTableConstruction(SchemaClass.Instance.T.Organizations)));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(XmlWriter.Create(stream));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(XmlReader.Create(stream), null);
		}
		#endif
		#endregion

		#region Custom-derived DataTable Classes
		#region OrganizationsDataTable
		private bool ShouldSerializeOrganizations() {
			return false;
		}
#if OrganizationsRowChangeEvents
		public delegate void OrganizationsRowChangeEventHandler(object sender, OrganizationsRowChangeEvent e);
#endif

		[Thinkage.Libraries.Translation.Invariant]
		public class OrganizationsDataTable : DBICustomDataTable<OrganizationsRow> {
			#region Construction
			internal OrganizationsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal OrganizationsDataTable(System.Data.DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(OrganizationsDataTable t) {
				  this.Id = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.Id);
				  this.OrganizationName = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.OrganizationName);
				  this.DataBaseName = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.DataBaseName);
				  this.DataBaseServer = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.DataBaseServer);
				  this.CredentialsAuthenticationMethod = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.CredentialsAuthenticationMethod);
				  this.CredentialsPassword = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.CredentialsPassword);
				  this.CredentialsUsername = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.CredentialsUsername);
				  this.CompactBrowsers = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.CompactBrowsers);
				  this.PreferredApplicationMode = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.PreferredApplicationMode);
				  this.IsPreferredOrganization = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.IsPreferredOrganization);
				  this.DBVersion = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.DBVersion);
				  this.Access = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.Access);
				  this.CanDropDatabase = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.CanDropDatabase);
				  this.Status = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.Status);
				  this.Generation = t.Columns.FindColumnDuringTableConstruction(SchemaClass.Instance.T.Organizations.F.Generation);
				}
				/// <summary>
				/// Denotes the Organizations's Id column with type id(nonnull) with labelkey='Id'
				/// </summary>
				public readonly DBIDataColumn Id;
				/// <summary>
				/// Denotes the Organizations's OrganizationName column with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) with labelkey='OrganizationName'
				/// </summary>
				public readonly DBIDataColumn OrganizationName;
				/// <summary>
				/// Denotes the Organizations's DataBaseName column with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) with labelkey='DataBaseName'
				/// </summary>
				public readonly DBIDataColumn DataBaseName;
				/// <summary>
				/// Denotes the Organizations's DataBaseServer column with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) with labelkey='DataBaseServer'
				/// </summary>
				public readonly DBIDataColumn DataBaseServer;
				/// <summary>
				/// Denotes the Organizations's CredentialsAuthenticationMethod column with type integer(nonnull, unsigned 2) with labelkey='Authentication'
				/// </summary>
				public readonly DBIDataColumn CredentialsAuthenticationMethod;
				/// <summary>
				/// Denotes the Organizations's CredentialsPassword column with type string((maxlength 4,096), maxlines 0) with labelkey='Password'
				/// </summary>
				public readonly DBIDataColumn CredentialsPassword;
				/// <summary>
				/// Denotes the Organizations's CredentialsUsername column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='User name'
				/// </summary>
				public readonly DBIDataColumn CredentialsUsername;
				/// <summary>
				/// Denotes the Organizations's CompactBrowsers column with type bool with labelkey='CompactBrowsers'
				/// </summary>
				public readonly DBIDataColumn CompactBrowsers;
				/// <summary>
				/// Denotes the Organizations's PreferredApplicationMode column with type integer(nonnull, min 0, max 13) with labelkey='PreferredApplicationMode'
				/// </summary>
				public readonly DBIDataColumn PreferredApplicationMode;
				/// <summary>
				/// Denotes the Organizations's IsPreferredOrganization column with type bool(nonnull) with labelkey='IsPreferredOrganization'
				/// </summary>
				public readonly DBIDataColumn IsPreferredOrganization;
				/// <summary>
				/// Denotes the Organizations's DBVersion column with type string(nonnull, minlength 1, maxlength 23, maxlines 0) with labelkey='DBVersion'
				/// </summary>
				public readonly DBIDataColumn DBVersion;
				/// <summary>
				/// Denotes the Organizations's Access column with type string(nonnull, minlength 1, maxlength 80, maxlines 0) with labelkey='Access'
				/// </summary>
				public readonly DBIDataColumn Access;
				/// <summary>
				/// Denotes the Organizations's CanDropDatabase column with type bool(nonnull) with labelkey='CanDropDatabase'
				/// </summary>
				public readonly DBIDataColumn CanDropDatabase;
				/// <summary>
				/// Denotes the Organizations's Status column with type string((maxlength 1,073,741,823), trim) with labelkey='Status'
				/// </summary>
				public readonly DBIDataColumn Status;
				/// <summary>
				/// Denotes the Organizations's Generation column with type integer(nonnull, 32) with labelkey='Generation'
				/// </summary>
				public readonly DBIDataColumn Generation;
			}
			#endregion
			#region EventHandlers
			#if OrganizationsRowChangeEvents
			public event OrganizationsRowChangeEventHandler OrganizationsRowChanged;
			public event OrganizationsRowChangeEventHandler OrganizationsRowChanging;
			public event OrganizationsRowChangeEventHandler OrganizationsRowDeleted;
			public event OrganizationsRowChangeEventHandler OrganizationsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				this.OrganizationsRowChanged?.Invoke(this, new OrganizationsRowChangeEvent(((OrganizationsRow)(e.Row)), e.Action));
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				this.OrganizationsRowChanging?.Invoke(this, new OrganizationsRowChangeEvent(((OrganizationsRow)(e.Row)), e.Action));
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				this.OrganizationsRowDeleted?.Invoke(this, new OrganizationsRowChangeEvent(((OrganizationsRow)(e.Row)), e.Action));
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				this.OrganizationsRowDeleting?.Invoke(this, new OrganizationsRowChangeEvent(((OrganizationsRow)(e.Row)), e.Action));
			}
			#endif
			#endregion
			protected override DBIDataTable CreateDBIInstance() => new OrganizationsDataTable(Schema, Server);
			public OrganizationsRow AddNewRow() => (OrganizationsRow)DataSet.DB.AddNewRowAndBasesForGeneratedClass(DataSet, dsSavedOrganizations.Schema.T.Organizations);
			protected override DBIDataRow NewDBIRowFromBuilder(System.Data.DataRowBuilder builder) => new OrganizationsRow(builder);
			public new dsSavedOrganizations DataSet => (dsSavedOrganizations)base.DataSet;
		}
		#region OrganizationsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class OrganizationsRow : DBICustomDataRow<OrganizationsDataTable> {
			#region Construction
			internal OrganizationsRow(System.Data.DataRowBuilder rb)
				: base(rb) {
			}
			#endregion
			#region Typed Column accessor
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly OrganizationsDataTable this_table;
				private readonly OrganizationsRow this_row;
				public FAccessor( OrganizationsRow this_row )
				{
					this.this_table = ((OrganizationsDataTable)(this_row.Table));
					this.this_row = this_row;
				}
				/// <summary>
				/// Denotes the Organizations's Id column with type id(nonnull) with labelkey='Id'
				/// </summary>
				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Organizations.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}
				/// <summary>
				/// Denotes the Organizations's OrganizationName column with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) with labelkey='OrganizationName'
				/// </summary>
				public System.String OrganizationName {
					get {
							return (System.String)Schema.T.Organizations.F.OrganizationName.EffectiveType.GenericAsNativeType(this_table.F.OrganizationName[this_row], typeof(System.String));
					}
					set {this_table.F.OrganizationName[this_row] = value; }
				}
				/// <summary>
				/// Denotes the Organizations's DataBaseName column with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) with labelkey='DataBaseName'
				/// </summary>
				public System.String DataBaseName {
					get {
							return (System.String)Schema.T.Organizations.F.DataBaseName.EffectiveType.GenericAsNativeType(this_table.F.DataBaseName[this_row], typeof(System.String));
					}
					set {this_table.F.DataBaseName[this_row] = value; }
				}
				/// <summary>
				/// Denotes the Organizations's DataBaseServer column with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) with labelkey='DataBaseServer'
				/// </summary>
				public System.String DataBaseServer {
					get {
							return (System.String)Schema.T.Organizations.F.DataBaseServer.EffectiveType.GenericAsNativeType(this_table.F.DataBaseServer[this_row], typeof(System.String));
					}
					set {this_table.F.DataBaseServer[this_row] = value; }
				}
				/// <summary>
				/// Denotes the Organizations's CredentialsAuthenticationMethod column with type integer(nonnull, unsigned 2) with labelkey='Authentication'
				/// </summary>
				public System.SByte CredentialsAuthenticationMethod {
					get {
							return (System.SByte)Schema.T.Organizations.F.CredentialsAuthenticationMethod.EffectiveType.GenericAsNativeType(this_table.F.CredentialsAuthenticationMethod[this_row], typeof(System.SByte));
					}
					set {this_table.F.CredentialsAuthenticationMethod[this_row] = value; }
				}
				/// <summary>
				/// Denotes the Organizations's CredentialsPassword column with type string((maxlength 4,096), maxlines 0) with labelkey='Password'
				/// </summary>
				public System.String CredentialsPassword {
					get {
							return (System.String)Schema.T.Organizations.F.CredentialsPassword.EffectiveType.GenericAsNativeType(this_table.F.CredentialsPassword[this_row], typeof(System.String));
					}
					set {this_table.F.CredentialsPassword[this_row] = value; }
				}
				/// <summary>
				/// Denotes the Organizations's CredentialsUsername column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='User name'
				/// </summary>
				public System.String CredentialsUsername {
					get {
							return (System.String)Schema.T.Organizations.F.CredentialsUsername.EffectiveType.GenericAsNativeType(this_table.F.CredentialsUsername[this_row], typeof(System.String));
					}
					set {this_table.F.CredentialsUsername[this_row] = value; }
				}
				/// <summary>
				/// Denotes the Organizations's CompactBrowsers column with type bool with labelkey='CompactBrowsers'
				/// </summary>
				public System.Boolean? CompactBrowsers {
					get {
							return (System.Boolean?)Schema.T.Organizations.F.CompactBrowsers.EffectiveType.GenericAsNativeType(this_table.F.CompactBrowsers[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.CompactBrowsers[this_row] = value; }
				}
				/// <summary>
				/// Denotes the Organizations's PreferredApplicationMode column with type integer(nonnull, min 0, max 13) with labelkey='PreferredApplicationMode'
				/// </summary>
				public System.SByte PreferredApplicationMode {
					get {
							return (System.SByte)Schema.T.Organizations.F.PreferredApplicationMode.EffectiveType.GenericAsNativeType(this_table.F.PreferredApplicationMode[this_row], typeof(System.SByte));
					}
					set {this_table.F.PreferredApplicationMode[this_row] = value; }
				}
				/// <summary>
				/// Denotes the Organizations's IsPreferredOrganization column with type bool(nonnull) with labelkey='IsPreferredOrganization'
				/// </summary>
				public System.Boolean IsPreferredOrganization {
					get {
							return (System.Boolean)Schema.T.Organizations.F.IsPreferredOrganization.EffectiveType.GenericAsNativeType(this_table.F.IsPreferredOrganization[this_row], typeof(System.Boolean));
					}
				}
				/// <summary>
				/// Denotes the Organizations's DBVersion column with type string(nonnull, minlength 1, maxlength 23, maxlines 0) with labelkey='DBVersion'
				/// </summary>
				public System.String DBVersion {
					get {
							return (System.String)Schema.T.Organizations.F.DBVersion.EffectiveType.GenericAsNativeType(this_table.F.DBVersion[this_row], typeof(System.String));
					}
				}
				/// <summary>
				/// Denotes the Organizations's Access column with type string(nonnull, minlength 1, maxlength 80, maxlines 0) with labelkey='Access'
				/// </summary>
				public System.String Access {
					get {
							return (System.String)Schema.T.Organizations.F.Access.EffectiveType.GenericAsNativeType(this_table.F.Access[this_row], typeof(System.String));
					}
				}
				/// <summary>
				/// Denotes the Organizations's CanDropDatabase column with type bool(nonnull) with labelkey='CanDropDatabase'
				/// </summary>
				public System.Boolean CanDropDatabase {
					get {
							return (System.Boolean)Schema.T.Organizations.F.CanDropDatabase.EffectiveType.GenericAsNativeType(this_table.F.CanDropDatabase[this_row], typeof(System.Boolean));
					}
				}
				/// <summary>
				/// Denotes the Organizations's Status column with type string((maxlength 1,073,741,823), trim) with labelkey='Status'
				/// </summary>
				public System.String Status {
					get {
							return (System.String)Schema.T.Organizations.F.Status.EffectiveType.GenericAsNativeType(this_table.F.Status[this_row], typeof(System.String));
					}
				}
				/// <summary>
				/// Denotes the Organizations's Generation column with type integer(nonnull, 32) with labelkey='Generation'
				/// </summary>
				public System.Int32 Generation {
					get {
							return (System.Int32)Schema.T.Organizations.F.Generation.EffectiveType.GenericAsNativeType(this_table.F.Generation[this_row], typeof(System.Int32));
					}
					set {this_table.F.Generation[this_row] = value; }
				}
			}
			#endregion
			#region Referenced-record accessors
			#endregion
			#region Referring-record accessors
			#endregion
		}
		#endregion
		#region OrganizationsRowChangeEvent
#if OrganizationsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class OrganizationsRowChangeEvent : EventArgs {

			private OrganizationsRow eventRow;

			private DataRowAction eventAction;

			public OrganizationsRowChangeEvent(OrganizationsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public OrganizationsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#endregion

		#region Custom database schema definitions
		#region - the custom Schema class
		/// <summary>
		/// Singleton class containing the schema of all tables,
		/// columns, and relationships in a database.
		/// </summary>
		[Thinkage.Libraries.Translation.Invariant]
		public class SchemaClass : DBI_Database {
			#region singleton construction
			private SchemaClass() {
				_T = new TAccessor(this);
				vstruct = new VAccessor(this);
				__Organizations = new DBI_Organizations();
				Tables.Add( __Organizations);
				CompleteDBI(System.Reflection.Assembly.GetExecutingAssembly(), "manifest://localhost/Thinkage/MainBoss/Database/Client/SavedOrganizations.xafdb", typeof(dsSavedOrganizations)
				);
				__VDBVersion = Variables["DBVersion"];
				System.Diagnostics.Debug.Assert(__VDBVersion != null, "Variable 'DBVersion' not found");
				__VPreferredOrganization = Variables["PreferredOrganization"];
				System.Diagnostics.Debug.Assert(__VPreferredOrganization != null, "Variable 'PreferredOrganization' not found");
				__VPreferredOrganizationDebug = Variables["PreferredOrganizationDebug"];
				System.Diagnostics.Debug.Assert(__VPreferredOrganizationDebug != null, "Variable 'PreferredOrganizationDebug' not found");
				__VSoloOrganization = Variables["SoloOrganization"];
				System.Diagnostics.Debug.Assert(__VSoloOrganization != null, "Variable 'SoloOrganization' not found");
			 }
			/// <summary>
			/// The instantiation of the singleton SchemaClass object
			/// </summary>
			public static readonly SchemaClass Instance = new SchemaClass();
			#endregion
			#region Custom DBI_Table derivations and their private reference in the schema object
			#region - Organizations table
			private DBI_Organizations __Organizations;

			/// <summary>
			/// Class to describe a Organizations table
			/// </summary>
			public class DBI_Organizations : DBIDataDBI_Table {
				public FAccessor F;
				private DBI_Column __Id;
				private DBI_Column __OrganizationName;
				private DBI_Column __DataBaseName;
				private DBI_Column __DataBaseServer;
				private DBI_Column __CredentialsAuthenticationMethod;
				private DBI_Column __CredentialsPassword;
				private DBI_Column __CredentialsUsername;
				private DBI_Column __CompactBrowsers;
				private DBI_Column __PreferredApplicationMode;
				private DBI_Column __IsPreferredOrganization;
				private DBI_Column __DBVersion;
				private DBI_Column __Access;
				private DBI_Column __CanDropDatabase;
				private DBI_Column __Status;
				private DBI_Column __Generation;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Organizations this_table;
					public FAccessor( DBI_Organizations this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Organizations's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Organizations's OrganizationName column with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) with labelkey='OrganizationName'
					/// </summary>
					public DBI_Column OrganizationName { get { return this_table.__OrganizationName; } }
					/// <summary>
					/// Denotes the Organizations's DataBaseName column with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) with labelkey='DataBaseName'
					/// </summary>
					public DBI_Column DataBaseName { get { return this_table.__DataBaseName; } }
					/// <summary>
					/// Denotes the Organizations's DataBaseServer column with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) with labelkey='DataBaseServer'
					/// </summary>
					public DBI_Column DataBaseServer { get { return this_table.__DataBaseServer; } }
					/// <summary>
					/// Denotes the Organizations's CredentialsAuthenticationMethod column with type integer(nonnull, unsigned 2) with labelkey='Authentication'
					/// </summary>
					public DBI_Column CredentialsAuthenticationMethod { get { return this_table.__CredentialsAuthenticationMethod; } }
					/// <summary>
					/// Denotes the Organizations's CredentialsPassword column with type string((maxlength 4,096), maxlines 0) with labelkey='Password'
					/// </summary>
					public DBI_Column CredentialsPassword { get { return this_table.__CredentialsPassword; } }
					/// <summary>
					/// Denotes the Organizations's CredentialsUsername column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='User name'
					/// </summary>
					public DBI_Column CredentialsUsername { get { return this_table.__CredentialsUsername; } }
					/// <summary>
					/// Denotes the Organizations's CompactBrowsers column with type bool with labelkey='CompactBrowsers'
					/// </summary>
					public DBI_Column CompactBrowsers { get { return this_table.__CompactBrowsers; } }
					/// <summary>
					/// Denotes the Organizations's PreferredApplicationMode column with type integer(nonnull, min 0, max 13) with labelkey='PreferredApplicationMode'
					/// </summary>
					public DBI_Column PreferredApplicationMode { get { return this_table.__PreferredApplicationMode; } }
					/// <summary>
					/// Denotes the Organizations's IsPreferredOrganization column with type bool(nonnull) with labelkey='IsPreferredOrganization'
					/// </summary>
					public DBI_Column IsPreferredOrganization { get { return this_table.__IsPreferredOrganization; } }
					/// <summary>
					/// Denotes the Organizations's DBVersion column with type string(nonnull, minlength 1, maxlength 23, maxlines 0) with labelkey='DBVersion'
					/// </summary>
					public DBI_Column DBVersion { get { return this_table.__DBVersion; } }
					/// <summary>
					/// Denotes the Organizations's Access column with type string(nonnull, minlength 1, maxlength 80, maxlines 0) with labelkey='Access'
					/// </summary>
					public DBI_Column Access { get { return this_table.__Access; } }
					/// <summary>
					/// Denotes the Organizations's CanDropDatabase column with type bool(nonnull) with labelkey='CanDropDatabase'
					/// </summary>
					public DBI_Column CanDropDatabase { get { return this_table.__CanDropDatabase; } }
					/// <summary>
					/// Denotes the Organizations's Status column with type string((maxlength 1,073,741,823), trim) with labelkey='Status'
					/// </summary>
					public DBI_Column Status { get { return this_table.__Status; } }
					/// <summary>
					/// Denotes the Organizations's Generation column with type integer(nonnull, 32) with labelkey='Generation'
					/// </summary>
					public DBI_Column Generation { get { return this_table.__Generation; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Organizations()
					: base("Organizations", (DBI_Table tableSchema, IServer s) => new OrganizationsDataTable(tableSchema, s)) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 15, "Table 'Organizations' column count mismatch");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__OrganizationName = Columns["OrganizationName"];
					System.Diagnostics.Debug.Assert(__OrganizationName != null, "Column 'OrganizationName' not found");
					__DataBaseName = Columns["DataBaseName"];
					System.Diagnostics.Debug.Assert(__DataBaseName != null, "Column 'DataBaseName' not found");
					__DataBaseServer = Columns["DataBaseServer"];
					System.Diagnostics.Debug.Assert(__DataBaseServer != null, "Column 'DataBaseServer' not found");
					__CredentialsAuthenticationMethod = Columns["CredentialsAuthenticationMethod"];
					System.Diagnostics.Debug.Assert(__CredentialsAuthenticationMethod != null, "Column 'CredentialsAuthenticationMethod' not found");
					__CredentialsPassword = Columns["CredentialsPassword"];
					System.Diagnostics.Debug.Assert(__CredentialsPassword != null, "Column 'CredentialsPassword' not found");
					__CredentialsUsername = Columns["CredentialsUsername"];
					System.Diagnostics.Debug.Assert(__CredentialsUsername != null, "Column 'CredentialsUsername' not found");
					__CompactBrowsers = Columns["CompactBrowsers"];
					System.Diagnostics.Debug.Assert(__CompactBrowsers != null, "Column 'CompactBrowsers' not found");
					__PreferredApplicationMode = Columns["PreferredApplicationMode"];
					System.Diagnostics.Debug.Assert(__PreferredApplicationMode != null, "Column 'PreferredApplicationMode' not found");
					__IsPreferredOrganization = Columns["IsPreferredOrganization"];
					System.Diagnostics.Debug.Assert(__IsPreferredOrganization != null, "Column 'IsPreferredOrganization' not found");
					__DBVersion = Columns["DBVersion"];
					System.Diagnostics.Debug.Assert(__DBVersion != null, "Column 'DBVersion' not found");
					__Access = Columns["Access"];
					System.Diagnostics.Debug.Assert(__Access != null, "Column 'Access' not found");
					__CanDropDatabase = Columns["CanDropDatabase"];
					System.Diagnostics.Debug.Assert(__CanDropDatabase != null, "Column 'CanDropDatabase' not found");
					__Status = Columns["Status"];
					System.Diagnostics.Debug.Assert(__Status != null, "Column 'Status' not found");
					__Generation = Columns["Generation"];
					System.Diagnostics.Debug.Assert(__Generation != null, "Column 'Generation' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#endregion
			#region T - the public portal for getting the custom-typed DBI_Table objects for each table
			public struct TAccessor {
				private SchemaClass this_schema;
				public TAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Accessors
				/// <summary>
				/// Denotes the Organizations table with labelkey='Organization'
				/// </summary>
				public DBI_Organizations Organizations { get { return this_schema.__Organizations; }}
				#endregion
			}
			public TAccessor T { get { return _T; } }
			private TAccessor _T;
			#endregion
			#region V - the public portal for getting the DBI_Variable objects for Database Variables
			private DBI_Variable __VDBVersion;
			private DBI_Variable __VPreferredOrganization;
			private DBI_Variable __VPreferredOrganizationDebug;
			private DBI_Variable __VSoloOrganization;
			public struct VAccessor {
				private SchemaClass this_schema;
				public VAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Variable Accessors
				/// <summary>
				/// Denotes the Database DBVersion variable
				/// </summary>
				public DBI_Variable DBVersion { get { return this_schema.__VDBVersion; } }
				/// <summary>
				/// Denotes the Database PreferredOrganization variable
				/// </summary>
				public DBI_Variable PreferredOrganization { get { return this_schema.__VPreferredOrganization; } }
				/// <summary>
				/// Denotes the Database PreferredOrganizationDebug variable
				/// </summary>
				public DBI_Variable PreferredOrganizationDebug { get { return this_schema.__VPreferredOrganizationDebug; } }
				/// <summary>
				/// Denotes the Database SoloOrganization variable
				/// </summary>
				public DBI_Variable SoloOrganization { get { return this_schema.__VSoloOrganization; } }
				#endregion
			}
			public VAccessor V { get { return vstruct; } }	// Variables
			private VAccessor vstruct;
			#endregion
		}
		#endregion
		#region - The static member that contains the Schema
		public readonly static SchemaClass Schema = SchemaClass.Instance;
		// make a member variable in the class for reference in a dynamic type instance of this object
		public readonly SchemaClass SchemaDynamic = Schema;
		#endregion
		#endregion
		#region Database Path definitions
		[Thinkage.Libraries.Translation.Invariant]
		public class PathClass {
			/// <summary>
			/// Class containing the relationship paths of all tables,
			/// </summary>
			public readonly TAccessor T;
			/// <summary>
			/// Private constructor for singleton creation
			/// </summary>
			private PathClass() {
				T = new TAccessor(this);
			}

			/// <summary>
			/// The instantiation of the singleton Path object
			/// </summary>
			public static readonly PathClass Instance = new PathClass();
			#region DBI_Path Definitions

			#region DBI_Path Organizations
			private PathToOrganizationsRow __pOrganizations = new PathToOrganizationsRow( SchemaClass.Instance.T.Organizations );

			/// <summary>
			/// The Organizations path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToOrganizationsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _Id;
				private PathToField _OrganizationName;
				private PathToField _DataBaseName;
				private PathToField _DataBaseServer;
				private PathToField _CredentialsAuthenticationMethod;
				private PathToField _CredentialsPassword;
				private PathToField _CredentialsUsername;
				private PathToField _CompactBrowsers;
				private PathToField _PreferredApplicationMode;
				private PathToField _IsPreferredOrganization;
				private PathToField _DBVersion;
				private PathToField _Access;
				private PathToField _CanDropDatabase;
				private PathToField _Status;
				private PathToField _Generation;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToOrganizationsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToOrganizationsRow _BasePath;
					/// <summary>
					/// Provides the path to Organizations's Id with type id(nonnull) and labelkey='Id'
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Organizations.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Organizations's OrganizationName with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) and labelkey='OrganizationName'
					/// </summary>
					public PathToField OrganizationName { get { if (_BasePath._OrganizationName == null) _BasePath._OrganizationName = new PathToField(_BasePath, Schema.T.Organizations.F.OrganizationName ); return _BasePath._OrganizationName; } }
					/// <summary>
					/// Provides the path to Organizations's DataBaseName with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) and labelkey='DataBaseName'
					/// </summary>
					public PathToField DataBaseName { get { if (_BasePath._DataBaseName == null) _BasePath._DataBaseName = new PathToField(_BasePath, Schema.T.Organizations.F.DataBaseName ); return _BasePath._DataBaseName; } }
					/// <summary>
					/// Provides the path to Organizations's DataBaseServer with type string(nonnull, minlength 1, maxlength 128, maxlines 0, trim) and labelkey='DataBaseServer'
					/// </summary>
					public PathToField DataBaseServer { get { if (_BasePath._DataBaseServer == null) _BasePath._DataBaseServer = new PathToField(_BasePath, Schema.T.Organizations.F.DataBaseServer ); return _BasePath._DataBaseServer; } }
					/// <summary>
					/// Provides the path to Organizations's CredentialsAuthenticationMethod with type integer(nonnull, unsigned 2) and labelkey='Authentication'
					/// </summary>
					public PathToField CredentialsAuthenticationMethod { get { if (_BasePath._CredentialsAuthenticationMethod == null) _BasePath._CredentialsAuthenticationMethod = new PathToField(_BasePath, Schema.T.Organizations.F.CredentialsAuthenticationMethod ); return _BasePath._CredentialsAuthenticationMethod; } }
					/// <summary>
					/// Provides the path to Organizations's CredentialsPassword with type string((maxlength 4,096), maxlines 0) and labelkey='Password'
					/// </summary>
					public PathToField CredentialsPassword { get { if (_BasePath._CredentialsPassword == null) _BasePath._CredentialsPassword = new PathToField(_BasePath, Schema.T.Organizations.F.CredentialsPassword ); return _BasePath._CredentialsPassword; } }
					/// <summary>
					/// Provides the path to Organizations's CredentialsUsername with type string(minlength 1, maxlength 128, maxlines 0, trim) and labelkey='User name'
					/// </summary>
					public PathToField CredentialsUsername { get { if (_BasePath._CredentialsUsername == null) _BasePath._CredentialsUsername = new PathToField(_BasePath, Schema.T.Organizations.F.CredentialsUsername ); return _BasePath._CredentialsUsername; } }
					/// <summary>
					/// Provides the path to Organizations's CompactBrowsers with type bool and labelkey='CompactBrowsers'
					/// </summary>
					public PathToField CompactBrowsers { get { if (_BasePath._CompactBrowsers == null) _BasePath._CompactBrowsers = new PathToField(_BasePath, Schema.T.Organizations.F.CompactBrowsers ); return _BasePath._CompactBrowsers; } }
					/// <summary>
					/// Provides the path to Organizations's PreferredApplicationMode with type integer(nonnull, min 0, max 13) and labelkey='PreferredApplicationMode'
					/// </summary>
					public PathToField PreferredApplicationMode { get { if (_BasePath._PreferredApplicationMode == null) _BasePath._PreferredApplicationMode = new PathToField(_BasePath, Schema.T.Organizations.F.PreferredApplicationMode ); return _BasePath._PreferredApplicationMode; } }
					/// <summary>
					/// Provides the path to Organizations's IsPreferredOrganization with type bool(nonnull) and labelkey='IsPreferredOrganization'
					/// </summary>
					public PathToField IsPreferredOrganization { get { if (_BasePath._IsPreferredOrganization == null) _BasePath._IsPreferredOrganization = new PathToField(_BasePath, Schema.T.Organizations.F.IsPreferredOrganization ); return _BasePath._IsPreferredOrganization; } }
					/// <summary>
					/// Provides the path to Organizations's DBVersion with type string(nonnull, minlength 1, maxlength 23, maxlines 0) and labelkey='DBVersion'
					/// </summary>
					public PathToField DBVersion { get { if (_BasePath._DBVersion == null) _BasePath._DBVersion = new PathToField(_BasePath, Schema.T.Organizations.F.DBVersion ); return _BasePath._DBVersion; } }
					/// <summary>
					/// Provides the path to Organizations's Access with type string(nonnull, minlength 1, maxlength 80, maxlines 0) and labelkey='Access'
					/// </summary>
					public PathToField Access { get { if (_BasePath._Access == null) _BasePath._Access = new PathToField(_BasePath, Schema.T.Organizations.F.Access ); return _BasePath._Access; } }
					/// <summary>
					/// Provides the path to Organizations's CanDropDatabase with type bool(nonnull) and labelkey='CanDropDatabase'
					/// </summary>
					public PathToField CanDropDatabase { get { if (_BasePath._CanDropDatabase == null) _BasePath._CanDropDatabase = new PathToField(_BasePath, Schema.T.Organizations.F.CanDropDatabase ); return _BasePath._CanDropDatabase; } }
					/// <summary>
					/// Provides the path to Organizations's Status with type string((maxlength 1,073,741,823), trim) and labelkey='Status'
					/// </summary>
					public PathToField Status { get { if (_BasePath._Status == null) _BasePath._Status = new PathToField(_BasePath, Schema.T.Organizations.F.Status ); return _BasePath._Status; } }
					/// <summary>
					/// Provides the path to Organizations's Generation with type integer(nonnull, 32) and labelkey='Generation'
					/// </summary>
					public PathToField Generation { get { if (_BasePath._Generation == null) _BasePath._Generation = new PathToField(_BasePath, Schema.T.Organizations.F.Generation ); return _BasePath._Generation; } }
				}

				internal PathToOrganizationsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToOrganizationsRow( DBI_Table t ) : base( t ) { }
				internal PathToOrganizationsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToOrganizationsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToOrganizationsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToOrganizationsRow PathToReferencedRow { get { return (PathToOrganizationsRow)base.PathToReferencedRow; } }

				internal PathToOrganizationsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToOrganizationsRow(rootTableSchema, columns);
				}
			}
			public class LinkToOrganizations {
				public LinkToOrganizations(DBI_Path referencing_path) {
					Id = new PathToOrganizationsRow(referencing_path.PathThroughLinkage(Schema.T.Organizations.F.Id));
				}
				public readonly PathToOrganizationsRow Id;
			}
			#endregion
			public class PathToField : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				[System.Obsolete("This field is not a linkage field", true)]
				public new PathToField PathToReferencedRow { get { return null; } }

				internal PathToField( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
			}
			#endregion
			public struct TAccessor {
				private PathClass this_path;
				public TAccessor( PathClass this_path )
				{
					this.this_path = this_path;
				}
				#region Accessors
				/// <summary>
				/// Provides the root path for Organizations with labelkey='Organization'
				/// </summary>
				public PathToOrganizationsRow Organizations { get { return this_path.__pOrganizations; } }
				#endregion
			}
			public class LAccessorBase {
				protected LAccessorBase(DBI_Path basePath) {
					BasePath = basePath;
				}
				protected readonly DBI_Path BasePath;
				#region Cached Accessor results
				protected PathClass.LinkToOrganizations _Organizations;
				#endregion
			}
			public class LAccessor : LAccessorBase {
				public LAccessor( DBI_Path this_path ) 
					: base(this_path) {
				}
				#region Accessors
				public PathClass.LinkToOrganizations Organizations { get { if (base._Organizations == null) base._Organizations = new PathClass.LinkToOrganizations(base.BasePath); return base._Organizations; } }
				#endregion
			}
		}
		public static readonly PathClass Path = PathClass.Instance;
		#endregion
		#region Label Key Building
		public class LabelKeyBuilder : Thinkage.Libraries.Translation.GeneralKeyBuilder {
			static LabelKeyBuilder Instance = new LabelKeyBuilder();
			private LabelKeyBuilder() {
			}
			protected override Thinkage.Libraries.Translation.ContextReference GetContext() {
				return Thinkage.Libraries.Translation.ContextReference.New("dsSavedOrganizationsLabel");
			}
			public static Thinkage.Libraries.Translation.Key K([Thinkage.Libraries.Translation.Context("dsSavedOrganizationsLabel")]string s) {
				return Instance.BuildKey(s);
			}
		}
		#endregion
	}
	#region LabelKeys
	#if DEFINELABELKEYS
	internal static class dsSavedOrganizationsDefineKeysFordsSavedOrganizationsLabel {
		static private Thinkage.Libraries.Translation.Key VariableDBVersion = dsSavedOrganizations.LabelKeyBuilder.K("DBVersion");
		static private Thinkage.Libraries.Translation.Key VariablePreferredOrganization = dsSavedOrganizations.LabelKeyBuilder.K("PreferredOrganization");
		static private Thinkage.Libraries.Translation.Key VariablePreferredOrganizationDebug = dsSavedOrganizations.LabelKeyBuilder.K("PreferredOrganizationDebug");
		static private Thinkage.Libraries.Translation.Key VariableSoloOrganization = dsSavedOrganizations.LabelKeyBuilder.K("SoloOrganization");
		static private Thinkage.Libraries.Translation.Key Organizations = dsSavedOrganizations.LabelKeyBuilder.K("Organization");
		static private Thinkage.Libraries.Translation.Key Organizations_Id = dsSavedOrganizations.LabelKeyBuilder.K("Id");
		static private Thinkage.Libraries.Translation.Key Organizations_OrganizationName = dsSavedOrganizations.LabelKeyBuilder.K("OrganizationName");
		static private Thinkage.Libraries.Translation.Key Organizations_DataBaseName = dsSavedOrganizations.LabelKeyBuilder.K("DataBaseName");
		static private Thinkage.Libraries.Translation.Key Organizations_DataBaseServer = dsSavedOrganizations.LabelKeyBuilder.K("DataBaseServer");
		static private Thinkage.Libraries.Translation.Key Organizations_CredentialsAuthenticationMethod = dsSavedOrganizations.LabelKeyBuilder.K("Authentication");
		static private Thinkage.Libraries.Translation.Key Organizations_CredentialsPassword = dsSavedOrganizations.LabelKeyBuilder.K("Password");
		static private Thinkage.Libraries.Translation.Key Organizations_CredentialsUsername = dsSavedOrganizations.LabelKeyBuilder.K("User name");
		static private Thinkage.Libraries.Translation.Key Organizations_CompactBrowsers = dsSavedOrganizations.LabelKeyBuilder.K("CompactBrowsers");
		static private Thinkage.Libraries.Translation.Key Organizations_PreferredApplicationMode = dsSavedOrganizations.LabelKeyBuilder.K("PreferredApplicationMode");
		static private Thinkage.Libraries.Translation.Key Organizations_IsPreferredOrganization = dsSavedOrganizations.LabelKeyBuilder.K("IsPreferredOrganization");
		static private Thinkage.Libraries.Translation.Key Organizations_DBVersion = dsSavedOrganizations.LabelKeyBuilder.K("DBVersion");
		static private Thinkage.Libraries.Translation.Key Organizations_Access = dsSavedOrganizations.LabelKeyBuilder.K("Access");
		static private Thinkage.Libraries.Translation.Key Organizations_CanDropDatabase = dsSavedOrganizations.LabelKeyBuilder.K("CanDropDatabase");
		static private Thinkage.Libraries.Translation.Key Organizations_Status = dsSavedOrganizations.LabelKeyBuilder.K("Status");
		static private Thinkage.Libraries.Translation.Key Organizations_Generation = dsSavedOrganizations.LabelKeyBuilder.K("Generation");
	}
	#endif
	#endregion
}
