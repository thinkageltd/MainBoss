<?xml version="1.0" encoding="utf-8" ?>
<dbconversion xmlns="http://www.thinkage.ca/XmlNamespaces/DBConversion">
  <table name="Item">
	<dependency table="UnitOfMeasure"/>
	<data>
		delete from <IDB/>.dbo.CodeManagement;
	  insert into <IDB/>.dbo.CodeManagement (id, code, CONTEXT)
		SELECT IT.[MAINBOSSID], IT.[TYPE], IT.MAINBOSSID from <IDB/>.dbo.INVTYPE AS IT
		WHERE IT.MAINBOSSEXCLUDE = 0;
		
		INSERT INTO <IDB/>.dbo.CodeManagement (id, code, CONTEXT)
		SELECT NEWID(), [T], NULL
			FROM (SELECT DISTINCT I.CLASS FROM <IDB/>.dbo.INVY as I WHERE I.MAINBOSSEXCLUDE = 0) AS X(T)
		exec <IDB/>.dbo.FixCodes 50
		
	  INSERT INTO <ODB/>.dbo.ResourceCategory ([ID],[Code],[Desc])
			select CM.ID, CM.CODE, IT.DESCRIPTION
				from <IDB/>.dbo.INVTYPE as IT join CodeManagement as CM on CM.ID = IT.MAINBOSSID
			union
					select CM.ID, CM.CODE, 'CLASS' from CodeManagement as CM WHERE CM.Context IS NULL and CM.CODE NOT IN (select [TYPE] from <IDB/>.dbo.INVTYPE)
		
	  <!--
	  We enhance the code for non-inventory items with '(NI)' where the non-inventory item code in 2.9 matches the same code for an inventoried item.
	  This makes the Code look a little better in 3.0 than viewing the (non-determistic) effect of FixCodes adding the value '1000' to the code (sometimes
	  not the non-inventoried code either).
	  -->
	  delete from <IDB/>.dbo.CodeManagement;
	  insert into <IDB/>.dbo.CodeManagement (id, code, Hidden29)
		select I.MAINBOSSID, I.ITEMNUM, CASE WHEN I.DESCRIPTION = 'DELETED' THEN 1 ELSE 0 END
		  from <IDB/>.dbo.INVY as I
		  where I.MAINBOSSEXCLUDE = 0;

	  exec <IDB/>.dbo.FixCodes 50

	  INSERT INTO <ODB/>.dbo.Item ([ID],[CODE], [HIDDEN], [DESC],[ItemCategoryID],[UnitOfMeasureID],[Comment], Available, OnHand, OnOrder, OnReserve, TotalCost)
		  select I.[MAINBOSSID], CM.[CODE], CM.HIDDEN30, I.[DESCRIPTION], IC.[ID], UM.[MAINBOSSID], COMMENT.[COMMENTS], 0, 0, 0, 0, 0.0
		  from <IDB/>.dbo.INVY as I
			join <IDB/>.dbo.CodeManagement as CM on I.MAINBOSSID = CM.ID
			  left join <ODB/>.dbo.ResourceCategory as IC on COALESCE(I.[TYPE], I.[CLASS]) = IC.[CODE]
			  left join <IDB/>.dbo.UOMUOP as UM on I.[UOM] = UM.[UNIT]
				left join <IDB/>.dbo.INVCOMM as COMMENT on I.[ITEMNUM] = COMMENT.[ITEMNUM]
		  where I.MAINBOSSEXCLUDE = 0;
			
	</data>
  </table>
  <table name="ItemLocation">
	<dependency table="Permanent Item Location Item Count Value"/>
	<dependency table="Item Pricing"/>
	<data></data>
  </table>
  <table name="Item Adjustment Codes">
	<data>
	  -- Create a hidden adjustment code for the import to use on its ItemCountValue records.
	  -- We have two adjustment codes. One identifies inventory records whose import costs/onhands were less than 0
	  -- and we set to 0 during import.
	  declare @IAC_Id uniqueidentifier
	  declare @IACZero_Id uniqueidentifier
	  declare @ccid uniqueidentifier
	  select @IAC_Id = newid()
	  select @IACZero_Id = newid()

	  select @ccid = (select DIAC.CostCenterID from <ODB/>.dbo._DItemAdjustmentCode as DIAC)

	  insert into <ODB/>.dbo.ItemAdjustmentCode
		  (ID, Code, [Hidden], [CostCenterID])
		values (@IAC_Id, 'MP2 CONVERSION', <ODB/>.dbo._DClosestValue(getdate(),2,100), @ccid)
  </data>
  </table>
  <table name="Permanent Item Location Base">
	<dependency table="Item"/>
	<dependency table="Storeroom"/>
	<data>
	  insert into <ODB/>.dbo.ItemLocation ([ID], [ItemID], [LocationID], [ItemPriceID])
		select IL.ItemLocationID, IL.ItemID, IL.PermanentStorageLocationID, null
		  from <IDB/>.dbo.InvLocationLinkages as IL
	</data>
  </table>
  <table name="Permanent Item Location Actual">
	<dependency table="Permanent Item Location Base"/>
	<data>
	  insert into <ODB/>.dbo.ActualItemLocation ([ID], OnHand, TotalCost, OnReserve, OnOrder, EffectiveMinimum, EffectiveMaximum, ItemLocationID, [CostCenterID])
		select IL.ActualItemLocationID,
				0, 0.0, 0, 0, 0, 0,<!-- Initial values to bypass CHECK directive -->
			   IL.ItemLocationID, 
			   (select DAIL.CostCenterID
				  from <ODB/>.dbo._DActualItemLocation as DAIL
					join <ODB/>.dbo._DPermanentItemLocation as DPIL on DAIL.ID = DPIL.ActualItemLocationID)
		  from <IDB/>.dbo.InvLocationLinkages as IL
	</data>
  </table>
  <table name="Permanent Item Location">
	<dependency table="Permanent Item Location Actual"/>
	<data>
	  -- TODO: Distribute Min and Max across the various perm storages rather than assigning the full numbers to each???
	  INSERT INTO <ODB/>.dbo.PermanentItemLocation ([ID], [ActualItemLocationID], [Minimum], [Maximum])
		  select NEWID(), IL.ActualItemLocationID, IL.MINSTOCK, IL.MAXSTOCK
		  from <IDB/>.dbo.InvLocationLinkages as IL
	</data>
  </table>
  <table name="Permanent Item Location Transaction">
	<dependency table="Permanent Item Location"/>
	<data>
	  declare @ccid uniqueidentifier
	  declare @userId uniqueidentifier
	  select @ccid = (select DIAC.CostCenterID from <ODB/>.dbo._DItemAdjustmentCode as DIAC)
	  -- We use the 'only' userid present at this point in the User table as we are in the process of importing and 'know' only one user exists at this time
	  select TOP 1 @userId = ID from <ODB/>.dbo.[User]
	  insert into <ODB/>.dbo.AccountingTransaction (ID, UserID, EntryDate, EffectiveDate, Cost, FromCostCenterID, ToCostCenterID)
		  select IL.AccountingTransactionID, @userId, <ODB/>.dbo._DClosestValue(getdate(), 2, 100), IL.PCDATE, COALESCE(<ODB/>.dbo.mbfn_CalculateUnitCost(IL.[TOTALVALUE],IL.[TOTALQTY],1)*IL.QTYONHAND, 0), AILoc.CostCenterID, @ccid 
		  from <IDB/>.dbo.InvLocationLinkages as IL
			join <ODB/>.dbo.ActualItemLocation as AILoc on IL.ActualItemLocationID = AILoc.ID
	</data>
  </table>
  <table name="Permanent Item Location Item Count Value">
	<dependency table="Permanent Item Location Transaction"/>
	<dependency table="Item Adjustment Codes"/>
	<data>
	  declare @IAC_Id uniqueidentifier
		select @IAC_Id = (select ID from <ODB/>.dbo.ItemAdjustmentCode where [CODE] = 'MP2 CONVERSION')
	  INSERT INTO <ODB/>.dbo.ItemCountValue ([ID], [AccountingTransactionID], [ItemLocationID], [Quantity], [Cost], [ItemAdjustmentCodeID])
		select NEWID(), IL.AccountingTransactionID, IL.ItemLocationID, IL.[QTYONHAND], COALESCE(<ODB/>.dbo.mbfn_CalculateUnitCost(IL.[TOTALVALUE],IL.[TOTALQTY],1)*IL.QTYONHAND, 0), @IAC_Id
		from <IDB/>.dbo.InvLocationLinkages as IL
	</data>
  </table>
  <table name="Item Pricing">
	<dependency table="Item"/>
	<data>
	</data>
  </table>
</dbconversion>
