



//-----------------------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by the XAFBuild tool.
//		Template file DBIGenerationTemplate.xml
//		Vault version 106
//		XAFBuild title: Thinkage.XAFBuild.StudioAddin in Thinkage ToolKit 2.0.17.0
//		Changes to this file will be lost if the code is regenerated.
// #defines
//  <TableName>RowChangedEvents to have row changed events enabled
//	DefineForeignKeyConstraints - for the ForeignKeyConstraints to be enabled
//	DefineUniqueConstraints - for the UniqueConstraints to be enabled
//  SerializationSupport - for the Serialization of the dataset Constructor to be enabled
// </autogenerated>
//-----------------------------------------------------------------------------------------------

namespace Thinkage.MainBoss.MainBoss {
	using System;
	using System.Data;
	using System.Xml;
	using System.Runtime.Serialization;
	using Thinkage.Libraries.DBILibrary;
	using Thinkage.Libraries.DBAccess;

	[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2240:ImplementISerializableCorrectly"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2229:ImplementSerializationConstructors"), Serializable()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.ComponentModel.ToolboxItem(true)]
	[Thinkage.Libraries.Translation.Invariant]
	public class dsDatabasesOnServer : XAFDataSet {

		#region Database Variables VAccessor
		public VAccessor V {
			get {
				if (_V == null)
					_V = new VAccessor(this);
				return _V;
			}
		}
		private VAccessor _V;
		[Thinkage.Libraries.Translation.Invariant]
		public class VAccessor {
			#region Typed Variable Accessors
			#endregion
			#region VAccessor Construction
			public VAccessor(dsDatabasesOnServer this_dataset )
			{
			}
			#endregion
		}
		#endregion


		#region DataSet Construction

		internal void CommonCTOR() {
			InitClass();
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			DataVariables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		[Obsolete("Do not call this, it is only here to support DataSet.Clone.", true)]
		public dsDatabasesOnServer() : base() {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsDatabasesOnServer(XAFClient db) : base(Schema, db) {
			CommonCTOR();
		}
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
		public dsDatabasesOnServer(IServer server) : base(Schema, server) {
			CommonCTOR();
		}
#if SerializationSupport
		protected dsDatabasesOnServer(SerializationInfo info, StreamingContext context) {
			/// ExtendedProperties are not copied in this CTOR if they are not part of the input stream. In particular, any delgate extended properties
			/// we put on datatables may not be copied. If we end up with any delegate extended properties on datatables, then we will need to
			/// amend the code below to propogate the properties itself
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null)) {
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(XmlReader.Create(new System.IO.StringReader(strSchema)));
				if (ds.Tables["__Variables"] != null)
					this.Tables.Add( new DataVariable.__VariablesDataTable(ds.Tables["__Variables"]));
				if ((ds.Tables["DatabasesOnServer"] != null)) {
					this.Tables.Add(new DatabasesOnServerDataTable(ds.Tables["DatabasesOnServer"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			}
			else
				this.InitClass();

			this.GetSerializationData(info, context);
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			DataVariables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
#endif

		protected override void InitClass() {
			this.DataSetName = "dsDatabasesOnServer";
			this.Prefix = "";
			this.EnforceConstraints = false;
			base.InitClass();
			#region Foreign Key Constraints
			#if DefineForeignKeyConstraints

			#endif
			#endregion

		}
		#endregion

		#region Table Accessor Struct
		public TAccessor T {
			get {
				if (_T == null)
					_T = new TAccessor(this);
				return _T;
			}
		}
		private TAccessor _T;
		public class TAccessor {
			public TAccessor( dsDatabasesOnServer this_dataset ) {
				this.DatabasesOnServer = (DatabasesOnServerDataTable)this_dataset.Tables["DatabasesOnServer"];
			}
			public readonly DatabasesOnServerDataTable DatabasesOnServer;
		}
		#endregion
		#region Default-table accessor struct
		public DTAccessor DT {
			get {
				if (_DT == null)
					_DT = new DTAccessor(this);
				return _DT;
			}
		}
		private DTAccessor _DT;
		public class DTAccessor {
			public DTAccessor( dsDatabasesOnServer this_dataset ) {
				this.DatabasesOnServer = (DatabasesOnServerDataTable)this_dataset.Tables["_DDatabasesOnServer"];
			}
			public readonly DatabasesOnServerDataTable DatabasesOnServer;
		}
		#endregion
		#region DataSet Streaming
		#if SerializationSupport
		protected override bool ShouldSerializeTables() {
			return false;
		}
		protected override bool ShouldSerializeRelations() {
			return false;
		}
		protected override void ReadXmlSerializable(XmlReader reader) {
			this.Reset();
			DataSet ds = new DataSet();
			ds.ReadXml(reader);
			if ((ds.Tables["__Variables"] != null))
				this.Tables.Add( new DataVariable.__VariablesDataTable(ds.Tables["__Variables"]));
			if ((ds.Tables["DatabasesOnServer"] != null)) {
				this.Tables.Add(new DatabasesOnServerDataTable(ds.Tables["DatabasesOnServer"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(XmlWriter.Create(stream));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(XmlReader.Create(stream), null);
		}
		#endif
		#endregion

		#region DataTable Classes
		#region DatabasesOnServer
		private bool ShouldSerializeDatabasesOnServer() {
			return false;
		}
#if DatabasesOnServerRowChangeEvents
		public delegate void DatabasesOnServerRowChangeEventHandler(object sender, DatabasesOnServerRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class DatabasesOnServerDataTable : DBIDataTable {
			#region Construction
			internal DatabasesOnServerDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal DatabasesOnServerDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(DatabasesOnServerDataTable t) {
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.ServerName = (DBIDataColumn)t.Columns["ServerName"];
				  this.Database = (DBIDataColumn)t.Columns["Database"];
				  this.Version = (DBIDataColumn)t.Columns["Version"];
				  this.OrganizationName = (DBIDataColumn)t.Columns["OrganizationName"];
				  this.UserRecordExists = (DBIDataColumn)t.Columns["UserRecordExists"];
				  this.AccessError = (DBIDataColumn)t.Columns["AccessError"];
				}
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn ServerName;
				public readonly DBIDataColumn Database;
				public readonly DBIDataColumn Version;
				public readonly DBIDataColumn OrganizationName;
				public readonly DBIDataColumn UserRecordExists;
				public readonly DBIDataColumn AccessError;
			}
			#endregion
			#region EventHandlers
			#if DatabasesOnServerRowChangeEvents
			public event DatabasesOnServerRowChangeEventHandler DatabasesOnServerRowChanged;
			public event DatabasesOnServerRowChangeEventHandler DatabasesOnServerRowChanging;
			public event DatabasesOnServerRowChangeEventHandler DatabasesOnServerRowDeleted;
			public event DatabasesOnServerRowChangeEventHandler DatabasesOnServerRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.DatabasesOnServerRowChanged != null)) {
					this.DatabasesOnServerRowChanged(this, new DatabasesOnServerRowChangeEvent(((DatabasesOnServerRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.DatabasesOnServerRowChanging != null)) {
					this.DatabasesOnServerRowChanging(this, new DatabasesOnServerRowChangeEvent(((DatabasesOnServerRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.DatabasesOnServerRowDeleted != null)) {
					this.DatabasesOnServerRowDeleted(this, new DatabasesOnServerRowChangeEvent(((DatabasesOnServerRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.DatabasesOnServerRowDeleting != null)) {
					 this.DatabasesOnServerRowDeleting(this, new DatabasesOnServerRowChangeEvent(((DatabasesOnServerRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new DatabasesOnServerDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public DatabasesOnServerRow this[int index] {
				get {
					return ((DatabasesOnServerRow)(this.Rows[index]));
				}
			}
			public void AddDatabasesOnServerRow(DatabasesOnServerRow row) {
				this.Rows.Add(row);
			}
			public DatabasesOnServerRow AddNewDatabasesOnServerRow() {
				return ((DatabasesOnServerRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, dsDatabasesOnServer.Schema.T.DatabasesOnServer)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new DatabasesOnServerRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(DatabasesOnServerRow);
			}
			public void RemoveDatabasesOnServerRow(DatabasesOnServerRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region DatabasesOnServerRow
		[Thinkage.Libraries.Translation.Invariant]
		public class DatabasesOnServerRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal DatabasesOnServerRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly DatabasesOnServerDataTable this_table;
				private readonly DatabasesOnServerRow this_row;
				public FAccessor( DatabasesOnServerRow this_row )
				{
					this.this_table = ((DatabasesOnServerDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int64 Id {
					get {
							return (System.Int64)Schema.T.DatabasesOnServer.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Int64));
					}
				}

				public System.String ServerName {
					get {
							return (System.String)Schema.T.DatabasesOnServer.F.ServerName.EffectiveType.GenericAsNativeType(this_table.F.ServerName[this_row], typeof(System.String));
					}
					set {this_table.F.ServerName[this_row] = value; }
				}

				public System.String Database {
					get {
							return (System.String)Schema.T.DatabasesOnServer.F.Database.EffectiveType.GenericAsNativeType(this_table.F.Database[this_row], typeof(System.String));
					}
					set {this_table.F.Database[this_row] = value; }
				}

				public System.String Version {
					get {
							return (System.String)Schema.T.DatabasesOnServer.F.Version.EffectiveType.GenericAsNativeType(this_table.F.Version[this_row], typeof(System.String));
					}
					set {this_table.F.Version[this_row] = value; }
				}

				public System.String OrganizationName {
					get {
							return (System.String)Schema.T.DatabasesOnServer.F.OrganizationName.EffectiveType.GenericAsNativeType(this_table.F.OrganizationName[this_row], typeof(System.String));
					}
					set {this_table.F.OrganizationName[this_row] = value; }
				}

				public System.Boolean? UserRecordExists {
					get {
							return (System.Boolean?)Schema.T.DatabasesOnServer.F.UserRecordExists.EffectiveType.GenericAsNativeType(this_table.F.UserRecordExists[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.UserRecordExists[this_row] = value; }
				}

				public System.String AccessError {
					get {
							return (System.String)Schema.T.DatabasesOnServer.F.AccessError.EffectiveType.GenericAsNativeType(this_table.F.AccessError[this_row], typeof(System.String));
					}
					set {this_table.F.AccessError[this_row] = value; }
				}
			}
		}
		#endregion
		#region DatabasesOnServerRowChangeEvent
#if DatabasesOnServerRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class DatabasesOnServerRowChangeEvent : EventArgs {

			private DatabasesOnServerRow eventRow;

			private DataRowAction eventAction;

			public DatabasesOnServerRowChangeEvent(DatabasesOnServerRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public DatabasesOnServerRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#endregion

		#region Custom database schema definitions
		#region - the custom Schema class
		/// <summary>
		/// Singleton class containing the schema of all tables,
		/// columns, and relationships in a database.
		/// </summary>
		[Thinkage.Libraries.Translation.Invariant]
		public class SchemaClass : DBI_Database {
			#region singleton construction
			private SchemaClass() {
				_T = new TAccessor(this);
				vstruct = new VAccessor(this);
				__DatabasesOnServer = new DBI_DatabasesOnServer();
				Tables.Add( __DatabasesOnServer);
				CompleteDBI(System.Reflection.Assembly.GetExecutingAssembly(), "manifest://localhost/Thinkage/MainBoss/MainBoss/PseudoDatabases/DatabasesOnServer/DatabasesOnServer.xafdb", typeof(dsDatabasesOnServer));
			 }
			/// <summary>
			/// The instantiation of the singleton SchemaClass object
			/// </summary>
			public static readonly SchemaClass Instance = new SchemaClass();
			#endregion
			#region Custom DBI_Table derivations and their private reference in the schema object
			#region - DatabasesOnServer table
			private DBI_DatabasesOnServer __DatabasesOnServer;

			/// <summary>
			/// Class to describe a DatabasesOnServer table
			/// </summary>
			public class DBI_DatabasesOnServer : DBI_Table {
				public FAccessor F;
				private DBI_Column __Id;
				private DBI_Column __ServerName;
				private DBI_Column __Database;
				private DBI_Column __Version;
				private DBI_Column __OrganizationName;
				private DBI_Column __UserRecordExists;
				private DBI_Column __AccessError;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_DatabasesOnServer this_table;
					public FAccessor( DBI_DatabasesOnServer this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the DatabasesOnServer's Id column with type integer(nonnull, unsigned 63) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the DatabasesOnServer's ServerName column with type string(nonnull, minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='ServerName'
					/// </summary>
					public DBI_Column ServerName { get { return this_table.__ServerName; } }
					/// <summary>
					/// Denotes the DatabasesOnServer's Database column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Database'
					/// </summary>
					public DBI_Column Database { get { return this_table.__Database; } }
					/// <summary>
					/// Denotes the DatabasesOnServer's Version column with type string(minlength 1, maxlength 23, maxlines 0) with labelkey='Version'
					/// </summary>
					public DBI_Column Version { get { return this_table.__Version; } }
					/// <summary>
					/// Denotes the DatabasesOnServer's OrganizationName column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='OrganizationName'
					/// </summary>
					public DBI_Column OrganizationName { get { return this_table.__OrganizationName; } }
					/// <summary>
					/// Denotes the DatabasesOnServer's UserRecordExists column with type bool with labelkey='UserRecordExists'
					/// </summary>
					public DBI_Column UserRecordExists { get { return this_table.__UserRecordExists; } }
					/// <summary>
					/// Denotes the DatabasesOnServer's AccessError column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='AccessError'
					/// </summary>
					public DBI_Column AccessError { get { return this_table.__AccessError; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_DatabasesOnServer()
					: base( "DatabasesOnServer",
							delegate(DBI_Table tableSchema, IServer s) {
								return new DatabasesOnServerDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 7, "Table 'DatabasesOnServer' column count mismatch");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__ServerName = Columns["ServerName"];
					System.Diagnostics.Debug.Assert(__ServerName != null, "Column 'ServerName' not found");
					__Database = Columns["Database"];
					System.Diagnostics.Debug.Assert(__Database != null, "Column 'Database' not found");
					__Version = Columns["Version"];
					System.Diagnostics.Debug.Assert(__Version != null, "Column 'Version' not found");
					__OrganizationName = Columns["OrganizationName"];
					System.Diagnostics.Debug.Assert(__OrganizationName != null, "Column 'OrganizationName' not found");
					__UserRecordExists = Columns["UserRecordExists"];
					System.Diagnostics.Debug.Assert(__UserRecordExists != null, "Column 'UserRecordExists' not found");
					__AccessError = Columns["AccessError"];
					System.Diagnostics.Debug.Assert(__AccessError != null, "Column 'AccessError' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#endregion
			#region T - the public portal for getting the custom-typed DBI_Table objects for each table
			public struct TAccessor {
				private SchemaClass this_schema;
				public TAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Accessors
				/// <summary>
				/// Denotes the DatabasesOnServer table with labelkey='Databases On Server'
				/// </summary>
				public DBI_DatabasesOnServer DatabasesOnServer { get { return this_schema.__DatabasesOnServer; }}
				#endregion
			}
			public TAccessor T { get { return _T; } }
			private TAccessor _T;
			#endregion
			#region V - the public portal for getting the DBI_Variable objects for Database Variables
			public struct VAccessor {
				private SchemaClass this_schema;
				public VAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Variable Accessors
				#endregion
			}
			public VAccessor V { get { return vstruct; } }	// Variables
			private VAccessor vstruct;
			#endregion
		}
		#endregion
		#region - The static member that contains the Schema
		public readonly static SchemaClass Schema = SchemaClass.Instance;
		#endregion
		#endregion
		#region Database Path definitions
		[Thinkage.Libraries.Translation.Invariant]
		public class PathClass {
			/// <summary>
			/// Class containing the relationship paths of all tables,
			/// </summary>
			public readonly TAccessor T;
			/// <summary>
			/// Private constructor for singleton creation
			/// </summary>
			private PathClass() {
				T = new TAccessor(this);
			}

			/// <summary>
			/// The instantiation of the singleton Path object
			/// </summary>
			public static readonly PathClass Instance = new PathClass();
			#region DBI_Path Definitions

			#region DBI_Path DatabasesOnServer
			private PathToDatabasesOnServerRow __pDatabasesOnServer = new PathToDatabasesOnServerRow( SchemaClass.Instance.T.DatabasesOnServer );

			/// <summary>
			/// The DatabasesOnServer path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToDatabasesOnServerRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _Id;
				private PathToField _ServerName;
				private PathToField _Database;
				private PathToField _Version;
				private PathToField _OrganizationName;
				private PathToField _UserRecordExists;
				private PathToField _AccessError;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToDatabasesOnServerRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToDatabasesOnServerRow _BasePath;
					/// <summary>
					/// Provides the path to DatabasesOnServer's Id with type integer(nonnull, unsigned 63) and labelkey='Id'
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.DatabasesOnServer.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to DatabasesOnServer's ServerName with type string(nonnull, minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) and labelkey='ServerName'
					/// </summary>
					public PathToField ServerName { get { if (_BasePath._ServerName == null) _BasePath._ServerName = new PathToField(_BasePath, Schema.T.DatabasesOnServer.F.ServerName ); return _BasePath._ServerName; } }
					/// <summary>
					/// Provides the path to DatabasesOnServer's Database with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) and labelkey='Database'
					/// </summary>
					public PathToField Database { get { if (_BasePath._Database == null) _BasePath._Database = new PathToField(_BasePath, Schema.T.DatabasesOnServer.F.Database ); return _BasePath._Database; } }
					/// <summary>
					/// Provides the path to DatabasesOnServer's Version with type string(minlength 1, maxlength 23, maxlines 0) and labelkey='Version'
					/// </summary>
					public PathToField Version { get { if (_BasePath._Version == null) _BasePath._Version = new PathToField(_BasePath, Schema.T.DatabasesOnServer.F.Version ); return _BasePath._Version; } }
					/// <summary>
					/// Provides the path to DatabasesOnServer's OrganizationName with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) and labelkey='OrganizationName'
					/// </summary>
					public PathToField OrganizationName { get { if (_BasePath._OrganizationName == null) _BasePath._OrganizationName = new PathToField(_BasePath, Schema.T.DatabasesOnServer.F.OrganizationName ); return _BasePath._OrganizationName; } }
					/// <summary>
					/// Provides the path to DatabasesOnServer's UserRecordExists with type bool and labelkey='UserRecordExists'
					/// </summary>
					public PathToField UserRecordExists { get { if (_BasePath._UserRecordExists == null) _BasePath._UserRecordExists = new PathToField(_BasePath, Schema.T.DatabasesOnServer.F.UserRecordExists ); return _BasePath._UserRecordExists; } }
					/// <summary>
					/// Provides the path to DatabasesOnServer's AccessError with type string(minlength 1, (maxlength 1,073,741,823), trim) and labelkey='AccessError'
					/// </summary>
					public PathToField AccessError { get { if (_BasePath._AccessError == null) _BasePath._AccessError = new PathToField(_BasePath, Schema.T.DatabasesOnServer.F.AccessError ); return _BasePath._AccessError; } }
				}

				internal PathToDatabasesOnServerRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToDatabasesOnServerRow( DBI_Table t ) : base( t ) { }
				internal PathToDatabasesOnServerRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToDatabasesOnServerLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToDatabasesOnServerRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToDatabasesOnServerRow PathToReferencedRow { get { return (PathToDatabasesOnServerRow)base.PathToReferencedRow; } }

				internal PathToDatabasesOnServerLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToDatabasesOnServerRow(rootTableSchema, columns);
				}
			}
			public class LinkToDatabasesOnServer {
				public LinkToDatabasesOnServer(DBI_Path referencing_path) {
					Id = new PathToDatabasesOnServerRow(referencing_path.PathThroughLinkage(Schema.T.DatabasesOnServer.F.Id));
				}
				public readonly PathToDatabasesOnServerRow Id;
			}
			#endregion
			public class PathToField : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				[System.Obsolete("This field is not a linkage field", true)]
				public new PathToField PathToReferencedRow { get { return null; } }

				internal PathToField( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
			}
			#endregion
			public struct TAccessor {
				private PathClass this_path;
				public TAccessor( PathClass this_path )
				{
					this.this_path = this_path;
				}
				#region Accessors
				/// <summary>
				/// Provides the root path for DatabasesOnServer with labelkey='Databases On Server'
				/// </summary>
				public PathToDatabasesOnServerRow DatabasesOnServer { get { return this_path.__pDatabasesOnServer; } }
				#endregion
			}
			public class LAccessorBase {
				protected LAccessorBase(DBI_Path basePath) {
					BasePath = basePath;
				}
				protected readonly DBI_Path BasePath;
				#region Cached Accessor results
				protected PathClass.LinkToDatabasesOnServer _DatabasesOnServer;
				#endregion
			}
			public class LAccessor : LAccessorBase {
				public LAccessor( DBI_Path this_path ) 
					: base(this_path) {
				}
				#region Accessors
				public PathClass.LinkToDatabasesOnServer DatabasesOnServer { get { if (base._DatabasesOnServer == null) base._DatabasesOnServer = new PathClass.LinkToDatabasesOnServer(base.BasePath); return base._DatabasesOnServer; } }
				#endregion
			}
		}
		public static readonly PathClass Path = PathClass.Instance;
		#endregion
		#region Label Key Building
		public class LabelKeyBuilder : Thinkage.Libraries.Translation.GeneralKeyBuilder {
			static LabelKeyBuilder Instance = new LabelKeyBuilder();
			private LabelKeyBuilder() {
			}
			protected override Thinkage.Libraries.Translation.ContextReference GetContext() {
				return Thinkage.Libraries.Translation.ContextReference.New("dsDatabasesOnServerLabel");
			}
			public static Thinkage.Libraries.Translation.Key K([Thinkage.Libraries.Translation.Context("dsDatabasesOnServerLabel")]string s) {
				return Instance.BuildKey(s);
			}
		}
		#endregion
	}
	#region LabelKeys
	#if DEFINELABELKEYS
	internal static class dsDatabasesOnServerDefineKeysFordsDatabasesOnServerLabel {
		static private Thinkage.Libraries.Translation.Key DatabasesOnServer = dsDatabasesOnServer.LabelKeyBuilder.K("Databases On Server");
		static private Thinkage.Libraries.Translation.Key DatabasesOnServer_Id = dsDatabasesOnServer.LabelKeyBuilder.K("Id");
		static private Thinkage.Libraries.Translation.Key DatabasesOnServer_ServerName = dsDatabasesOnServer.LabelKeyBuilder.K("ServerName");
		static private Thinkage.Libraries.Translation.Key DatabasesOnServer_Database = dsDatabasesOnServer.LabelKeyBuilder.K("Database");
		static private Thinkage.Libraries.Translation.Key DatabasesOnServer_Version = dsDatabasesOnServer.LabelKeyBuilder.K("Version");
		static private Thinkage.Libraries.Translation.Key DatabasesOnServer_OrganizationName = dsDatabasesOnServer.LabelKeyBuilder.K("OrganizationName");
		static private Thinkage.Libraries.Translation.Key DatabasesOnServer_UserRecordExists = dsDatabasesOnServer.LabelKeyBuilder.K("UserRecordExists");
		static private Thinkage.Libraries.Translation.Key DatabasesOnServer_AccessError = dsDatabasesOnServer.LabelKeyBuilder.K("AccessError");
	}
	#endif
	#endregion
}
