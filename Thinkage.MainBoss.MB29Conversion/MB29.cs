



//-----------------------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by the XAFBuild tool.
//		Template file DBIGenerationTemplate.xml
//		Vault version 100
//		XAFBuild title: Thinkage.XAFBuild.StudioAddin in Thinkage ToolKit 2.0.9.0
//		Changes to this file will be lost if the code is regenerated.
// #defines
//  <TableName>RowChangedEvents to have row changed events enabled
//	DefineForeignKeyConstraints - for the ForeignKeyConstraints to be enabled
//	DefineUniqueConstraints - for the UniqueConstraints to be enabled
//  SerializationSupport - for the Serialization of the dataset Constructor to be enabled
// </autogenerated>
//-----------------------------------------------------------------------------------------------

namespace Thinkage.MainBoss.MB29Conversion {
	using System;
	using System.Data;
	using System.Xml;
	using System.Runtime.Serialization;
	using Thinkage.Libraries.DBILibrary;
	using Thinkage.Libraries.DBAccess;

	[Serializable()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.ComponentModel.ToolboxItem(true)]
	[Thinkage.Libraries.Translation.Invariant]
	public class MB29 : XAFDataSet {

		#region Database Variables VAccessor
		public VAccessor V {
			get {
				if (_V == null)
					_V = new VAccessor(this);
				return _V;
			}
		}
		private VAccessor _V;
		[Thinkage.Libraries.Translation.Invariant]
		public class VAccessor {
			#region Typed Variable Accessors
			#endregion
			#region VAccessor Construction
			public VAccessor(MB29 this_dataset )
			{
			}
			#endregion
		}
		#endregion


		#region DataSet Construction

		internal void CommonCTOR() {
			InitClass();
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			DataVariables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
		[Obsolete("Do not call this, it is only here to support DataSet.Clone.", true)]
		public MB29() : base() {
			CommonCTOR();
		}
		public MB29(XAFClient db) : base(Schema, db) {
			CommonCTOR();
		}
		public MB29(IServer server) : base(Schema, server) {
			CommonCTOR();
		}
#if SerializationSupport
		protected MB29(SerializationInfo info, StreamingContext context) {
			/// ExtendedProperties are not copied in this CTOR if they are not part of the input stream. In particular, any delgate extended properties
			/// we put on datatables may not be copied. If we end up with any delegate extended properties on datatables, then we will need to
			/// amend the code below to propogate the properties itself
			string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
			if ((strSchema != null)) {
				DataSet ds = new DataSet();
				ds.ReadXmlSchema(XmlReader.Create(new System.IO.StringReader(strSchema)));
				if (ds.Tables["__Variables"] != null)
					this.Tables.Add( new DataVariable.__VariablesDataTable(ds.Tables["__Variables"]));
				if ((ds.Tables["CustomImportDirectives"] != null)) {
					this.Tables.Add(new CustomImportDirectivesDataTable(ds.Tables["CustomImportDirectives"]));
				}
				if ((ds.Tables["AtRequestAccounts"] != null)) {
					this.Tables.Add(new AtRequestAccountsDataTable(ds.Tables["AtRequestAccounts"]));
				}
				if ((ds.Tables["AtRequestConfiguration"] != null)) {
					this.Tables.Add(new AtRequestConfigurationDataTable(ds.Tables["AtRequestConfiguration"]));
				}
				if ((ds.Tables["Defaults"] != null)) {
					this.Tables.Add(new DefaultsDataTable(ds.Tables["Defaults"]));
				}
				if ((ds.Tables["ArchivedSets"] != null)) {
					this.Tables.Add(new ArchivedSetsDataTable(ds.Tables["ArchivedSets"]));
				}
				if ((ds.Tables["Permissions"] != null)) {
					this.Tables.Add(new PermissionsDataTable(ds.Tables["Permissions"]));
				}
				if ((ds.Tables["EditPrograms"] != null)) {
					this.Tables.Add(new EditProgramsDataTable(ds.Tables["EditPrograms"]));
				}
				if ((ds.Tables["Settings"] != null)) {
					this.Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
				}
				if ((ds.Tables["AccessCodes"] != null)) {
					this.Tables.Add(new AccessCodesDataTable(ds.Tables["AccessCodes"]));
				}
				if ((ds.Tables["Adjustments"] != null)) {
					this.Tables.Add(new AdjustmentsDataTable(ds.Tables["Adjustments"]));
				}
				if ((ds.Tables["AssetCodes"] != null)) {
					this.Tables.Add(new AssetCodesDataTable(ds.Tables["AssetCodes"]));
				}
				if ((ds.Tables["Buildings"] != null)) {
					this.Tables.Add(new BuildingsDataTable(ds.Tables["Buildings"]));
				}
				if ((ds.Tables["Chargebacks"] != null)) {
					this.Tables.Add(new ChargebacksDataTable(ds.Tables["Chargebacks"]));
				}
				if ((ds.Tables["ClosingCodes"] != null)) {
					this.Tables.Add(new ClosingCodesDataTable(ds.Tables["ClosingCodes"]));
				}
				if ((ds.Tables["Contacts"] != null)) {
					this.Tables.Add(new ContactsDataTable(ds.Tables["Contacts"]));
				}
				if ((ds.Tables["CostCenters"] != null)) {
					this.Tables.Add(new CostCentersDataTable(ds.Tables["CostCenters"]));
				}
				if ((ds.Tables["InvCategories"] != null)) {
					this.Tables.Add(new InvCategoriesDataTable(ds.Tables["InvCategories"]));
				}
				if ((ds.Tables["InvItems"] != null)) {
					this.Tables.Add(new InvItemsDataTable(ds.Tables["InvItems"]));
				}
				if ((ds.Tables["InvLocations"] != null)) {
					this.Tables.Add(new InvLocationsDataTable(ds.Tables["InvLocations"]));
				}
				if ((ds.Tables["InvTransactions"] != null)) {
					this.Tables.Add(new InvTransactionsDataTable(ds.Tables["InvTransactions"]));
				}
				if ((ds.Tables["Issues"] != null)) {
					this.Tables.Add(new IssuesDataTable(ds.Tables["Issues"]));
				}
				if ((ds.Tables["Labor"] != null)) {
					this.Tables.Add(new LaborDataTable(ds.Tables["Labor"]));
				}
				if ((ds.Tables["MeterHistory"] != null)) {
					this.Tables.Add(new MeterHistoryDataTable(ds.Tables["MeterHistory"]));
				}
				if ((ds.Tables["Meters"] != null)) {
					this.Tables.Add(new MetersDataTable(ds.Tables["Meters"]));
				}
				if ((ds.Tables["Obsoletes"] != null)) {
					this.Tables.Add(new ObsoletesDataTable(ds.Tables["Obsoletes"]));
				}
				if ((ds.Tables["Ownerships"] != null)) {
					this.Tables.Add(new OwnershipsDataTable(ds.Tables["Ownerships"]));
				}
				if ((ds.Tables["Personnel"] != null)) {
					this.Tables.Add(new PersonnelDataTable(ds.Tables["Personnel"]));
				}
				if ((ds.Tables["PreventiveSchedules"] != null)) {
					this.Tables.Add(new PreventiveSchedulesDataTable(ds.Tables["PreventiveSchedules"]));
				}
				if ((ds.Tables["Priorities"] != null)) {
					this.Tables.Add(new PrioritiesDataTable(ds.Tables["Priorities"]));
				}
				if ((ds.Tables["Projects"] != null)) {
					this.Tables.Add(new ProjectsDataTable(ds.Tables["Projects"]));
				}
				if ((ds.Tables["PurchaseExtras"] != null)) {
					this.Tables.Add(new PurchaseExtrasDataTable(ds.Tables["PurchaseExtras"]));
				}
				if ((ds.Tables["Purchases"] != null)) {
					this.Tables.Add(new PurchasesDataTable(ds.Tables["Purchases"]));
				}
				if ((ds.Tables["Receipts"] != null)) {
					this.Tables.Add(new ReceiptsDataTable(ds.Tables["Receipts"]));
				}
				if ((ds.Tables["ServiceContracts"] != null)) {
					this.Tables.Add(new ServiceContractsDataTable(ds.Tables["ServiceContracts"]));
				}
				if ((ds.Tables["ServicedEquipment"] != null)) {
					this.Tables.Add(new ServicedEquipmentDataTable(ds.Tables["ServicedEquipment"]));
				}
				if ((ds.Tables["ShippingModes"] != null)) {
					this.Tables.Add(new ShippingModesDataTable(ds.Tables["ShippingModes"]));
				}
				if ((ds.Tables["SpareParts"] != null)) {
					this.Tables.Add(new SparePartsDataTable(ds.Tables["SpareParts"]));
				}
				if ((ds.Tables["Specifications"] != null)) {
					this.Tables.Add(new SpecificationsDataTable(ds.Tables["Specifications"]));
				}
				if ((ds.Tables["Storerooms"] != null)) {
					this.Tables.Add(new StoreroomsDataTable(ds.Tables["Storerooms"]));
				}
				if ((ds.Tables["Systems"] != null)) {
					this.Tables.Add(new SystemsDataTable(ds.Tables["Systems"]));
				}
				if ((ds.Tables["Templates"] != null)) {
					this.Tables.Add(new TemplatesDataTable(ds.Tables["Templates"]));
				}
				if ((ds.Tables["Terms"] != null)) {
					this.Tables.Add(new TermsDataTable(ds.Tables["Terms"]));
				}
				if ((ds.Tables["Trades"] != null)) {
					this.Tables.Add(new TradesDataTable(ds.Tables["Trades"]));
				}
				if ((ds.Tables["UnitCategories"] != null)) {
					this.Tables.Add(new UnitCategoriesDataTable(ds.Tables["UnitCategories"]));
				}
				if ((ds.Tables["Units"] != null)) {
					this.Tables.Add(new UnitsDataTable(ds.Tables["Units"]));
				}
				if ((ds.Tables["UoM"] != null)) {
					this.Tables.Add(new UoMDataTable(ds.Tables["UoM"]));
				}
				if ((ds.Tables["VendorCategories"] != null)) {
					this.Tables.Add(new VendorCategoriesDataTable(ds.Tables["VendorCategories"]));
				}
				if ((ds.Tables["Vendors"] != null)) {
					this.Tables.Add(new VendorsDataTable(ds.Tables["Vendors"]));
				}
				if ((ds.Tables["WorkCategories"] != null)) {
					this.Tables.Add(new WorkCategoriesDataTable(ds.Tables["WorkCategories"]));
				}
				if ((ds.Tables["WorkOrders"] != null)) {
					this.Tables.Add(new WorkOrdersDataTable(ds.Tables["WorkOrders"]));
				}
				if ((ds.Tables["WorkRequests"] != null)) {
					this.Tables.Add(new WorkRequestsDataTable(ds.Tables["WorkRequests"]));
				}
				this.DataSetName = ds.DataSetName;
				this.Prefix = ds.Prefix;
				this.Namespace = ds.Namespace;
				this.Locale = ds.Locale;
				this.CaseSensitive = ds.CaseSensitive;
				this.EnforceConstraints = ds.EnforceConstraints;
				this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			}
			else
				this.InitClass();

			this.GetSerializationData(info, context);
			Tables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_T = null;
				_DT = null;
			};
			DataVariables.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
				_V = null;
			};
		}
#endif

		protected override void InitClass() {
			this.DataSetName = "MB29";
			this.Prefix = "";
			this.EnforceConstraints = false;
			base.InitClass();
			#region Foreign Key Constraints
			#if DefineForeignKeyConstraints

			#endif
			#endregion

		}
		#endregion

		#region Table Accessor Struct
		public TAccessor T {
			get {
				if (_T == null)
					_T = new TAccessor(this);
				return _T;
			}
		}
		private TAccessor _T;
		public class TAccessor {
			public TAccessor( MB29 this_dataset ) {
				this.CustomImportDirectives = (CustomImportDirectivesDataTable)this_dataset.Tables["CustomImportDirectives"];
				this.AtRequestAccounts = (AtRequestAccountsDataTable)this_dataset.Tables["AtRequestAccounts"];
				this.AtRequestConfiguration = (AtRequestConfigurationDataTable)this_dataset.Tables["AtRequestConfiguration"];
				this.Defaults = (DefaultsDataTable)this_dataset.Tables["Defaults"];
				this.ArchivedSets = (ArchivedSetsDataTable)this_dataset.Tables["ArchivedSets"];
				this.Permissions = (PermissionsDataTable)this_dataset.Tables["Permissions"];
				this.EditPrograms = (EditProgramsDataTable)this_dataset.Tables["EditPrograms"];
				this.Settings = (SettingsDataTable)this_dataset.Tables["Settings"];
				this.AccessCodes = (AccessCodesDataTable)this_dataset.Tables["AccessCodes"];
				this.Adjustments = (AdjustmentsDataTable)this_dataset.Tables["Adjustments"];
				this.AssetCodes = (AssetCodesDataTable)this_dataset.Tables["AssetCodes"];
				this.Buildings = (BuildingsDataTable)this_dataset.Tables["Buildings"];
				this.Chargebacks = (ChargebacksDataTable)this_dataset.Tables["Chargebacks"];
				this.ClosingCodes = (ClosingCodesDataTable)this_dataset.Tables["ClosingCodes"];
				this.Contacts = (ContactsDataTable)this_dataset.Tables["Contacts"];
				this.CostCenters = (CostCentersDataTable)this_dataset.Tables["CostCenters"];
				this.InvCategories = (InvCategoriesDataTable)this_dataset.Tables["InvCategories"];
				this.InvItems = (InvItemsDataTable)this_dataset.Tables["InvItems"];
				this.InvLocations = (InvLocationsDataTable)this_dataset.Tables["InvLocations"];
				this.InvTransactions = (InvTransactionsDataTable)this_dataset.Tables["InvTransactions"];
				this.Issues = (IssuesDataTable)this_dataset.Tables["Issues"];
				this.Labor = (LaborDataTable)this_dataset.Tables["Labor"];
				this.MeterHistory = (MeterHistoryDataTable)this_dataset.Tables["MeterHistory"];
				this.Meters = (MetersDataTable)this_dataset.Tables["Meters"];
				this.Obsoletes = (ObsoletesDataTable)this_dataset.Tables["Obsoletes"];
				this.Ownerships = (OwnershipsDataTable)this_dataset.Tables["Ownerships"];
				this.Personnel = (PersonnelDataTable)this_dataset.Tables["Personnel"];
				this.PreventiveSchedules = (PreventiveSchedulesDataTable)this_dataset.Tables["PreventiveSchedules"];
				this.Priorities = (PrioritiesDataTable)this_dataset.Tables["Priorities"];
				this.Projects = (ProjectsDataTable)this_dataset.Tables["Projects"];
				this.PurchaseExtras = (PurchaseExtrasDataTable)this_dataset.Tables["PurchaseExtras"];
				this.Purchases = (PurchasesDataTable)this_dataset.Tables["Purchases"];
				this.Receipts = (ReceiptsDataTable)this_dataset.Tables["Receipts"];
				this.ServiceContracts = (ServiceContractsDataTable)this_dataset.Tables["ServiceContracts"];
				this.ServicedEquipment = (ServicedEquipmentDataTable)this_dataset.Tables["ServicedEquipment"];
				this.ShippingModes = (ShippingModesDataTable)this_dataset.Tables["ShippingModes"];
				this.SpareParts = (SparePartsDataTable)this_dataset.Tables["SpareParts"];
				this.Specifications = (SpecificationsDataTable)this_dataset.Tables["Specifications"];
				this.Storerooms = (StoreroomsDataTable)this_dataset.Tables["Storerooms"];
				this.Systems = (SystemsDataTable)this_dataset.Tables["Systems"];
				this.Templates = (TemplatesDataTable)this_dataset.Tables["Templates"];
				this.Terms = (TermsDataTable)this_dataset.Tables["Terms"];
				this.Trades = (TradesDataTable)this_dataset.Tables["Trades"];
				this.UnitCategories = (UnitCategoriesDataTable)this_dataset.Tables["UnitCategories"];
				this.Units = (UnitsDataTable)this_dataset.Tables["Units"];
				this.UoM = (UoMDataTable)this_dataset.Tables["UoM"];
				this.VendorCategories = (VendorCategoriesDataTable)this_dataset.Tables["VendorCategories"];
				this.Vendors = (VendorsDataTable)this_dataset.Tables["Vendors"];
				this.WorkCategories = (WorkCategoriesDataTable)this_dataset.Tables["WorkCategories"];
				this.WorkOrders = (WorkOrdersDataTable)this_dataset.Tables["WorkOrders"];
				this.WorkRequests = (WorkRequestsDataTable)this_dataset.Tables["WorkRequests"];
			}
			public readonly CustomImportDirectivesDataTable CustomImportDirectives;
			public readonly AtRequestAccountsDataTable AtRequestAccounts;
			public readonly AtRequestConfigurationDataTable AtRequestConfiguration;
			public readonly DefaultsDataTable Defaults;
			public readonly ArchivedSetsDataTable ArchivedSets;
			public readonly PermissionsDataTable Permissions;
			public readonly EditProgramsDataTable EditPrograms;
			public readonly SettingsDataTable Settings;
			public readonly AccessCodesDataTable AccessCodes;
			public readonly AdjustmentsDataTable Adjustments;
			public readonly AssetCodesDataTable AssetCodes;
			public readonly BuildingsDataTable Buildings;
			public readonly ChargebacksDataTable Chargebacks;
			public readonly ClosingCodesDataTable ClosingCodes;
			public readonly ContactsDataTable Contacts;
			public readonly CostCentersDataTable CostCenters;
			public readonly InvCategoriesDataTable InvCategories;
			public readonly InvItemsDataTable InvItems;
			public readonly InvLocationsDataTable InvLocations;
			public readonly InvTransactionsDataTable InvTransactions;
			public readonly IssuesDataTable Issues;
			public readonly LaborDataTable Labor;
			public readonly MeterHistoryDataTable MeterHistory;
			public readonly MetersDataTable Meters;
			public readonly ObsoletesDataTable Obsoletes;
			public readonly OwnershipsDataTable Ownerships;
			public readonly PersonnelDataTable Personnel;
			public readonly PreventiveSchedulesDataTable PreventiveSchedules;
			public readonly PrioritiesDataTable Priorities;
			public readonly ProjectsDataTable Projects;
			public readonly PurchaseExtrasDataTable PurchaseExtras;
			public readonly PurchasesDataTable Purchases;
			public readonly ReceiptsDataTable Receipts;
			public readonly ServiceContractsDataTable ServiceContracts;
			public readonly ServicedEquipmentDataTable ServicedEquipment;
			public readonly ShippingModesDataTable ShippingModes;
			public readonly SparePartsDataTable SpareParts;
			public readonly SpecificationsDataTable Specifications;
			public readonly StoreroomsDataTable Storerooms;
			public readonly SystemsDataTable Systems;
			public readonly TemplatesDataTable Templates;
			public readonly TermsDataTable Terms;
			public readonly TradesDataTable Trades;
			public readonly UnitCategoriesDataTable UnitCategories;
			public readonly UnitsDataTable Units;
			public readonly UoMDataTable UoM;
			public readonly VendorCategoriesDataTable VendorCategories;
			public readonly VendorsDataTable Vendors;
			public readonly WorkCategoriesDataTable WorkCategories;
			public readonly WorkOrdersDataTable WorkOrders;
			public readonly WorkRequestsDataTable WorkRequests;
		}
		#endregion
		#region Default-table accessor struct
		public DTAccessor DT {
			get {
				if (_DT == null)
					_DT = new DTAccessor(this);
				return _DT;
			}
		}
		private DTAccessor _DT;
		public class DTAccessor {
			public DTAccessor( MB29 this_dataset ) {
				this.CustomImportDirectives = (CustomImportDirectivesDataTable)this_dataset.Tables["_DCustomImportDirectives"];
				this.AtRequestAccounts = (AtRequestAccountsDataTable)this_dataset.Tables["_DAtRequestAccounts"];
				this.AtRequestConfiguration = (AtRequestConfigurationDataTable)this_dataset.Tables["_DAtRequestConfiguration"];
				this.Defaults = (DefaultsDataTable)this_dataset.Tables["_DDefaults"];
				this.ArchivedSets = (ArchivedSetsDataTable)this_dataset.Tables["_DArchivedSets"];
				this.Permissions = (PermissionsDataTable)this_dataset.Tables["_DPermissions"];
				this.EditPrograms = (EditProgramsDataTable)this_dataset.Tables["_DEditPrograms"];
				this.Settings = (SettingsDataTable)this_dataset.Tables["_DSettings"];
				this.AccessCodes = (AccessCodesDataTable)this_dataset.Tables["_DAccessCodes"];
				this.Adjustments = (AdjustmentsDataTable)this_dataset.Tables["_DAdjustments"];
				this.AssetCodes = (AssetCodesDataTable)this_dataset.Tables["_DAssetCodes"];
				this.Buildings = (BuildingsDataTable)this_dataset.Tables["_DBuildings"];
				this.Chargebacks = (ChargebacksDataTable)this_dataset.Tables["_DChargebacks"];
				this.ClosingCodes = (ClosingCodesDataTable)this_dataset.Tables["_DClosingCodes"];
				this.Contacts = (ContactsDataTable)this_dataset.Tables["_DContacts"];
				this.CostCenters = (CostCentersDataTable)this_dataset.Tables["_DCostCenters"];
				this.InvCategories = (InvCategoriesDataTable)this_dataset.Tables["_DInvCategories"];
				this.InvItems = (InvItemsDataTable)this_dataset.Tables["_DInvItems"];
				this.InvLocations = (InvLocationsDataTable)this_dataset.Tables["_DInvLocations"];
				this.InvTransactions = (InvTransactionsDataTable)this_dataset.Tables["_DInvTransactions"];
				this.Issues = (IssuesDataTable)this_dataset.Tables["_DIssues"];
				this.Labor = (LaborDataTable)this_dataset.Tables["_DLabor"];
				this.MeterHistory = (MeterHistoryDataTable)this_dataset.Tables["_DMeterHistory"];
				this.Meters = (MetersDataTable)this_dataset.Tables["_DMeters"];
				this.Obsoletes = (ObsoletesDataTable)this_dataset.Tables["_DObsoletes"];
				this.Ownerships = (OwnershipsDataTable)this_dataset.Tables["_DOwnerships"];
				this.Personnel = (PersonnelDataTable)this_dataset.Tables["_DPersonnel"];
				this.PreventiveSchedules = (PreventiveSchedulesDataTable)this_dataset.Tables["_DPreventiveSchedules"];
				this.Priorities = (PrioritiesDataTable)this_dataset.Tables["_DPriorities"];
				this.Projects = (ProjectsDataTable)this_dataset.Tables["_DProjects"];
				this.PurchaseExtras = (PurchaseExtrasDataTable)this_dataset.Tables["_DPurchaseExtras"];
				this.Purchases = (PurchasesDataTable)this_dataset.Tables["_DPurchases"];
				this.Receipts = (ReceiptsDataTable)this_dataset.Tables["_DReceipts"];
				this.ServiceContracts = (ServiceContractsDataTable)this_dataset.Tables["_DServiceContracts"];
				this.ServicedEquipment = (ServicedEquipmentDataTable)this_dataset.Tables["_DServicedEquipment"];
				this.ShippingModes = (ShippingModesDataTable)this_dataset.Tables["_DShippingModes"];
				this.SpareParts = (SparePartsDataTable)this_dataset.Tables["_DSpareParts"];
				this.Specifications = (SpecificationsDataTable)this_dataset.Tables["_DSpecifications"];
				this.Storerooms = (StoreroomsDataTable)this_dataset.Tables["_DStorerooms"];
				this.Systems = (SystemsDataTable)this_dataset.Tables["_DSystems"];
				this.Templates = (TemplatesDataTable)this_dataset.Tables["_DTemplates"];
				this.Terms = (TermsDataTable)this_dataset.Tables["_DTerms"];
				this.Trades = (TradesDataTable)this_dataset.Tables["_DTrades"];
				this.UnitCategories = (UnitCategoriesDataTable)this_dataset.Tables["_DUnitCategories"];
				this.Units = (UnitsDataTable)this_dataset.Tables["_DUnits"];
				this.UoM = (UoMDataTable)this_dataset.Tables["_DUoM"];
				this.VendorCategories = (VendorCategoriesDataTable)this_dataset.Tables["_DVendorCategories"];
				this.Vendors = (VendorsDataTable)this_dataset.Tables["_DVendors"];
				this.WorkCategories = (WorkCategoriesDataTable)this_dataset.Tables["_DWorkCategories"];
				this.WorkOrders = (WorkOrdersDataTable)this_dataset.Tables["_DWorkOrders"];
				this.WorkRequests = (WorkRequestsDataTable)this_dataset.Tables["_DWorkRequests"];
			}
			public readonly CustomImportDirectivesDataTable CustomImportDirectives;
			public readonly AtRequestAccountsDataTable AtRequestAccounts;
			public readonly AtRequestConfigurationDataTable AtRequestConfiguration;
			public readonly DefaultsDataTable Defaults;
			public readonly ArchivedSetsDataTable ArchivedSets;
			public readonly PermissionsDataTable Permissions;
			public readonly EditProgramsDataTable EditPrograms;
			public readonly SettingsDataTable Settings;
			public readonly AccessCodesDataTable AccessCodes;
			public readonly AdjustmentsDataTable Adjustments;
			public readonly AssetCodesDataTable AssetCodes;
			public readonly BuildingsDataTable Buildings;
			public readonly ChargebacksDataTable Chargebacks;
			public readonly ClosingCodesDataTable ClosingCodes;
			public readonly ContactsDataTable Contacts;
			public readonly CostCentersDataTable CostCenters;
			public readonly InvCategoriesDataTable InvCategories;
			public readonly InvItemsDataTable InvItems;
			public readonly InvLocationsDataTable InvLocations;
			public readonly InvTransactionsDataTable InvTransactions;
			public readonly IssuesDataTable Issues;
			public readonly LaborDataTable Labor;
			public readonly MeterHistoryDataTable MeterHistory;
			public readonly MetersDataTable Meters;
			public readonly ObsoletesDataTable Obsoletes;
			public readonly OwnershipsDataTable Ownerships;
			public readonly PersonnelDataTable Personnel;
			public readonly PreventiveSchedulesDataTable PreventiveSchedules;
			public readonly PrioritiesDataTable Priorities;
			public readonly ProjectsDataTable Projects;
			public readonly PurchaseExtrasDataTable PurchaseExtras;
			public readonly PurchasesDataTable Purchases;
			public readonly ReceiptsDataTable Receipts;
			public readonly ServiceContractsDataTable ServiceContracts;
			public readonly ServicedEquipmentDataTable ServicedEquipment;
			public readonly ShippingModesDataTable ShippingModes;
			public readonly SparePartsDataTable SpareParts;
			public readonly SpecificationsDataTable Specifications;
			public readonly StoreroomsDataTable Storerooms;
			public readonly SystemsDataTable Systems;
			public readonly TemplatesDataTable Templates;
			public readonly TermsDataTable Terms;
			public readonly TradesDataTable Trades;
			public readonly UnitCategoriesDataTable UnitCategories;
			public readonly UnitsDataTable Units;
			public readonly UoMDataTable UoM;
			public readonly VendorCategoriesDataTable VendorCategories;
			public readonly VendorsDataTable Vendors;
			public readonly WorkCategoriesDataTable WorkCategories;
			public readonly WorkOrdersDataTable WorkOrders;
			public readonly WorkRequestsDataTable WorkRequests;
		}
		#endregion
		#region DataSet Streaming
		#if SerializationSupport
		protected override bool ShouldSerializeTables() {
			return false;
		}
		protected override bool ShouldSerializeRelations() {
			return false;
		}
		protected override void ReadXmlSerializable(XmlReader reader) {
			this.Reset();
			DataSet ds = new DataSet();
			ds.ReadXml(reader);
			if ((ds.Tables["__Variables"] != null))
				this.Tables.Add( new DataVariable.__VariablesDataTable(ds.Tables["__Variables"]));
			if ((ds.Tables["CustomImportDirectives"] != null)) {
				this.Tables.Add(new CustomImportDirectivesDataTable(ds.Tables["CustomImportDirectives"]));
			}
			if ((ds.Tables["AtRequestAccounts"] != null)) {
				this.Tables.Add(new AtRequestAccountsDataTable(ds.Tables["AtRequestAccounts"]));
			}
			if ((ds.Tables["AtRequestConfiguration"] != null)) {
				this.Tables.Add(new AtRequestConfigurationDataTable(ds.Tables["AtRequestConfiguration"]));
			}
			if ((ds.Tables["Defaults"] != null)) {
				this.Tables.Add(new DefaultsDataTable(ds.Tables["Defaults"]));
			}
			if ((ds.Tables["ArchivedSets"] != null)) {
				this.Tables.Add(new ArchivedSetsDataTable(ds.Tables["ArchivedSets"]));
			}
			if ((ds.Tables["Permissions"] != null)) {
				this.Tables.Add(new PermissionsDataTable(ds.Tables["Permissions"]));
			}
			if ((ds.Tables["EditPrograms"] != null)) {
				this.Tables.Add(new EditProgramsDataTable(ds.Tables["EditPrograms"]));
			}
			if ((ds.Tables["Settings"] != null)) {
				this.Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
			}
			if ((ds.Tables["AccessCodes"] != null)) {
				this.Tables.Add(new AccessCodesDataTable(ds.Tables["AccessCodes"]));
			}
			if ((ds.Tables["Adjustments"] != null)) {
				this.Tables.Add(new AdjustmentsDataTable(ds.Tables["Adjustments"]));
			}
			if ((ds.Tables["AssetCodes"] != null)) {
				this.Tables.Add(new AssetCodesDataTable(ds.Tables["AssetCodes"]));
			}
			if ((ds.Tables["Buildings"] != null)) {
				this.Tables.Add(new BuildingsDataTable(ds.Tables["Buildings"]));
			}
			if ((ds.Tables["Chargebacks"] != null)) {
				this.Tables.Add(new ChargebacksDataTable(ds.Tables["Chargebacks"]));
			}
			if ((ds.Tables["ClosingCodes"] != null)) {
				this.Tables.Add(new ClosingCodesDataTable(ds.Tables["ClosingCodes"]));
			}
			if ((ds.Tables["Contacts"] != null)) {
				this.Tables.Add(new ContactsDataTable(ds.Tables["Contacts"]));
			}
			if ((ds.Tables["CostCenters"] != null)) {
				this.Tables.Add(new CostCentersDataTable(ds.Tables["CostCenters"]));
			}
			if ((ds.Tables["InvCategories"] != null)) {
				this.Tables.Add(new InvCategoriesDataTable(ds.Tables["InvCategories"]));
			}
			if ((ds.Tables["InvItems"] != null)) {
				this.Tables.Add(new InvItemsDataTable(ds.Tables["InvItems"]));
			}
			if ((ds.Tables["InvLocations"] != null)) {
				this.Tables.Add(new InvLocationsDataTable(ds.Tables["InvLocations"]));
			}
			if ((ds.Tables["InvTransactions"] != null)) {
				this.Tables.Add(new InvTransactionsDataTable(ds.Tables["InvTransactions"]));
			}
			if ((ds.Tables["Issues"] != null)) {
				this.Tables.Add(new IssuesDataTable(ds.Tables["Issues"]));
			}
			if ((ds.Tables["Labor"] != null)) {
				this.Tables.Add(new LaborDataTable(ds.Tables["Labor"]));
			}
			if ((ds.Tables["MeterHistory"] != null)) {
				this.Tables.Add(new MeterHistoryDataTable(ds.Tables["MeterHistory"]));
			}
			if ((ds.Tables["Meters"] != null)) {
				this.Tables.Add(new MetersDataTable(ds.Tables["Meters"]));
			}
			if ((ds.Tables["Obsoletes"] != null)) {
				this.Tables.Add(new ObsoletesDataTable(ds.Tables["Obsoletes"]));
			}
			if ((ds.Tables["Ownerships"] != null)) {
				this.Tables.Add(new OwnershipsDataTable(ds.Tables["Ownerships"]));
			}
			if ((ds.Tables["Personnel"] != null)) {
				this.Tables.Add(new PersonnelDataTable(ds.Tables["Personnel"]));
			}
			if ((ds.Tables["PreventiveSchedules"] != null)) {
				this.Tables.Add(new PreventiveSchedulesDataTable(ds.Tables["PreventiveSchedules"]));
			}
			if ((ds.Tables["Priorities"] != null)) {
				this.Tables.Add(new PrioritiesDataTable(ds.Tables["Priorities"]));
			}
			if ((ds.Tables["Projects"] != null)) {
				this.Tables.Add(new ProjectsDataTable(ds.Tables["Projects"]));
			}
			if ((ds.Tables["PurchaseExtras"] != null)) {
				this.Tables.Add(new PurchaseExtrasDataTable(ds.Tables["PurchaseExtras"]));
			}
			if ((ds.Tables["Purchases"] != null)) {
				this.Tables.Add(new PurchasesDataTable(ds.Tables["Purchases"]));
			}
			if ((ds.Tables["Receipts"] != null)) {
				this.Tables.Add(new ReceiptsDataTable(ds.Tables["Receipts"]));
			}
			if ((ds.Tables["ServiceContracts"] != null)) {
				this.Tables.Add(new ServiceContractsDataTable(ds.Tables["ServiceContracts"]));
			}
			if ((ds.Tables["ServicedEquipment"] != null)) {
				this.Tables.Add(new ServicedEquipmentDataTable(ds.Tables["ServicedEquipment"]));
			}
			if ((ds.Tables["ShippingModes"] != null)) {
				this.Tables.Add(new ShippingModesDataTable(ds.Tables["ShippingModes"]));
			}
			if ((ds.Tables["SpareParts"] != null)) {
				this.Tables.Add(new SparePartsDataTable(ds.Tables["SpareParts"]));
			}
			if ((ds.Tables["Specifications"] != null)) {
				this.Tables.Add(new SpecificationsDataTable(ds.Tables["Specifications"]));
			}
			if ((ds.Tables["Storerooms"] != null)) {
				this.Tables.Add(new StoreroomsDataTable(ds.Tables["Storerooms"]));
			}
			if ((ds.Tables["Systems"] != null)) {
				this.Tables.Add(new SystemsDataTable(ds.Tables["Systems"]));
			}
			if ((ds.Tables["Templates"] != null)) {
				this.Tables.Add(new TemplatesDataTable(ds.Tables["Templates"]));
			}
			if ((ds.Tables["Terms"] != null)) {
				this.Tables.Add(new TermsDataTable(ds.Tables["Terms"]));
			}
			if ((ds.Tables["Trades"] != null)) {
				this.Tables.Add(new TradesDataTable(ds.Tables["Trades"]));
			}
			if ((ds.Tables["UnitCategories"] != null)) {
				this.Tables.Add(new UnitCategoriesDataTable(ds.Tables["UnitCategories"]));
			}
			if ((ds.Tables["Units"] != null)) {
				this.Tables.Add(new UnitsDataTable(ds.Tables["Units"]));
			}
			if ((ds.Tables["UoM"] != null)) {
				this.Tables.Add(new UoMDataTable(ds.Tables["UoM"]));
			}
			if ((ds.Tables["VendorCategories"] != null)) {
				this.Tables.Add(new VendorCategoriesDataTable(ds.Tables["VendorCategories"]));
			}
			if ((ds.Tables["Vendors"] != null)) {
				this.Tables.Add(new VendorsDataTable(ds.Tables["Vendors"]));
			}
			if ((ds.Tables["WorkCategories"] != null)) {
				this.Tables.Add(new WorkCategoriesDataTable(ds.Tables["WorkCategories"]));
			}
			if ((ds.Tables["WorkOrders"] != null)) {
				this.Tables.Add(new WorkOrdersDataTable(ds.Tables["WorkOrders"]));
			}
			if ((ds.Tables["WorkRequests"] != null)) {
				this.Tables.Add(new WorkRequestsDataTable(ds.Tables["WorkRequests"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
			this.InitVars();
		}
		protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
			System.IO.MemoryStream stream = new System.IO.MemoryStream();
			this.WriteXmlSchema(XmlWriter.Create(stream));
			stream.Position = 0;
			return System.Xml.Schema.XmlSchema.Read(XmlReader.Create(stream), null);
		}
		#endif
		#endregion

		#region DataTable Classes
		#region CustomImportDirectives
		private bool ShouldSerializeCustomImportDirectives() {
			return false;
		}
#if CustomImportDirectivesRowChangeEvents
		public delegate void CustomImportDirectivesRowChangeEventHandler(object sender, CustomImportDirectivesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class CustomImportDirectivesDataTable : DBIDataTable {
			#region Construction
			internal CustomImportDirectivesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal CustomImportDirectivesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(CustomImportDirectivesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.DIRECTIVE = (DBIDataColumn)t.Columns["DIRECTIVE"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn DIRECTIVE;
			}
			#endregion
			#region EventHandlers
			#if CustomImportDirectivesRowChangeEvents
			public event CustomImportDirectivesRowChangeEventHandler CustomImportDirectivesRowChanged;
			public event CustomImportDirectivesRowChangeEventHandler CustomImportDirectivesRowChanging;
			public event CustomImportDirectivesRowChangeEventHandler CustomImportDirectivesRowDeleted;
			public event CustomImportDirectivesRowChangeEventHandler CustomImportDirectivesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.CustomImportDirectivesRowChanged != null)) {
					this.CustomImportDirectivesRowChanged(this, new CustomImportDirectivesRowChangeEvent(((CustomImportDirectivesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.CustomImportDirectivesRowChanging != null)) {
					this.CustomImportDirectivesRowChanging(this, new CustomImportDirectivesRowChangeEvent(((CustomImportDirectivesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.CustomImportDirectivesRowDeleted != null)) {
					this.CustomImportDirectivesRowDeleted(this, new CustomImportDirectivesRowChangeEvent(((CustomImportDirectivesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.CustomImportDirectivesRowDeleting != null)) {
					 this.CustomImportDirectivesRowDeleting(this, new CustomImportDirectivesRowChangeEvent(((CustomImportDirectivesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new CustomImportDirectivesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public CustomImportDirectivesRow this[int index] {
				get {
					return ((CustomImportDirectivesRow)(this.Rows[index]));
				}
			}
			public void AddCustomImportDirectivesRow(CustomImportDirectivesRow row) {
				this.Rows.Add(row);
			}
			public CustomImportDirectivesRow AddNewCustomImportDirectivesRow() {
				return ((CustomImportDirectivesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.CustomImportDirectives)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new CustomImportDirectivesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(CustomImportDirectivesRow);
			}
			public void RemoveCustomImportDirectivesRow(CustomImportDirectivesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region CustomImportDirectivesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class CustomImportDirectivesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal CustomImportDirectivesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly CustomImportDirectivesDataTable this_table;
				private readonly CustomImportDirectivesRow this_row;
				public FAccessor( CustomImportDirectivesRow this_row )
				{
					this.this_table = ((CustomImportDirectivesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.CustomImportDirectives.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.CustomImportDirectives.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String DIRECTIVE {
					get {
							return (System.String)Schema.T.CustomImportDirectives.F.DIRECTIVE.EffectiveType.GenericAsNativeType(this_table.F.DIRECTIVE[this_row], typeof(System.String));
					}
					set {this_table.F.DIRECTIVE[this_row] = value; }
				}
			}
		}
		#endregion
		#region CustomImportDirectivesRowChangeEvent
#if CustomImportDirectivesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class CustomImportDirectivesRowChangeEvent : EventArgs {

			private CustomImportDirectivesRow eventRow;

			private DataRowAction eventAction;

			public CustomImportDirectivesRowChangeEvent(CustomImportDirectivesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public CustomImportDirectivesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region AtRequestAccounts
		private bool ShouldSerializeAtRequestAccounts() {
			return false;
		}
#if AtRequestAccountsRowChangeEvents
		public delegate void AtRequestAccountsRowChangeEventHandler(object sender, AtRequestAccountsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class AtRequestAccountsDataTable : DBIDataTable {
			#region Construction
			internal AtRequestAccountsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal AtRequestAccountsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(AtRequestAccountsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.FLAGS = (DBIDataColumn)t.Columns["FLAGS"];
				  this.CONTACTKEY = (DBIDataColumn)t.Columns["CONTACTKEY"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn FLAGS;
				public readonly DBIDataColumn CONTACTKEY;
			}
			#endregion
			#region EventHandlers
			#if AtRequestAccountsRowChangeEvents
			public event AtRequestAccountsRowChangeEventHandler AtRequestAccountsRowChanged;
			public event AtRequestAccountsRowChangeEventHandler AtRequestAccountsRowChanging;
			public event AtRequestAccountsRowChangeEventHandler AtRequestAccountsRowDeleted;
			public event AtRequestAccountsRowChangeEventHandler AtRequestAccountsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.AtRequestAccountsRowChanged != null)) {
					this.AtRequestAccountsRowChanged(this, new AtRequestAccountsRowChangeEvent(((AtRequestAccountsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.AtRequestAccountsRowChanging != null)) {
					this.AtRequestAccountsRowChanging(this, new AtRequestAccountsRowChangeEvent(((AtRequestAccountsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.AtRequestAccountsRowDeleted != null)) {
					this.AtRequestAccountsRowDeleted(this, new AtRequestAccountsRowChangeEvent(((AtRequestAccountsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.AtRequestAccountsRowDeleting != null)) {
					 this.AtRequestAccountsRowDeleting(this, new AtRequestAccountsRowChangeEvent(((AtRequestAccountsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new AtRequestAccountsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public AtRequestAccountsRow this[int index] {
				get {
					return ((AtRequestAccountsRow)(this.Rows[index]));
				}
			}
			public void AddAtRequestAccountsRow(AtRequestAccountsRow row) {
				this.Rows.Add(row);
			}
			public AtRequestAccountsRow AddNewAtRequestAccountsRow() {
				return ((AtRequestAccountsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.AtRequestAccounts)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new AtRequestAccountsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(AtRequestAccountsRow);
			}
			public void RemoveAtRequestAccountsRow(AtRequestAccountsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region AtRequestAccountsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class AtRequestAccountsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal AtRequestAccountsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly AtRequestAccountsDataTable this_table;
				private readonly AtRequestAccountsRow this_row;
				public FAccessor( AtRequestAccountsRow this_row )
				{
					this.this_table = ((AtRequestAccountsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.AtRequestAccounts.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.AtRequestAccounts.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.AtRequestAccounts.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.Int32? FLAGS {
					get {
							return (System.Int32?)Schema.T.AtRequestAccounts.F.FLAGS.EffectiveType.GenericAsNativeType(this_table.F.FLAGS[this_row], typeof(System.Int32?));
					}
					set {this_table.F.FLAGS[this_row] = value; }
				}

				public System.Int32? CONTACTKEY {
					get {
							return (System.Int32?)Schema.T.AtRequestAccounts.F.CONTACTKEY.EffectiveType.GenericAsNativeType(this_table.F.CONTACTKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.CONTACTKEY[this_row] = value; }
				}
			}
		}
		#endregion
		#region AtRequestAccountsRowChangeEvent
#if AtRequestAccountsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class AtRequestAccountsRowChangeEvent : EventArgs {

			private AtRequestAccountsRow eventRow;

			private DataRowAction eventAction;

			public AtRequestAccountsRowChangeEvent(AtRequestAccountsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public AtRequestAccountsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region AtRequestConfiguration
		private bool ShouldSerializeAtRequestConfiguration() {
			return false;
		}
#if AtRequestConfigurationRowChangeEvents
		public delegate void AtRequestConfigurationRowChangeEventHandler(object sender, AtRequestConfigurationRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class AtRequestConfigurationDataTable : DBIDataTable {
			#region Construction
			internal AtRequestConfigurationDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal AtRequestConfigurationDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(AtRequestConfigurationDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.VALUE = (DBIDataColumn)t.Columns["VALUE"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn VALUE;
			}
			#endregion
			#region EventHandlers
			#if AtRequestConfigurationRowChangeEvents
			public event AtRequestConfigurationRowChangeEventHandler AtRequestConfigurationRowChanged;
			public event AtRequestConfigurationRowChangeEventHandler AtRequestConfigurationRowChanging;
			public event AtRequestConfigurationRowChangeEventHandler AtRequestConfigurationRowDeleted;
			public event AtRequestConfigurationRowChangeEventHandler AtRequestConfigurationRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.AtRequestConfigurationRowChanged != null)) {
					this.AtRequestConfigurationRowChanged(this, new AtRequestConfigurationRowChangeEvent(((AtRequestConfigurationRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.AtRequestConfigurationRowChanging != null)) {
					this.AtRequestConfigurationRowChanging(this, new AtRequestConfigurationRowChangeEvent(((AtRequestConfigurationRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.AtRequestConfigurationRowDeleted != null)) {
					this.AtRequestConfigurationRowDeleted(this, new AtRequestConfigurationRowChangeEvent(((AtRequestConfigurationRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.AtRequestConfigurationRowDeleting != null)) {
					 this.AtRequestConfigurationRowDeleting(this, new AtRequestConfigurationRowChangeEvent(((AtRequestConfigurationRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new AtRequestConfigurationDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public AtRequestConfigurationRow this[int index] {
				get {
					return ((AtRequestConfigurationRow)(this.Rows[index]));
				}
			}
			public void AddAtRequestConfigurationRow(AtRequestConfigurationRow row) {
				this.Rows.Add(row);
			}
			public AtRequestConfigurationRow AddNewAtRequestConfigurationRow() {
				return ((AtRequestConfigurationRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.AtRequestConfiguration)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new AtRequestConfigurationRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(AtRequestConfigurationRow);
			}
			public void RemoveAtRequestConfigurationRow(AtRequestConfigurationRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region AtRequestConfigurationRow
		[Thinkage.Libraries.Translation.Invariant]
		public class AtRequestConfigurationRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal AtRequestConfigurationRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly AtRequestConfigurationDataTable this_table;
				private readonly AtRequestConfigurationRow this_row;
				public FAccessor( AtRequestConfigurationRow this_row )
				{
					this.this_table = ((AtRequestConfigurationDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.AtRequestConfiguration.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.AtRequestConfiguration.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.AtRequestConfiguration.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String VALUE {
					get {
							return (System.String)Schema.T.AtRequestConfiguration.F.VALUE.EffectiveType.GenericAsNativeType(this_table.F.VALUE[this_row], typeof(System.String));
					}
					set {this_table.F.VALUE[this_row] = value; }
				}
			}
		}
		#endregion
		#region AtRequestConfigurationRowChangeEvent
#if AtRequestConfigurationRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class AtRequestConfigurationRowChangeEvent : EventArgs {

			private AtRequestConfigurationRow eventRow;

			private DataRowAction eventAction;

			public AtRequestConfigurationRowChangeEvent(AtRequestConfigurationRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public AtRequestConfigurationRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Defaults
		private bool ShouldSerializeDefaults() {
			return false;
		}
#if DefaultsRowChangeEvents
		public delegate void DefaultsRowChangeEventHandler(object sender, DefaultsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class DefaultsDataTable : DBIDataTable {
			#region Construction
			internal DefaultsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal DefaultsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(DefaultsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.LGEND = (DBIDataColumn)t.Columns["LGEND"];
				  this.GFREQ = (DBIDataColumn)t.Columns["GFREQ"];
				  this.PHONEPREX = (DBIDataColumn)t.Columns["PHONEPREX"];
				  this.EDITPKEY = (DBIDataColumn)t.Columns["EDITPKEY"];
				  this.SERIAL = (DBIDataColumn)t.Columns["SERIAL"];
				  this.COMPANYNAM = (DBIDataColumn)t.Columns["COMPANYNAM"];
				  this.COMPANYADD = (DBIDataColumn)t.Columns["COMPANYADD"];
				  this.BILLADDR = (DBIDataColumn)t.Columns["BILLADDR"];
				  this.POCONTACT = (DBIDataColumn)t.Columns["POCONTACT"];
				  this.REINDEX = (DBIDataColumn)t.Columns["REINDEX"];
				  this.PRFORMAT = (DBIDataColumn)t.Columns["PRFORMAT"];
				  this.POFORMAT = (DBIDataColumn)t.Columns["POFORMAT"];
				  this.WRFORMAT = (DBIDataColumn)t.Columns["WRFORMAT"];
				  this.WOFORMAT = (DBIDataColumn)t.Columns["WOFORMAT"];
				  this.CURRSYM = (DBIDataColumn)t.Columns["CURRSYM"];
				  this.FRDATE = (DBIDataColumn)t.Columns["FRDATE"];
				  this.FRCPOS = (DBIDataColumn)t.Columns["FRCPOS"];
				  this.FRCNEG = (DBIDataColumn)t.Columns["FRCNEG"];
				  this.FRCDEC = (DBIDataColumn)t.Columns["FRCDEC"];
				  this.FRCGROUP = (DBIDataColumn)t.Columns["FRCGROUP"];
				  this.FRCGSIZE = (DBIDataColumn)t.Columns["FRCGSIZE"];
				  this.FRCLGSIZE = (DBIDataColumn)t.Columns["FRCLGSIZE"];
				  this.FCDORDER = (DBIDataColumn)t.Columns["FCDORDER"];
				  this.FCDDELIM = (DBIDataColumn)t.Columns["FCDDELIM"];
				  this.FCDMFORM = (DBIDataColumn)t.Columns["FCDMFORM"];
				  this.FCTAMPM = (DBIDataColumn)t.Columns["FCTAMPM"];
				  this.DBVERSION = (DBIDataColumn)t.Columns["DBVERSION"];
				  this.MINVERSION = (DBIDataColumn)t.Columns["MINVERSION"];
				  this.UPGRSTEP = (DBIDataColumn)t.Columns["UPGRSTEP"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn LGEND;
				public readonly DBIDataColumn GFREQ;
				public readonly DBIDataColumn PHONEPREX;
				public readonly DBIDataColumn EDITPKEY;
				public readonly DBIDataColumn SERIAL;
				public readonly DBIDataColumn COMPANYNAM;
				public readonly DBIDataColumn COMPANYADD;
				public readonly DBIDataColumn BILLADDR;
				public readonly DBIDataColumn POCONTACT;
				public readonly DBIDataColumn REINDEX;
				public readonly DBIDataColumn PRFORMAT;
				public readonly DBIDataColumn POFORMAT;
				public readonly DBIDataColumn WRFORMAT;
				public readonly DBIDataColumn WOFORMAT;
				public readonly DBIDataColumn CURRSYM;
				public readonly DBIDataColumn FRDATE;
				public readonly DBIDataColumn FRCPOS;
				public readonly DBIDataColumn FRCNEG;
				public readonly DBIDataColumn FRCDEC;
				public readonly DBIDataColumn FRCGROUP;
				public readonly DBIDataColumn FRCGSIZE;
				public readonly DBIDataColumn FRCLGSIZE;
				public readonly DBIDataColumn FCDORDER;
				public readonly DBIDataColumn FCDDELIM;
				public readonly DBIDataColumn FCDMFORM;
				public readonly DBIDataColumn FCTAMPM;
				public readonly DBIDataColumn DBVERSION;
				public readonly DBIDataColumn MINVERSION;
				public readonly DBIDataColumn UPGRSTEP;
			}
			#endregion
			#region EventHandlers
			#if DefaultsRowChangeEvents
			public event DefaultsRowChangeEventHandler DefaultsRowChanged;
			public event DefaultsRowChangeEventHandler DefaultsRowChanging;
			public event DefaultsRowChangeEventHandler DefaultsRowDeleted;
			public event DefaultsRowChangeEventHandler DefaultsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.DefaultsRowChanged != null)) {
					this.DefaultsRowChanged(this, new DefaultsRowChangeEvent(((DefaultsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.DefaultsRowChanging != null)) {
					this.DefaultsRowChanging(this, new DefaultsRowChangeEvent(((DefaultsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.DefaultsRowDeleted != null)) {
					this.DefaultsRowDeleted(this, new DefaultsRowChangeEvent(((DefaultsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.DefaultsRowDeleting != null)) {
					 this.DefaultsRowDeleting(this, new DefaultsRowChangeEvent(((DefaultsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new DefaultsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public DefaultsRow this[int index] {
				get {
					return ((DefaultsRow)(this.Rows[index]));
				}
			}
			public void AddDefaultsRow(DefaultsRow row) {
				this.Rows.Add(row);
			}
			public DefaultsRow AddNewDefaultsRow() {
				return ((DefaultsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Defaults)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new DefaultsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(DefaultsRow);
			}
			public void RemoveDefaultsRow(DefaultsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region DefaultsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class DefaultsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal DefaultsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly DefaultsDataTable this_table;
				private readonly DefaultsRow this_row;
				public FAccessor( DefaultsRow this_row )
				{
					this.this_table = ((DefaultsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Defaults.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Defaults.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.DateTime? LGEND {
					get {
							return (System.DateTime?)Schema.T.Defaults.F.LGEND.EffectiveType.GenericAsNativeType(this_table.F.LGEND[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.LGEND[this_row] = value; }
				}

				public System.String GFREQ {
					get {
							return (System.String)Schema.T.Defaults.F.GFREQ.EffectiveType.GenericAsNativeType(this_table.F.GFREQ[this_row], typeof(System.String));
					}
					set {this_table.F.GFREQ[this_row] = value; }
				}

				public System.String PHONEPREX {
					get {
							return (System.String)Schema.T.Defaults.F.PHONEPREX.EffectiveType.GenericAsNativeType(this_table.F.PHONEPREX[this_row], typeof(System.String));
					}
					set {this_table.F.PHONEPREX[this_row] = value; }
				}

				public System.Int32? EDITPKEY {
					get {
							return (System.Int32?)Schema.T.Defaults.F.EDITPKEY.EffectiveType.GenericAsNativeType(this_table.F.EDITPKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.EDITPKEY[this_row] = value; }
				}

				public System.String SERIAL {
					get {
							return (System.String)Schema.T.Defaults.F.SERIAL.EffectiveType.GenericAsNativeType(this_table.F.SERIAL[this_row], typeof(System.String));
					}
					set {this_table.F.SERIAL[this_row] = value; }
				}

				public System.String COMPANYNAM {
					get {
							return (System.String)Schema.T.Defaults.F.COMPANYNAM.EffectiveType.GenericAsNativeType(this_table.F.COMPANYNAM[this_row], typeof(System.String));
					}
					set {this_table.F.COMPANYNAM[this_row] = value; }
				}

				public System.String COMPANYADD {
					get {
							return (System.String)Schema.T.Defaults.F.COMPANYADD.EffectiveType.GenericAsNativeType(this_table.F.COMPANYADD[this_row], typeof(System.String));
					}
					set {this_table.F.COMPANYADD[this_row] = value; }
				}

				public System.String BILLADDR {
					get {
							return (System.String)Schema.T.Defaults.F.BILLADDR.EffectiveType.GenericAsNativeType(this_table.F.BILLADDR[this_row], typeof(System.String));
					}
					set {this_table.F.BILLADDR[this_row] = value; }
				}

				public System.String POCONTACT {
					get {
							return (System.String)Schema.T.Defaults.F.POCONTACT.EffectiveType.GenericAsNativeType(this_table.F.POCONTACT[this_row], typeof(System.String));
					}
					set {this_table.F.POCONTACT[this_row] = value; }
				}

				public System.Int32? REINDEX {
					get {
							return (System.Int32?)Schema.T.Defaults.F.REINDEX.EffectiveType.GenericAsNativeType(this_table.F.REINDEX[this_row], typeof(System.Int32?));
					}
					set {this_table.F.REINDEX[this_row] = value; }
				}

				public System.String PRFORMAT {
					get {
							return (System.String)Schema.T.Defaults.F.PRFORMAT.EffectiveType.GenericAsNativeType(this_table.F.PRFORMAT[this_row], typeof(System.String));
					}
					set {this_table.F.PRFORMAT[this_row] = value; }
				}

				public System.String POFORMAT {
					get {
							return (System.String)Schema.T.Defaults.F.POFORMAT.EffectiveType.GenericAsNativeType(this_table.F.POFORMAT[this_row], typeof(System.String));
					}
					set {this_table.F.POFORMAT[this_row] = value; }
				}

				public System.String WRFORMAT {
					get {
							return (System.String)Schema.T.Defaults.F.WRFORMAT.EffectiveType.GenericAsNativeType(this_table.F.WRFORMAT[this_row], typeof(System.String));
					}
					set {this_table.F.WRFORMAT[this_row] = value; }
				}

				public System.String WOFORMAT {
					get {
							return (System.String)Schema.T.Defaults.F.WOFORMAT.EffectiveType.GenericAsNativeType(this_table.F.WOFORMAT[this_row], typeof(System.String));
					}
					set {this_table.F.WOFORMAT[this_row] = value; }
				}

				public System.String CURRSYM {
					get {
							return (System.String)Schema.T.Defaults.F.CURRSYM.EffectiveType.GenericAsNativeType(this_table.F.CURRSYM[this_row], typeof(System.String));
					}
					set {this_table.F.CURRSYM[this_row] = value; }
				}

				public System.String FRDATE {
					get {
							return (System.String)Schema.T.Defaults.F.FRDATE.EffectiveType.GenericAsNativeType(this_table.F.FRDATE[this_row], typeof(System.String));
					}
					set {this_table.F.FRDATE[this_row] = value; }
				}

				public System.String FRCPOS {
					get {
							return (System.String)Schema.T.Defaults.F.FRCPOS.EffectiveType.GenericAsNativeType(this_table.F.FRCPOS[this_row], typeof(System.String));
					}
					set {this_table.F.FRCPOS[this_row] = value; }
				}

				public System.String FRCNEG {
					get {
							return (System.String)Schema.T.Defaults.F.FRCNEG.EffectiveType.GenericAsNativeType(this_table.F.FRCNEG[this_row], typeof(System.String));
					}
					set {this_table.F.FRCNEG[this_row] = value; }
				}

				public System.String FRCDEC {
					get {
							return (System.String)Schema.T.Defaults.F.FRCDEC.EffectiveType.GenericAsNativeType(this_table.F.FRCDEC[this_row], typeof(System.String));
					}
					set {this_table.F.FRCDEC[this_row] = value; }
				}

				public System.String FRCGROUP {
					get {
							return (System.String)Schema.T.Defaults.F.FRCGROUP.EffectiveType.GenericAsNativeType(this_table.F.FRCGROUP[this_row], typeof(System.String));
					}
					set {this_table.F.FRCGROUP[this_row] = value; }
				}

				public System.Int32? FRCGSIZE {
					get {
							return (System.Int32?)Schema.T.Defaults.F.FRCGSIZE.EffectiveType.GenericAsNativeType(this_table.F.FRCGSIZE[this_row], typeof(System.Int32?));
					}
					set {this_table.F.FRCGSIZE[this_row] = value; }
				}

				public System.Int32? FRCLGSIZE {
					get {
							return (System.Int32?)Schema.T.Defaults.F.FRCLGSIZE.EffectiveType.GenericAsNativeType(this_table.F.FRCLGSIZE[this_row], typeof(System.Int32?));
					}
					set {this_table.F.FRCLGSIZE[this_row] = value; }
				}

				public System.Int32? FCDORDER {
					get {
							return (System.Int32?)Schema.T.Defaults.F.FCDORDER.EffectiveType.GenericAsNativeType(this_table.F.FCDORDER[this_row], typeof(System.Int32?));
					}
					set {this_table.F.FCDORDER[this_row] = value; }
				}

				public System.Int32? FCDDELIM {
					get {
							return (System.Int32?)Schema.T.Defaults.F.FCDDELIM.EffectiveType.GenericAsNativeType(this_table.F.FCDDELIM[this_row], typeof(System.Int32?));
					}
					set {this_table.F.FCDDELIM[this_row] = value; }
				}

				public System.Int32? FCDMFORM {
					get {
							return (System.Int32?)Schema.T.Defaults.F.FCDMFORM.EffectiveType.GenericAsNativeType(this_table.F.FCDMFORM[this_row], typeof(System.Int32?));
					}
					set {this_table.F.FCDMFORM[this_row] = value; }
				}

				public System.Boolean? FCTAMPM {
					get {
							return (System.Boolean?)Schema.T.Defaults.F.FCTAMPM.EffectiveType.GenericAsNativeType(this_table.F.FCTAMPM[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.FCTAMPM[this_row] = value; }
				}

				public System.String DBVERSION {
					get {
							return (System.String)Schema.T.Defaults.F.DBVERSION.EffectiveType.GenericAsNativeType(this_table.F.DBVERSION[this_row], typeof(System.String));
					}
					set {this_table.F.DBVERSION[this_row] = value; }
				}

				public System.String MINVERSION {
					get {
							return (System.String)Schema.T.Defaults.F.MINVERSION.EffectiveType.GenericAsNativeType(this_table.F.MINVERSION[this_row], typeof(System.String));
					}
					set {this_table.F.MINVERSION[this_row] = value; }
				}

				public System.String UPGRSTEP {
					get {
							return (System.String)Schema.T.Defaults.F.UPGRSTEP.EffectiveType.GenericAsNativeType(this_table.F.UPGRSTEP[this_row], typeof(System.String));
					}
					set {this_table.F.UPGRSTEP[this_row] = value; }
				}
			}
		}
		#endregion
		#region DefaultsRowChangeEvent
#if DefaultsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class DefaultsRowChangeEvent : EventArgs {

			private DefaultsRow eventRow;

			private DataRowAction eventAction;

			public DefaultsRowChangeEvent(DefaultsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public DefaultsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region ArchivedSets
		private bool ShouldSerializeArchivedSets() {
			return false;
		}
#if ArchivedSetsRowChangeEvents
		public delegate void ArchivedSetsRowChangeEventHandler(object sender, ArchivedSetsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class ArchivedSetsDataTable : DBIDataTable {
			#region Construction
			internal ArchivedSetsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal ArchivedSetsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(ArchivedSetsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.BACKDATE = (DBIDataColumn)t.Columns["BACKDATE"];
				  this.S_DATE = (DBIDataColumn)t.Columns["S_DATE"];
				  this.E_DATE = (DBIDataColumn)t.Columns["E_DATE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.LZHFILE = (DBIDataColumn)t.Columns["LZHFILE"];
				  this.DBVERSION = (DBIDataColumn)t.Columns["DBVERSION"];
				  this.RESTORED = (DBIDataColumn)t.Columns["RESTORED"];
				  this.ARCHIVING = (DBIDataColumn)t.Columns["ARCHIVING"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn BACKDATE;
				public readonly DBIDataColumn S_DATE;
				public readonly DBIDataColumn E_DATE;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn LZHFILE;
				public readonly DBIDataColumn DBVERSION;
				public readonly DBIDataColumn RESTORED;
				public readonly DBIDataColumn ARCHIVING;
			}
			#endregion
			#region EventHandlers
			#if ArchivedSetsRowChangeEvents
			public event ArchivedSetsRowChangeEventHandler ArchivedSetsRowChanged;
			public event ArchivedSetsRowChangeEventHandler ArchivedSetsRowChanging;
			public event ArchivedSetsRowChangeEventHandler ArchivedSetsRowDeleted;
			public event ArchivedSetsRowChangeEventHandler ArchivedSetsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ArchivedSetsRowChanged != null)) {
					this.ArchivedSetsRowChanged(this, new ArchivedSetsRowChangeEvent(((ArchivedSetsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ArchivedSetsRowChanging != null)) {
					this.ArchivedSetsRowChanging(this, new ArchivedSetsRowChangeEvent(((ArchivedSetsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ArchivedSetsRowDeleted != null)) {
					this.ArchivedSetsRowDeleted(this, new ArchivedSetsRowChangeEvent(((ArchivedSetsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ArchivedSetsRowDeleting != null)) {
					 this.ArchivedSetsRowDeleting(this, new ArchivedSetsRowChangeEvent(((ArchivedSetsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new ArchivedSetsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public ArchivedSetsRow this[int index] {
				get {
					return ((ArchivedSetsRow)(this.Rows[index]));
				}
			}
			public void AddArchivedSetsRow(ArchivedSetsRow row) {
				this.Rows.Add(row);
			}
			public ArchivedSetsRow AddNewArchivedSetsRow() {
				return ((ArchivedSetsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.ArchivedSets)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new ArchivedSetsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(ArchivedSetsRow);
			}
			public void RemoveArchivedSetsRow(ArchivedSetsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region ArchivedSetsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class ArchivedSetsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal ArchivedSetsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly ArchivedSetsDataTable this_table;
				private readonly ArchivedSetsRow this_row;
				public FAccessor( ArchivedSetsRow this_row )
				{
					this.this_table = ((ArchivedSetsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.ArchivedSets.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.ArchivedSets.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.ArchivedSets.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.ArchivedSets.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.DateTime? BACKDATE {
					get {
							return (System.DateTime?)Schema.T.ArchivedSets.F.BACKDATE.EffectiveType.GenericAsNativeType(this_table.F.BACKDATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.BACKDATE[this_row] = value; }
				}

				public System.DateTime? S_DATE {
					get {
							return (System.DateTime?)Schema.T.ArchivedSets.F.S_DATE.EffectiveType.GenericAsNativeType(this_table.F.S_DATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.S_DATE[this_row] = value; }
				}

				public System.DateTime? E_DATE {
					get {
							return (System.DateTime?)Schema.T.ArchivedSets.F.E_DATE.EffectiveType.GenericAsNativeType(this_table.F.E_DATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.E_DATE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.ArchivedSets.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.String LZHFILE {
					get {
							return (System.String)Schema.T.ArchivedSets.F.LZHFILE.EffectiveType.GenericAsNativeType(this_table.F.LZHFILE[this_row], typeof(System.String));
					}
					set {this_table.F.LZHFILE[this_row] = value; }
				}

				public System.String DBVERSION {
					get {
							return (System.String)Schema.T.ArchivedSets.F.DBVERSION.EffectiveType.GenericAsNativeType(this_table.F.DBVERSION[this_row], typeof(System.String));
					}
					set {this_table.F.DBVERSION[this_row] = value; }
				}

				public System.DateTime? RESTORED {
					get {
							return (System.DateTime?)Schema.T.ArchivedSets.F.RESTORED.EffectiveType.GenericAsNativeType(this_table.F.RESTORED[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.RESTORED[this_row] = value; }
				}

				public System.Boolean? ARCHIVING {
					get {
							return (System.Boolean?)Schema.T.ArchivedSets.F.ARCHIVING.EffectiveType.GenericAsNativeType(this_table.F.ARCHIVING[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ARCHIVING[this_row] = value; }
				}
			}
		}
		#endregion
		#region ArchivedSetsRowChangeEvent
#if ArchivedSetsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class ArchivedSetsRowChangeEvent : EventArgs {

			private ArchivedSetsRow eventRow;

			private DataRowAction eventAction;

			public ArchivedSetsRowChangeEvent(ArchivedSetsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public ArchivedSetsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Permissions
		private bool ShouldSerializePermissions() {
			return false;
		}
#if PermissionsRowChangeEvents
		public delegate void PermissionsRowChangeEventHandler(object sender, PermissionsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class PermissionsDataTable : DBIDataTable {
			#region Construction
			internal PermissionsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal PermissionsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(PermissionsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.NAME = (DBIDataColumn)t.Columns["NAME"];
				  this.PASSWORD = (DBIDataColumn)t.Columns["PASSWORD"];
				  this.STATUS = (DBIDataColumn)t.Columns["STATUS"];
				  this.L11 = (DBIDataColumn)t.Columns["L11"];
				  this.L12 = (DBIDataColumn)t.Columns["L12"];
				  this.L13 = (DBIDataColumn)t.Columns["L13"];
				  this.L14 = (DBIDataColumn)t.Columns["L14"];
				  this.L15 = (DBIDataColumn)t.Columns["L15"];
				  this.L16 = (DBIDataColumn)t.Columns["L16"];
				  this.L17 = (DBIDataColumn)t.Columns["L17"];
				  this.L18 = (DBIDataColumn)t.Columns["L18"];
				  this.L19 = (DBIDataColumn)t.Columns["L19"];
				  this.L21 = (DBIDataColumn)t.Columns["L21"];
				  this.L22 = (DBIDataColumn)t.Columns["L22"];
				  this.L23 = (DBIDataColumn)t.Columns["L23"];
				  this.L24 = (DBIDataColumn)t.Columns["L24"];
				  this.L25 = (DBIDataColumn)t.Columns["L25"];
				  this.L26 = (DBIDataColumn)t.Columns["L26"];
				  this.L27 = (DBIDataColumn)t.Columns["L27"];
				  this.L28 = (DBIDataColumn)t.Columns["L28"];
				  this.L29 = (DBIDataColumn)t.Columns["L29"];
				  this.L31 = (DBIDataColumn)t.Columns["L31"];
				  this.L32 = (DBIDataColumn)t.Columns["L32"];
				  this.L33 = (DBIDataColumn)t.Columns["L33"];
				  this.L34 = (DBIDataColumn)t.Columns["L34"];
				  this.L35 = (DBIDataColumn)t.Columns["L35"];
				  this.L36 = (DBIDataColumn)t.Columns["L36"];
				  this.L37 = (DBIDataColumn)t.Columns["L37"];
				  this.L38 = (DBIDataColumn)t.Columns["L38"];
				  this.L39 = (DBIDataColumn)t.Columns["L39"];
				  this.L41 = (DBIDataColumn)t.Columns["L41"];
				  this.L42 = (DBIDataColumn)t.Columns["L42"];
				  this.L43 = (DBIDataColumn)t.Columns["L43"];
				  this.L44 = (DBIDataColumn)t.Columns["L44"];
				  this.L45 = (DBIDataColumn)t.Columns["L45"];
				  this.L46 = (DBIDataColumn)t.Columns["L46"];
				  this.L47 = (DBIDataColumn)t.Columns["L47"];
				  this.L48 = (DBIDataColumn)t.Columns["L48"];
				  this.L49 = (DBIDataColumn)t.Columns["L49"];
				  this.L410 = (DBIDataColumn)t.Columns["L410"];
				  this.L51 = (DBIDataColumn)t.Columns["L51"];
				  this.L52 = (DBIDataColumn)t.Columns["L52"];
				  this.L53 = (DBIDataColumn)t.Columns["L53"];
				  this.L54 = (DBIDataColumn)t.Columns["L54"];
				  this.L55 = (DBIDataColumn)t.Columns["L55"];
				  this.L56 = (DBIDataColumn)t.Columns["L56"];
				  this.L57 = (DBIDataColumn)t.Columns["L57"];
				  this.L58 = (DBIDataColumn)t.Columns["L58"];
				  this.L59 = (DBIDataColumn)t.Columns["L59"];
				  this.L510 = (DBIDataColumn)t.Columns["L510"];
				  this.L511 = (DBIDataColumn)t.Columns["L511"];
				  this.L512 = (DBIDataColumn)t.Columns["L512"];
				  this.L513 = (DBIDataColumn)t.Columns["L513"];
				  this.L514 = (DBIDataColumn)t.Columns["L514"];
				  this.L515 = (DBIDataColumn)t.Columns["L515"];
				  this.L516 = (DBIDataColumn)t.Columns["L516"];
				  this.L517 = (DBIDataColumn)t.Columns["L517"];
				  this.L518 = (DBIDataColumn)t.Columns["L518"];
				  this.L519 = (DBIDataColumn)t.Columns["L519"];
				  this.L520 = (DBIDataColumn)t.Columns["L520"];
				  this.L521 = (DBIDataColumn)t.Columns["L521"];
				  this.L522 = (DBIDataColumn)t.Columns["L522"];
				  this.L523 = (DBIDataColumn)t.Columns["L523"];
				  this.L524 = (DBIDataColumn)t.Columns["L524"];
				  this.L525 = (DBIDataColumn)t.Columns["L525"];
				  this.L526 = (DBIDataColumn)t.Columns["L526"];
				  this.L527 = (DBIDataColumn)t.Columns["L527"];
				  this.L528 = (DBIDataColumn)t.Columns["L528"];
				  this.L529 = (DBIDataColumn)t.Columns["L529"];
				  this.L530 = (DBIDataColumn)t.Columns["L530"];
				  this.L61 = (DBIDataColumn)t.Columns["L61"];
				  this.L62 = (DBIDataColumn)t.Columns["L62"];
				  this.L63 = (DBIDataColumn)t.Columns["L63"];
				  this.L64 = (DBIDataColumn)t.Columns["L64"];
				  this.L65 = (DBIDataColumn)t.Columns["L65"];
				  this.L66 = (DBIDataColumn)t.Columns["L66"];
				  this.L67 = (DBIDataColumn)t.Columns["L67"];
				  this.L68 = (DBIDataColumn)t.Columns["L68"];
				  this.L69 = (DBIDataColumn)t.Columns["L69"];
				  this.L610 = (DBIDataColumn)t.Columns["L610"];
				  this.L611 = (DBIDataColumn)t.Columns["L611"];
				  this.L612 = (DBIDataColumn)t.Columns["L612"];
				  this.L613 = (DBIDataColumn)t.Columns["L613"];
				  this.L614 = (DBIDataColumn)t.Columns["L614"];
				  this.L615 = (DBIDataColumn)t.Columns["L615"];
				  this.L616 = (DBIDataColumn)t.Columns["L616"];
				  this.L617 = (DBIDataColumn)t.Columns["L617"];
				  this.L618 = (DBIDataColumn)t.Columns["L618"];
				  this.L619 = (DBIDataColumn)t.Columns["L619"];
				  this.L620 = (DBIDataColumn)t.Columns["L620"];
				  this.L621 = (DBIDataColumn)t.Columns["L621"];
				  this.L622 = (DBIDataColumn)t.Columns["L622"];
				  this.L623 = (DBIDataColumn)t.Columns["L623"];
				  this.L624 = (DBIDataColumn)t.Columns["L624"];
				  this.L625 = (DBIDataColumn)t.Columns["L625"];
				  this.L626 = (DBIDataColumn)t.Columns["L626"];
				  this.ADMIN1 = (DBIDataColumn)t.Columns["ADMIN1"];
				  this.ADMIN2 = (DBIDataColumn)t.Columns["ADMIN2"];
				  this.ADMIN3 = (DBIDataColumn)t.Columns["ADMIN3"];
				  this.ADMIN4 = (DBIDataColumn)t.Columns["ADMIN4"];
				  this.ADMIN5 = (DBIDataColumn)t.Columns["ADMIN5"];
				  this.ADMIN6 = (DBIDataColumn)t.Columns["ADMIN6"];
				  this.ADMIN7 = (DBIDataColumn)t.Columns["ADMIN7"];
				  this.ADMIN8 = (DBIDataColumn)t.Columns["ADMIN8"];
				  this.ADMIN9 = (DBIDataColumn)t.Columns["ADMIN9"];
				  this.ADMIN10 = (DBIDataColumn)t.Columns["ADMIN10"];
				  this.ADMIN11 = (DBIDataColumn)t.Columns["ADMIN11"];
				  this.ADMIN12 = (DBIDataColumn)t.Columns["ADMIN12"];
				  this.ADMIN13 = (DBIDataColumn)t.Columns["ADMIN13"];
				  this.ADMIN14 = (DBIDataColumn)t.Columns["ADMIN14"];
				  this.ADMIN15 = (DBIDataColumn)t.Columns["ADMIN15"];
				  this.ADMIN16 = (DBIDataColumn)t.Columns["ADMIN16"];
				  this.ADMIN17 = (DBIDataColumn)t.Columns["ADMIN17"];
				  this.ADMIN18 = (DBIDataColumn)t.Columns["ADMIN18"];
				  this.ADMIN19 = (DBIDataColumn)t.Columns["ADMIN19"];
				  this.ADMIN20 = (DBIDataColumn)t.Columns["ADMIN20"];
				  this.ADMIN21 = (DBIDataColumn)t.Columns["ADMIN21"];
				  this.ADMIN22 = (DBIDataColumn)t.Columns["ADMIN22"];
				  this.ADMIN23 = (DBIDataColumn)t.Columns["ADMIN23"];
				  this.ADMIN24 = (DBIDataColumn)t.Columns["ADMIN24"];
				  this.ADMIN25 = (DBIDataColumn)t.Columns["ADMIN25"];
				  this.L121 = (DBIDataColumn)t.Columns["L121"];
				  this.L122 = (DBIDataColumn)t.Columns["L122"];
				  this.L123 = (DBIDataColumn)t.Columns["L123"];
				  this.L124 = (DBIDataColumn)t.Columns["L124"];
				  this.L125 = (DBIDataColumn)t.Columns["L125"];
				  this.L126 = (DBIDataColumn)t.Columns["L126"];
				  this.L127 = (DBIDataColumn)t.Columns["L127"];
				  this.L128 = (DBIDataColumn)t.Columns["L128"];
				  this.L129 = (DBIDataColumn)t.Columns["L129"];
				  this.L130 = (DBIDataColumn)t.Columns["L130"];
				  this.L131 = (DBIDataColumn)t.Columns["L131"];
				  this.L132 = (DBIDataColumn)t.Columns["L132"];
				  this.L133 = (DBIDataColumn)t.Columns["L133"];
				  this.L134 = (DBIDataColumn)t.Columns["L134"];
				  this.L135 = (DBIDataColumn)t.Columns["L135"];
				  this.L136 = (DBIDataColumn)t.Columns["L136"];
				  this.L137 = (DBIDataColumn)t.Columns["L137"];
				  this.L138 = (DBIDataColumn)t.Columns["L138"];
				  this.L139 = (DBIDataColumn)t.Columns["L139"];
				  this.L140 = (DBIDataColumn)t.Columns["L140"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn NAME;
				public readonly DBIDataColumn PASSWORD;
				public readonly DBIDataColumn STATUS;
				public readonly DBIDataColumn L11;
				public readonly DBIDataColumn L12;
				public readonly DBIDataColumn L13;
				public readonly DBIDataColumn L14;
				public readonly DBIDataColumn L15;
				public readonly DBIDataColumn L16;
				public readonly DBIDataColumn L17;
				public readonly DBIDataColumn L18;
				public readonly DBIDataColumn L19;
				public readonly DBIDataColumn L21;
				public readonly DBIDataColumn L22;
				public readonly DBIDataColumn L23;
				public readonly DBIDataColumn L24;
				public readonly DBIDataColumn L25;
				public readonly DBIDataColumn L26;
				public readonly DBIDataColumn L27;
				public readonly DBIDataColumn L28;
				public readonly DBIDataColumn L29;
				public readonly DBIDataColumn L31;
				public readonly DBIDataColumn L32;
				public readonly DBIDataColumn L33;
				public readonly DBIDataColumn L34;
				public readonly DBIDataColumn L35;
				public readonly DBIDataColumn L36;
				public readonly DBIDataColumn L37;
				public readonly DBIDataColumn L38;
				public readonly DBIDataColumn L39;
				public readonly DBIDataColumn L41;
				public readonly DBIDataColumn L42;
				public readonly DBIDataColumn L43;
				public readonly DBIDataColumn L44;
				public readonly DBIDataColumn L45;
				public readonly DBIDataColumn L46;
				public readonly DBIDataColumn L47;
				public readonly DBIDataColumn L48;
				public readonly DBIDataColumn L49;
				public readonly DBIDataColumn L410;
				public readonly DBIDataColumn L51;
				public readonly DBIDataColumn L52;
				public readonly DBIDataColumn L53;
				public readonly DBIDataColumn L54;
				public readonly DBIDataColumn L55;
				public readonly DBIDataColumn L56;
				public readonly DBIDataColumn L57;
				public readonly DBIDataColumn L58;
				public readonly DBIDataColumn L59;
				public readonly DBIDataColumn L510;
				public readonly DBIDataColumn L511;
				public readonly DBIDataColumn L512;
				public readonly DBIDataColumn L513;
				public readonly DBIDataColumn L514;
				public readonly DBIDataColumn L515;
				public readonly DBIDataColumn L516;
				public readonly DBIDataColumn L517;
				public readonly DBIDataColumn L518;
				public readonly DBIDataColumn L519;
				public readonly DBIDataColumn L520;
				public readonly DBIDataColumn L521;
				public readonly DBIDataColumn L522;
				public readonly DBIDataColumn L523;
				public readonly DBIDataColumn L524;
				public readonly DBIDataColumn L525;
				public readonly DBIDataColumn L526;
				public readonly DBIDataColumn L527;
				public readonly DBIDataColumn L528;
				public readonly DBIDataColumn L529;
				public readonly DBIDataColumn L530;
				public readonly DBIDataColumn L61;
				public readonly DBIDataColumn L62;
				public readonly DBIDataColumn L63;
				public readonly DBIDataColumn L64;
				public readonly DBIDataColumn L65;
				public readonly DBIDataColumn L66;
				public readonly DBIDataColumn L67;
				public readonly DBIDataColumn L68;
				public readonly DBIDataColumn L69;
				public readonly DBIDataColumn L610;
				public readonly DBIDataColumn L611;
				public readonly DBIDataColumn L612;
				public readonly DBIDataColumn L613;
				public readonly DBIDataColumn L614;
				public readonly DBIDataColumn L615;
				public readonly DBIDataColumn L616;
				public readonly DBIDataColumn L617;
				public readonly DBIDataColumn L618;
				public readonly DBIDataColumn L619;
				public readonly DBIDataColumn L620;
				public readonly DBIDataColumn L621;
				public readonly DBIDataColumn L622;
				public readonly DBIDataColumn L623;
				public readonly DBIDataColumn L624;
				public readonly DBIDataColumn L625;
				public readonly DBIDataColumn L626;
				public readonly DBIDataColumn ADMIN1;
				public readonly DBIDataColumn ADMIN2;
				public readonly DBIDataColumn ADMIN3;
				public readonly DBIDataColumn ADMIN4;
				public readonly DBIDataColumn ADMIN5;
				public readonly DBIDataColumn ADMIN6;
				public readonly DBIDataColumn ADMIN7;
				public readonly DBIDataColumn ADMIN8;
				public readonly DBIDataColumn ADMIN9;
				public readonly DBIDataColumn ADMIN10;
				public readonly DBIDataColumn ADMIN11;
				public readonly DBIDataColumn ADMIN12;
				public readonly DBIDataColumn ADMIN13;
				public readonly DBIDataColumn ADMIN14;
				public readonly DBIDataColumn ADMIN15;
				public readonly DBIDataColumn ADMIN16;
				public readonly DBIDataColumn ADMIN17;
				public readonly DBIDataColumn ADMIN18;
				public readonly DBIDataColumn ADMIN19;
				public readonly DBIDataColumn ADMIN20;
				public readonly DBIDataColumn ADMIN21;
				public readonly DBIDataColumn ADMIN22;
				public readonly DBIDataColumn ADMIN23;
				public readonly DBIDataColumn ADMIN24;
				public readonly DBIDataColumn ADMIN25;
				public readonly DBIDataColumn L121;
				public readonly DBIDataColumn L122;
				public readonly DBIDataColumn L123;
				public readonly DBIDataColumn L124;
				public readonly DBIDataColumn L125;
				public readonly DBIDataColumn L126;
				public readonly DBIDataColumn L127;
				public readonly DBIDataColumn L128;
				public readonly DBIDataColumn L129;
				public readonly DBIDataColumn L130;
				public readonly DBIDataColumn L131;
				public readonly DBIDataColumn L132;
				public readonly DBIDataColumn L133;
				public readonly DBIDataColumn L134;
				public readonly DBIDataColumn L135;
				public readonly DBIDataColumn L136;
				public readonly DBIDataColumn L137;
				public readonly DBIDataColumn L138;
				public readonly DBIDataColumn L139;
				public readonly DBIDataColumn L140;
			}
			#endregion
			#region EventHandlers
			#if PermissionsRowChangeEvents
			public event PermissionsRowChangeEventHandler PermissionsRowChanged;
			public event PermissionsRowChangeEventHandler PermissionsRowChanging;
			public event PermissionsRowChangeEventHandler PermissionsRowDeleted;
			public event PermissionsRowChangeEventHandler PermissionsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.PermissionsRowChanged != null)) {
					this.PermissionsRowChanged(this, new PermissionsRowChangeEvent(((PermissionsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.PermissionsRowChanging != null)) {
					this.PermissionsRowChanging(this, new PermissionsRowChangeEvent(((PermissionsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.PermissionsRowDeleted != null)) {
					this.PermissionsRowDeleted(this, new PermissionsRowChangeEvent(((PermissionsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.PermissionsRowDeleting != null)) {
					 this.PermissionsRowDeleting(this, new PermissionsRowChangeEvent(((PermissionsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new PermissionsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public PermissionsRow this[int index] {
				get {
					return ((PermissionsRow)(this.Rows[index]));
				}
			}
			public void AddPermissionsRow(PermissionsRow row) {
				this.Rows.Add(row);
			}
			public PermissionsRow AddNewPermissionsRow() {
				return ((PermissionsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Permissions)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new PermissionsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(PermissionsRow);
			}
			public void RemovePermissionsRow(PermissionsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region PermissionsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class PermissionsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal PermissionsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly PermissionsDataTable this_table;
				private readonly PermissionsRow this_row;
				public FAccessor( PermissionsRow this_row )
				{
					this.this_table = ((PermissionsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Permissions.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Permissions.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.Permissions.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String NAME {
					get {
							return (System.String)Schema.T.Permissions.F.NAME.EffectiveType.GenericAsNativeType(this_table.F.NAME[this_row], typeof(System.String));
					}
					set {this_table.F.NAME[this_row] = value; }
				}

				public System.String PASSWORD {
					get {
							return (System.String)Schema.T.Permissions.F.PASSWORD.EffectiveType.GenericAsNativeType(this_table.F.PASSWORD[this_row], typeof(System.String));
					}
					set {this_table.F.PASSWORD[this_row] = value; }
				}

				public System.String STATUS {
					get {
							return (System.String)Schema.T.Permissions.F.STATUS.EffectiveType.GenericAsNativeType(this_table.F.STATUS[this_row], typeof(System.String));
					}
					set {this_table.F.STATUS[this_row] = value; }
				}

				public System.Boolean? L11 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L11.EffectiveType.GenericAsNativeType(this_table.F.L11[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L11[this_row] = value; }
				}

				public System.Boolean? L12 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L12.EffectiveType.GenericAsNativeType(this_table.F.L12[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L12[this_row] = value; }
				}

				public System.Boolean? L13 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L13.EffectiveType.GenericAsNativeType(this_table.F.L13[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L13[this_row] = value; }
				}

				public System.Boolean? L14 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L14.EffectiveType.GenericAsNativeType(this_table.F.L14[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L14[this_row] = value; }
				}

				public System.Boolean? L15 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L15.EffectiveType.GenericAsNativeType(this_table.F.L15[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L15[this_row] = value; }
				}

				public System.Boolean? L16 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L16.EffectiveType.GenericAsNativeType(this_table.F.L16[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L16[this_row] = value; }
				}

				public System.Boolean? L17 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L17.EffectiveType.GenericAsNativeType(this_table.F.L17[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L17[this_row] = value; }
				}

				public System.Boolean? L18 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L18.EffectiveType.GenericAsNativeType(this_table.F.L18[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L18[this_row] = value; }
				}

				public System.Boolean? L19 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L19.EffectiveType.GenericAsNativeType(this_table.F.L19[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L19[this_row] = value; }
				}

				public System.Boolean? L21 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L21.EffectiveType.GenericAsNativeType(this_table.F.L21[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L21[this_row] = value; }
				}

				public System.Boolean? L22 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L22.EffectiveType.GenericAsNativeType(this_table.F.L22[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L22[this_row] = value; }
				}

				public System.Boolean? L23 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L23.EffectiveType.GenericAsNativeType(this_table.F.L23[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L23[this_row] = value; }
				}

				public System.Boolean? L24 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L24.EffectiveType.GenericAsNativeType(this_table.F.L24[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L24[this_row] = value; }
				}

				public System.Boolean? L25 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L25.EffectiveType.GenericAsNativeType(this_table.F.L25[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L25[this_row] = value; }
				}

				public System.Boolean? L26 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L26.EffectiveType.GenericAsNativeType(this_table.F.L26[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L26[this_row] = value; }
				}

				public System.Boolean? L27 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L27.EffectiveType.GenericAsNativeType(this_table.F.L27[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L27[this_row] = value; }
				}

				public System.Boolean? L28 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L28.EffectiveType.GenericAsNativeType(this_table.F.L28[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L28[this_row] = value; }
				}

				public System.Boolean? L29 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L29.EffectiveType.GenericAsNativeType(this_table.F.L29[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L29[this_row] = value; }
				}

				public System.Boolean? L31 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L31.EffectiveType.GenericAsNativeType(this_table.F.L31[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L31[this_row] = value; }
				}

				public System.Boolean? L32 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L32.EffectiveType.GenericAsNativeType(this_table.F.L32[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L32[this_row] = value; }
				}

				public System.Boolean? L33 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L33.EffectiveType.GenericAsNativeType(this_table.F.L33[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L33[this_row] = value; }
				}

				public System.Boolean? L34 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L34.EffectiveType.GenericAsNativeType(this_table.F.L34[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L34[this_row] = value; }
				}

				public System.Boolean? L35 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L35.EffectiveType.GenericAsNativeType(this_table.F.L35[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L35[this_row] = value; }
				}

				public System.Boolean? L36 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L36.EffectiveType.GenericAsNativeType(this_table.F.L36[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L36[this_row] = value; }
				}

				public System.Boolean? L37 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L37.EffectiveType.GenericAsNativeType(this_table.F.L37[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L37[this_row] = value; }
				}

				public System.Boolean? L38 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L38.EffectiveType.GenericAsNativeType(this_table.F.L38[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L38[this_row] = value; }
				}

				public System.Boolean? L39 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L39.EffectiveType.GenericAsNativeType(this_table.F.L39[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L39[this_row] = value; }
				}

				public System.Boolean? L41 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L41.EffectiveType.GenericAsNativeType(this_table.F.L41[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L41[this_row] = value; }
				}

				public System.Boolean? L42 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L42.EffectiveType.GenericAsNativeType(this_table.F.L42[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L42[this_row] = value; }
				}

				public System.Boolean? L43 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L43.EffectiveType.GenericAsNativeType(this_table.F.L43[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L43[this_row] = value; }
				}

				public System.Boolean? L44 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L44.EffectiveType.GenericAsNativeType(this_table.F.L44[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L44[this_row] = value; }
				}

				public System.Boolean? L45 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L45.EffectiveType.GenericAsNativeType(this_table.F.L45[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L45[this_row] = value; }
				}

				public System.Boolean? L46 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L46.EffectiveType.GenericAsNativeType(this_table.F.L46[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L46[this_row] = value; }
				}

				public System.Boolean? L47 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L47.EffectiveType.GenericAsNativeType(this_table.F.L47[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L47[this_row] = value; }
				}

				public System.Boolean? L48 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L48.EffectiveType.GenericAsNativeType(this_table.F.L48[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L48[this_row] = value; }
				}

				public System.Boolean? L49 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L49.EffectiveType.GenericAsNativeType(this_table.F.L49[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L49[this_row] = value; }
				}

				public System.Boolean? L410 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L410.EffectiveType.GenericAsNativeType(this_table.F.L410[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L410[this_row] = value; }
				}

				public System.Boolean? L51 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L51.EffectiveType.GenericAsNativeType(this_table.F.L51[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L51[this_row] = value; }
				}

				public System.Boolean? L52 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L52.EffectiveType.GenericAsNativeType(this_table.F.L52[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L52[this_row] = value; }
				}

				public System.Boolean? L53 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L53.EffectiveType.GenericAsNativeType(this_table.F.L53[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L53[this_row] = value; }
				}

				public System.Boolean? L54 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L54.EffectiveType.GenericAsNativeType(this_table.F.L54[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L54[this_row] = value; }
				}

				public System.Boolean? L55 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L55.EffectiveType.GenericAsNativeType(this_table.F.L55[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L55[this_row] = value; }
				}

				public System.Boolean? L56 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L56.EffectiveType.GenericAsNativeType(this_table.F.L56[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L56[this_row] = value; }
				}

				public System.Boolean? L57 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L57.EffectiveType.GenericAsNativeType(this_table.F.L57[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L57[this_row] = value; }
				}

				public System.Boolean? L58 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L58.EffectiveType.GenericAsNativeType(this_table.F.L58[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L58[this_row] = value; }
				}

				public System.Boolean? L59 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L59.EffectiveType.GenericAsNativeType(this_table.F.L59[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L59[this_row] = value; }
				}

				public System.Boolean? L510 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L510.EffectiveType.GenericAsNativeType(this_table.F.L510[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L510[this_row] = value; }
				}

				public System.Boolean? L511 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L511.EffectiveType.GenericAsNativeType(this_table.F.L511[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L511[this_row] = value; }
				}

				public System.Boolean? L512 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L512.EffectiveType.GenericAsNativeType(this_table.F.L512[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L512[this_row] = value; }
				}

				public System.Boolean? L513 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L513.EffectiveType.GenericAsNativeType(this_table.F.L513[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L513[this_row] = value; }
				}

				public System.Boolean? L514 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L514.EffectiveType.GenericAsNativeType(this_table.F.L514[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L514[this_row] = value; }
				}

				public System.Boolean? L515 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L515.EffectiveType.GenericAsNativeType(this_table.F.L515[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L515[this_row] = value; }
				}

				public System.Boolean? L516 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L516.EffectiveType.GenericAsNativeType(this_table.F.L516[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L516[this_row] = value; }
				}

				public System.Boolean? L517 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L517.EffectiveType.GenericAsNativeType(this_table.F.L517[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L517[this_row] = value; }
				}

				public System.Boolean? L518 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L518.EffectiveType.GenericAsNativeType(this_table.F.L518[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L518[this_row] = value; }
				}

				public System.Boolean? L519 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L519.EffectiveType.GenericAsNativeType(this_table.F.L519[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L519[this_row] = value; }
				}

				public System.Boolean? L520 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L520.EffectiveType.GenericAsNativeType(this_table.F.L520[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L520[this_row] = value; }
				}

				public System.Boolean? L521 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L521.EffectiveType.GenericAsNativeType(this_table.F.L521[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L521[this_row] = value; }
				}

				public System.Boolean? L522 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L522.EffectiveType.GenericAsNativeType(this_table.F.L522[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L522[this_row] = value; }
				}

				public System.Boolean? L523 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L523.EffectiveType.GenericAsNativeType(this_table.F.L523[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L523[this_row] = value; }
				}

				public System.Boolean? L524 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L524.EffectiveType.GenericAsNativeType(this_table.F.L524[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L524[this_row] = value; }
				}

				public System.Boolean? L525 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L525.EffectiveType.GenericAsNativeType(this_table.F.L525[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L525[this_row] = value; }
				}

				public System.Boolean? L526 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L526.EffectiveType.GenericAsNativeType(this_table.F.L526[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L526[this_row] = value; }
				}

				public System.Boolean? L527 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L527.EffectiveType.GenericAsNativeType(this_table.F.L527[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L527[this_row] = value; }
				}

				public System.Boolean? L528 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L528.EffectiveType.GenericAsNativeType(this_table.F.L528[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L528[this_row] = value; }
				}

				public System.Boolean? L529 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L529.EffectiveType.GenericAsNativeType(this_table.F.L529[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L529[this_row] = value; }
				}

				public System.Boolean? L530 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L530.EffectiveType.GenericAsNativeType(this_table.F.L530[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L530[this_row] = value; }
				}

				public System.Boolean? L61 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L61.EffectiveType.GenericAsNativeType(this_table.F.L61[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L61[this_row] = value; }
				}

				public System.Boolean? L62 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L62.EffectiveType.GenericAsNativeType(this_table.F.L62[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L62[this_row] = value; }
				}

				public System.Boolean? L63 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L63.EffectiveType.GenericAsNativeType(this_table.F.L63[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L63[this_row] = value; }
				}

				public System.Boolean? L64 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L64.EffectiveType.GenericAsNativeType(this_table.F.L64[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L64[this_row] = value; }
				}

				public System.Boolean? L65 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L65.EffectiveType.GenericAsNativeType(this_table.F.L65[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L65[this_row] = value; }
				}

				public System.Boolean? L66 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L66.EffectiveType.GenericAsNativeType(this_table.F.L66[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L66[this_row] = value; }
				}

				public System.Boolean? L67 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L67.EffectiveType.GenericAsNativeType(this_table.F.L67[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L67[this_row] = value; }
				}

				public System.Boolean? L68 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L68.EffectiveType.GenericAsNativeType(this_table.F.L68[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L68[this_row] = value; }
				}

				public System.Boolean? L69 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L69.EffectiveType.GenericAsNativeType(this_table.F.L69[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L69[this_row] = value; }
				}

				public System.Boolean? L610 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L610.EffectiveType.GenericAsNativeType(this_table.F.L610[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L610[this_row] = value; }
				}

				public System.Boolean? L611 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L611.EffectiveType.GenericAsNativeType(this_table.F.L611[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L611[this_row] = value; }
				}

				public System.Boolean? L612 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L612.EffectiveType.GenericAsNativeType(this_table.F.L612[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L612[this_row] = value; }
				}

				public System.Boolean? L613 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L613.EffectiveType.GenericAsNativeType(this_table.F.L613[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L613[this_row] = value; }
				}

				public System.Boolean? L614 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L614.EffectiveType.GenericAsNativeType(this_table.F.L614[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L614[this_row] = value; }
				}

				public System.Boolean? L615 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L615.EffectiveType.GenericAsNativeType(this_table.F.L615[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L615[this_row] = value; }
				}

				public System.Boolean? L616 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L616.EffectiveType.GenericAsNativeType(this_table.F.L616[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L616[this_row] = value; }
				}

				public System.Boolean? L617 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L617.EffectiveType.GenericAsNativeType(this_table.F.L617[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L617[this_row] = value; }
				}

				public System.Boolean? L618 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L618.EffectiveType.GenericAsNativeType(this_table.F.L618[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L618[this_row] = value; }
				}

				public System.Boolean? L619 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L619.EffectiveType.GenericAsNativeType(this_table.F.L619[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L619[this_row] = value; }
				}

				public System.Boolean? L620 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L620.EffectiveType.GenericAsNativeType(this_table.F.L620[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L620[this_row] = value; }
				}

				public System.Boolean? L621 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L621.EffectiveType.GenericAsNativeType(this_table.F.L621[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L621[this_row] = value; }
				}

				public System.Boolean? L622 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L622.EffectiveType.GenericAsNativeType(this_table.F.L622[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L622[this_row] = value; }
				}

				public System.Boolean? L623 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L623.EffectiveType.GenericAsNativeType(this_table.F.L623[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L623[this_row] = value; }
				}

				public System.Boolean? L624 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L624.EffectiveType.GenericAsNativeType(this_table.F.L624[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L624[this_row] = value; }
				}

				public System.Boolean? L625 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L625.EffectiveType.GenericAsNativeType(this_table.F.L625[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L625[this_row] = value; }
				}

				public System.Boolean? L626 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L626.EffectiveType.GenericAsNativeType(this_table.F.L626[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L626[this_row] = value; }
				}

				public System.Boolean? ADMIN1 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN1.EffectiveType.GenericAsNativeType(this_table.F.ADMIN1[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN1[this_row] = value; }
				}

				public System.Boolean? ADMIN2 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN2.EffectiveType.GenericAsNativeType(this_table.F.ADMIN2[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN2[this_row] = value; }
				}

				public System.Boolean? ADMIN3 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN3.EffectiveType.GenericAsNativeType(this_table.F.ADMIN3[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN3[this_row] = value; }
				}

				public System.Boolean? ADMIN4 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN4.EffectiveType.GenericAsNativeType(this_table.F.ADMIN4[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN4[this_row] = value; }
				}

				public System.Boolean? ADMIN5 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN5.EffectiveType.GenericAsNativeType(this_table.F.ADMIN5[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN5[this_row] = value; }
				}

				public System.Boolean? ADMIN6 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN6.EffectiveType.GenericAsNativeType(this_table.F.ADMIN6[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN6[this_row] = value; }
				}

				public System.Boolean? ADMIN7 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN7.EffectiveType.GenericAsNativeType(this_table.F.ADMIN7[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN7[this_row] = value; }
				}

				public System.Boolean? ADMIN8 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN8.EffectiveType.GenericAsNativeType(this_table.F.ADMIN8[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN8[this_row] = value; }
				}

				public System.Boolean? ADMIN9 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN9.EffectiveType.GenericAsNativeType(this_table.F.ADMIN9[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN9[this_row] = value; }
				}

				public System.Boolean? ADMIN10 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN10.EffectiveType.GenericAsNativeType(this_table.F.ADMIN10[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN10[this_row] = value; }
				}

				public System.Boolean? ADMIN11 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN11.EffectiveType.GenericAsNativeType(this_table.F.ADMIN11[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN11[this_row] = value; }
				}

				public System.Boolean? ADMIN12 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN12.EffectiveType.GenericAsNativeType(this_table.F.ADMIN12[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN12[this_row] = value; }
				}

				public System.Boolean? ADMIN13 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN13.EffectiveType.GenericAsNativeType(this_table.F.ADMIN13[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN13[this_row] = value; }
				}

				public System.Boolean? ADMIN14 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN14.EffectiveType.GenericAsNativeType(this_table.F.ADMIN14[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN14[this_row] = value; }
				}

				public System.Boolean? ADMIN15 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN15.EffectiveType.GenericAsNativeType(this_table.F.ADMIN15[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN15[this_row] = value; }
				}

				public System.Boolean? ADMIN16 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN16.EffectiveType.GenericAsNativeType(this_table.F.ADMIN16[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN16[this_row] = value; }
				}

				public System.Boolean? ADMIN17 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN17.EffectiveType.GenericAsNativeType(this_table.F.ADMIN17[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN17[this_row] = value; }
				}

				public System.Boolean? ADMIN18 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN18.EffectiveType.GenericAsNativeType(this_table.F.ADMIN18[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN18[this_row] = value; }
				}

				public System.Boolean? ADMIN19 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN19.EffectiveType.GenericAsNativeType(this_table.F.ADMIN19[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN19[this_row] = value; }
				}

				public System.Boolean? ADMIN20 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN20.EffectiveType.GenericAsNativeType(this_table.F.ADMIN20[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN20[this_row] = value; }
				}

				public System.Boolean? ADMIN21 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN21.EffectiveType.GenericAsNativeType(this_table.F.ADMIN21[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN21[this_row] = value; }
				}

				public System.Boolean? ADMIN22 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN22.EffectiveType.GenericAsNativeType(this_table.F.ADMIN22[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN22[this_row] = value; }
				}

				public System.Boolean? ADMIN23 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN23.EffectiveType.GenericAsNativeType(this_table.F.ADMIN23[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN23[this_row] = value; }
				}

				public System.Boolean? ADMIN24 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN24.EffectiveType.GenericAsNativeType(this_table.F.ADMIN24[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN24[this_row] = value; }
				}

				public System.Boolean? ADMIN25 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.ADMIN25.EffectiveType.GenericAsNativeType(this_table.F.ADMIN25[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ADMIN25[this_row] = value; }
				}

				public System.Boolean? L121 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L121.EffectiveType.GenericAsNativeType(this_table.F.L121[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L121[this_row] = value; }
				}

				public System.Boolean? L122 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L122.EffectiveType.GenericAsNativeType(this_table.F.L122[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L122[this_row] = value; }
				}

				public System.Boolean? L123 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L123.EffectiveType.GenericAsNativeType(this_table.F.L123[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L123[this_row] = value; }
				}

				public System.Boolean? L124 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L124.EffectiveType.GenericAsNativeType(this_table.F.L124[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L124[this_row] = value; }
				}

				public System.Boolean? L125 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L125.EffectiveType.GenericAsNativeType(this_table.F.L125[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L125[this_row] = value; }
				}

				public System.Boolean? L126 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L126.EffectiveType.GenericAsNativeType(this_table.F.L126[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L126[this_row] = value; }
				}

				public System.Boolean? L127 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L127.EffectiveType.GenericAsNativeType(this_table.F.L127[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L127[this_row] = value; }
				}

				public System.Boolean? L128 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L128.EffectiveType.GenericAsNativeType(this_table.F.L128[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L128[this_row] = value; }
				}

				public System.Boolean? L129 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L129.EffectiveType.GenericAsNativeType(this_table.F.L129[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L129[this_row] = value; }
				}

				public System.Boolean? L130 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L130.EffectiveType.GenericAsNativeType(this_table.F.L130[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L130[this_row] = value; }
				}

				public System.Boolean? L131 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L131.EffectiveType.GenericAsNativeType(this_table.F.L131[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L131[this_row] = value; }
				}

				public System.Boolean? L132 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L132.EffectiveType.GenericAsNativeType(this_table.F.L132[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L132[this_row] = value; }
				}

				public System.Boolean? L133 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L133.EffectiveType.GenericAsNativeType(this_table.F.L133[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L133[this_row] = value; }
				}

				public System.Boolean? L134 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L134.EffectiveType.GenericAsNativeType(this_table.F.L134[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L134[this_row] = value; }
				}

				public System.Boolean? L135 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L135.EffectiveType.GenericAsNativeType(this_table.F.L135[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L135[this_row] = value; }
				}

				public System.Boolean? L136 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L136.EffectiveType.GenericAsNativeType(this_table.F.L136[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L136[this_row] = value; }
				}

				public System.Boolean? L137 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L137.EffectiveType.GenericAsNativeType(this_table.F.L137[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L137[this_row] = value; }
				}

				public System.Boolean? L138 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L138.EffectiveType.GenericAsNativeType(this_table.F.L138[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L138[this_row] = value; }
				}

				public System.Boolean? L139 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L139.EffectiveType.GenericAsNativeType(this_table.F.L139[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L139[this_row] = value; }
				}

				public System.Boolean? L140 {
					get {
							return (System.Boolean?)Schema.T.Permissions.F.L140.EffectiveType.GenericAsNativeType(this_table.F.L140[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.L140[this_row] = value; }
				}
			}
		}
		#endregion
		#region PermissionsRowChangeEvent
#if PermissionsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class PermissionsRowChangeEvent : EventArgs {

			private PermissionsRow eventRow;

			private DataRowAction eventAction;

			public PermissionsRowChangeEvent(PermissionsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public PermissionsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region EditPrograms
		private bool ShouldSerializeEditPrograms() {
			return false;
		}
#if EditProgramsRowChangeEvents
		public delegate void EditProgramsRowChangeEventHandler(object sender, EditProgramsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class EditProgramsDataTable : DBIDataTable {
			#region Construction
			internal EditProgramsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal EditProgramsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(EditProgramsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.PRONAME = (DBIDataColumn)t.Columns["PRONAME"];
				  this.VIEWCMD = (DBIDataColumn)t.Columns["VIEWCMD"];
				  this.PRINTCMD = (DBIDataColumn)t.Columns["PRINTCMD"];
				  this.STARTUP = (DBIDataColumn)t.Columns["STARTUP"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn PRONAME;
				public readonly DBIDataColumn VIEWCMD;
				public readonly DBIDataColumn PRINTCMD;
				public readonly DBIDataColumn STARTUP;
			}
			#endregion
			#region EventHandlers
			#if EditProgramsRowChangeEvents
			public event EditProgramsRowChangeEventHandler EditProgramsRowChanged;
			public event EditProgramsRowChangeEventHandler EditProgramsRowChanging;
			public event EditProgramsRowChangeEventHandler EditProgramsRowDeleted;
			public event EditProgramsRowChangeEventHandler EditProgramsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.EditProgramsRowChanged != null)) {
					this.EditProgramsRowChanged(this, new EditProgramsRowChangeEvent(((EditProgramsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.EditProgramsRowChanging != null)) {
					this.EditProgramsRowChanging(this, new EditProgramsRowChangeEvent(((EditProgramsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.EditProgramsRowDeleted != null)) {
					this.EditProgramsRowDeleted(this, new EditProgramsRowChangeEvent(((EditProgramsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.EditProgramsRowDeleting != null)) {
					 this.EditProgramsRowDeleting(this, new EditProgramsRowChangeEvent(((EditProgramsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new EditProgramsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public EditProgramsRow this[int index] {
				get {
					return ((EditProgramsRow)(this.Rows[index]));
				}
			}
			public void AddEditProgramsRow(EditProgramsRow row) {
				this.Rows.Add(row);
			}
			public EditProgramsRow AddNewEditProgramsRow() {
				return ((EditProgramsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.EditPrograms)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new EditProgramsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(EditProgramsRow);
			}
			public void RemoveEditProgramsRow(EditProgramsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region EditProgramsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class EditProgramsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal EditProgramsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly EditProgramsDataTable this_table;
				private readonly EditProgramsRow this_row;
				public FAccessor( EditProgramsRow this_row )
				{
					this.this_table = ((EditProgramsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.EditPrograms.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.EditPrograms.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.EditPrograms.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String PRONAME {
					get {
							return (System.String)Schema.T.EditPrograms.F.PRONAME.EffectiveType.GenericAsNativeType(this_table.F.PRONAME[this_row], typeof(System.String));
					}
					set {this_table.F.PRONAME[this_row] = value; }
				}

				public System.String VIEWCMD {
					get {
							return (System.String)Schema.T.EditPrograms.F.VIEWCMD.EffectiveType.GenericAsNativeType(this_table.F.VIEWCMD[this_row], typeof(System.String));
					}
					set {this_table.F.VIEWCMD[this_row] = value; }
				}

				public System.String PRINTCMD {
					get {
							return (System.String)Schema.T.EditPrograms.F.PRINTCMD.EffectiveType.GenericAsNativeType(this_table.F.PRINTCMD[this_row], typeof(System.String));
					}
					set {this_table.F.PRINTCMD[this_row] = value; }
				}

				public System.String STARTUP {
					get {
							return (System.String)Schema.T.EditPrograms.F.STARTUP.EffectiveType.GenericAsNativeType(this_table.F.STARTUP[this_row], typeof(System.String));
					}
					set {this_table.F.STARTUP[this_row] = value; }
				}
			}
		}
		#endregion
		#region EditProgramsRowChangeEvent
#if EditProgramsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class EditProgramsRowChangeEvent : EventArgs {

			private EditProgramsRow eventRow;

			private DataRowAction eventAction;

			public EditProgramsRowChangeEvent(EditProgramsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public EditProgramsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Settings
		private bool ShouldSerializeSettings() {
			return false;
		}
#if SettingsRowChangeEvents
		public delegate void SettingsRowChangeEventHandler(object sender, SettingsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class SettingsDataTable : DBIDataTable {
			#region Construction
			internal SettingsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal SettingsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(SettingsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.IDD = (DBIDataColumn)t.Columns["IDD"];
				  this.IDC = (DBIDataColumn)t.Columns["IDC"];
				  this.ORIGINATOR = (DBIDataColumn)t.Columns["ORIGINATOR"];
				  this.VALUE = (DBIDataColumn)t.Columns["VALUE"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn IDD;
				public readonly DBIDataColumn IDC;
				public readonly DBIDataColumn ORIGINATOR;
				public readonly DBIDataColumn VALUE;
			}
			#endregion
			#region EventHandlers
			#if SettingsRowChangeEvents
			public event SettingsRowChangeEventHandler SettingsRowChanged;
			public event SettingsRowChangeEventHandler SettingsRowChanging;
			public event SettingsRowChangeEventHandler SettingsRowDeleted;
			public event SettingsRowChangeEventHandler SettingsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.SettingsRowChanged != null)) {
					this.SettingsRowChanged(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.SettingsRowChanging != null)) {
					this.SettingsRowChanging(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.SettingsRowDeleted != null)) {
					this.SettingsRowDeleted(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.SettingsRowDeleting != null)) {
					 this.SettingsRowDeleting(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new SettingsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public SettingsRow this[int index] {
				get {
					return ((SettingsRow)(this.Rows[index]));
				}
			}
			public void AddSettingsRow(SettingsRow row) {
				this.Rows.Add(row);
			}
			public SettingsRow AddNewSettingsRow() {
				return ((SettingsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Settings)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new SettingsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(SettingsRow);
			}
			public void RemoveSettingsRow(SettingsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region SettingsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class SettingsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal SettingsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly SettingsDataTable this_table;
				private readonly SettingsRow this_row;
				public FAccessor( SettingsRow this_row )
				{
					this.this_table = ((SettingsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Settings.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Settings.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String IDD {
					get {
							return (System.String)Schema.T.Settings.F.IDD.EffectiveType.GenericAsNativeType(this_table.F.IDD[this_row], typeof(System.String));
					}
					set {this_table.F.IDD[this_row] = value; }
				}

				public System.String IDC {
					get {
							return (System.String)Schema.T.Settings.F.IDC.EffectiveType.GenericAsNativeType(this_table.F.IDC[this_row], typeof(System.String));
					}
					set {this_table.F.IDC[this_row] = value; }
				}

				public System.Int32? ORIGINATOR {
					get {
							return (System.Int32?)Schema.T.Settings.F.ORIGINATOR.EffectiveType.GenericAsNativeType(this_table.F.ORIGINATOR[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ORIGINATOR[this_row] = value; }
				}

				public System.String VALUE {
					get {
							return (System.String)Schema.T.Settings.F.VALUE.EffectiveType.GenericAsNativeType(this_table.F.VALUE[this_row], typeof(System.String));
					}
					set {this_table.F.VALUE[this_row] = value; }
				}
			}
		}
		#endregion
		#region SettingsRowChangeEvent
#if SettingsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class SettingsRowChangeEvent : EventArgs {

			private SettingsRow eventRow;

			private DataRowAction eventAction;

			public SettingsRowChangeEvent(SettingsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public SettingsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region AccessCodes
		private bool ShouldSerializeAccessCodes() {
			return false;
		}
#if AccessCodesRowChangeEvents
		public delegate void AccessCodesRowChangeEventHandler(object sender, AccessCodesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class AccessCodesDataTable : DBIDataTable {
			#region Construction
			internal AccessCodesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal AccessCodesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(AccessCodesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if AccessCodesRowChangeEvents
			public event AccessCodesRowChangeEventHandler AccessCodesRowChanged;
			public event AccessCodesRowChangeEventHandler AccessCodesRowChanging;
			public event AccessCodesRowChangeEventHandler AccessCodesRowDeleted;
			public event AccessCodesRowChangeEventHandler AccessCodesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.AccessCodesRowChanged != null)) {
					this.AccessCodesRowChanged(this, new AccessCodesRowChangeEvent(((AccessCodesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.AccessCodesRowChanging != null)) {
					this.AccessCodesRowChanging(this, new AccessCodesRowChangeEvent(((AccessCodesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.AccessCodesRowDeleted != null)) {
					this.AccessCodesRowDeleted(this, new AccessCodesRowChangeEvent(((AccessCodesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.AccessCodesRowDeleting != null)) {
					 this.AccessCodesRowDeleting(this, new AccessCodesRowChangeEvent(((AccessCodesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new AccessCodesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public AccessCodesRow this[int index] {
				get {
					return ((AccessCodesRow)(this.Rows[index]));
				}
			}
			public void AddAccessCodesRow(AccessCodesRow row) {
				this.Rows.Add(row);
			}
			public AccessCodesRow AddNewAccessCodesRow() {
				return ((AccessCodesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.AccessCodes)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new AccessCodesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(AccessCodesRow);
			}
			public void RemoveAccessCodesRow(AccessCodesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region AccessCodesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class AccessCodesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal AccessCodesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly AccessCodesDataTable this_table;
				private readonly AccessCodesRow this_row;
				public FAccessor( AccessCodesRow this_row )
				{
					this.this_table = ((AccessCodesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.AccessCodes.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.AccessCodes.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.AccessCodes.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.AccessCodes.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region AccessCodesRowChangeEvent
#if AccessCodesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class AccessCodesRowChangeEvent : EventArgs {

			private AccessCodesRow eventRow;

			private DataRowAction eventAction;

			public AccessCodesRowChangeEvent(AccessCodesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public AccessCodesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Adjustments
		private bool ShouldSerializeAdjustments() {
			return false;
		}
#if AdjustmentsRowChangeEvents
		public delegate void AdjustmentsRowChangeEventHandler(object sender, AdjustmentsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class AdjustmentsDataTable : DBIDataTable {
			#region Construction
			internal AdjustmentsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal AdjustmentsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(AdjustmentsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if AdjustmentsRowChangeEvents
			public event AdjustmentsRowChangeEventHandler AdjustmentsRowChanged;
			public event AdjustmentsRowChangeEventHandler AdjustmentsRowChanging;
			public event AdjustmentsRowChangeEventHandler AdjustmentsRowDeleted;
			public event AdjustmentsRowChangeEventHandler AdjustmentsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.AdjustmentsRowChanged != null)) {
					this.AdjustmentsRowChanged(this, new AdjustmentsRowChangeEvent(((AdjustmentsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.AdjustmentsRowChanging != null)) {
					this.AdjustmentsRowChanging(this, new AdjustmentsRowChangeEvent(((AdjustmentsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.AdjustmentsRowDeleted != null)) {
					this.AdjustmentsRowDeleted(this, new AdjustmentsRowChangeEvent(((AdjustmentsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.AdjustmentsRowDeleting != null)) {
					 this.AdjustmentsRowDeleting(this, new AdjustmentsRowChangeEvent(((AdjustmentsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new AdjustmentsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public AdjustmentsRow this[int index] {
				get {
					return ((AdjustmentsRow)(this.Rows[index]));
				}
			}
			public void AddAdjustmentsRow(AdjustmentsRow row) {
				this.Rows.Add(row);
			}
			public AdjustmentsRow AddNewAdjustmentsRow() {
				return ((AdjustmentsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Adjustments)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new AdjustmentsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(AdjustmentsRow);
			}
			public void RemoveAdjustmentsRow(AdjustmentsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region AdjustmentsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class AdjustmentsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal AdjustmentsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly AdjustmentsDataTable this_table;
				private readonly AdjustmentsRow this_row;
				public FAccessor( AdjustmentsRow this_row )
				{
					this.this_table = ((AdjustmentsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Adjustments.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Adjustments.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Adjustments.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Adjustments.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region AdjustmentsRowChangeEvent
#if AdjustmentsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class AdjustmentsRowChangeEvent : EventArgs {

			private AdjustmentsRow eventRow;

			private DataRowAction eventAction;

			public AdjustmentsRowChangeEvent(AdjustmentsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public AdjustmentsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region AssetCodes
		private bool ShouldSerializeAssetCodes() {
			return false;
		}
#if AssetCodesRowChangeEvents
		public delegate void AssetCodesRowChangeEventHandler(object sender, AssetCodesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class AssetCodesDataTable : DBIDataTable {
			#region Construction
			internal AssetCodesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal AssetCodesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(AssetCodesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if AssetCodesRowChangeEvents
			public event AssetCodesRowChangeEventHandler AssetCodesRowChanged;
			public event AssetCodesRowChangeEventHandler AssetCodesRowChanging;
			public event AssetCodesRowChangeEventHandler AssetCodesRowDeleted;
			public event AssetCodesRowChangeEventHandler AssetCodesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.AssetCodesRowChanged != null)) {
					this.AssetCodesRowChanged(this, new AssetCodesRowChangeEvent(((AssetCodesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.AssetCodesRowChanging != null)) {
					this.AssetCodesRowChanging(this, new AssetCodesRowChangeEvent(((AssetCodesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.AssetCodesRowDeleted != null)) {
					this.AssetCodesRowDeleted(this, new AssetCodesRowChangeEvent(((AssetCodesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.AssetCodesRowDeleting != null)) {
					 this.AssetCodesRowDeleting(this, new AssetCodesRowChangeEvent(((AssetCodesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new AssetCodesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public AssetCodesRow this[int index] {
				get {
					return ((AssetCodesRow)(this.Rows[index]));
				}
			}
			public void AddAssetCodesRow(AssetCodesRow row) {
				this.Rows.Add(row);
			}
			public AssetCodesRow AddNewAssetCodesRow() {
				return ((AssetCodesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.AssetCodes)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new AssetCodesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(AssetCodesRow);
			}
			public void RemoveAssetCodesRow(AssetCodesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region AssetCodesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class AssetCodesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal AssetCodesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly AssetCodesDataTable this_table;
				private readonly AssetCodesRow this_row;
				public FAccessor( AssetCodesRow this_row )
				{
					this.this_table = ((AssetCodesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.AssetCodes.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.AssetCodes.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.AssetCodes.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.AssetCodes.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region AssetCodesRowChangeEvent
#if AssetCodesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class AssetCodesRowChangeEvent : EventArgs {

			private AssetCodesRow eventRow;

			private DataRowAction eventAction;

			public AssetCodesRowChangeEvent(AssetCodesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public AssetCodesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Buildings
		private bool ShouldSerializeBuildings() {
			return false;
		}
#if BuildingsRowChangeEvents
		public delegate void BuildingsRowChangeEventHandler(object sender, BuildingsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class BuildingsDataTable : DBIDataTable {
			#region Construction
			internal BuildingsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal BuildingsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(BuildingsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.ADDRESS1 = (DBIDataColumn)t.Columns["ADDRESS1"];
				  this.ADDRESS2 = (DBIDataColumn)t.Columns["ADDRESS2"];
				  this.CITY = (DBIDataColumn)t.Columns["CITY"];
				  this.TERRITORY = (DBIDataColumn)t.Columns["TERRITORY"];
				  this.COUNTRY = (DBIDataColumn)t.Columns["COUNTRY"];
				  this.PCODE = (DBIDataColumn)t.Columns["PCODE"];
				  this.HIDDEN = (DBIDataColumn)t.Columns["HIDDEN"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn ADDRESS1;
				public readonly DBIDataColumn ADDRESS2;
				public readonly DBIDataColumn CITY;
				public readonly DBIDataColumn TERRITORY;
				public readonly DBIDataColumn COUNTRY;
				public readonly DBIDataColumn PCODE;
				public readonly DBIDataColumn HIDDEN;
			}
			#endregion
			#region EventHandlers
			#if BuildingsRowChangeEvents
			public event BuildingsRowChangeEventHandler BuildingsRowChanged;
			public event BuildingsRowChangeEventHandler BuildingsRowChanging;
			public event BuildingsRowChangeEventHandler BuildingsRowDeleted;
			public event BuildingsRowChangeEventHandler BuildingsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.BuildingsRowChanged != null)) {
					this.BuildingsRowChanged(this, new BuildingsRowChangeEvent(((BuildingsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.BuildingsRowChanging != null)) {
					this.BuildingsRowChanging(this, new BuildingsRowChangeEvent(((BuildingsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.BuildingsRowDeleted != null)) {
					this.BuildingsRowDeleted(this, new BuildingsRowChangeEvent(((BuildingsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.BuildingsRowDeleting != null)) {
					 this.BuildingsRowDeleting(this, new BuildingsRowChangeEvent(((BuildingsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new BuildingsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public BuildingsRow this[int index] {
				get {
					return ((BuildingsRow)(this.Rows[index]));
				}
			}
			public void AddBuildingsRow(BuildingsRow row) {
				this.Rows.Add(row);
			}
			public BuildingsRow AddNewBuildingsRow() {
				return ((BuildingsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Buildings)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new BuildingsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(BuildingsRow);
			}
			public void RemoveBuildingsRow(BuildingsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region BuildingsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class BuildingsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal BuildingsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly BuildingsDataTable this_table;
				private readonly BuildingsRow this_row;
				public FAccessor( BuildingsRow this_row )
				{
					this.this_table = ((BuildingsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Buildings.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Buildings.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.Buildings.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Buildings.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Buildings.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.String ADDRESS1 {
					get {
							return (System.String)Schema.T.Buildings.F.ADDRESS1.EffectiveType.GenericAsNativeType(this_table.F.ADDRESS1[this_row], typeof(System.String));
					}
					set {this_table.F.ADDRESS1[this_row] = value; }
				}

				public System.String ADDRESS2 {
					get {
							return (System.String)Schema.T.Buildings.F.ADDRESS2.EffectiveType.GenericAsNativeType(this_table.F.ADDRESS2[this_row], typeof(System.String));
					}
					set {this_table.F.ADDRESS2[this_row] = value; }
				}

				public System.String CITY {
					get {
							return (System.String)Schema.T.Buildings.F.CITY.EffectiveType.GenericAsNativeType(this_table.F.CITY[this_row], typeof(System.String));
					}
					set {this_table.F.CITY[this_row] = value; }
				}

				public System.String TERRITORY {
					get {
							return (System.String)Schema.T.Buildings.F.TERRITORY.EffectiveType.GenericAsNativeType(this_table.F.TERRITORY[this_row], typeof(System.String));
					}
					set {this_table.F.TERRITORY[this_row] = value; }
				}

				public System.String COUNTRY {
					get {
							return (System.String)Schema.T.Buildings.F.COUNTRY.EffectiveType.GenericAsNativeType(this_table.F.COUNTRY[this_row], typeof(System.String));
					}
					set {this_table.F.COUNTRY[this_row] = value; }
				}

				public System.String PCODE {
					get {
							return (System.String)Schema.T.Buildings.F.PCODE.EffectiveType.GenericAsNativeType(this_table.F.PCODE[this_row], typeof(System.String));
					}
					set {this_table.F.PCODE[this_row] = value; }
				}

				public System.Boolean? HIDDEN {
					get {
							return (System.Boolean?)Schema.T.Buildings.F.HIDDEN.EffectiveType.GenericAsNativeType(this_table.F.HIDDEN[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.HIDDEN[this_row] = value; }
				}
			}
		}
		#endregion
		#region BuildingsRowChangeEvent
#if BuildingsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class BuildingsRowChangeEvent : EventArgs {

			private BuildingsRow eventRow;

			private DataRowAction eventAction;

			public BuildingsRowChangeEvent(BuildingsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public BuildingsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Chargebacks
		private bool ShouldSerializeChargebacks() {
			return false;
		}
#if ChargebacksRowChangeEvents
		public delegate void ChargebacksRowChangeEventHandler(object sender, ChargebacksRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class ChargebacksDataTable : DBIDataTable {
			#region Construction
			internal ChargebacksDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal ChargebacksDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(ChargebacksDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.WOKEY = (DBIDataColumn)t.Columns["WOKEY"];
				  this.CHARGETO = (DBIDataColumn)t.Columns["CHARGETO"];
				  this.LABOR = (DBIDataColumn)t.Columns["LABOR"];
				  this.MATERIAL = (DBIDataColumn)t.Columns["MATERIAL"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn WOKEY;
				public readonly DBIDataColumn CHARGETO;
				public readonly DBIDataColumn LABOR;
				public readonly DBIDataColumn MATERIAL;
			}
			#endregion
			#region EventHandlers
			#if ChargebacksRowChangeEvents
			public event ChargebacksRowChangeEventHandler ChargebacksRowChanged;
			public event ChargebacksRowChangeEventHandler ChargebacksRowChanging;
			public event ChargebacksRowChangeEventHandler ChargebacksRowDeleted;
			public event ChargebacksRowChangeEventHandler ChargebacksRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ChargebacksRowChanged != null)) {
					this.ChargebacksRowChanged(this, new ChargebacksRowChangeEvent(((ChargebacksRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ChargebacksRowChanging != null)) {
					this.ChargebacksRowChanging(this, new ChargebacksRowChangeEvent(((ChargebacksRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ChargebacksRowDeleted != null)) {
					this.ChargebacksRowDeleted(this, new ChargebacksRowChangeEvent(((ChargebacksRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ChargebacksRowDeleting != null)) {
					 this.ChargebacksRowDeleting(this, new ChargebacksRowChangeEvent(((ChargebacksRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new ChargebacksDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public ChargebacksRow this[int index] {
				get {
					return ((ChargebacksRow)(this.Rows[index]));
				}
			}
			public void AddChargebacksRow(ChargebacksRow row) {
				this.Rows.Add(row);
			}
			public ChargebacksRow AddNewChargebacksRow() {
				return ((ChargebacksRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Chargebacks)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new ChargebacksRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(ChargebacksRow);
			}
			public void RemoveChargebacksRow(ChargebacksRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region ChargebacksRow
		[Thinkage.Libraries.Translation.Invariant]
		public class ChargebacksRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal ChargebacksRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly ChargebacksDataTable this_table;
				private readonly ChargebacksRow this_row;
				public FAccessor( ChargebacksRow this_row )
				{
					this.this_table = ((ChargebacksDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Chargebacks.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Chargebacks.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? WOKEY {
					get {
							return (System.Int32?)Schema.T.Chargebacks.F.WOKEY.EffectiveType.GenericAsNativeType(this_table.F.WOKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.WOKEY[this_row] = value; }
				}

				public System.String CHARGETO {
					get {
							return (System.String)Schema.T.Chargebacks.F.CHARGETO.EffectiveType.GenericAsNativeType(this_table.F.CHARGETO[this_row], typeof(System.String));
					}
					set {this_table.F.CHARGETO[this_row] = value; }
				}

				public System.Int32? LABOR {
					get {
							return (System.Int32?)Schema.T.Chargebacks.F.LABOR.EffectiveType.GenericAsNativeType(this_table.F.LABOR[this_row], typeof(System.Int32?));
					}
					set {this_table.F.LABOR[this_row] = value; }
				}

				public System.Int32? MATERIAL {
					get {
							return (System.Int32?)Schema.T.Chargebacks.F.MATERIAL.EffectiveType.GenericAsNativeType(this_table.F.MATERIAL[this_row], typeof(System.Int32?));
					}
					set {this_table.F.MATERIAL[this_row] = value; }
				}
			}
		}
		#endregion
		#region ChargebacksRowChangeEvent
#if ChargebacksRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class ChargebacksRowChangeEvent : EventArgs {

			private ChargebacksRow eventRow;

			private DataRowAction eventAction;

			public ChargebacksRowChangeEvent(ChargebacksRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public ChargebacksRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region ClosingCodes
		private bool ShouldSerializeClosingCodes() {
			return false;
		}
#if ClosingCodesRowChangeEvents
		public delegate void ClosingCodesRowChangeEventHandler(object sender, ClosingCodesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class ClosingCodesDataTable : DBIDataTable {
			#region Construction
			internal ClosingCodesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal ClosingCodesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(ClosingCodesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if ClosingCodesRowChangeEvents
			public event ClosingCodesRowChangeEventHandler ClosingCodesRowChanged;
			public event ClosingCodesRowChangeEventHandler ClosingCodesRowChanging;
			public event ClosingCodesRowChangeEventHandler ClosingCodesRowDeleted;
			public event ClosingCodesRowChangeEventHandler ClosingCodesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ClosingCodesRowChanged != null)) {
					this.ClosingCodesRowChanged(this, new ClosingCodesRowChangeEvent(((ClosingCodesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ClosingCodesRowChanging != null)) {
					this.ClosingCodesRowChanging(this, new ClosingCodesRowChangeEvent(((ClosingCodesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ClosingCodesRowDeleted != null)) {
					this.ClosingCodesRowDeleted(this, new ClosingCodesRowChangeEvent(((ClosingCodesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ClosingCodesRowDeleting != null)) {
					 this.ClosingCodesRowDeleting(this, new ClosingCodesRowChangeEvent(((ClosingCodesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new ClosingCodesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public ClosingCodesRow this[int index] {
				get {
					return ((ClosingCodesRow)(this.Rows[index]));
				}
			}
			public void AddClosingCodesRow(ClosingCodesRow row) {
				this.Rows.Add(row);
			}
			public ClosingCodesRow AddNewClosingCodesRow() {
				return ((ClosingCodesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.ClosingCodes)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new ClosingCodesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(ClosingCodesRow);
			}
			public void RemoveClosingCodesRow(ClosingCodesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region ClosingCodesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class ClosingCodesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal ClosingCodesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly ClosingCodesDataTable this_table;
				private readonly ClosingCodesRow this_row;
				public FAccessor( ClosingCodesRow this_row )
				{
					this.this_table = ((ClosingCodesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.ClosingCodes.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.ClosingCodes.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.ClosingCodes.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.ClosingCodes.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region ClosingCodesRowChangeEvent
#if ClosingCodesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class ClosingCodesRowChangeEvent : EventArgs {

			private ClosingCodesRow eventRow;

			private DataRowAction eventAction;

			public ClosingCodesRowChangeEvent(ClosingCodesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public ClosingCodesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Contacts
		private bool ShouldSerializeContacts() {
			return false;
		}
#if ContactsRowChangeEvents
		public delegate void ContactsRowChangeEventHandler(object sender, ContactsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class ContactsDataTable : DBIDataTable {
			#region Construction
			internal ContactsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal ContactsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(ContactsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.BTEL = (DBIDataColumn)t.Columns["BTEL"];
				  this.HTEL = (DBIDataColumn)t.Columns["HTEL"];
				  this.PAGER = (DBIDataColumn)t.Columns["PAGER"];
				  this.MOBILE = (DBIDataColumn)t.Columns["MOBILE"];
				  this.HIDDEN = (DBIDataColumn)t.Columns["HIDDEN"];
				  this.EMAIL = (DBIDataColumn)t.Columns["EMAIL"];
				  this.COMMENT = (DBIDataColumn)t.Columns["COMMENT"];
				  this.LANGID = (DBIDataColumn)t.Columns["LANGID"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn BTEL;
				public readonly DBIDataColumn HTEL;
				public readonly DBIDataColumn PAGER;
				public readonly DBIDataColumn MOBILE;
				public readonly DBIDataColumn HIDDEN;
				public readonly DBIDataColumn EMAIL;
				public readonly DBIDataColumn COMMENT;
				public readonly DBIDataColumn LANGID;
			}
			#endregion
			#region EventHandlers
			#if ContactsRowChangeEvents
			public event ContactsRowChangeEventHandler ContactsRowChanged;
			public event ContactsRowChangeEventHandler ContactsRowChanging;
			public event ContactsRowChangeEventHandler ContactsRowDeleted;
			public event ContactsRowChangeEventHandler ContactsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ContactsRowChanged != null)) {
					this.ContactsRowChanged(this, new ContactsRowChangeEvent(((ContactsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ContactsRowChanging != null)) {
					this.ContactsRowChanging(this, new ContactsRowChangeEvent(((ContactsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ContactsRowDeleted != null)) {
					this.ContactsRowDeleted(this, new ContactsRowChangeEvent(((ContactsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ContactsRowDeleting != null)) {
					 this.ContactsRowDeleting(this, new ContactsRowChangeEvent(((ContactsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new ContactsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public ContactsRow this[int index] {
				get {
					return ((ContactsRow)(this.Rows[index]));
				}
			}
			public void AddContactsRow(ContactsRow row) {
				this.Rows.Add(row);
			}
			public ContactsRow AddNewContactsRow() {
				return ((ContactsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Contacts)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new ContactsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(ContactsRow);
			}
			public void RemoveContactsRow(ContactsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region ContactsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class ContactsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal ContactsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly ContactsDataTable this_table;
				private readonly ContactsRow this_row;
				public FAccessor( ContactsRow this_row )
				{
					this.this_table = ((ContactsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Contacts.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Contacts.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.Contacts.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Contacts.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String BTEL {
					get {
							return (System.String)Schema.T.Contacts.F.BTEL.EffectiveType.GenericAsNativeType(this_table.F.BTEL[this_row], typeof(System.String));
					}
					set {this_table.F.BTEL[this_row] = value; }
				}

				public System.String HTEL {
					get {
							return (System.String)Schema.T.Contacts.F.HTEL.EffectiveType.GenericAsNativeType(this_table.F.HTEL[this_row], typeof(System.String));
					}
					set {this_table.F.HTEL[this_row] = value; }
				}

				public System.String PAGER {
					get {
							return (System.String)Schema.T.Contacts.F.PAGER.EffectiveType.GenericAsNativeType(this_table.F.PAGER[this_row], typeof(System.String));
					}
					set {this_table.F.PAGER[this_row] = value; }
				}

				public System.String MOBILE {
					get {
							return (System.String)Schema.T.Contacts.F.MOBILE.EffectiveType.GenericAsNativeType(this_table.F.MOBILE[this_row], typeof(System.String));
					}
					set {this_table.F.MOBILE[this_row] = value; }
				}

				public System.Boolean? HIDDEN {
					get {
							return (System.Boolean?)Schema.T.Contacts.F.HIDDEN.EffectiveType.GenericAsNativeType(this_table.F.HIDDEN[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.HIDDEN[this_row] = value; }
				}

				public System.String EMAIL {
					get {
							return (System.String)Schema.T.Contacts.F.EMAIL.EffectiveType.GenericAsNativeType(this_table.F.EMAIL[this_row], typeof(System.String));
					}
					set {this_table.F.EMAIL[this_row] = value; }
				}

				public System.String COMMENT {
					get {
							return (System.String)Schema.T.Contacts.F.COMMENT.EffectiveType.GenericAsNativeType(this_table.F.COMMENT[this_row], typeof(System.String));
					}
					set {this_table.F.COMMENT[this_row] = value; }
				}

				public System.String LANGID {
					get {
							return (System.String)Schema.T.Contacts.F.LANGID.EffectiveType.GenericAsNativeType(this_table.F.LANGID[this_row], typeof(System.String));
					}
					set {this_table.F.LANGID[this_row] = value; }
				}
			}
		}
		#endregion
		#region ContactsRowChangeEvent
#if ContactsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class ContactsRowChangeEvent : EventArgs {

			private ContactsRow eventRow;

			private DataRowAction eventAction;

			public ContactsRowChangeEvent(ContactsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public ContactsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region CostCenters
		private bool ShouldSerializeCostCenters() {
			return false;
		}
#if CostCentersRowChangeEvents
		public delegate void CostCentersRowChangeEventHandler(object sender, CostCentersRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class CostCentersDataTable : DBIDataTable {
			#region Construction
			internal CostCentersDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal CostCentersDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(CostCentersDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if CostCentersRowChangeEvents
			public event CostCentersRowChangeEventHandler CostCentersRowChanged;
			public event CostCentersRowChangeEventHandler CostCentersRowChanging;
			public event CostCentersRowChangeEventHandler CostCentersRowDeleted;
			public event CostCentersRowChangeEventHandler CostCentersRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.CostCentersRowChanged != null)) {
					this.CostCentersRowChanged(this, new CostCentersRowChangeEvent(((CostCentersRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.CostCentersRowChanging != null)) {
					this.CostCentersRowChanging(this, new CostCentersRowChangeEvent(((CostCentersRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.CostCentersRowDeleted != null)) {
					this.CostCentersRowDeleted(this, new CostCentersRowChangeEvent(((CostCentersRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.CostCentersRowDeleting != null)) {
					 this.CostCentersRowDeleting(this, new CostCentersRowChangeEvent(((CostCentersRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new CostCentersDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public CostCentersRow this[int index] {
				get {
					return ((CostCentersRow)(this.Rows[index]));
				}
			}
			public void AddCostCentersRow(CostCentersRow row) {
				this.Rows.Add(row);
			}
			public CostCentersRow AddNewCostCentersRow() {
				return ((CostCentersRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.CostCenters)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new CostCentersRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(CostCentersRow);
			}
			public void RemoveCostCentersRow(CostCentersRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region CostCentersRow
		[Thinkage.Libraries.Translation.Invariant]
		public class CostCentersRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal CostCentersRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly CostCentersDataTable this_table;
				private readonly CostCentersRow this_row;
				public FAccessor( CostCentersRow this_row )
				{
					this.this_table = ((CostCentersDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.CostCenters.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.CostCenters.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.CostCenters.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.CostCenters.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region CostCentersRowChangeEvent
#if CostCentersRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class CostCentersRowChangeEvent : EventArgs {

			private CostCentersRow eventRow;

			private DataRowAction eventAction;

			public CostCentersRowChangeEvent(CostCentersRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public CostCentersRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region InvCategories
		private bool ShouldSerializeInvCategories() {
			return false;
		}
#if InvCategoriesRowChangeEvents
		public delegate void InvCategoriesRowChangeEventHandler(object sender, InvCategoriesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class InvCategoriesDataTable : DBIDataTable {
			#region Construction
			internal InvCategoriesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal InvCategoriesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(InvCategoriesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if InvCategoriesRowChangeEvents
			public event InvCategoriesRowChangeEventHandler InvCategoriesRowChanged;
			public event InvCategoriesRowChangeEventHandler InvCategoriesRowChanging;
			public event InvCategoriesRowChangeEventHandler InvCategoriesRowDeleted;
			public event InvCategoriesRowChangeEventHandler InvCategoriesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.InvCategoriesRowChanged != null)) {
					this.InvCategoriesRowChanged(this, new InvCategoriesRowChangeEvent(((InvCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.InvCategoriesRowChanging != null)) {
					this.InvCategoriesRowChanging(this, new InvCategoriesRowChangeEvent(((InvCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.InvCategoriesRowDeleted != null)) {
					this.InvCategoriesRowDeleted(this, new InvCategoriesRowChangeEvent(((InvCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.InvCategoriesRowDeleting != null)) {
					 this.InvCategoriesRowDeleting(this, new InvCategoriesRowChangeEvent(((InvCategoriesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new InvCategoriesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public InvCategoriesRow this[int index] {
				get {
					return ((InvCategoriesRow)(this.Rows[index]));
				}
			}
			public void AddInvCategoriesRow(InvCategoriesRow row) {
				this.Rows.Add(row);
			}
			public InvCategoriesRow AddNewInvCategoriesRow() {
				return ((InvCategoriesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.InvCategories)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new InvCategoriesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(InvCategoriesRow);
			}
			public void RemoveInvCategoriesRow(InvCategoriesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region InvCategoriesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class InvCategoriesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal InvCategoriesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly InvCategoriesDataTable this_table;
				private readonly InvCategoriesRow this_row;
				public FAccessor( InvCategoriesRow this_row )
				{
					this.this_table = ((InvCategoriesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.InvCategories.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.InvCategories.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.InvCategories.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.InvCategories.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region InvCategoriesRowChangeEvent
#if InvCategoriesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class InvCategoriesRowChangeEvent : EventArgs {

			private InvCategoriesRow eventRow;

			private DataRowAction eventAction;

			public InvCategoriesRowChangeEvent(InvCategoriesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public InvCategoriesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region InvItems
		private bool ShouldSerializeInvItems() {
			return false;
		}
#if InvItemsRowChangeEvents
		public delegate void InvItemsRowChangeEventHandler(object sender, InvItemsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class InvItemsDataTable : DBIDataTable {
			#region Construction
			internal InvItemsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal InvItemsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(InvItemsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.CAT = (DBIDataColumn)t.Columns["CAT"];
				  this.UOMKEY = (DBIDataColumn)t.Columns["UOMKEY"];
				  this.MINI = (DBIDataColumn)t.Columns["MINI"];
				  this.MAXI = (DBIDataColumn)t.Columns["MAXI"];
				  this.TOTALCOST = (DBIDataColumn)t.Columns["TOTALCOST"];
				  this.ONHAND = (DBIDataColumn)t.Columns["ONHAND"];
				  this.ONORDER = (DBIDataColumn)t.Columns["ONORDER"];
				  this.ONRESERVE = (DBIDataColumn)t.Columns["ONRESERVE"];
				  this.TOTALSEQ = (DBIDataColumn)t.Columns["TOTALSEQ"];
				  this.INVENTORY = (DBIDataColumn)t.Columns["INVENTORY"];
				  this.COMMENT = (DBIDataColumn)t.Columns["COMMENT"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn CAT;
				public readonly DBIDataColumn UOMKEY;
				public readonly DBIDataColumn MINI;
				public readonly DBIDataColumn MAXI;
				public readonly DBIDataColumn TOTALCOST;
				public readonly DBIDataColumn ONHAND;
				public readonly DBIDataColumn ONORDER;
				public readonly DBIDataColumn ONRESERVE;
				public readonly DBIDataColumn TOTALSEQ;
				public readonly DBIDataColumn INVENTORY;
				public readonly DBIDataColumn COMMENT;
			}
			#endregion
			#region EventHandlers
			#if InvItemsRowChangeEvents
			public event InvItemsRowChangeEventHandler InvItemsRowChanged;
			public event InvItemsRowChangeEventHandler InvItemsRowChanging;
			public event InvItemsRowChangeEventHandler InvItemsRowDeleted;
			public event InvItemsRowChangeEventHandler InvItemsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.InvItemsRowChanged != null)) {
					this.InvItemsRowChanged(this, new InvItemsRowChangeEvent(((InvItemsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.InvItemsRowChanging != null)) {
					this.InvItemsRowChanging(this, new InvItemsRowChangeEvent(((InvItemsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.InvItemsRowDeleted != null)) {
					this.InvItemsRowDeleted(this, new InvItemsRowChangeEvent(((InvItemsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.InvItemsRowDeleting != null)) {
					 this.InvItemsRowDeleting(this, new InvItemsRowChangeEvent(((InvItemsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new InvItemsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public InvItemsRow this[int index] {
				get {
					return ((InvItemsRow)(this.Rows[index]));
				}
			}
			public void AddInvItemsRow(InvItemsRow row) {
				this.Rows.Add(row);
			}
			public InvItemsRow AddNewInvItemsRow() {
				return ((InvItemsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.InvItems)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new InvItemsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(InvItemsRow);
			}
			public void RemoveInvItemsRow(InvItemsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region InvItemsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class InvItemsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal InvItemsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly InvItemsDataTable this_table;
				private readonly InvItemsRow this_row;
				public FAccessor( InvItemsRow this_row )
				{
					this.this_table = ((InvItemsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.InvItems.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.InvItems.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.InvItems.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.InvItems.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.InvItems.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.String CAT {
					get {
							return (System.String)Schema.T.InvItems.F.CAT.EffectiveType.GenericAsNativeType(this_table.F.CAT[this_row], typeof(System.String));
					}
					set {this_table.F.CAT[this_row] = value; }
				}

				public System.Int32? UOMKEY {
					get {
							return (System.Int32?)Schema.T.InvItems.F.UOMKEY.EffectiveType.GenericAsNativeType(this_table.F.UOMKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.UOMKEY[this_row] = value; }
				}

				public System.Int32? MINI {
					get {
							return (System.Int32?)Schema.T.InvItems.F.MINI.EffectiveType.GenericAsNativeType(this_table.F.MINI[this_row], typeof(System.Int32?));
					}
					set {this_table.F.MINI[this_row] = value; }
				}

				public System.Int32? MAXI {
					get {
							return (System.Int32?)Schema.T.InvItems.F.MAXI.EffectiveType.GenericAsNativeType(this_table.F.MAXI[this_row], typeof(System.Int32?));
					}
					set {this_table.F.MAXI[this_row] = value; }
				}

				public System.Int32? TOTALCOST {
					get {
							return (System.Int32?)Schema.T.InvItems.F.TOTALCOST.EffectiveType.GenericAsNativeType(this_table.F.TOTALCOST[this_row], typeof(System.Int32?));
					}
					set {this_table.F.TOTALCOST[this_row] = value; }
				}

				public System.Int32? ONHAND {
					get {
							return (System.Int32?)Schema.T.InvItems.F.ONHAND.EffectiveType.GenericAsNativeType(this_table.F.ONHAND[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ONHAND[this_row] = value; }
				}

				public System.Int32? ONORDER {
					get {
							return (System.Int32?)Schema.T.InvItems.F.ONORDER.EffectiveType.GenericAsNativeType(this_table.F.ONORDER[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ONORDER[this_row] = value; }
				}

				public System.Int32? ONRESERVE {
					get {
							return (System.Int32?)Schema.T.InvItems.F.ONRESERVE.EffectiveType.GenericAsNativeType(this_table.F.ONRESERVE[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ONRESERVE[this_row] = value; }
				}

				public System.Int32? TOTALSEQ {
					get {
							return (System.Int32?)Schema.T.InvItems.F.TOTALSEQ.EffectiveType.GenericAsNativeType(this_table.F.TOTALSEQ[this_row], typeof(System.Int32?));
					}
					set {this_table.F.TOTALSEQ[this_row] = value; }
				}

				public System.Boolean? INVENTORY {
					get {
							return (System.Boolean?)Schema.T.InvItems.F.INVENTORY.EffectiveType.GenericAsNativeType(this_table.F.INVENTORY[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.INVENTORY[this_row] = value; }
				}

				public System.String COMMENT {
					get {
							return (System.String)Schema.T.InvItems.F.COMMENT.EffectiveType.GenericAsNativeType(this_table.F.COMMENT[this_row], typeof(System.String));
					}
					set {this_table.F.COMMENT[this_row] = value; }
				}
			}
		}
		#endregion
		#region InvItemsRowChangeEvent
#if InvItemsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class InvItemsRowChangeEvent : EventArgs {

			private InvItemsRow eventRow;

			private DataRowAction eventAction;

			public InvItemsRowChangeEvent(InvItemsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public InvItemsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region InvLocations
		private bool ShouldSerializeInvLocations() {
			return false;
		}
#if InvLocationsRowChangeEvents
		public delegate void InvLocationsRowChangeEventHandler(object sender, InvLocationsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class InvLocationsDataTable : DBIDataTable {
			#region Construction
			internal InvLocationsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal InvLocationsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(InvLocationsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.STRMKEY = (DBIDataColumn)t.Columns["STRMKEY"];
				  this.ITEMKEY = (DBIDataColumn)t.Columns["ITEMKEY"];
				  this.LOC = (DBIDataColumn)t.Columns["LOC"];
				  this.ONHAND = (DBIDataColumn)t.Columns["ONHAND"];
				  this.TOTALCOST = (DBIDataColumn)t.Columns["TOTALCOST"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn STRMKEY;
				public readonly DBIDataColumn ITEMKEY;
				public readonly DBIDataColumn LOC;
				public readonly DBIDataColumn ONHAND;
				public readonly DBIDataColumn TOTALCOST;
			}
			#endregion
			#region EventHandlers
			#if InvLocationsRowChangeEvents
			public event InvLocationsRowChangeEventHandler InvLocationsRowChanged;
			public event InvLocationsRowChangeEventHandler InvLocationsRowChanging;
			public event InvLocationsRowChangeEventHandler InvLocationsRowDeleted;
			public event InvLocationsRowChangeEventHandler InvLocationsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.InvLocationsRowChanged != null)) {
					this.InvLocationsRowChanged(this, new InvLocationsRowChangeEvent(((InvLocationsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.InvLocationsRowChanging != null)) {
					this.InvLocationsRowChanging(this, new InvLocationsRowChangeEvent(((InvLocationsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.InvLocationsRowDeleted != null)) {
					this.InvLocationsRowDeleted(this, new InvLocationsRowChangeEvent(((InvLocationsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.InvLocationsRowDeleting != null)) {
					 this.InvLocationsRowDeleting(this, new InvLocationsRowChangeEvent(((InvLocationsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new InvLocationsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public InvLocationsRow this[int index] {
				get {
					return ((InvLocationsRow)(this.Rows[index]));
				}
			}
			public void AddInvLocationsRow(InvLocationsRow row) {
				this.Rows.Add(row);
			}
			public InvLocationsRow AddNewInvLocationsRow() {
				return ((InvLocationsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.InvLocations)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new InvLocationsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(InvLocationsRow);
			}
			public void RemoveInvLocationsRow(InvLocationsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region InvLocationsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class InvLocationsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal InvLocationsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly InvLocationsDataTable this_table;
				private readonly InvLocationsRow this_row;
				public FAccessor( InvLocationsRow this_row )
				{
					this.this_table = ((InvLocationsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.InvLocations.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.InvLocations.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? STRMKEY {
					get {
							return (System.Int32?)Schema.T.InvLocations.F.STRMKEY.EffectiveType.GenericAsNativeType(this_table.F.STRMKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.STRMKEY[this_row] = value; }
				}

				public System.Int32? ITEMKEY {
					get {
							return (System.Int32?)Schema.T.InvLocations.F.ITEMKEY.EffectiveType.GenericAsNativeType(this_table.F.ITEMKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ITEMKEY[this_row] = value; }
				}

				public System.String LOC {
					get {
							return (System.String)Schema.T.InvLocations.F.LOC.EffectiveType.GenericAsNativeType(this_table.F.LOC[this_row], typeof(System.String));
					}
					set {this_table.F.LOC[this_row] = value; }
				}

				public System.Int32? ONHAND {
					get {
							return (System.Int32?)Schema.T.InvLocations.F.ONHAND.EffectiveType.GenericAsNativeType(this_table.F.ONHAND[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ONHAND[this_row] = value; }
				}

				public System.Int32? TOTALCOST {
					get {
							return (System.Int32?)Schema.T.InvLocations.F.TOTALCOST.EffectiveType.GenericAsNativeType(this_table.F.TOTALCOST[this_row], typeof(System.Int32?));
					}
					set {this_table.F.TOTALCOST[this_row] = value; }
				}
			}
		}
		#endregion
		#region InvLocationsRowChangeEvent
#if InvLocationsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class InvLocationsRowChangeEvent : EventArgs {

			private InvLocationsRow eventRow;

			private DataRowAction eventAction;

			public InvLocationsRowChangeEvent(InvLocationsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public InvLocationsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region InvTransactions
		private bool ShouldSerializeInvTransactions() {
			return false;
		}
#if InvTransactionsRowChangeEvents
		public delegate void InvTransactionsRowChangeEventHandler(object sender, InvTransactionsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class InvTransactionsDataTable : DBIDataTable {
			#region Construction
			internal InvTransactionsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal InvTransactionsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(InvTransactionsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.ITEMKEY = (DBIDataColumn)t.Columns["ITEMKEY"];
				  this.TYPE = (DBIDataColumn)t.Columns["TYPE"];
				  this.DATE = (DBIDataColumn)t.Columns["DATE"];
				  this.TIME = (DBIDataColumn)t.Columns["TIME"];
				  this.QTY = (DBIDataColumn)t.Columns["QTY"];
				  this.TOTALCOST = (DBIDataColumn)t.Columns["TOTALCOST"];
				  this.REASON = (DBIDataColumn)t.Columns["REASON"];
				  this.STRMKEY = (DBIDataColumn)t.Columns["STRMKEY"];
				  this.LOC = (DBIDataColumn)t.Columns["LOC"];
				  this.REFER = (DBIDataColumn)t.Columns["REFER"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn ITEMKEY;
				public readonly DBIDataColumn TYPE;
				public readonly DBIDataColumn DATE;
				public readonly DBIDataColumn TIME;
				public readonly DBIDataColumn QTY;
				public readonly DBIDataColumn TOTALCOST;
				public readonly DBIDataColumn REASON;
				public readonly DBIDataColumn STRMKEY;
				public readonly DBIDataColumn LOC;
				public readonly DBIDataColumn REFER;
			}
			#endregion
			#region EventHandlers
			#if InvTransactionsRowChangeEvents
			public event InvTransactionsRowChangeEventHandler InvTransactionsRowChanged;
			public event InvTransactionsRowChangeEventHandler InvTransactionsRowChanging;
			public event InvTransactionsRowChangeEventHandler InvTransactionsRowDeleted;
			public event InvTransactionsRowChangeEventHandler InvTransactionsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.InvTransactionsRowChanged != null)) {
					this.InvTransactionsRowChanged(this, new InvTransactionsRowChangeEvent(((InvTransactionsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.InvTransactionsRowChanging != null)) {
					this.InvTransactionsRowChanging(this, new InvTransactionsRowChangeEvent(((InvTransactionsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.InvTransactionsRowDeleted != null)) {
					this.InvTransactionsRowDeleted(this, new InvTransactionsRowChangeEvent(((InvTransactionsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.InvTransactionsRowDeleting != null)) {
					 this.InvTransactionsRowDeleting(this, new InvTransactionsRowChangeEvent(((InvTransactionsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new InvTransactionsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public InvTransactionsRow this[int index] {
				get {
					return ((InvTransactionsRow)(this.Rows[index]));
				}
			}
			public void AddInvTransactionsRow(InvTransactionsRow row) {
				this.Rows.Add(row);
			}
			public InvTransactionsRow AddNewInvTransactionsRow() {
				return ((InvTransactionsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.InvTransactions)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new InvTransactionsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(InvTransactionsRow);
			}
			public void RemoveInvTransactionsRow(InvTransactionsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region InvTransactionsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class InvTransactionsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal InvTransactionsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly InvTransactionsDataTable this_table;
				private readonly InvTransactionsRow this_row;
				public FAccessor( InvTransactionsRow this_row )
				{
					this.this_table = ((InvTransactionsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.InvTransactions.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.InvTransactions.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? ITEMKEY {
					get {
							return (System.Int32?)Schema.T.InvTransactions.F.ITEMKEY.EffectiveType.GenericAsNativeType(this_table.F.ITEMKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ITEMKEY[this_row] = value; }
				}

				public System.String TYPE {
					get {
							return (System.String)Schema.T.InvTransactions.F.TYPE.EffectiveType.GenericAsNativeType(this_table.F.TYPE[this_row], typeof(System.String));
					}
					set {this_table.F.TYPE[this_row] = value; }
				}

				public System.DateTime? DATE {
					get {
							return (System.DateTime?)Schema.T.InvTransactions.F.DATE.EffectiveType.GenericAsNativeType(this_table.F.DATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.DATE[this_row] = value; }
				}

				public System.String TIME {
					get {
							return (System.String)Schema.T.InvTransactions.F.TIME.EffectiveType.GenericAsNativeType(this_table.F.TIME[this_row], typeof(System.String));
					}
					set {this_table.F.TIME[this_row] = value; }
				}

				public System.Int32? QTY {
					get {
							return (System.Int32?)Schema.T.InvTransactions.F.QTY.EffectiveType.GenericAsNativeType(this_table.F.QTY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.QTY[this_row] = value; }
				}

				public System.Int32? TOTALCOST {
					get {
							return (System.Int32?)Schema.T.InvTransactions.F.TOTALCOST.EffectiveType.GenericAsNativeType(this_table.F.TOTALCOST[this_row], typeof(System.Int32?));
					}
					set {this_table.F.TOTALCOST[this_row] = value; }
				}

				public System.String REASON {
					get {
							return (System.String)Schema.T.InvTransactions.F.REASON.EffectiveType.GenericAsNativeType(this_table.F.REASON[this_row], typeof(System.String));
					}
					set {this_table.F.REASON[this_row] = value; }
				}

				public System.Int32? STRMKEY {
					get {
							return (System.Int32?)Schema.T.InvTransactions.F.STRMKEY.EffectiveType.GenericAsNativeType(this_table.F.STRMKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.STRMKEY[this_row] = value; }
				}

				public System.String LOC {
					get {
							return (System.String)Schema.T.InvTransactions.F.LOC.EffectiveType.GenericAsNativeType(this_table.F.LOC[this_row], typeof(System.String));
					}
					set {this_table.F.LOC[this_row] = value; }
				}

				public System.String REFER {
					get {
							return (System.String)Schema.T.InvTransactions.F.REFER.EffectiveType.GenericAsNativeType(this_table.F.REFER[this_row], typeof(System.String));
					}
					set {this_table.F.REFER[this_row] = value; }
				}
			}
		}
		#endregion
		#region InvTransactionsRowChangeEvent
#if InvTransactionsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class InvTransactionsRowChangeEvent : EventArgs {

			private InvTransactionsRow eventRow;

			private DataRowAction eventAction;

			public InvTransactionsRowChangeEvent(InvTransactionsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public InvTransactionsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Issues
		private bool ShouldSerializeIssues() {
			return false;
		}
#if IssuesRowChangeEvents
		public delegate void IssuesRowChangeEventHandler(object sender, IssuesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class IssuesDataTable : DBIDataTable {
			#region Construction
			internal IssuesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal IssuesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(IssuesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if IssuesRowChangeEvents
			public event IssuesRowChangeEventHandler IssuesRowChanged;
			public event IssuesRowChangeEventHandler IssuesRowChanging;
			public event IssuesRowChangeEventHandler IssuesRowDeleted;
			public event IssuesRowChangeEventHandler IssuesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.IssuesRowChanged != null)) {
					this.IssuesRowChanged(this, new IssuesRowChangeEvent(((IssuesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.IssuesRowChanging != null)) {
					this.IssuesRowChanging(this, new IssuesRowChangeEvent(((IssuesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.IssuesRowDeleted != null)) {
					this.IssuesRowDeleted(this, new IssuesRowChangeEvent(((IssuesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.IssuesRowDeleting != null)) {
					 this.IssuesRowDeleting(this, new IssuesRowChangeEvent(((IssuesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new IssuesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public IssuesRow this[int index] {
				get {
					return ((IssuesRow)(this.Rows[index]));
				}
			}
			public void AddIssuesRow(IssuesRow row) {
				this.Rows.Add(row);
			}
			public IssuesRow AddNewIssuesRow() {
				return ((IssuesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Issues)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new IssuesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(IssuesRow);
			}
			public void RemoveIssuesRow(IssuesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region IssuesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class IssuesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal IssuesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly IssuesDataTable this_table;
				private readonly IssuesRow this_row;
				public FAccessor( IssuesRow this_row )
				{
					this.this_table = ((IssuesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Issues.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Issues.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Issues.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Issues.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region IssuesRowChangeEvent
#if IssuesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class IssuesRowChangeEvent : EventArgs {

			private IssuesRow eventRow;

			private DataRowAction eventAction;

			public IssuesRowChangeEvent(IssuesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public IssuesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Labor
		private bool ShouldSerializeLabor() {
			return false;
		}
#if LaborRowChangeEvents
		public delegate void LaborRowChangeEventHandler(object sender, LaborRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class LaborDataTable : DBIDataTable {
			#region Construction
			internal LaborDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal LaborDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(LaborDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.WOKEY = (DBIDataColumn)t.Columns["WOKEY"];
				  this.LABORKEY = (DBIDataColumn)t.Columns["LABORKEY"];
				  this.TRADE = (DBIDataColumn)t.Columns["TRADE"];
				  this.STARTDATE = (DBIDataColumn)t.Columns["STARTDATE"];
				  this.STARTTIME = (DBIDataColumn)t.Columns["STARTTIME"];
				  this.TIME = (DBIDataColumn)t.Columns["TIME"];
				  this.LABORRATE = (DBIDataColumn)t.Columns["LABORRATE"];
				  this.ESTIMATE = (DBIDataColumn)t.Columns["ESTIMATE"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn WOKEY;
				public readonly DBIDataColumn LABORKEY;
				public readonly DBIDataColumn TRADE;
				public readonly DBIDataColumn STARTDATE;
				public readonly DBIDataColumn STARTTIME;
				public readonly DBIDataColumn TIME;
				public readonly DBIDataColumn LABORRATE;
				public readonly DBIDataColumn ESTIMATE;
			}
			#endregion
			#region EventHandlers
			#if LaborRowChangeEvents
			public event LaborRowChangeEventHandler LaborRowChanged;
			public event LaborRowChangeEventHandler LaborRowChanging;
			public event LaborRowChangeEventHandler LaborRowDeleted;
			public event LaborRowChangeEventHandler LaborRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.LaborRowChanged != null)) {
					this.LaborRowChanged(this, new LaborRowChangeEvent(((LaborRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.LaborRowChanging != null)) {
					this.LaborRowChanging(this, new LaborRowChangeEvent(((LaborRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.LaborRowDeleted != null)) {
					this.LaborRowDeleted(this, new LaborRowChangeEvent(((LaborRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.LaborRowDeleting != null)) {
					 this.LaborRowDeleting(this, new LaborRowChangeEvent(((LaborRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new LaborDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public LaborRow this[int index] {
				get {
					return ((LaborRow)(this.Rows[index]));
				}
			}
			public void AddLaborRow(LaborRow row) {
				this.Rows.Add(row);
			}
			public LaborRow AddNewLaborRow() {
				return ((LaborRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Labor)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new LaborRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(LaborRow);
			}
			public void RemoveLaborRow(LaborRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region LaborRow
		[Thinkage.Libraries.Translation.Invariant]
		public class LaborRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal LaborRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly LaborDataTable this_table;
				private readonly LaborRow this_row;
				public FAccessor( LaborRow this_row )
				{
					this.this_table = ((LaborDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Labor.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Labor.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? WOKEY {
					get {
							return (System.Int32?)Schema.T.Labor.F.WOKEY.EffectiveType.GenericAsNativeType(this_table.F.WOKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.WOKEY[this_row] = value; }
				}

				public System.Int32? LABORKEY {
					get {
							return (System.Int32?)Schema.T.Labor.F.LABORKEY.EffectiveType.GenericAsNativeType(this_table.F.LABORKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.LABORKEY[this_row] = value; }
				}

				public System.String TRADE {
					get {
							return (System.String)Schema.T.Labor.F.TRADE.EffectiveType.GenericAsNativeType(this_table.F.TRADE[this_row], typeof(System.String));
					}
					set {this_table.F.TRADE[this_row] = value; }
				}

				public System.DateTime? STARTDATE {
					get {
							return (System.DateTime?)Schema.T.Labor.F.STARTDATE.EffectiveType.GenericAsNativeType(this_table.F.STARTDATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.STARTDATE[this_row] = value; }
				}

				public System.String STARTTIME {
					get {
							return (System.String)Schema.T.Labor.F.STARTTIME.EffectiveType.GenericAsNativeType(this_table.F.STARTTIME[this_row], typeof(System.String));
					}
					set {this_table.F.STARTTIME[this_row] = value; }
				}

				public System.String TIME {
					get {
							return (System.String)Schema.T.Labor.F.TIME.EffectiveType.GenericAsNativeType(this_table.F.TIME[this_row], typeof(System.String));
					}
					set {this_table.F.TIME[this_row] = value; }
				}

				public System.Int32? LABORRATE {
					get {
							return (System.Int32?)Schema.T.Labor.F.LABORRATE.EffectiveType.GenericAsNativeType(this_table.F.LABORRATE[this_row], typeof(System.Int32?));
					}
					set {this_table.F.LABORRATE[this_row] = value; }
				}

				public System.Boolean? ESTIMATE {
					get {
							return (System.Boolean?)Schema.T.Labor.F.ESTIMATE.EffectiveType.GenericAsNativeType(this_table.F.ESTIMATE[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ESTIMATE[this_row] = value; }
				}
			}
		}
		#endregion
		#region LaborRowChangeEvent
#if LaborRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class LaborRowChangeEvent : EventArgs {

			private LaborRow eventRow;

			private DataRowAction eventAction;

			public LaborRowChangeEvent(LaborRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public LaborRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region MeterHistory
		private bool ShouldSerializeMeterHistory() {
			return false;
		}
#if MeterHistoryRowChangeEvents
		public delegate void MeterHistoryRowChangeEventHandler(object sender, MeterHistoryRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class MeterHistoryDataTable : DBIDataTable {
			#region Construction
			internal MeterHistoryDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal MeterHistoryDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(MeterHistoryDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.METERKEY = (DBIDataColumn)t.Columns["METERKEY"];
				  this.DATE = (DBIDataColumn)t.Columns["DATE"];
				  this.TIME = (DBIDataColumn)t.Columns["TIME"];
				  this.ORIGINKEY = (DBIDataColumn)t.Columns["ORIGINKEY"];
				  this.READING = (DBIDataColumn)t.Columns["READING"];
				  this.EFFECTIVE = (DBIDataColumn)t.Columns["EFFECTIVE"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn METERKEY;
				public readonly DBIDataColumn DATE;
				public readonly DBIDataColumn TIME;
				public readonly DBIDataColumn ORIGINKEY;
				public readonly DBIDataColumn READING;
				public readonly DBIDataColumn EFFECTIVE;
			}
			#endregion
			#region EventHandlers
			#if MeterHistoryRowChangeEvents
			public event MeterHistoryRowChangeEventHandler MeterHistoryRowChanged;
			public event MeterHistoryRowChangeEventHandler MeterHistoryRowChanging;
			public event MeterHistoryRowChangeEventHandler MeterHistoryRowDeleted;
			public event MeterHistoryRowChangeEventHandler MeterHistoryRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.MeterHistoryRowChanged != null)) {
					this.MeterHistoryRowChanged(this, new MeterHistoryRowChangeEvent(((MeterHistoryRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.MeterHistoryRowChanging != null)) {
					this.MeterHistoryRowChanging(this, new MeterHistoryRowChangeEvent(((MeterHistoryRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.MeterHistoryRowDeleted != null)) {
					this.MeterHistoryRowDeleted(this, new MeterHistoryRowChangeEvent(((MeterHistoryRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.MeterHistoryRowDeleting != null)) {
					 this.MeterHistoryRowDeleting(this, new MeterHistoryRowChangeEvent(((MeterHistoryRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new MeterHistoryDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public MeterHistoryRow this[int index] {
				get {
					return ((MeterHistoryRow)(this.Rows[index]));
				}
			}
			public void AddMeterHistoryRow(MeterHistoryRow row) {
				this.Rows.Add(row);
			}
			public MeterHistoryRow AddNewMeterHistoryRow() {
				return ((MeterHistoryRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.MeterHistory)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new MeterHistoryRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(MeterHistoryRow);
			}
			public void RemoveMeterHistoryRow(MeterHistoryRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region MeterHistoryRow
		[Thinkage.Libraries.Translation.Invariant]
		public class MeterHistoryRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal MeterHistoryRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly MeterHistoryDataTable this_table;
				private readonly MeterHistoryRow this_row;
				public FAccessor( MeterHistoryRow this_row )
				{
					this.this_table = ((MeterHistoryDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.MeterHistory.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.MeterHistory.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? METERKEY {
					get {
							return (System.Int32?)Schema.T.MeterHistory.F.METERKEY.EffectiveType.GenericAsNativeType(this_table.F.METERKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.METERKEY[this_row] = value; }
				}

				public System.DateTime? DATE {
					get {
							return (System.DateTime?)Schema.T.MeterHistory.F.DATE.EffectiveType.GenericAsNativeType(this_table.F.DATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.DATE[this_row] = value; }
				}

				public System.String TIME {
					get {
							return (System.String)Schema.T.MeterHistory.F.TIME.EffectiveType.GenericAsNativeType(this_table.F.TIME[this_row], typeof(System.String));
					}
					set {this_table.F.TIME[this_row] = value; }
				}

				public System.Int32? ORIGINKEY {
					get {
							return (System.Int32?)Schema.T.MeterHistory.F.ORIGINKEY.EffectiveType.GenericAsNativeType(this_table.F.ORIGINKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ORIGINKEY[this_row] = value; }
				}

				public System.Int32? READING {
					get {
							return (System.Int32?)Schema.T.MeterHistory.F.READING.EffectiveType.GenericAsNativeType(this_table.F.READING[this_row], typeof(System.Int32?));
					}
					set {this_table.F.READING[this_row] = value; }
				}

				public System.Int32? EFFECTIVE {
					get {
							return (System.Int32?)Schema.T.MeterHistory.F.EFFECTIVE.EffectiveType.GenericAsNativeType(this_table.F.EFFECTIVE[this_row], typeof(System.Int32?));
					}
					set {this_table.F.EFFECTIVE[this_row] = value; }
				}
			}
		}
		#endregion
		#region MeterHistoryRowChangeEvent
#if MeterHistoryRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class MeterHistoryRowChangeEvent : EventArgs {

			private MeterHistoryRow eventRow;

			private DataRowAction eventAction;

			public MeterHistoryRowChangeEvent(MeterHistoryRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public MeterHistoryRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Meters
		private bool ShouldSerializeMeters() {
			return false;
		}
#if MetersRowChangeEvents
		public delegate void MetersRowChangeEventHandler(object sender, MetersRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class MetersDataTable : DBIDataTable {
			#region Construction
			internal MetersDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal MetersDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(MetersDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.TYPE = (DBIDataColumn)t.Columns["TYPE"];
				  this.UNITKEY = (DBIDataColumn)t.Columns["UNITKEY"];
				  this.OFFSET = (DBIDataColumn)t.Columns["OFFSET"];
				  this.UOMKEY = (DBIDataColumn)t.Columns["UOMKEY"];
				  this.CREATEDATE = (DBIDataColumn)t.Columns["CREATEDATE"];
				  this.CREATETIME = (DBIDataColumn)t.Columns["CREATETIME"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn TYPE;
				public readonly DBIDataColumn UNITKEY;
				public readonly DBIDataColumn OFFSET;
				public readonly DBIDataColumn UOMKEY;
				public readonly DBIDataColumn CREATEDATE;
				public readonly DBIDataColumn CREATETIME;
			}
			#endregion
			#region EventHandlers
			#if MetersRowChangeEvents
			public event MetersRowChangeEventHandler MetersRowChanged;
			public event MetersRowChangeEventHandler MetersRowChanging;
			public event MetersRowChangeEventHandler MetersRowDeleted;
			public event MetersRowChangeEventHandler MetersRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.MetersRowChanged != null)) {
					this.MetersRowChanged(this, new MetersRowChangeEvent(((MetersRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.MetersRowChanging != null)) {
					this.MetersRowChanging(this, new MetersRowChangeEvent(((MetersRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.MetersRowDeleted != null)) {
					this.MetersRowDeleted(this, new MetersRowChangeEvent(((MetersRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.MetersRowDeleting != null)) {
					 this.MetersRowDeleting(this, new MetersRowChangeEvent(((MetersRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new MetersDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public MetersRow this[int index] {
				get {
					return ((MetersRow)(this.Rows[index]));
				}
			}
			public void AddMetersRow(MetersRow row) {
				this.Rows.Add(row);
			}
			public MetersRow AddNewMetersRow() {
				return ((MetersRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Meters)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new MetersRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(MetersRow);
			}
			public void RemoveMetersRow(MetersRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region MetersRow
		[Thinkage.Libraries.Translation.Invariant]
		public class MetersRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal MetersRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly MetersDataTable this_table;
				private readonly MetersRow this_row;
				public FAccessor( MetersRow this_row )
				{
					this.this_table = ((MetersDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Meters.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Meters.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.Meters.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Meters.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Meters.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.String TYPE {
					get {
							return (System.String)Schema.T.Meters.F.TYPE.EffectiveType.GenericAsNativeType(this_table.F.TYPE[this_row], typeof(System.String));
					}
					set {this_table.F.TYPE[this_row] = value; }
				}

				public System.Int32? UNITKEY {
					get {
							return (System.Int32?)Schema.T.Meters.F.UNITKEY.EffectiveType.GenericAsNativeType(this_table.F.UNITKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.UNITKEY[this_row] = value; }
				}

				public System.Int32? OFFSET {
					get {
							return (System.Int32?)Schema.T.Meters.F.OFFSET.EffectiveType.GenericAsNativeType(this_table.F.OFFSET[this_row], typeof(System.Int32?));
					}
					set {this_table.F.OFFSET[this_row] = value; }
				}

				public System.Int32? UOMKEY {
					get {
							return (System.Int32?)Schema.T.Meters.F.UOMKEY.EffectiveType.GenericAsNativeType(this_table.F.UOMKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.UOMKEY[this_row] = value; }
				}

				public System.DateTime? CREATEDATE {
					get {
							return (System.DateTime?)Schema.T.Meters.F.CREATEDATE.EffectiveType.GenericAsNativeType(this_table.F.CREATEDATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.CREATEDATE[this_row] = value; }
				}

				public System.String CREATETIME {
					get {
							return (System.String)Schema.T.Meters.F.CREATETIME.EffectiveType.GenericAsNativeType(this_table.F.CREATETIME[this_row], typeof(System.String));
					}
					set {this_table.F.CREATETIME[this_row] = value; }
				}
			}
		}
		#endregion
		#region MetersRowChangeEvent
#if MetersRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class MetersRowChangeEvent : EventArgs {

			private MetersRow eventRow;

			private DataRowAction eventAction;

			public MetersRowChangeEvent(MetersRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public MetersRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Obsoletes
		private bool ShouldSerializeObsoletes() {
			return false;
		}
#if ObsoletesRowChangeEvents
		public delegate void ObsoletesRowChangeEventHandler(object sender, ObsoletesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class ObsoletesDataTable : DBIDataTable {
			#region Construction
			internal ObsoletesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal ObsoletesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(ObsoletesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if ObsoletesRowChangeEvents
			public event ObsoletesRowChangeEventHandler ObsoletesRowChanged;
			public event ObsoletesRowChangeEventHandler ObsoletesRowChanging;
			public event ObsoletesRowChangeEventHandler ObsoletesRowDeleted;
			public event ObsoletesRowChangeEventHandler ObsoletesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ObsoletesRowChanged != null)) {
					this.ObsoletesRowChanged(this, new ObsoletesRowChangeEvent(((ObsoletesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ObsoletesRowChanging != null)) {
					this.ObsoletesRowChanging(this, new ObsoletesRowChangeEvent(((ObsoletesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ObsoletesRowDeleted != null)) {
					this.ObsoletesRowDeleted(this, new ObsoletesRowChangeEvent(((ObsoletesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ObsoletesRowDeleting != null)) {
					 this.ObsoletesRowDeleting(this, new ObsoletesRowChangeEvent(((ObsoletesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new ObsoletesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public ObsoletesRow this[int index] {
				get {
					return ((ObsoletesRow)(this.Rows[index]));
				}
			}
			public void AddObsoletesRow(ObsoletesRow row) {
				this.Rows.Add(row);
			}
			public ObsoletesRow AddNewObsoletesRow() {
				return ((ObsoletesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Obsoletes)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new ObsoletesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(ObsoletesRow);
			}
			public void RemoveObsoletesRow(ObsoletesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region ObsoletesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class ObsoletesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal ObsoletesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly ObsoletesDataTable this_table;
				private readonly ObsoletesRow this_row;
				public FAccessor( ObsoletesRow this_row )
				{
					this.this_table = ((ObsoletesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Obsoletes.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Obsoletes.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Obsoletes.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Obsoletes.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region ObsoletesRowChangeEvent
#if ObsoletesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class ObsoletesRowChangeEvent : EventArgs {

			private ObsoletesRow eventRow;

			private DataRowAction eventAction;

			public ObsoletesRowChangeEvent(ObsoletesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public ObsoletesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Ownerships
		private bool ShouldSerializeOwnerships() {
			return false;
		}
#if OwnershipsRowChangeEvents
		public delegate void OwnershipsRowChangeEventHandler(object sender, OwnershipsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class OwnershipsDataTable : DBIDataTable {
			#region Construction
			internal OwnershipsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal OwnershipsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(OwnershipsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if OwnershipsRowChangeEvents
			public event OwnershipsRowChangeEventHandler OwnershipsRowChanged;
			public event OwnershipsRowChangeEventHandler OwnershipsRowChanging;
			public event OwnershipsRowChangeEventHandler OwnershipsRowDeleted;
			public event OwnershipsRowChangeEventHandler OwnershipsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.OwnershipsRowChanged != null)) {
					this.OwnershipsRowChanged(this, new OwnershipsRowChangeEvent(((OwnershipsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.OwnershipsRowChanging != null)) {
					this.OwnershipsRowChanging(this, new OwnershipsRowChangeEvent(((OwnershipsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.OwnershipsRowDeleted != null)) {
					this.OwnershipsRowDeleted(this, new OwnershipsRowChangeEvent(((OwnershipsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.OwnershipsRowDeleting != null)) {
					 this.OwnershipsRowDeleting(this, new OwnershipsRowChangeEvent(((OwnershipsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new OwnershipsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public OwnershipsRow this[int index] {
				get {
					return ((OwnershipsRow)(this.Rows[index]));
				}
			}
			public void AddOwnershipsRow(OwnershipsRow row) {
				this.Rows.Add(row);
			}
			public OwnershipsRow AddNewOwnershipsRow() {
				return ((OwnershipsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Ownerships)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new OwnershipsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(OwnershipsRow);
			}
			public void RemoveOwnershipsRow(OwnershipsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region OwnershipsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class OwnershipsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal OwnershipsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly OwnershipsDataTable this_table;
				private readonly OwnershipsRow this_row;
				public FAccessor( OwnershipsRow this_row )
				{
					this.this_table = ((OwnershipsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Ownerships.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Ownerships.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Ownerships.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Ownerships.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region OwnershipsRowChangeEvent
#if OwnershipsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class OwnershipsRowChangeEvent : EventArgs {

			private OwnershipsRow eventRow;

			private DataRowAction eventAction;

			public OwnershipsRowChangeEvent(OwnershipsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public OwnershipsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Personnel
		private bool ShouldSerializePersonnel() {
			return false;
		}
#if PersonnelRowChangeEvents
		public delegate void PersonnelRowChangeEventHandler(object sender, PersonnelRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class PersonnelDataTable : DBIDataTable {
			#region Construction
			internal PersonnelDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal PersonnelDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(PersonnelDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.TRADE = (DBIDataColumn)t.Columns["TRADE"];
				  this.BTEL = (DBIDataColumn)t.Columns["BTEL"];
				  this.HTEL = (DBIDataColumn)t.Columns["HTEL"];
				  this.PAGER = (DBIDataColumn)t.Columns["PAGER"];
				  this.MOBILE = (DBIDataColumn)t.Columns["MOBILE"];
				  this.CURRATE = (DBIDataColumn)t.Columns["CURRATE"];
				  this.NEWRATE = (DBIDataColumn)t.Columns["NEWRATE"];
				  this.EFFDATE = (DBIDataColumn)t.Columns["EFFDATE"];
				  this.HIDDEN = (DBIDataColumn)t.Columns["HIDDEN"];
				  this.EMAIL = (DBIDataColumn)t.Columns["EMAIL"];
				  this.COMMENT = (DBIDataColumn)t.Columns["COMMENT"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn TRADE;
				public readonly DBIDataColumn BTEL;
				public readonly DBIDataColumn HTEL;
				public readonly DBIDataColumn PAGER;
				public readonly DBIDataColumn MOBILE;
				public readonly DBIDataColumn CURRATE;
				public readonly DBIDataColumn NEWRATE;
				public readonly DBIDataColumn EFFDATE;
				public readonly DBIDataColumn HIDDEN;
				public readonly DBIDataColumn EMAIL;
				public readonly DBIDataColumn COMMENT;
			}
			#endregion
			#region EventHandlers
			#if PersonnelRowChangeEvents
			public event PersonnelRowChangeEventHandler PersonnelRowChanged;
			public event PersonnelRowChangeEventHandler PersonnelRowChanging;
			public event PersonnelRowChangeEventHandler PersonnelRowDeleted;
			public event PersonnelRowChangeEventHandler PersonnelRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.PersonnelRowChanged != null)) {
					this.PersonnelRowChanged(this, new PersonnelRowChangeEvent(((PersonnelRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.PersonnelRowChanging != null)) {
					this.PersonnelRowChanging(this, new PersonnelRowChangeEvent(((PersonnelRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.PersonnelRowDeleted != null)) {
					this.PersonnelRowDeleted(this, new PersonnelRowChangeEvent(((PersonnelRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.PersonnelRowDeleting != null)) {
					 this.PersonnelRowDeleting(this, new PersonnelRowChangeEvent(((PersonnelRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new PersonnelDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public PersonnelRow this[int index] {
				get {
					return ((PersonnelRow)(this.Rows[index]));
				}
			}
			public void AddPersonnelRow(PersonnelRow row) {
				this.Rows.Add(row);
			}
			public PersonnelRow AddNewPersonnelRow() {
				return ((PersonnelRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Personnel)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new PersonnelRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(PersonnelRow);
			}
			public void RemovePersonnelRow(PersonnelRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region PersonnelRow
		[Thinkage.Libraries.Translation.Invariant]
		public class PersonnelRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal PersonnelRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly PersonnelDataTable this_table;
				private readonly PersonnelRow this_row;
				public FAccessor( PersonnelRow this_row )
				{
					this.this_table = ((PersonnelDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Personnel.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Personnel.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.Personnel.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Personnel.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Personnel.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.String TRADE {
					get {
							return (System.String)Schema.T.Personnel.F.TRADE.EffectiveType.GenericAsNativeType(this_table.F.TRADE[this_row], typeof(System.String));
					}
					set {this_table.F.TRADE[this_row] = value; }
				}

				public System.String BTEL {
					get {
							return (System.String)Schema.T.Personnel.F.BTEL.EffectiveType.GenericAsNativeType(this_table.F.BTEL[this_row], typeof(System.String));
					}
					set {this_table.F.BTEL[this_row] = value; }
				}

				public System.String HTEL {
					get {
							return (System.String)Schema.T.Personnel.F.HTEL.EffectiveType.GenericAsNativeType(this_table.F.HTEL[this_row], typeof(System.String));
					}
					set {this_table.F.HTEL[this_row] = value; }
				}

				public System.String PAGER {
					get {
							return (System.String)Schema.T.Personnel.F.PAGER.EffectiveType.GenericAsNativeType(this_table.F.PAGER[this_row], typeof(System.String));
					}
					set {this_table.F.PAGER[this_row] = value; }
				}

				public System.String MOBILE {
					get {
							return (System.String)Schema.T.Personnel.F.MOBILE.EffectiveType.GenericAsNativeType(this_table.F.MOBILE[this_row], typeof(System.String));
					}
					set {this_table.F.MOBILE[this_row] = value; }
				}

				public System.Int32? CURRATE {
					get {
							return (System.Int32?)Schema.T.Personnel.F.CURRATE.EffectiveType.GenericAsNativeType(this_table.F.CURRATE[this_row], typeof(System.Int32?));
					}
					set {this_table.F.CURRATE[this_row] = value; }
				}

				public System.Int32? NEWRATE {
					get {
							return (System.Int32?)Schema.T.Personnel.F.NEWRATE.EffectiveType.GenericAsNativeType(this_table.F.NEWRATE[this_row], typeof(System.Int32?));
					}
					set {this_table.F.NEWRATE[this_row] = value; }
				}

				public System.DateTime? EFFDATE {
					get {
							return (System.DateTime?)Schema.T.Personnel.F.EFFDATE.EffectiveType.GenericAsNativeType(this_table.F.EFFDATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.EFFDATE[this_row] = value; }
				}

				public System.Boolean? HIDDEN {
					get {
							return (System.Boolean?)Schema.T.Personnel.F.HIDDEN.EffectiveType.GenericAsNativeType(this_table.F.HIDDEN[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.HIDDEN[this_row] = value; }
				}

				public System.String EMAIL {
					get {
							return (System.String)Schema.T.Personnel.F.EMAIL.EffectiveType.GenericAsNativeType(this_table.F.EMAIL[this_row], typeof(System.String));
					}
					set {this_table.F.EMAIL[this_row] = value; }
				}

				public System.String COMMENT {
					get {
							return (System.String)Schema.T.Personnel.F.COMMENT.EffectiveType.GenericAsNativeType(this_table.F.COMMENT[this_row], typeof(System.String));
					}
					set {this_table.F.COMMENT[this_row] = value; }
				}
			}
		}
		#endregion
		#region PersonnelRowChangeEvent
#if PersonnelRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class PersonnelRowChangeEvent : EventArgs {

			private PersonnelRow eventRow;

			private DataRowAction eventAction;

			public PersonnelRowChangeEvent(PersonnelRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public PersonnelRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region PreventiveSchedules
		private bool ShouldSerializePreventiveSchedules() {
			return false;
		}
#if PreventiveSchedulesRowChangeEvents
		public delegate void PreventiveSchedulesRowChangeEventHandler(object sender, PreventiveSchedulesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class PreventiveSchedulesDataTable : DBIDataTable {
			#region Construction
			internal PreventiveSchedulesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal PreventiveSchedulesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(PreventiveSchedulesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.WOKEY = (DBIDataColumn)t.Columns["WOKEY"];
				  this.TYPE = (DBIDataColumn)t.Columns["TYPE"];
				  this.METERKEY = (DBIDataColumn)t.Columns["METERKEY"];
				  this.LASTSCHED = (DBIDataColumn)t.Columns["LASTSCHED"];
				  this.INTERVAL = (DBIDataColumn)t.Columns["INTERVAL"];
				  this.SEASONBEG = (DBIDataColumn)t.Columns["SEASONBEG"];
				  this.SEASONEND = (DBIDataColumn)t.Columns["SEASONEND"];
				  this.INHSEASON = (DBIDataColumn)t.Columns["INHSEASON"];
				  this.WEEKMASK = (DBIDataColumn)t.Columns["WEEKMASK"];
				  this.INHWEEK = (DBIDataColumn)t.Columns["INHWEEK"];
				  this.ALGORITHM = (DBIDataColumn)t.Columns["ALGORITHM"];
				  this.INHIBIT = (DBIDataColumn)t.Columns["INHIBIT"];
				  this.LASTWOMADE = (DBIDataColumn)t.Columns["LASTWOMADE"];
				  this.LATEINHIB = (DBIDataColumn)t.Columns["LATEINHIB"];
				  this.LASTDATE = (DBIDataColumn)t.Columns["LASTDATE"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn WOKEY;
				public readonly DBIDataColumn TYPE;
				public readonly DBIDataColumn METERKEY;
				public readonly DBIDataColumn LASTSCHED;
				public readonly DBIDataColumn INTERVAL;
				public readonly DBIDataColumn SEASONBEG;
				public readonly DBIDataColumn SEASONEND;
				public readonly DBIDataColumn INHSEASON;
				public readonly DBIDataColumn WEEKMASK;
				public readonly DBIDataColumn INHWEEK;
				public readonly DBIDataColumn ALGORITHM;
				public readonly DBIDataColumn INHIBIT;
				public readonly DBIDataColumn LASTWOMADE;
				public readonly DBIDataColumn LATEINHIB;
				public readonly DBIDataColumn LASTDATE;
			}
			#endregion
			#region EventHandlers
			#if PreventiveSchedulesRowChangeEvents
			public event PreventiveSchedulesRowChangeEventHandler PreventiveSchedulesRowChanged;
			public event PreventiveSchedulesRowChangeEventHandler PreventiveSchedulesRowChanging;
			public event PreventiveSchedulesRowChangeEventHandler PreventiveSchedulesRowDeleted;
			public event PreventiveSchedulesRowChangeEventHandler PreventiveSchedulesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.PreventiveSchedulesRowChanged != null)) {
					this.PreventiveSchedulesRowChanged(this, new PreventiveSchedulesRowChangeEvent(((PreventiveSchedulesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.PreventiveSchedulesRowChanging != null)) {
					this.PreventiveSchedulesRowChanging(this, new PreventiveSchedulesRowChangeEvent(((PreventiveSchedulesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.PreventiveSchedulesRowDeleted != null)) {
					this.PreventiveSchedulesRowDeleted(this, new PreventiveSchedulesRowChangeEvent(((PreventiveSchedulesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.PreventiveSchedulesRowDeleting != null)) {
					 this.PreventiveSchedulesRowDeleting(this, new PreventiveSchedulesRowChangeEvent(((PreventiveSchedulesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new PreventiveSchedulesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public PreventiveSchedulesRow this[int index] {
				get {
					return ((PreventiveSchedulesRow)(this.Rows[index]));
				}
			}
			public void AddPreventiveSchedulesRow(PreventiveSchedulesRow row) {
				this.Rows.Add(row);
			}
			public PreventiveSchedulesRow AddNewPreventiveSchedulesRow() {
				return ((PreventiveSchedulesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.PreventiveSchedules)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new PreventiveSchedulesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(PreventiveSchedulesRow);
			}
			public void RemovePreventiveSchedulesRow(PreventiveSchedulesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region PreventiveSchedulesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class PreventiveSchedulesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal PreventiveSchedulesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly PreventiveSchedulesDataTable this_table;
				private readonly PreventiveSchedulesRow this_row;
				public FAccessor( PreventiveSchedulesRow this_row )
				{
					this.this_table = ((PreventiveSchedulesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.PreventiveSchedules.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.PreventiveSchedules.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.PreventiveSchedules.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.Int32? WOKEY {
					get {
							return (System.Int32?)Schema.T.PreventiveSchedules.F.WOKEY.EffectiveType.GenericAsNativeType(this_table.F.WOKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.WOKEY[this_row] = value; }
				}

				public System.String TYPE {
					get {
							return (System.String)Schema.T.PreventiveSchedules.F.TYPE.EffectiveType.GenericAsNativeType(this_table.F.TYPE[this_row], typeof(System.String));
					}
					set {this_table.F.TYPE[this_row] = value; }
				}

				public System.Int32? METERKEY {
					get {
							return (System.Int32?)Schema.T.PreventiveSchedules.F.METERKEY.EffectiveType.GenericAsNativeType(this_table.F.METERKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.METERKEY[this_row] = value; }
				}

				public System.Int32? LASTSCHED {
					get {
							return (System.Int32?)Schema.T.PreventiveSchedules.F.LASTSCHED.EffectiveType.GenericAsNativeType(this_table.F.LASTSCHED[this_row], typeof(System.Int32?));
					}
					set {this_table.F.LASTSCHED[this_row] = value; }
				}

				public System.Int32? INTERVAL {
					get {
							return (System.Int32?)Schema.T.PreventiveSchedules.F.INTERVAL.EffectiveType.GenericAsNativeType(this_table.F.INTERVAL[this_row], typeof(System.Int32?));
					}
					set {this_table.F.INTERVAL[this_row] = value; }
				}

				public System.String SEASONBEG {
					get {
							return (System.String)Schema.T.PreventiveSchedules.F.SEASONBEG.EffectiveType.GenericAsNativeType(this_table.F.SEASONBEG[this_row], typeof(System.String));
					}
					set {this_table.F.SEASONBEG[this_row] = value; }
				}

				public System.String SEASONEND {
					get {
							return (System.String)Schema.T.PreventiveSchedules.F.SEASONEND.EffectiveType.GenericAsNativeType(this_table.F.SEASONEND[this_row], typeof(System.String));
					}
					set {this_table.F.SEASONEND[this_row] = value; }
				}

				public System.Boolean? INHSEASON {
					get {
							return (System.Boolean?)Schema.T.PreventiveSchedules.F.INHSEASON.EffectiveType.GenericAsNativeType(this_table.F.INHSEASON[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.INHSEASON[this_row] = value; }
				}

				public System.String WEEKMASK {
					get {
							return (System.String)Schema.T.PreventiveSchedules.F.WEEKMASK.EffectiveType.GenericAsNativeType(this_table.F.WEEKMASK[this_row], typeof(System.String));
					}
					set {this_table.F.WEEKMASK[this_row] = value; }
				}

				public System.Boolean? INHWEEK {
					get {
							return (System.Boolean?)Schema.T.PreventiveSchedules.F.INHWEEK.EffectiveType.GenericAsNativeType(this_table.F.INHWEEK[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.INHWEEK[this_row] = value; }
				}

				public System.String ALGORITHM {
					get {
							return (System.String)Schema.T.PreventiveSchedules.F.ALGORITHM.EffectiveType.GenericAsNativeType(this_table.F.ALGORITHM[this_row], typeof(System.String));
					}
					set {this_table.F.ALGORITHM[this_row] = value; }
				}

				public System.Boolean? INHIBIT {
					get {
							return (System.Boolean?)Schema.T.PreventiveSchedules.F.INHIBIT.EffectiveType.GenericAsNativeType(this_table.F.INHIBIT[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.INHIBIT[this_row] = value; }
				}

				public System.Int32? LASTWOMADE {
					get {
							return (System.Int32?)Schema.T.PreventiveSchedules.F.LASTWOMADE.EffectiveType.GenericAsNativeType(this_table.F.LASTWOMADE[this_row], typeof(System.Int32?));
					}
					set {this_table.F.LASTWOMADE[this_row] = value; }
				}

				public System.Boolean? LATEINHIB {
					get {
							return (System.Boolean?)Schema.T.PreventiveSchedules.F.LATEINHIB.EffectiveType.GenericAsNativeType(this_table.F.LATEINHIB[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.LATEINHIB[this_row] = value; }
				}

				public System.DateTime? LASTDATE {
					get {
							return (System.DateTime?)Schema.T.PreventiveSchedules.F.LASTDATE.EffectiveType.GenericAsNativeType(this_table.F.LASTDATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.LASTDATE[this_row] = value; }
				}
			}
		}
		#endregion
		#region PreventiveSchedulesRowChangeEvent
#if PreventiveSchedulesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class PreventiveSchedulesRowChangeEvent : EventArgs {

			private PreventiveSchedulesRow eventRow;

			private DataRowAction eventAction;

			public PreventiveSchedulesRowChangeEvent(PreventiveSchedulesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public PreventiveSchedulesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Priorities
		private bool ShouldSerializePriorities() {
			return false;
		}
#if PrioritiesRowChangeEvents
		public delegate void PrioritiesRowChangeEventHandler(object sender, PrioritiesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class PrioritiesDataTable : DBIDataTable {
			#region Construction
			internal PrioritiesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal PrioritiesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(PrioritiesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if PrioritiesRowChangeEvents
			public event PrioritiesRowChangeEventHandler PrioritiesRowChanged;
			public event PrioritiesRowChangeEventHandler PrioritiesRowChanging;
			public event PrioritiesRowChangeEventHandler PrioritiesRowDeleted;
			public event PrioritiesRowChangeEventHandler PrioritiesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.PrioritiesRowChanged != null)) {
					this.PrioritiesRowChanged(this, new PrioritiesRowChangeEvent(((PrioritiesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.PrioritiesRowChanging != null)) {
					this.PrioritiesRowChanging(this, new PrioritiesRowChangeEvent(((PrioritiesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.PrioritiesRowDeleted != null)) {
					this.PrioritiesRowDeleted(this, new PrioritiesRowChangeEvent(((PrioritiesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.PrioritiesRowDeleting != null)) {
					 this.PrioritiesRowDeleting(this, new PrioritiesRowChangeEvent(((PrioritiesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new PrioritiesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public PrioritiesRow this[int index] {
				get {
					return ((PrioritiesRow)(this.Rows[index]));
				}
			}
			public void AddPrioritiesRow(PrioritiesRow row) {
				this.Rows.Add(row);
			}
			public PrioritiesRow AddNewPrioritiesRow() {
				return ((PrioritiesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Priorities)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new PrioritiesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(PrioritiesRow);
			}
			public void RemovePrioritiesRow(PrioritiesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region PrioritiesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class PrioritiesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal PrioritiesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly PrioritiesDataTable this_table;
				private readonly PrioritiesRow this_row;
				public FAccessor( PrioritiesRow this_row )
				{
					this.this_table = ((PrioritiesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Priorities.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Priorities.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Priorities.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Priorities.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region PrioritiesRowChangeEvent
#if PrioritiesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class PrioritiesRowChangeEvent : EventArgs {

			private PrioritiesRow eventRow;

			private DataRowAction eventAction;

			public PrioritiesRowChangeEvent(PrioritiesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public PrioritiesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Projects
		private bool ShouldSerializeProjects() {
			return false;
		}
#if ProjectsRowChangeEvents
		public delegate void ProjectsRowChangeEventHandler(object sender, ProjectsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class ProjectsDataTable : DBIDataTable {
			#region Construction
			internal ProjectsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal ProjectsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(ProjectsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if ProjectsRowChangeEvents
			public event ProjectsRowChangeEventHandler ProjectsRowChanged;
			public event ProjectsRowChangeEventHandler ProjectsRowChanging;
			public event ProjectsRowChangeEventHandler ProjectsRowDeleted;
			public event ProjectsRowChangeEventHandler ProjectsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ProjectsRowChanged != null)) {
					this.ProjectsRowChanged(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ProjectsRowChanging != null)) {
					this.ProjectsRowChanging(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ProjectsRowDeleted != null)) {
					this.ProjectsRowDeleted(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ProjectsRowDeleting != null)) {
					 this.ProjectsRowDeleting(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new ProjectsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public ProjectsRow this[int index] {
				get {
					return ((ProjectsRow)(this.Rows[index]));
				}
			}
			public void AddProjectsRow(ProjectsRow row) {
				this.Rows.Add(row);
			}
			public ProjectsRow AddNewProjectsRow() {
				return ((ProjectsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Projects)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new ProjectsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(ProjectsRow);
			}
			public void RemoveProjectsRow(ProjectsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region ProjectsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class ProjectsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal ProjectsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly ProjectsDataTable this_table;
				private readonly ProjectsRow this_row;
				public FAccessor( ProjectsRow this_row )
				{
					this.this_table = ((ProjectsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Projects.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Projects.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Projects.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Projects.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region ProjectsRowChangeEvent
#if ProjectsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class ProjectsRowChangeEvent : EventArgs {

			private ProjectsRow eventRow;

			private DataRowAction eventAction;

			public ProjectsRowChangeEvent(ProjectsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public ProjectsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region PurchaseExtras
		private bool ShouldSerializePurchaseExtras() {
			return false;
		}
#if PurchaseExtrasRowChangeEvents
		public delegate void PurchaseExtrasRowChangeEventHandler(object sender, PurchaseExtrasRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class PurchaseExtrasDataTable : DBIDataTable {
			#region Construction
			internal PurchaseExtrasDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal PurchaseExtrasDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(PurchaseExtrasDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.POKEY = (DBIDataColumn)t.Columns["POKEY"];
				  this.QTY = (DBIDataColumn)t.Columns["QTY"];
				  this.UOMKEY = (DBIDataColumn)t.Columns["UOMKEY"];
				  this.COST = (DBIDataColumn)t.Columns["COST"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.CATNO = (DBIDataColumn)t.Columns["CATNO"];
				  this.ESTIMATE = (DBIDataColumn)t.Columns["ESTIMATE"];
				  this.TYPE = (DBIDataColumn)t.Columns["TYPE"];
				  this.WOKEY = (DBIDataColumn)t.Columns["WOKEY"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn POKEY;
				public readonly DBIDataColumn QTY;
				public readonly DBIDataColumn UOMKEY;
				public readonly DBIDataColumn COST;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn CATNO;
				public readonly DBIDataColumn ESTIMATE;
				public readonly DBIDataColumn TYPE;
				public readonly DBIDataColumn WOKEY;
			}
			#endregion
			#region EventHandlers
			#if PurchaseExtrasRowChangeEvents
			public event PurchaseExtrasRowChangeEventHandler PurchaseExtrasRowChanged;
			public event PurchaseExtrasRowChangeEventHandler PurchaseExtrasRowChanging;
			public event PurchaseExtrasRowChangeEventHandler PurchaseExtrasRowDeleted;
			public event PurchaseExtrasRowChangeEventHandler PurchaseExtrasRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.PurchaseExtrasRowChanged != null)) {
					this.PurchaseExtrasRowChanged(this, new PurchaseExtrasRowChangeEvent(((PurchaseExtrasRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.PurchaseExtrasRowChanging != null)) {
					this.PurchaseExtrasRowChanging(this, new PurchaseExtrasRowChangeEvent(((PurchaseExtrasRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.PurchaseExtrasRowDeleted != null)) {
					this.PurchaseExtrasRowDeleted(this, new PurchaseExtrasRowChangeEvent(((PurchaseExtrasRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.PurchaseExtrasRowDeleting != null)) {
					 this.PurchaseExtrasRowDeleting(this, new PurchaseExtrasRowChangeEvent(((PurchaseExtrasRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new PurchaseExtrasDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public PurchaseExtrasRow this[int index] {
				get {
					return ((PurchaseExtrasRow)(this.Rows[index]));
				}
			}
			public void AddPurchaseExtrasRow(PurchaseExtrasRow row) {
				this.Rows.Add(row);
			}
			public PurchaseExtrasRow AddNewPurchaseExtrasRow() {
				return ((PurchaseExtrasRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.PurchaseExtras)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new PurchaseExtrasRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(PurchaseExtrasRow);
			}
			public void RemovePurchaseExtrasRow(PurchaseExtrasRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region PurchaseExtrasRow
		[Thinkage.Libraries.Translation.Invariant]
		public class PurchaseExtrasRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal PurchaseExtrasRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly PurchaseExtrasDataTable this_table;
				private readonly PurchaseExtrasRow this_row;
				public FAccessor( PurchaseExtrasRow this_row )
				{
					this.this_table = ((PurchaseExtrasDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.PurchaseExtras.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.PurchaseExtras.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.PurchaseExtras.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.Int32? POKEY {
					get {
							return (System.Int32?)Schema.T.PurchaseExtras.F.POKEY.EffectiveType.GenericAsNativeType(this_table.F.POKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.POKEY[this_row] = value; }
				}

				public System.Int32? QTY {
					get {
							return (System.Int32?)Schema.T.PurchaseExtras.F.QTY.EffectiveType.GenericAsNativeType(this_table.F.QTY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.QTY[this_row] = value; }
				}

				public System.Int32? UOMKEY {
					get {
							return (System.Int32?)Schema.T.PurchaseExtras.F.UOMKEY.EffectiveType.GenericAsNativeType(this_table.F.UOMKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.UOMKEY[this_row] = value; }
				}

				public System.Int32? COST {
					get {
							return (System.Int32?)Schema.T.PurchaseExtras.F.COST.EffectiveType.GenericAsNativeType(this_table.F.COST[this_row], typeof(System.Int32?));
					}
					set {this_table.F.COST[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.PurchaseExtras.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.String CATNO {
					get {
							return (System.String)Schema.T.PurchaseExtras.F.CATNO.EffectiveType.GenericAsNativeType(this_table.F.CATNO[this_row], typeof(System.String));
					}
					set {this_table.F.CATNO[this_row] = value; }
				}

				public System.Boolean? ESTIMATE {
					get {
							return (System.Boolean?)Schema.T.PurchaseExtras.F.ESTIMATE.EffectiveType.GenericAsNativeType(this_table.F.ESTIMATE[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.ESTIMATE[this_row] = value; }
				}

				public System.String TYPE {
					get {
							return (System.String)Schema.T.PurchaseExtras.F.TYPE.EffectiveType.GenericAsNativeType(this_table.F.TYPE[this_row], typeof(System.String));
					}
					set {this_table.F.TYPE[this_row] = value; }
				}

				public System.Int32? WOKEY {
					get {
							return (System.Int32?)Schema.T.PurchaseExtras.F.WOKEY.EffectiveType.GenericAsNativeType(this_table.F.WOKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.WOKEY[this_row] = value; }
				}
			}
		}
		#endregion
		#region PurchaseExtrasRowChangeEvent
#if PurchaseExtrasRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class PurchaseExtrasRowChangeEvent : EventArgs {

			private PurchaseExtrasRow eventRow;

			private DataRowAction eventAction;

			public PurchaseExtrasRowChangeEvent(PurchaseExtrasRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public PurchaseExtrasRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Purchases
		private bool ShouldSerializePurchases() {
			return false;
		}
#if PurchasesRowChangeEvents
		public delegate void PurchasesRowChangeEventHandler(object sender, PurchasesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class PurchasesDataTable : DBIDataTable {
			#region Construction
			internal PurchasesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal PurchasesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(PurchasesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.PONUM = (DBIDataColumn)t.Columns["PONUM"];
				  this.VENDOR = (DBIDataColumn)t.Columns["VENDOR"];
				  this.ORDERNUM = (DBIDataColumn)t.Columns["ORDERNUM"];
				  this.COSTCENTER = (DBIDataColumn)t.Columns["COSTCENTER"];
				  this.NEEDED = (DBIDataColumn)t.Columns["NEEDED"];
				  this.EXPECTED = (DBIDataColumn)t.Columns["EXPECTED"];
				  this.COMMENT = (DBIDataColumn)t.Columns["COMMENT"];
				  this.STATE = (DBIDataColumn)t.Columns["STATE"];
				  this.VOID = (DBIDataColumn)t.Columns["VOID"];
				  this.CREATED = (DBIDataColumn)t.Columns["CREATED"];
				  this.CREATET = (DBIDataColumn)t.Columns["CREATET"];
				  this.COMPLETED = (DBIDataColumn)t.Columns["COMPLETED"];
				  this.COMPLETET = (DBIDataColumn)t.Columns["COMPLETET"];
				  this.SUBMITD = (DBIDataColumn)t.Columns["SUBMITD"];
				  this.SUBMITT = (DBIDataColumn)t.Columns["SUBMITT"];
				  this.CLOSED = (DBIDataColumn)t.Columns["CLOSED"];
				  this.CLOSET = (DBIDataColumn)t.Columns["CLOSET"];
				  this.SHIPPING = (DBIDataColumn)t.Columns["SHIPPING"];
				  this.TERMS = (DBIDataColumn)t.Columns["TERMS"];
				  this.VCOMMENT = (DBIDataColumn)t.Columns["VCOMMENT"];
				  this.SHIPTO = (DBIDataColumn)t.Columns["SHIPTO"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.NEEDPRINT = (DBIDataColumn)t.Columns["NEEDPRINT"];
				  this.ORIGINATOR = (DBIDataColumn)t.Columns["ORIGINATOR"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn PONUM;
				public readonly DBIDataColumn VENDOR;
				public readonly DBIDataColumn ORDERNUM;
				public readonly DBIDataColumn COSTCENTER;
				public readonly DBIDataColumn NEEDED;
				public readonly DBIDataColumn EXPECTED;
				public readonly DBIDataColumn COMMENT;
				public readonly DBIDataColumn STATE;
				public readonly DBIDataColumn VOID;
				public readonly DBIDataColumn CREATED;
				public readonly DBIDataColumn CREATET;
				public readonly DBIDataColumn COMPLETED;
				public readonly DBIDataColumn COMPLETET;
				public readonly DBIDataColumn SUBMITD;
				public readonly DBIDataColumn SUBMITT;
				public readonly DBIDataColumn CLOSED;
				public readonly DBIDataColumn CLOSET;
				public readonly DBIDataColumn SHIPPING;
				public readonly DBIDataColumn TERMS;
				public readonly DBIDataColumn VCOMMENT;
				public readonly DBIDataColumn SHIPTO;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn NEEDPRINT;
				public readonly DBIDataColumn ORIGINATOR;
			}
			#endregion
			#region EventHandlers
			#if PurchasesRowChangeEvents
			public event PurchasesRowChangeEventHandler PurchasesRowChanged;
			public event PurchasesRowChangeEventHandler PurchasesRowChanging;
			public event PurchasesRowChangeEventHandler PurchasesRowDeleted;
			public event PurchasesRowChangeEventHandler PurchasesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.PurchasesRowChanged != null)) {
					this.PurchasesRowChanged(this, new PurchasesRowChangeEvent(((PurchasesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.PurchasesRowChanging != null)) {
					this.PurchasesRowChanging(this, new PurchasesRowChangeEvent(((PurchasesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.PurchasesRowDeleted != null)) {
					this.PurchasesRowDeleted(this, new PurchasesRowChangeEvent(((PurchasesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.PurchasesRowDeleting != null)) {
					 this.PurchasesRowDeleting(this, new PurchasesRowChangeEvent(((PurchasesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new PurchasesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public PurchasesRow this[int index] {
				get {
					return ((PurchasesRow)(this.Rows[index]));
				}
			}
			public void AddPurchasesRow(PurchasesRow row) {
				this.Rows.Add(row);
			}
			public PurchasesRow AddNewPurchasesRow() {
				return ((PurchasesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Purchases)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new PurchasesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(PurchasesRow);
			}
			public void RemovePurchasesRow(PurchasesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region PurchasesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class PurchasesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal PurchasesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly PurchasesDataTable this_table;
				private readonly PurchasesRow this_row;
				public FAccessor( PurchasesRow this_row )
				{
					this.this_table = ((PurchasesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Purchases.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Purchases.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.Purchases.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String PONUM {
					get {
							return (System.String)Schema.T.Purchases.F.PONUM.EffectiveType.GenericAsNativeType(this_table.F.PONUM[this_row], typeof(System.String));
					}
					set {this_table.F.PONUM[this_row] = value; }
				}

				public System.Int32? VENDOR {
					get {
							return (System.Int32?)Schema.T.Purchases.F.VENDOR.EffectiveType.GenericAsNativeType(this_table.F.VENDOR[this_row], typeof(System.Int32?));
					}
					set {this_table.F.VENDOR[this_row] = value; }
				}

				public System.String ORDERNUM {
					get {
							return (System.String)Schema.T.Purchases.F.ORDERNUM.EffectiveType.GenericAsNativeType(this_table.F.ORDERNUM[this_row], typeof(System.String));
					}
					set {this_table.F.ORDERNUM[this_row] = value; }
				}

				public System.String COSTCENTER {
					get {
							return (System.String)Schema.T.Purchases.F.COSTCENTER.EffectiveType.GenericAsNativeType(this_table.F.COSTCENTER[this_row], typeof(System.String));
					}
					set {this_table.F.COSTCENTER[this_row] = value; }
				}

				public System.DateTime? NEEDED {
					get {
							return (System.DateTime?)Schema.T.Purchases.F.NEEDED.EffectiveType.GenericAsNativeType(this_table.F.NEEDED[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.NEEDED[this_row] = value; }
				}

				public System.DateTime? EXPECTED {
					get {
							return (System.DateTime?)Schema.T.Purchases.F.EXPECTED.EffectiveType.GenericAsNativeType(this_table.F.EXPECTED[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.EXPECTED[this_row] = value; }
				}

				public System.String COMMENT {
					get {
							return (System.String)Schema.T.Purchases.F.COMMENT.EffectiveType.GenericAsNativeType(this_table.F.COMMENT[this_row], typeof(System.String));
					}
					set {this_table.F.COMMENT[this_row] = value; }
				}

				public System.String STATE {
					get {
							return (System.String)Schema.T.Purchases.F.STATE.EffectiveType.GenericAsNativeType(this_table.F.STATE[this_row], typeof(System.String));
					}
					set {this_table.F.STATE[this_row] = value; }
				}

				public System.Boolean? VOID {
					get {
							return (System.Boolean?)Schema.T.Purchases.F.VOID.EffectiveType.GenericAsNativeType(this_table.F.VOID[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.VOID[this_row] = value; }
				}

				public System.DateTime? CREATED {
					get {
							return (System.DateTime?)Schema.T.Purchases.F.CREATED.EffectiveType.GenericAsNativeType(this_table.F.CREATED[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.CREATED[this_row] = value; }
				}

				public System.String CREATET {
					get {
							return (System.String)Schema.T.Purchases.F.CREATET.EffectiveType.GenericAsNativeType(this_table.F.CREATET[this_row], typeof(System.String));
					}
					set {this_table.F.CREATET[this_row] = value; }
				}

				public System.DateTime? COMPLETED {
					get {
							return (System.DateTime?)Schema.T.Purchases.F.COMPLETED.EffectiveType.GenericAsNativeType(this_table.F.COMPLETED[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.COMPLETED[this_row] = value; }
				}

				public System.String COMPLETET {
					get {
							return (System.String)Schema.T.Purchases.F.COMPLETET.EffectiveType.GenericAsNativeType(this_table.F.COMPLETET[this_row], typeof(System.String));
					}
					set {this_table.F.COMPLETET[this_row] = value; }
				}

				public System.DateTime? SUBMITD {
					get {
							return (System.DateTime?)Schema.T.Purchases.F.SUBMITD.EffectiveType.GenericAsNativeType(this_table.F.SUBMITD[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.SUBMITD[this_row] = value; }
				}

				public System.String SUBMITT {
					get {
							return (System.String)Schema.T.Purchases.F.SUBMITT.EffectiveType.GenericAsNativeType(this_table.F.SUBMITT[this_row], typeof(System.String));
					}
					set {this_table.F.SUBMITT[this_row] = value; }
				}

				public System.DateTime? CLOSED {
					get {
							return (System.DateTime?)Schema.T.Purchases.F.CLOSED.EffectiveType.GenericAsNativeType(this_table.F.CLOSED[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.CLOSED[this_row] = value; }
				}

				public System.String CLOSET {
					get {
							return (System.String)Schema.T.Purchases.F.CLOSET.EffectiveType.GenericAsNativeType(this_table.F.CLOSET[this_row], typeof(System.String));
					}
					set {this_table.F.CLOSET[this_row] = value; }
				}

				public System.String SHIPPING {
					get {
							return (System.String)Schema.T.Purchases.F.SHIPPING.EffectiveType.GenericAsNativeType(this_table.F.SHIPPING[this_row], typeof(System.String));
					}
					set {this_table.F.SHIPPING[this_row] = value; }
				}

				public System.String TERMS {
					get {
							return (System.String)Schema.T.Purchases.F.TERMS.EffectiveType.GenericAsNativeType(this_table.F.TERMS[this_row], typeof(System.String));
					}
					set {this_table.F.TERMS[this_row] = value; }
				}

				public System.String VCOMMENT {
					get {
							return (System.String)Schema.T.Purchases.F.VCOMMENT.EffectiveType.GenericAsNativeType(this_table.F.VCOMMENT[this_row], typeof(System.String));
					}
					set {this_table.F.VCOMMENT[this_row] = value; }
				}

				public System.Int32? SHIPTO {
					get {
							return (System.Int32?)Schema.T.Purchases.F.SHIPTO.EffectiveType.GenericAsNativeType(this_table.F.SHIPTO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.SHIPTO[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Purchases.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.Boolean? NEEDPRINT {
					get {
							return (System.Boolean?)Schema.T.Purchases.F.NEEDPRINT.EffectiveType.GenericAsNativeType(this_table.F.NEEDPRINT[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.NEEDPRINT[this_row] = value; }
				}

				public System.Int32? ORIGINATOR {
					get {
							return (System.Int32?)Schema.T.Purchases.F.ORIGINATOR.EffectiveType.GenericAsNativeType(this_table.F.ORIGINATOR[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ORIGINATOR[this_row] = value; }
				}
			}
		}
		#endregion
		#region PurchasesRowChangeEvent
#if PurchasesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class PurchasesRowChangeEvent : EventArgs {

			private PurchasesRow eventRow;

			private DataRowAction eventAction;

			public PurchasesRowChangeEvent(PurchasesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public PurchasesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Receipts
		private bool ShouldSerializeReceipts() {
			return false;
		}
#if ReceiptsRowChangeEvents
		public delegate void ReceiptsRowChangeEventHandler(object sender, ReceiptsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class ReceiptsDataTable : DBIDataTable {
			#region Construction
			internal ReceiptsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal ReceiptsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(ReceiptsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.POKEY = (DBIDataColumn)t.Columns["POKEY"];
				  this.DATE = (DBIDataColumn)t.Columns["DATE"];
				  this.TIME = (DBIDataColumn)t.Columns["TIME"];
				  this.WAYBILL = (DBIDataColumn)t.Columns["WAYBILL"];
				  this.EXTRACOST = (DBIDataColumn)t.Columns["EXTRACOST"];
				  this.COMMENT = (DBIDataColumn)t.Columns["COMMENT"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn POKEY;
				public readonly DBIDataColumn DATE;
				public readonly DBIDataColumn TIME;
				public readonly DBIDataColumn WAYBILL;
				public readonly DBIDataColumn EXTRACOST;
				public readonly DBIDataColumn COMMENT;
			}
			#endregion
			#region EventHandlers
			#if ReceiptsRowChangeEvents
			public event ReceiptsRowChangeEventHandler ReceiptsRowChanged;
			public event ReceiptsRowChangeEventHandler ReceiptsRowChanging;
			public event ReceiptsRowChangeEventHandler ReceiptsRowDeleted;
			public event ReceiptsRowChangeEventHandler ReceiptsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ReceiptsRowChanged != null)) {
					this.ReceiptsRowChanged(this, new ReceiptsRowChangeEvent(((ReceiptsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ReceiptsRowChanging != null)) {
					this.ReceiptsRowChanging(this, new ReceiptsRowChangeEvent(((ReceiptsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ReceiptsRowDeleted != null)) {
					this.ReceiptsRowDeleted(this, new ReceiptsRowChangeEvent(((ReceiptsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ReceiptsRowDeleting != null)) {
					 this.ReceiptsRowDeleting(this, new ReceiptsRowChangeEvent(((ReceiptsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new ReceiptsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public ReceiptsRow this[int index] {
				get {
					return ((ReceiptsRow)(this.Rows[index]));
				}
			}
			public void AddReceiptsRow(ReceiptsRow row) {
				this.Rows.Add(row);
			}
			public ReceiptsRow AddNewReceiptsRow() {
				return ((ReceiptsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Receipts)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new ReceiptsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(ReceiptsRow);
			}
			public void RemoveReceiptsRow(ReceiptsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region ReceiptsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class ReceiptsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal ReceiptsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly ReceiptsDataTable this_table;
				private readonly ReceiptsRow this_row;
				public FAccessor( ReceiptsRow this_row )
				{
					this.this_table = ((ReceiptsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Receipts.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Receipts.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.Receipts.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.Int32? POKEY {
					get {
							return (System.Int32?)Schema.T.Receipts.F.POKEY.EffectiveType.GenericAsNativeType(this_table.F.POKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.POKEY[this_row] = value; }
				}

				public System.DateTime? DATE {
					get {
							return (System.DateTime?)Schema.T.Receipts.F.DATE.EffectiveType.GenericAsNativeType(this_table.F.DATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.DATE[this_row] = value; }
				}

				public System.String TIME {
					get {
							return (System.String)Schema.T.Receipts.F.TIME.EffectiveType.GenericAsNativeType(this_table.F.TIME[this_row], typeof(System.String));
					}
					set {this_table.F.TIME[this_row] = value; }
				}

				public System.String WAYBILL {
					get {
							return (System.String)Schema.T.Receipts.F.WAYBILL.EffectiveType.GenericAsNativeType(this_table.F.WAYBILL[this_row], typeof(System.String));
					}
					set {this_table.F.WAYBILL[this_row] = value; }
				}

				public System.Int32? EXTRACOST {
					get {
							return (System.Int32?)Schema.T.Receipts.F.EXTRACOST.EffectiveType.GenericAsNativeType(this_table.F.EXTRACOST[this_row], typeof(System.Int32?));
					}
					set {this_table.F.EXTRACOST[this_row] = value; }
				}

				public System.String COMMENT {
					get {
							return (System.String)Schema.T.Receipts.F.COMMENT.EffectiveType.GenericAsNativeType(this_table.F.COMMENT[this_row], typeof(System.String));
					}
					set {this_table.F.COMMENT[this_row] = value; }
				}
			}
		}
		#endregion
		#region ReceiptsRowChangeEvent
#if ReceiptsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class ReceiptsRowChangeEvent : EventArgs {

			private ReceiptsRow eventRow;

			private DataRowAction eventAction;

			public ReceiptsRowChangeEvent(ReceiptsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public ReceiptsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region ServiceContracts
		private bool ShouldSerializeServiceContracts() {
			return false;
		}
#if ServiceContractsRowChangeEvents
		public delegate void ServiceContractsRowChangeEventHandler(object sender, ServiceContractsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class ServiceContractsDataTable : DBIDataTable {
			#region Construction
			internal ServiceContractsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal ServiceContractsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(ServiceContractsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.VENDOR = (DBIDataColumn)t.Columns["VENDOR"];
				  this.STARTDATE = (DBIDataColumn)t.Columns["STARTDATE"];
				  this.EXPIRYDATE = (DBIDataColumn)t.Columns["EXPIRYDATE"];
				  this.PART = (DBIDataColumn)t.Columns["PART"];
				  this.LABOR = (DBIDataColumn)t.Columns["LABOR"];
				  this.COST = (DBIDataColumn)t.Columns["COST"];
				  this.COMMENT = (DBIDataColumn)t.Columns["COMMENT"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn VENDOR;
				public readonly DBIDataColumn STARTDATE;
				public readonly DBIDataColumn EXPIRYDATE;
				public readonly DBIDataColumn PART;
				public readonly DBIDataColumn LABOR;
				public readonly DBIDataColumn COST;
				public readonly DBIDataColumn COMMENT;
			}
			#endregion
			#region EventHandlers
			#if ServiceContractsRowChangeEvents
			public event ServiceContractsRowChangeEventHandler ServiceContractsRowChanged;
			public event ServiceContractsRowChangeEventHandler ServiceContractsRowChanging;
			public event ServiceContractsRowChangeEventHandler ServiceContractsRowDeleted;
			public event ServiceContractsRowChangeEventHandler ServiceContractsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ServiceContractsRowChanged != null)) {
					this.ServiceContractsRowChanged(this, new ServiceContractsRowChangeEvent(((ServiceContractsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ServiceContractsRowChanging != null)) {
					this.ServiceContractsRowChanging(this, new ServiceContractsRowChangeEvent(((ServiceContractsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ServiceContractsRowDeleted != null)) {
					this.ServiceContractsRowDeleted(this, new ServiceContractsRowChangeEvent(((ServiceContractsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ServiceContractsRowDeleting != null)) {
					 this.ServiceContractsRowDeleting(this, new ServiceContractsRowChangeEvent(((ServiceContractsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new ServiceContractsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public ServiceContractsRow this[int index] {
				get {
					return ((ServiceContractsRow)(this.Rows[index]));
				}
			}
			public void AddServiceContractsRow(ServiceContractsRow row) {
				this.Rows.Add(row);
			}
			public ServiceContractsRow AddNewServiceContractsRow() {
				return ((ServiceContractsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.ServiceContracts)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new ServiceContractsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(ServiceContractsRow);
			}
			public void RemoveServiceContractsRow(ServiceContractsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region ServiceContractsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class ServiceContractsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal ServiceContractsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly ServiceContractsDataTable this_table;
				private readonly ServiceContractsRow this_row;
				public FAccessor( ServiceContractsRow this_row )
				{
					this.this_table = ((ServiceContractsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.ServiceContracts.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.ServiceContracts.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.ServiceContracts.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.ServiceContracts.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.ServiceContracts.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.Int32? VENDOR {
					get {
							return (System.Int32?)Schema.T.ServiceContracts.F.VENDOR.EffectiveType.GenericAsNativeType(this_table.F.VENDOR[this_row], typeof(System.Int32?));
					}
					set {this_table.F.VENDOR[this_row] = value; }
				}

				public System.DateTime? STARTDATE {
					get {
							return (System.DateTime?)Schema.T.ServiceContracts.F.STARTDATE.EffectiveType.GenericAsNativeType(this_table.F.STARTDATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.STARTDATE[this_row] = value; }
				}

				public System.DateTime? EXPIRYDATE {
					get {
							return (System.DateTime?)Schema.T.ServiceContracts.F.EXPIRYDATE.EffectiveType.GenericAsNativeType(this_table.F.EXPIRYDATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.EXPIRYDATE[this_row] = value; }
				}

				public System.Boolean? PART {
					get {
							return (System.Boolean?)Schema.T.ServiceContracts.F.PART.EffectiveType.GenericAsNativeType(this_table.F.PART[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.PART[this_row] = value; }
				}

				public System.Boolean? LABOR {
					get {
							return (System.Boolean?)Schema.T.ServiceContracts.F.LABOR.EffectiveType.GenericAsNativeType(this_table.F.LABOR[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.LABOR[this_row] = value; }
				}

				public System.Int32? COST {
					get {
							return (System.Int32?)Schema.T.ServiceContracts.F.COST.EffectiveType.GenericAsNativeType(this_table.F.COST[this_row], typeof(System.Int32?));
					}
					set {this_table.F.COST[this_row] = value; }
				}

				public System.String COMMENT {
					get {
							return (System.String)Schema.T.ServiceContracts.F.COMMENT.EffectiveType.GenericAsNativeType(this_table.F.COMMENT[this_row], typeof(System.String));
					}
					set {this_table.F.COMMENT[this_row] = value; }
				}
			}
		}
		#endregion
		#region ServiceContractsRowChangeEvent
#if ServiceContractsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class ServiceContractsRowChangeEvent : EventArgs {

			private ServiceContractsRow eventRow;

			private DataRowAction eventAction;

			public ServiceContractsRowChangeEvent(ServiceContractsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public ServiceContractsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region ServicedEquipment
		private bool ShouldSerializeServicedEquipment() {
			return false;
		}
#if ServicedEquipmentRowChangeEvents
		public delegate void ServicedEquipmentRowChangeEventHandler(object sender, ServicedEquipmentRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class ServicedEquipmentDataTable : DBIDataTable {
			#region Construction
			internal ServicedEquipmentDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal ServicedEquipmentDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(ServicedEquipmentDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.SVCKEY = (DBIDataColumn)t.Columns["SVCKEY"];
				  this.EQUIPKEY = (DBIDataColumn)t.Columns["EQUIPKEY"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn SVCKEY;
				public readonly DBIDataColumn EQUIPKEY;
			}
			#endregion
			#region EventHandlers
			#if ServicedEquipmentRowChangeEvents
			public event ServicedEquipmentRowChangeEventHandler ServicedEquipmentRowChanged;
			public event ServicedEquipmentRowChangeEventHandler ServicedEquipmentRowChanging;
			public event ServicedEquipmentRowChangeEventHandler ServicedEquipmentRowDeleted;
			public event ServicedEquipmentRowChangeEventHandler ServicedEquipmentRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ServicedEquipmentRowChanged != null)) {
					this.ServicedEquipmentRowChanged(this, new ServicedEquipmentRowChangeEvent(((ServicedEquipmentRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ServicedEquipmentRowChanging != null)) {
					this.ServicedEquipmentRowChanging(this, new ServicedEquipmentRowChangeEvent(((ServicedEquipmentRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ServicedEquipmentRowDeleted != null)) {
					this.ServicedEquipmentRowDeleted(this, new ServicedEquipmentRowChangeEvent(((ServicedEquipmentRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ServicedEquipmentRowDeleting != null)) {
					 this.ServicedEquipmentRowDeleting(this, new ServicedEquipmentRowChangeEvent(((ServicedEquipmentRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new ServicedEquipmentDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public ServicedEquipmentRow this[int index] {
				get {
					return ((ServicedEquipmentRow)(this.Rows[index]));
				}
			}
			public void AddServicedEquipmentRow(ServicedEquipmentRow row) {
				this.Rows.Add(row);
			}
			public ServicedEquipmentRow AddNewServicedEquipmentRow() {
				return ((ServicedEquipmentRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.ServicedEquipment)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new ServicedEquipmentRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(ServicedEquipmentRow);
			}
			public void RemoveServicedEquipmentRow(ServicedEquipmentRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region ServicedEquipmentRow
		[Thinkage.Libraries.Translation.Invariant]
		public class ServicedEquipmentRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal ServicedEquipmentRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly ServicedEquipmentDataTable this_table;
				private readonly ServicedEquipmentRow this_row;
				public FAccessor( ServicedEquipmentRow this_row )
				{
					this.this_table = ((ServicedEquipmentDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.ServicedEquipment.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.ServicedEquipment.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? SVCKEY {
					get {
							return (System.Int32?)Schema.T.ServicedEquipment.F.SVCKEY.EffectiveType.GenericAsNativeType(this_table.F.SVCKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.SVCKEY[this_row] = value; }
				}

				public System.Int32? EQUIPKEY {
					get {
							return (System.Int32?)Schema.T.ServicedEquipment.F.EQUIPKEY.EffectiveType.GenericAsNativeType(this_table.F.EQUIPKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.EQUIPKEY[this_row] = value; }
				}
			}
		}
		#endregion
		#region ServicedEquipmentRowChangeEvent
#if ServicedEquipmentRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class ServicedEquipmentRowChangeEvent : EventArgs {

			private ServicedEquipmentRow eventRow;

			private DataRowAction eventAction;

			public ServicedEquipmentRowChangeEvent(ServicedEquipmentRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public ServicedEquipmentRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region ShippingModes
		private bool ShouldSerializeShippingModes() {
			return false;
		}
#if ShippingModesRowChangeEvents
		public delegate void ShippingModesRowChangeEventHandler(object sender, ShippingModesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class ShippingModesDataTable : DBIDataTable {
			#region Construction
			internal ShippingModesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal ShippingModesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(ShippingModesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if ShippingModesRowChangeEvents
			public event ShippingModesRowChangeEventHandler ShippingModesRowChanged;
			public event ShippingModesRowChangeEventHandler ShippingModesRowChanging;
			public event ShippingModesRowChangeEventHandler ShippingModesRowDeleted;
			public event ShippingModesRowChangeEventHandler ShippingModesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.ShippingModesRowChanged != null)) {
					this.ShippingModesRowChanged(this, new ShippingModesRowChangeEvent(((ShippingModesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.ShippingModesRowChanging != null)) {
					this.ShippingModesRowChanging(this, new ShippingModesRowChangeEvent(((ShippingModesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.ShippingModesRowDeleted != null)) {
					this.ShippingModesRowDeleted(this, new ShippingModesRowChangeEvent(((ShippingModesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.ShippingModesRowDeleting != null)) {
					 this.ShippingModesRowDeleting(this, new ShippingModesRowChangeEvent(((ShippingModesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new ShippingModesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public ShippingModesRow this[int index] {
				get {
					return ((ShippingModesRow)(this.Rows[index]));
				}
			}
			public void AddShippingModesRow(ShippingModesRow row) {
				this.Rows.Add(row);
			}
			public ShippingModesRow AddNewShippingModesRow() {
				return ((ShippingModesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.ShippingModes)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new ShippingModesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(ShippingModesRow);
			}
			public void RemoveShippingModesRow(ShippingModesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region ShippingModesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class ShippingModesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal ShippingModesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly ShippingModesDataTable this_table;
				private readonly ShippingModesRow this_row;
				public FAccessor( ShippingModesRow this_row )
				{
					this.this_table = ((ShippingModesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.ShippingModes.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.ShippingModes.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.ShippingModes.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.ShippingModes.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region ShippingModesRowChangeEvent
#if ShippingModesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class ShippingModesRowChangeEvent : EventArgs {

			private ShippingModesRow eventRow;

			private DataRowAction eventAction;

			public ShippingModesRowChangeEvent(ShippingModesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public ShippingModesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region SpareParts
		private bool ShouldSerializeSpareParts() {
			return false;
		}
#if SparePartsRowChangeEvents
		public delegate void SparePartsRowChangeEventHandler(object sender, SparePartsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class SparePartsDataTable : DBIDataTable {
			#region Construction
			internal SparePartsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal SparePartsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(SparePartsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.EQUIPKEY = (DBIDataColumn)t.Columns["EQUIPKEY"];
				  this.ITEMKEY = (DBIDataColumn)t.Columns["ITEMKEY"];
				  this.QTY = (DBIDataColumn)t.Columns["QTY"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn EQUIPKEY;
				public readonly DBIDataColumn ITEMKEY;
				public readonly DBIDataColumn QTY;
			}
			#endregion
			#region EventHandlers
			#if SparePartsRowChangeEvents
			public event SparePartsRowChangeEventHandler SparePartsRowChanged;
			public event SparePartsRowChangeEventHandler SparePartsRowChanging;
			public event SparePartsRowChangeEventHandler SparePartsRowDeleted;
			public event SparePartsRowChangeEventHandler SparePartsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.SparePartsRowChanged != null)) {
					this.SparePartsRowChanged(this, new SparePartsRowChangeEvent(((SparePartsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.SparePartsRowChanging != null)) {
					this.SparePartsRowChanging(this, new SparePartsRowChangeEvent(((SparePartsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.SparePartsRowDeleted != null)) {
					this.SparePartsRowDeleted(this, new SparePartsRowChangeEvent(((SparePartsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.SparePartsRowDeleting != null)) {
					 this.SparePartsRowDeleting(this, new SparePartsRowChangeEvent(((SparePartsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new SparePartsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public SparePartsRow this[int index] {
				get {
					return ((SparePartsRow)(this.Rows[index]));
				}
			}
			public void AddSparePartsRow(SparePartsRow row) {
				this.Rows.Add(row);
			}
			public SparePartsRow AddNewSparePartsRow() {
				return ((SparePartsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.SpareParts)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new SparePartsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(SparePartsRow);
			}
			public void RemoveSparePartsRow(SparePartsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region SparePartsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class SparePartsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal SparePartsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly SparePartsDataTable this_table;
				private readonly SparePartsRow this_row;
				public FAccessor( SparePartsRow this_row )
				{
					this.this_table = ((SparePartsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.SpareParts.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.SpareParts.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? EQUIPKEY {
					get {
							return (System.Int32?)Schema.T.SpareParts.F.EQUIPKEY.EffectiveType.GenericAsNativeType(this_table.F.EQUIPKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.EQUIPKEY[this_row] = value; }
				}

				public System.Int32? ITEMKEY {
					get {
							return (System.Int32?)Schema.T.SpareParts.F.ITEMKEY.EffectiveType.GenericAsNativeType(this_table.F.ITEMKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ITEMKEY[this_row] = value; }
				}

				public System.Int32? QTY {
					get {
							return (System.Int32?)Schema.T.SpareParts.F.QTY.EffectiveType.GenericAsNativeType(this_table.F.QTY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.QTY[this_row] = value; }
				}
			}
		}
		#endregion
		#region SparePartsRowChangeEvent
#if SparePartsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class SparePartsRowChangeEvent : EventArgs {

			private SparePartsRow eventRow;

			private DataRowAction eventAction;

			public SparePartsRowChangeEvent(SparePartsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public SparePartsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Specifications
		private bool ShouldSerializeSpecifications() {
			return false;
		}
#if SpecificationsRowChangeEvents
		public delegate void SpecificationsRowChangeEventHandler(object sender, SpecificationsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class SpecificationsDataTable : DBIDataTable {
			#region Construction
			internal SpecificationsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal SpecificationsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(SpecificationsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.ASSOCKEY = (DBIDataColumn)t.Columns["ASSOCKEY"];
				  this.TYPE = (DBIDataColumn)t.Columns["TYPE"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.TKEY = (DBIDataColumn)t.Columns["TKEY"];
				  this.INFO = (DBIDataColumn)t.Columns["INFO"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn ASSOCKEY;
				public readonly DBIDataColumn TYPE;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn TKEY;
				public readonly DBIDataColumn INFO;
			}
			#endregion
			#region EventHandlers
			#if SpecificationsRowChangeEvents
			public event SpecificationsRowChangeEventHandler SpecificationsRowChanged;
			public event SpecificationsRowChangeEventHandler SpecificationsRowChanging;
			public event SpecificationsRowChangeEventHandler SpecificationsRowDeleted;
			public event SpecificationsRowChangeEventHandler SpecificationsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.SpecificationsRowChanged != null)) {
					this.SpecificationsRowChanged(this, new SpecificationsRowChangeEvent(((SpecificationsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.SpecificationsRowChanging != null)) {
					this.SpecificationsRowChanging(this, new SpecificationsRowChangeEvent(((SpecificationsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.SpecificationsRowDeleted != null)) {
					this.SpecificationsRowDeleted(this, new SpecificationsRowChangeEvent(((SpecificationsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.SpecificationsRowDeleting != null)) {
					 this.SpecificationsRowDeleting(this, new SpecificationsRowChangeEvent(((SpecificationsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new SpecificationsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public SpecificationsRow this[int index] {
				get {
					return ((SpecificationsRow)(this.Rows[index]));
				}
			}
			public void AddSpecificationsRow(SpecificationsRow row) {
				this.Rows.Add(row);
			}
			public SpecificationsRow AddNewSpecificationsRow() {
				return ((SpecificationsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Specifications)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new SpecificationsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(SpecificationsRow);
			}
			public void RemoveSpecificationsRow(SpecificationsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region SpecificationsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class SpecificationsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal SpecificationsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly SpecificationsDataTable this_table;
				private readonly SpecificationsRow this_row;
				public FAccessor( SpecificationsRow this_row )
				{
					this.this_table = ((SpecificationsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Specifications.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Specifications.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? ASSOCKEY {
					get {
							return (System.Int32?)Schema.T.Specifications.F.ASSOCKEY.EffectiveType.GenericAsNativeType(this_table.F.ASSOCKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ASSOCKEY[this_row] = value; }
				}

				public System.String TYPE {
					get {
							return (System.String)Schema.T.Specifications.F.TYPE.EffectiveType.GenericAsNativeType(this_table.F.TYPE[this_row], typeof(System.String));
					}
					set {this_table.F.TYPE[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Specifications.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.Int32? TKEY {
					get {
							return (System.Int32?)Schema.T.Specifications.F.TKEY.EffectiveType.GenericAsNativeType(this_table.F.TKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.TKEY[this_row] = value; }
				}

				public System.String INFO {
					get {
							return (System.String)Schema.T.Specifications.F.INFO.EffectiveType.GenericAsNativeType(this_table.F.INFO[this_row], typeof(System.String));
					}
					set {this_table.F.INFO[this_row] = value; }
				}
			}
		}
		#endregion
		#region SpecificationsRowChangeEvent
#if SpecificationsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class SpecificationsRowChangeEvent : EventArgs {

			private SpecificationsRow eventRow;

			private DataRowAction eventAction;

			public SpecificationsRowChangeEvent(SpecificationsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public SpecificationsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Storerooms
		private bool ShouldSerializeStorerooms() {
			return false;
		}
#if StoreroomsRowChangeEvents
		public delegate void StoreroomsRowChangeEventHandler(object sender, StoreroomsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class StoreroomsDataTable : DBIDataTable {
			#region Construction
			internal StoreroomsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal StoreroomsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(StoreroomsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.BUILDING = (DBIDataColumn)t.Columns["BUILDING"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.HIDDEN = (DBIDataColumn)t.Columns["HIDDEN"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn BUILDING;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn HIDDEN;
			}
			#endregion
			#region EventHandlers
			#if StoreroomsRowChangeEvents
			public event StoreroomsRowChangeEventHandler StoreroomsRowChanged;
			public event StoreroomsRowChangeEventHandler StoreroomsRowChanging;
			public event StoreroomsRowChangeEventHandler StoreroomsRowDeleted;
			public event StoreroomsRowChangeEventHandler StoreroomsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.StoreroomsRowChanged != null)) {
					this.StoreroomsRowChanged(this, new StoreroomsRowChangeEvent(((StoreroomsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.StoreroomsRowChanging != null)) {
					this.StoreroomsRowChanging(this, new StoreroomsRowChangeEvent(((StoreroomsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.StoreroomsRowDeleted != null)) {
					this.StoreroomsRowDeleted(this, new StoreroomsRowChangeEvent(((StoreroomsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.StoreroomsRowDeleting != null)) {
					 this.StoreroomsRowDeleting(this, new StoreroomsRowChangeEvent(((StoreroomsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new StoreroomsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public StoreroomsRow this[int index] {
				get {
					return ((StoreroomsRow)(this.Rows[index]));
				}
			}
			public void AddStoreroomsRow(StoreroomsRow row) {
				this.Rows.Add(row);
			}
			public StoreroomsRow AddNewStoreroomsRow() {
				return ((StoreroomsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Storerooms)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new StoreroomsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(StoreroomsRow);
			}
			public void RemoveStoreroomsRow(StoreroomsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region StoreroomsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class StoreroomsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal StoreroomsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly StoreroomsDataTable this_table;
				private readonly StoreroomsRow this_row;
				public FAccessor( StoreroomsRow this_row )
				{
					this.this_table = ((StoreroomsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Storerooms.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Storerooms.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.Storerooms.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.Int32? BUILDING {
					get {
							return (System.Int32?)Schema.T.Storerooms.F.BUILDING.EffectiveType.GenericAsNativeType(this_table.F.BUILDING[this_row], typeof(System.Int32?));
					}
					set {this_table.F.BUILDING[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Storerooms.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Storerooms.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.Boolean? HIDDEN {
					get {
							return (System.Boolean?)Schema.T.Storerooms.F.HIDDEN.EffectiveType.GenericAsNativeType(this_table.F.HIDDEN[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.HIDDEN[this_row] = value; }
				}
			}
		}
		#endregion
		#region StoreroomsRowChangeEvent
#if StoreroomsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class StoreroomsRowChangeEvent : EventArgs {

			private StoreroomsRow eventRow;

			private DataRowAction eventAction;

			public StoreroomsRowChangeEvent(StoreroomsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public StoreroomsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Systems
		private bool ShouldSerializeSystems() {
			return false;
		}
#if SystemsRowChangeEvents
		public delegate void SystemsRowChangeEventHandler(object sender, SystemsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class SystemsDataTable : DBIDataTable {
			#region Construction
			internal SystemsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal SystemsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(SystemsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if SystemsRowChangeEvents
			public event SystemsRowChangeEventHandler SystemsRowChanged;
			public event SystemsRowChangeEventHandler SystemsRowChanging;
			public event SystemsRowChangeEventHandler SystemsRowDeleted;
			public event SystemsRowChangeEventHandler SystemsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.SystemsRowChanged != null)) {
					this.SystemsRowChanged(this, new SystemsRowChangeEvent(((SystemsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.SystemsRowChanging != null)) {
					this.SystemsRowChanging(this, new SystemsRowChangeEvent(((SystemsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.SystemsRowDeleted != null)) {
					this.SystemsRowDeleted(this, new SystemsRowChangeEvent(((SystemsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.SystemsRowDeleting != null)) {
					 this.SystemsRowDeleting(this, new SystemsRowChangeEvent(((SystemsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new SystemsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public SystemsRow this[int index] {
				get {
					return ((SystemsRow)(this.Rows[index]));
				}
			}
			public void AddSystemsRow(SystemsRow row) {
				this.Rows.Add(row);
			}
			public SystemsRow AddNewSystemsRow() {
				return ((SystemsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Systems)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new SystemsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(SystemsRow);
			}
			public void RemoveSystemsRow(SystemsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region SystemsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class SystemsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal SystemsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly SystemsDataTable this_table;
				private readonly SystemsRow this_row;
				public FAccessor( SystemsRow this_row )
				{
					this.this_table = ((SystemsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Systems.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Systems.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Systems.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Systems.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region SystemsRowChangeEvent
#if SystemsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class SystemsRowChangeEvent : EventArgs {

			private SystemsRow eventRow;

			private DataRowAction eventAction;

			public SystemsRowChangeEvent(SystemsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public SystemsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Templates
		private bool ShouldSerializeTemplates() {
			return false;
		}
#if TemplatesRowChangeEvents
		public delegate void TemplatesRowChangeEventHandler(object sender, TemplatesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class TemplatesDataTable : DBIDataTable {
			#region Construction
			internal TemplatesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal TemplatesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(TemplatesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.HIDDEN = (DBIDataColumn)t.Columns["HIDDEN"];
				  this.PLATE = (DBIDataColumn)t.Columns["PLATE"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn HIDDEN;
				public readonly DBIDataColumn PLATE;
			}
			#endregion
			#region EventHandlers
			#if TemplatesRowChangeEvents
			public event TemplatesRowChangeEventHandler TemplatesRowChanged;
			public event TemplatesRowChangeEventHandler TemplatesRowChanging;
			public event TemplatesRowChangeEventHandler TemplatesRowDeleted;
			public event TemplatesRowChangeEventHandler TemplatesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.TemplatesRowChanged != null)) {
					this.TemplatesRowChanged(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.TemplatesRowChanging != null)) {
					this.TemplatesRowChanging(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.TemplatesRowDeleted != null)) {
					this.TemplatesRowDeleted(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.TemplatesRowDeleting != null)) {
					 this.TemplatesRowDeleting(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new TemplatesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public TemplatesRow this[int index] {
				get {
					return ((TemplatesRow)(this.Rows[index]));
				}
			}
			public void AddTemplatesRow(TemplatesRow row) {
				this.Rows.Add(row);
			}
			public TemplatesRow AddNewTemplatesRow() {
				return ((TemplatesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Templates)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new TemplatesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(TemplatesRow);
			}
			public void RemoveTemplatesRow(TemplatesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region TemplatesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class TemplatesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal TemplatesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly TemplatesDataTable this_table;
				private readonly TemplatesRow this_row;
				public FAccessor( TemplatesRow this_row )
				{
					this.this_table = ((TemplatesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Templates.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Templates.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.Templates.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Templates.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Templates.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.Boolean? HIDDEN {
					get {
							return (System.Boolean?)Schema.T.Templates.F.HIDDEN.EffectiveType.GenericAsNativeType(this_table.F.HIDDEN[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.HIDDEN[this_row] = value; }
				}

				public System.String PLATE {
					get {
							return (System.String)Schema.T.Templates.F.PLATE.EffectiveType.GenericAsNativeType(this_table.F.PLATE[this_row], typeof(System.String));
					}
					set {this_table.F.PLATE[this_row] = value; }
				}
			}
		}
		#endregion
		#region TemplatesRowChangeEvent
#if TemplatesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class TemplatesRowChangeEvent : EventArgs {

			private TemplatesRow eventRow;

			private DataRowAction eventAction;

			public TemplatesRowChangeEvent(TemplatesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public TemplatesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Terms
		private bool ShouldSerializeTerms() {
			return false;
		}
#if TermsRowChangeEvents
		public delegate void TermsRowChangeEventHandler(object sender, TermsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class TermsDataTable : DBIDataTable {
			#region Construction
			internal TermsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal TermsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(TermsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if TermsRowChangeEvents
			public event TermsRowChangeEventHandler TermsRowChanged;
			public event TermsRowChangeEventHandler TermsRowChanging;
			public event TermsRowChangeEventHandler TermsRowDeleted;
			public event TermsRowChangeEventHandler TermsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.TermsRowChanged != null)) {
					this.TermsRowChanged(this, new TermsRowChangeEvent(((TermsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.TermsRowChanging != null)) {
					this.TermsRowChanging(this, new TermsRowChangeEvent(((TermsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.TermsRowDeleted != null)) {
					this.TermsRowDeleted(this, new TermsRowChangeEvent(((TermsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.TermsRowDeleting != null)) {
					 this.TermsRowDeleting(this, new TermsRowChangeEvent(((TermsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new TermsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public TermsRow this[int index] {
				get {
					return ((TermsRow)(this.Rows[index]));
				}
			}
			public void AddTermsRow(TermsRow row) {
				this.Rows.Add(row);
			}
			public TermsRow AddNewTermsRow() {
				return ((TermsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Terms)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new TermsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(TermsRow);
			}
			public void RemoveTermsRow(TermsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region TermsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class TermsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal TermsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly TermsDataTable this_table;
				private readonly TermsRow this_row;
				public FAccessor( TermsRow this_row )
				{
					this.this_table = ((TermsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Terms.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Terms.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Terms.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Terms.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region TermsRowChangeEvent
#if TermsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class TermsRowChangeEvent : EventArgs {

			private TermsRow eventRow;

			private DataRowAction eventAction;

			public TermsRowChangeEvent(TermsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public TermsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Trades
		private bool ShouldSerializeTrades() {
			return false;
		}
#if TradesRowChangeEvents
		public delegate void TradesRowChangeEventHandler(object sender, TradesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class TradesDataTable : DBIDataTable {
			#region Construction
			internal TradesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal TradesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(TradesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if TradesRowChangeEvents
			public event TradesRowChangeEventHandler TradesRowChanged;
			public event TradesRowChangeEventHandler TradesRowChanging;
			public event TradesRowChangeEventHandler TradesRowDeleted;
			public event TradesRowChangeEventHandler TradesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.TradesRowChanged != null)) {
					this.TradesRowChanged(this, new TradesRowChangeEvent(((TradesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.TradesRowChanging != null)) {
					this.TradesRowChanging(this, new TradesRowChangeEvent(((TradesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.TradesRowDeleted != null)) {
					this.TradesRowDeleted(this, new TradesRowChangeEvent(((TradesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.TradesRowDeleting != null)) {
					 this.TradesRowDeleting(this, new TradesRowChangeEvent(((TradesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new TradesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public TradesRow this[int index] {
				get {
					return ((TradesRow)(this.Rows[index]));
				}
			}
			public void AddTradesRow(TradesRow row) {
				this.Rows.Add(row);
			}
			public TradesRow AddNewTradesRow() {
				return ((TradesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Trades)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new TradesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(TradesRow);
			}
			public void RemoveTradesRow(TradesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region TradesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class TradesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal TradesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly TradesDataTable this_table;
				private readonly TradesRow this_row;
				public FAccessor( TradesRow this_row )
				{
					this.this_table = ((TradesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Trades.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Trades.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Trades.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Trades.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region TradesRowChangeEvent
#if TradesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class TradesRowChangeEvent : EventArgs {

			private TradesRow eventRow;

			private DataRowAction eventAction;

			public TradesRowChangeEvent(TradesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public TradesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region UnitCategories
		private bool ShouldSerializeUnitCategories() {
			return false;
		}
#if UnitCategoriesRowChangeEvents
		public delegate void UnitCategoriesRowChangeEventHandler(object sender, UnitCategoriesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class UnitCategoriesDataTable : DBIDataTable {
			#region Construction
			internal UnitCategoriesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal UnitCategoriesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(UnitCategoriesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.UTYPE = (DBIDataColumn)t.Columns["UTYPE"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn UTYPE;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if UnitCategoriesRowChangeEvents
			public event UnitCategoriesRowChangeEventHandler UnitCategoriesRowChanged;
			public event UnitCategoriesRowChangeEventHandler UnitCategoriesRowChanging;
			public event UnitCategoriesRowChangeEventHandler UnitCategoriesRowDeleted;
			public event UnitCategoriesRowChangeEventHandler UnitCategoriesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.UnitCategoriesRowChanged != null)) {
					this.UnitCategoriesRowChanged(this, new UnitCategoriesRowChangeEvent(((UnitCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.UnitCategoriesRowChanging != null)) {
					this.UnitCategoriesRowChanging(this, new UnitCategoriesRowChangeEvent(((UnitCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.UnitCategoriesRowDeleted != null)) {
					this.UnitCategoriesRowDeleted(this, new UnitCategoriesRowChangeEvent(((UnitCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.UnitCategoriesRowDeleting != null)) {
					 this.UnitCategoriesRowDeleting(this, new UnitCategoriesRowChangeEvent(((UnitCategoriesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new UnitCategoriesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public UnitCategoriesRow this[int index] {
				get {
					return ((UnitCategoriesRow)(this.Rows[index]));
				}
			}
			public void AddUnitCategoriesRow(UnitCategoriesRow row) {
				this.Rows.Add(row);
			}
			public UnitCategoriesRow AddNewUnitCategoriesRow() {
				return ((UnitCategoriesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.UnitCategories)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new UnitCategoriesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(UnitCategoriesRow);
			}
			public void RemoveUnitCategoriesRow(UnitCategoriesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region UnitCategoriesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class UnitCategoriesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal UnitCategoriesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly UnitCategoriesDataTable this_table;
				private readonly UnitCategoriesRow this_row;
				public FAccessor( UnitCategoriesRow this_row )
				{
					this.this_table = ((UnitCategoriesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.UnitCategories.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.UnitCategories.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String UTYPE {
					get {
							return (System.String)Schema.T.UnitCategories.F.UTYPE.EffectiveType.GenericAsNativeType(this_table.F.UTYPE[this_row], typeof(System.String));
					}
					set {this_table.F.UTYPE[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.UnitCategories.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.UnitCategories.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region UnitCategoriesRowChangeEvent
#if UnitCategoriesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class UnitCategoriesRowChangeEvent : EventArgs {

			private UnitCategoriesRow eventRow;

			private DataRowAction eventAction;

			public UnitCategoriesRowChangeEvent(UnitCategoriesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public UnitCategoriesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Units
		private bool ShouldSerializeUnits() {
			return false;
		}
#if UnitsRowChangeEvents
		public delegate void UnitsRowChangeEventHandler(object sender, UnitsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class UnitsDataTable : DBIDataTable {
			#region Construction
			internal UnitsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal UnitsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(UnitsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.UTYPE = (DBIDataColumn)t.Columns["UTYPE"];
				  this.BUILDING = (DBIDataColumn)t.Columns["BUILDING"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.LOCATION = (DBIDataColumn)t.Columns["LOCATION"];
				  this.CATEGORY = (DBIDataColumn)t.Columns["CATEGORY"];
				  this.MAKE = (DBIDataColumn)t.Columns["MAKE"];
				  this.MODEL = (DBIDataColumn)t.Columns["MODEL"];
				  this.SERIAL = (DBIDataColumn)t.Columns["SERIAL"];
				  this.DRAW = (DBIDataColumn)t.Columns["DRAW"];
				  this.PURCHASE = (DBIDataColumn)t.Columns["PURCHASE"];
				  this.ORGCOST = (DBIDataColumn)t.Columns["ORGCOST"];
				  this.REPCOST = (DBIDataColumn)t.Columns["REPCOST"];
				  this.ESTIMATE = (DBIDataColumn)t.Columns["ESTIMATE"];
				  this.TLIFE = (DBIDataColumn)t.Columns["TLIFE"];
				  this.VENDOR = (DBIDataColumn)t.Columns["VENDOR"];
				  this.SERVICE = (DBIDataColumn)t.Columns["SERVICE"];
				  this.WEXPIRY = (DBIDataColumn)t.Columns["WEXPIRY"];
				  this.OWNER = (DBIDataColumn)t.Columns["OWNER"];
				  this.ASSET = (DBIDataColumn)t.Columns["ASSET"];
				  this.COSTCENTER = (DBIDataColumn)t.Columns["COSTCENTER"];
				  this.SYSTEM = (DBIDataColumn)t.Columns["SYSTEM"];
				  this.OBSOLETE = (DBIDataColumn)t.Columns["OBSOLETE"];
				  this.DEPRATE = (DBIDataColumn)t.Columns["DEPRATE"];
				  this.SCRAPD = (DBIDataColumn)t.Columns["SCRAPD"];
				  this.SCRAPV = (DBIDataColumn)t.Columns["SCRAPV"];
				  this.CONTACT = (DBIDataColumn)t.Columns["CONTACT"];
				  this.ACCESS = (DBIDataColumn)t.Columns["ACCESS"];
				  this.COMMENT = (DBIDataColumn)t.Columns["COMMENT"];
				  this.HIDDEN = (DBIDataColumn)t.Columns["HIDDEN"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn UTYPE;
				public readonly DBIDataColumn BUILDING;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn LOCATION;
				public readonly DBIDataColumn CATEGORY;
				public readonly DBIDataColumn MAKE;
				public readonly DBIDataColumn MODEL;
				public readonly DBIDataColumn SERIAL;
				public readonly DBIDataColumn DRAW;
				public readonly DBIDataColumn PURCHASE;
				public readonly DBIDataColumn ORGCOST;
				public readonly DBIDataColumn REPCOST;
				public readonly DBIDataColumn ESTIMATE;
				public readonly DBIDataColumn TLIFE;
				public readonly DBIDataColumn VENDOR;
				public readonly DBIDataColumn SERVICE;
				public readonly DBIDataColumn WEXPIRY;
				public readonly DBIDataColumn OWNER;
				public readonly DBIDataColumn ASSET;
				public readonly DBIDataColumn COSTCENTER;
				public readonly DBIDataColumn SYSTEM;
				public readonly DBIDataColumn OBSOLETE;
				public readonly DBIDataColumn DEPRATE;
				public readonly DBIDataColumn SCRAPD;
				public readonly DBIDataColumn SCRAPV;
				public readonly DBIDataColumn CONTACT;
				public readonly DBIDataColumn ACCESS;
				public readonly DBIDataColumn COMMENT;
				public readonly DBIDataColumn HIDDEN;
			}
			#endregion
			#region EventHandlers
			#if UnitsRowChangeEvents
			public event UnitsRowChangeEventHandler UnitsRowChanged;
			public event UnitsRowChangeEventHandler UnitsRowChanging;
			public event UnitsRowChangeEventHandler UnitsRowDeleted;
			public event UnitsRowChangeEventHandler UnitsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.UnitsRowChanged != null)) {
					this.UnitsRowChanged(this, new UnitsRowChangeEvent(((UnitsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.UnitsRowChanging != null)) {
					this.UnitsRowChanging(this, new UnitsRowChangeEvent(((UnitsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.UnitsRowDeleted != null)) {
					this.UnitsRowDeleted(this, new UnitsRowChangeEvent(((UnitsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.UnitsRowDeleting != null)) {
					 this.UnitsRowDeleting(this, new UnitsRowChangeEvent(((UnitsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new UnitsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public UnitsRow this[int index] {
				get {
					return ((UnitsRow)(this.Rows[index]));
				}
			}
			public void AddUnitsRow(UnitsRow row) {
				this.Rows.Add(row);
			}
			public UnitsRow AddNewUnitsRow() {
				return ((UnitsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Units)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new UnitsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(UnitsRow);
			}
			public void RemoveUnitsRow(UnitsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region UnitsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class UnitsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal UnitsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly UnitsDataTable this_table;
				private readonly UnitsRow this_row;
				public FAccessor( UnitsRow this_row )
				{
					this.this_table = ((UnitsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Units.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Units.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.Units.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String UTYPE {
					get {
							return (System.String)Schema.T.Units.F.UTYPE.EffectiveType.GenericAsNativeType(this_table.F.UTYPE[this_row], typeof(System.String));
					}
					set {this_table.F.UTYPE[this_row] = value; }
				}

				public System.Int32? BUILDING {
					get {
							return (System.Int32?)Schema.T.Units.F.BUILDING.EffectiveType.GenericAsNativeType(this_table.F.BUILDING[this_row], typeof(System.Int32?));
					}
					set {this_table.F.BUILDING[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Units.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Units.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.String LOCATION {
					get {
							return (System.String)Schema.T.Units.F.LOCATION.EffectiveType.GenericAsNativeType(this_table.F.LOCATION[this_row], typeof(System.String));
					}
					set {this_table.F.LOCATION[this_row] = value; }
				}

				public System.String CATEGORY {
					get {
							return (System.String)Schema.T.Units.F.CATEGORY.EffectiveType.GenericAsNativeType(this_table.F.CATEGORY[this_row], typeof(System.String));
					}
					set {this_table.F.CATEGORY[this_row] = value; }
				}

				public System.String MAKE {
					get {
							return (System.String)Schema.T.Units.F.MAKE.EffectiveType.GenericAsNativeType(this_table.F.MAKE[this_row], typeof(System.String));
					}
					set {this_table.F.MAKE[this_row] = value; }
				}

				public System.String MODEL {
					get {
							return (System.String)Schema.T.Units.F.MODEL.EffectiveType.GenericAsNativeType(this_table.F.MODEL[this_row], typeof(System.String));
					}
					set {this_table.F.MODEL[this_row] = value; }
				}

				public System.String SERIAL {
					get {
							return (System.String)Schema.T.Units.F.SERIAL.EffectiveType.GenericAsNativeType(this_table.F.SERIAL[this_row], typeof(System.String));
					}
					set {this_table.F.SERIAL[this_row] = value; }
				}

				public System.String DRAW {
					get {
							return (System.String)Schema.T.Units.F.DRAW.EffectiveType.GenericAsNativeType(this_table.F.DRAW[this_row], typeof(System.String));
					}
					set {this_table.F.DRAW[this_row] = value; }
				}

				public System.DateTime? PURCHASE {
					get {
							return (System.DateTime?)Schema.T.Units.F.PURCHASE.EffectiveType.GenericAsNativeType(this_table.F.PURCHASE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.PURCHASE[this_row] = value; }
				}

				public System.Int32? ORGCOST {
					get {
							return (System.Int32?)Schema.T.Units.F.ORGCOST.EffectiveType.GenericAsNativeType(this_table.F.ORGCOST[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ORGCOST[this_row] = value; }
				}

				public System.Int32? REPCOST {
					get {
							return (System.Int32?)Schema.T.Units.F.REPCOST.EffectiveType.GenericAsNativeType(this_table.F.REPCOST[this_row], typeof(System.Int32?));
					}
					set {this_table.F.REPCOST[this_row] = value; }
				}

				public System.DateTime? ESTIMATE {
					get {
							return (System.DateTime?)Schema.T.Units.F.ESTIMATE.EffectiveType.GenericAsNativeType(this_table.F.ESTIMATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.ESTIMATE[this_row] = value; }
				}

				public System.Int32? TLIFE {
					get {
							return (System.Int32?)Schema.T.Units.F.TLIFE.EffectiveType.GenericAsNativeType(this_table.F.TLIFE[this_row], typeof(System.Int32?));
					}
					set {this_table.F.TLIFE[this_row] = value; }
				}

				public System.Int32? VENDOR {
					get {
							return (System.Int32?)Schema.T.Units.F.VENDOR.EffectiveType.GenericAsNativeType(this_table.F.VENDOR[this_row], typeof(System.Int32?));
					}
					set {this_table.F.VENDOR[this_row] = value; }
				}

				public System.Int32? SERVICE {
					get {
							return (System.Int32?)Schema.T.Units.F.SERVICE.EffectiveType.GenericAsNativeType(this_table.F.SERVICE[this_row], typeof(System.Int32?));
					}
					set {this_table.F.SERVICE[this_row] = value; }
				}

				public System.DateTime? WEXPIRY {
					get {
							return (System.DateTime?)Schema.T.Units.F.WEXPIRY.EffectiveType.GenericAsNativeType(this_table.F.WEXPIRY[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.WEXPIRY[this_row] = value; }
				}

				public System.String OWNER {
					get {
							return (System.String)Schema.T.Units.F.OWNER.EffectiveType.GenericAsNativeType(this_table.F.OWNER[this_row], typeof(System.String));
					}
					set {this_table.F.OWNER[this_row] = value; }
				}

				public System.String ASSET {
					get {
							return (System.String)Schema.T.Units.F.ASSET.EffectiveType.GenericAsNativeType(this_table.F.ASSET[this_row], typeof(System.String));
					}
					set {this_table.F.ASSET[this_row] = value; }
				}

				public System.String COSTCENTER {
					get {
							return (System.String)Schema.T.Units.F.COSTCENTER.EffectiveType.GenericAsNativeType(this_table.F.COSTCENTER[this_row], typeof(System.String));
					}
					set {this_table.F.COSTCENTER[this_row] = value; }
				}

				public System.String SYSTEM {
					get {
							return (System.String)Schema.T.Units.F.SYSTEM.EffectiveType.GenericAsNativeType(this_table.F.SYSTEM[this_row], typeof(System.String));
					}
					set {this_table.F.SYSTEM[this_row] = value; }
				}

				public System.String OBSOLETE {
					get {
							return (System.String)Schema.T.Units.F.OBSOLETE.EffectiveType.GenericAsNativeType(this_table.F.OBSOLETE[this_row], typeof(System.String));
					}
					set {this_table.F.OBSOLETE[this_row] = value; }
				}

				public System.Int32? DEPRATE {
					get {
							return (System.Int32?)Schema.T.Units.F.DEPRATE.EffectiveType.GenericAsNativeType(this_table.F.DEPRATE[this_row], typeof(System.Int32?));
					}
					set {this_table.F.DEPRATE[this_row] = value; }
				}

				public System.DateTime? SCRAPD {
					get {
							return (System.DateTime?)Schema.T.Units.F.SCRAPD.EffectiveType.GenericAsNativeType(this_table.F.SCRAPD[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.SCRAPD[this_row] = value; }
				}

				public System.Int32? SCRAPV {
					get {
							return (System.Int32?)Schema.T.Units.F.SCRAPV.EffectiveType.GenericAsNativeType(this_table.F.SCRAPV[this_row], typeof(System.Int32?));
					}
					set {this_table.F.SCRAPV[this_row] = value; }
				}

				public System.Int32? CONTACT {
					get {
							return (System.Int32?)Schema.T.Units.F.CONTACT.EffectiveType.GenericAsNativeType(this_table.F.CONTACT[this_row], typeof(System.Int32?));
					}
					set {this_table.F.CONTACT[this_row] = value; }
				}

				public System.String ACCESS {
					get {
							return (System.String)Schema.T.Units.F.ACCESS.EffectiveType.GenericAsNativeType(this_table.F.ACCESS[this_row], typeof(System.String));
					}
					set {this_table.F.ACCESS[this_row] = value; }
				}

				public System.String COMMENT {
					get {
							return (System.String)Schema.T.Units.F.COMMENT.EffectiveType.GenericAsNativeType(this_table.F.COMMENT[this_row], typeof(System.String));
					}
					set {this_table.F.COMMENT[this_row] = value; }
				}

				public System.Boolean? HIDDEN {
					get {
							return (System.Boolean?)Schema.T.Units.F.HIDDEN.EffectiveType.GenericAsNativeType(this_table.F.HIDDEN[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.HIDDEN[this_row] = value; }
				}
			}
		}
		#endregion
		#region UnitsRowChangeEvent
#if UnitsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class UnitsRowChangeEvent : EventArgs {

			private UnitsRow eventRow;

			private DataRowAction eventAction;

			public UnitsRowChangeEvent(UnitsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public UnitsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region UoM
		private bool ShouldSerializeUoM() {
			return false;
		}
#if UoMRowChangeEvents
		public delegate void UoMRowChangeEventHandler(object sender, UoMRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class UoMDataTable : DBIDataTable {
			#region Construction
			internal UoMDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal UoMDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(UoMDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn KEY;
			}
			#endregion
			#region EventHandlers
			#if UoMRowChangeEvents
			public event UoMRowChangeEventHandler UoMRowChanged;
			public event UoMRowChangeEventHandler UoMRowChanging;
			public event UoMRowChangeEventHandler UoMRowDeleted;
			public event UoMRowChangeEventHandler UoMRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.UoMRowChanged != null)) {
					this.UoMRowChanged(this, new UoMRowChangeEvent(((UoMRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.UoMRowChanging != null)) {
					this.UoMRowChanging(this, new UoMRowChangeEvent(((UoMRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.UoMRowDeleted != null)) {
					this.UoMRowDeleted(this, new UoMRowChangeEvent(((UoMRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.UoMRowDeleting != null)) {
					 this.UoMRowDeleting(this, new UoMRowChangeEvent(((UoMRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new UoMDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public UoMRow this[int index] {
				get {
					return ((UoMRow)(this.Rows[index]));
				}
			}
			public void AddUoMRow(UoMRow row) {
				this.Rows.Add(row);
			}
			public UoMRow AddNewUoMRow() {
				return ((UoMRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.UoM)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new UoMRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(UoMRow);
			}
			public void RemoveUoMRow(UoMRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region UoMRow
		[Thinkage.Libraries.Translation.Invariant]
		public class UoMRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal UoMRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly UoMDataTable this_table;
				private readonly UoMRow this_row;
				public FAccessor( UoMRow this_row )
				{
					this.this_table = ((UoMDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.UoM.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.UoM.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.UoM.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.UoM.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.UoM.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}
			}
		}
		#endregion
		#region UoMRowChangeEvent
#if UoMRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class UoMRowChangeEvent : EventArgs {

			private UoMRow eventRow;

			private DataRowAction eventAction;

			public UoMRowChangeEvent(UoMRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public UoMRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region VendorCategories
		private bool ShouldSerializeVendorCategories() {
			return false;
		}
#if VendorCategoriesRowChangeEvents
		public delegate void VendorCategoriesRowChangeEventHandler(object sender, VendorCategoriesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class VendorCategoriesDataTable : DBIDataTable {
			#region Construction
			internal VendorCategoriesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal VendorCategoriesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(VendorCategoriesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if VendorCategoriesRowChangeEvents
			public event VendorCategoriesRowChangeEventHandler VendorCategoriesRowChanged;
			public event VendorCategoriesRowChangeEventHandler VendorCategoriesRowChanging;
			public event VendorCategoriesRowChangeEventHandler VendorCategoriesRowDeleted;
			public event VendorCategoriesRowChangeEventHandler VendorCategoriesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.VendorCategoriesRowChanged != null)) {
					this.VendorCategoriesRowChanged(this, new VendorCategoriesRowChangeEvent(((VendorCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.VendorCategoriesRowChanging != null)) {
					this.VendorCategoriesRowChanging(this, new VendorCategoriesRowChangeEvent(((VendorCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.VendorCategoriesRowDeleted != null)) {
					this.VendorCategoriesRowDeleted(this, new VendorCategoriesRowChangeEvent(((VendorCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.VendorCategoriesRowDeleting != null)) {
					 this.VendorCategoriesRowDeleting(this, new VendorCategoriesRowChangeEvent(((VendorCategoriesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new VendorCategoriesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public VendorCategoriesRow this[int index] {
				get {
					return ((VendorCategoriesRow)(this.Rows[index]));
				}
			}
			public void AddVendorCategoriesRow(VendorCategoriesRow row) {
				this.Rows.Add(row);
			}
			public VendorCategoriesRow AddNewVendorCategoriesRow() {
				return ((VendorCategoriesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.VendorCategories)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new VendorCategoriesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(VendorCategoriesRow);
			}
			public void RemoveVendorCategoriesRow(VendorCategoriesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region VendorCategoriesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class VendorCategoriesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal VendorCategoriesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly VendorCategoriesDataTable this_table;
				private readonly VendorCategoriesRow this_row;
				public FAccessor( VendorCategoriesRow this_row )
				{
					this.this_table = ((VendorCategoriesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.VendorCategories.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.VendorCategories.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.VendorCategories.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.VendorCategories.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region VendorCategoriesRowChangeEvent
#if VendorCategoriesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class VendorCategoriesRowChangeEvent : EventArgs {

			private VendorCategoriesRow eventRow;

			private DataRowAction eventAction;

			public VendorCategoriesRowChangeEvent(VendorCategoriesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public VendorCategoriesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region Vendors
		private bool ShouldSerializeVendors() {
			return false;
		}
#if VendorsRowChangeEvents
		public delegate void VendorsRowChangeEventHandler(object sender, VendorsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class VendorsDataTable : DBIDataTable {
			#region Construction
			internal VendorsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal VendorsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(VendorsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				  this.CONTACT = (DBIDataColumn)t.Columns["CONTACT"];
				  this.CATEGORY = (DBIDataColumn)t.Columns["CATEGORY"];
				  this.ADD1 = (DBIDataColumn)t.Columns["ADD1"];
				  this.ADD2 = (DBIDataColumn)t.Columns["ADD2"];
				  this.ADD3 = (DBIDataColumn)t.Columns["ADD3"];
				  this.TEL = (DBIDataColumn)t.Columns["TEL"];
				  this.FAX = (DBIDataColumn)t.Columns["FAX"];
				  this.WEB = (DBIDataColumn)t.Columns["WEB"];
				  this.ACCOUNTNUM = (DBIDataColumn)t.Columns["ACCOUNTNUM"];
				  this.EMAIL = (DBIDataColumn)t.Columns["EMAIL"];
				  this.HIDDEN = (DBIDataColumn)t.Columns["HIDDEN"];
				  this.COMMENT = (DBIDataColumn)t.Columns["COMMENT"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
				public readonly DBIDataColumn CONTACT;
				public readonly DBIDataColumn CATEGORY;
				public readonly DBIDataColumn ADD1;
				public readonly DBIDataColumn ADD2;
				public readonly DBIDataColumn ADD3;
				public readonly DBIDataColumn TEL;
				public readonly DBIDataColumn FAX;
				public readonly DBIDataColumn WEB;
				public readonly DBIDataColumn ACCOUNTNUM;
				public readonly DBIDataColumn EMAIL;
				public readonly DBIDataColumn HIDDEN;
				public readonly DBIDataColumn COMMENT;
			}
			#endregion
			#region EventHandlers
			#if VendorsRowChangeEvents
			public event VendorsRowChangeEventHandler VendorsRowChanged;
			public event VendorsRowChangeEventHandler VendorsRowChanging;
			public event VendorsRowChangeEventHandler VendorsRowDeleted;
			public event VendorsRowChangeEventHandler VendorsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.VendorsRowChanged != null)) {
					this.VendorsRowChanged(this, new VendorsRowChangeEvent(((VendorsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.VendorsRowChanging != null)) {
					this.VendorsRowChanging(this, new VendorsRowChangeEvent(((VendorsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.VendorsRowDeleted != null)) {
					this.VendorsRowDeleted(this, new VendorsRowChangeEvent(((VendorsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.VendorsRowDeleting != null)) {
					 this.VendorsRowDeleting(this, new VendorsRowChangeEvent(((VendorsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new VendorsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public VendorsRow this[int index] {
				get {
					return ((VendorsRow)(this.Rows[index]));
				}
			}
			public void AddVendorsRow(VendorsRow row) {
				this.Rows.Add(row);
			}
			public VendorsRow AddNewVendorsRow() {
				return ((VendorsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.Vendors)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new VendorsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(VendorsRow);
			}
			public void RemoveVendorsRow(VendorsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region VendorsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class VendorsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal VendorsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly VendorsDataTable this_table;
				private readonly VendorsRow this_row;
				public FAccessor( VendorsRow this_row )
				{
					this.this_table = ((VendorsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.Vendors.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.Vendors.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.Vendors.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.Vendors.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.Vendors.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}

				public System.String CONTACT {
					get {
							return (System.String)Schema.T.Vendors.F.CONTACT.EffectiveType.GenericAsNativeType(this_table.F.CONTACT[this_row], typeof(System.String));
					}
					set {this_table.F.CONTACT[this_row] = value; }
				}

				public System.String CATEGORY {
					get {
							return (System.String)Schema.T.Vendors.F.CATEGORY.EffectiveType.GenericAsNativeType(this_table.F.CATEGORY[this_row], typeof(System.String));
					}
					set {this_table.F.CATEGORY[this_row] = value; }
				}

				public System.String ADD1 {
					get {
							return (System.String)Schema.T.Vendors.F.ADD1.EffectiveType.GenericAsNativeType(this_table.F.ADD1[this_row], typeof(System.String));
					}
					set {this_table.F.ADD1[this_row] = value; }
				}

				public System.String ADD2 {
					get {
							return (System.String)Schema.T.Vendors.F.ADD2.EffectiveType.GenericAsNativeType(this_table.F.ADD2[this_row], typeof(System.String));
					}
					set {this_table.F.ADD2[this_row] = value; }
				}

				public System.String ADD3 {
					get {
							return (System.String)Schema.T.Vendors.F.ADD3.EffectiveType.GenericAsNativeType(this_table.F.ADD3[this_row], typeof(System.String));
					}
					set {this_table.F.ADD3[this_row] = value; }
				}

				public System.String TEL {
					get {
							return (System.String)Schema.T.Vendors.F.TEL.EffectiveType.GenericAsNativeType(this_table.F.TEL[this_row], typeof(System.String));
					}
					set {this_table.F.TEL[this_row] = value; }
				}

				public System.String FAX {
					get {
							return (System.String)Schema.T.Vendors.F.FAX.EffectiveType.GenericAsNativeType(this_table.F.FAX[this_row], typeof(System.String));
					}
					set {this_table.F.FAX[this_row] = value; }
				}

				public System.String WEB {
					get {
							return (System.String)Schema.T.Vendors.F.WEB.EffectiveType.GenericAsNativeType(this_table.F.WEB[this_row], typeof(System.String));
					}
					set {this_table.F.WEB[this_row] = value; }
				}

				public System.String ACCOUNTNUM {
					get {
							return (System.String)Schema.T.Vendors.F.ACCOUNTNUM.EffectiveType.GenericAsNativeType(this_table.F.ACCOUNTNUM[this_row], typeof(System.String));
					}
					set {this_table.F.ACCOUNTNUM[this_row] = value; }
				}

				public System.String EMAIL {
					get {
							return (System.String)Schema.T.Vendors.F.EMAIL.EffectiveType.GenericAsNativeType(this_table.F.EMAIL[this_row], typeof(System.String));
					}
					set {this_table.F.EMAIL[this_row] = value; }
				}

				public System.Boolean? HIDDEN {
					get {
							return (System.Boolean?)Schema.T.Vendors.F.HIDDEN.EffectiveType.GenericAsNativeType(this_table.F.HIDDEN[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.HIDDEN[this_row] = value; }
				}

				public System.String COMMENT {
					get {
							return (System.String)Schema.T.Vendors.F.COMMENT.EffectiveType.GenericAsNativeType(this_table.F.COMMENT[this_row], typeof(System.String));
					}
					set {this_table.F.COMMENT[this_row] = value; }
				}
			}
		}
		#endregion
		#region VendorsRowChangeEvent
#if VendorsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class VendorsRowChangeEvent : EventArgs {

			private VendorsRow eventRow;

			private DataRowAction eventAction;

			public VendorsRowChangeEvent(VendorsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public VendorsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region WorkCategories
		private bool ShouldSerializeWorkCategories() {
			return false;
		}
#if WorkCategoriesRowChangeEvents
		public delegate void WorkCategoriesRowChangeEventHandler(object sender, WorkCategoriesRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class WorkCategoriesDataTable : DBIDataTable {
			#region Construction
			internal WorkCategoriesDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal WorkCategoriesDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(WorkCategoriesDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.CODE = (DBIDataColumn)t.Columns["CODE"];
				  this.DESC = (DBIDataColumn)t.Columns["DESC"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn CODE;
				public readonly DBIDataColumn DESC;
			}
			#endregion
			#region EventHandlers
			#if WorkCategoriesRowChangeEvents
			public event WorkCategoriesRowChangeEventHandler WorkCategoriesRowChanged;
			public event WorkCategoriesRowChangeEventHandler WorkCategoriesRowChanging;
			public event WorkCategoriesRowChangeEventHandler WorkCategoriesRowDeleted;
			public event WorkCategoriesRowChangeEventHandler WorkCategoriesRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.WorkCategoriesRowChanged != null)) {
					this.WorkCategoriesRowChanged(this, new WorkCategoriesRowChangeEvent(((WorkCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.WorkCategoriesRowChanging != null)) {
					this.WorkCategoriesRowChanging(this, new WorkCategoriesRowChangeEvent(((WorkCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.WorkCategoriesRowDeleted != null)) {
					this.WorkCategoriesRowDeleted(this, new WorkCategoriesRowChangeEvent(((WorkCategoriesRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.WorkCategoriesRowDeleting != null)) {
					 this.WorkCategoriesRowDeleting(this, new WorkCategoriesRowChangeEvent(((WorkCategoriesRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new WorkCategoriesDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public WorkCategoriesRow this[int index] {
				get {
					return ((WorkCategoriesRow)(this.Rows[index]));
				}
			}
			public void AddWorkCategoriesRow(WorkCategoriesRow row) {
				this.Rows.Add(row);
			}
			public WorkCategoriesRow AddNewWorkCategoriesRow() {
				return ((WorkCategoriesRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.WorkCategories)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new WorkCategoriesRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(WorkCategoriesRow);
			}
			public void RemoveWorkCategoriesRow(WorkCategoriesRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region WorkCategoriesRow
		[Thinkage.Libraries.Translation.Invariant]
		public class WorkCategoriesRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal WorkCategoriesRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly WorkCategoriesDataTable this_table;
				private readonly WorkCategoriesRow this_row;
				public FAccessor( WorkCategoriesRow this_row )
				{
					this.this_table = ((WorkCategoriesDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.WorkCategories.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.WorkCategories.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.String CODE {
					get {
							return (System.String)Schema.T.WorkCategories.F.CODE.EffectiveType.GenericAsNativeType(this_table.F.CODE[this_row], typeof(System.String));
					}
					set {this_table.F.CODE[this_row] = value; }
				}

				public System.String DESC {
					get {
							return (System.String)Schema.T.WorkCategories.F.DESC.EffectiveType.GenericAsNativeType(this_table.F.DESC[this_row], typeof(System.String));
					}
					set {this_table.F.DESC[this_row] = value; }
				}
			}
		}
		#endregion
		#region WorkCategoriesRowChangeEvent
#if WorkCategoriesRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class WorkCategoriesRowChangeEvent : EventArgs {

			private WorkCategoriesRow eventRow;

			private DataRowAction eventAction;

			public WorkCategoriesRowChangeEvent(WorkCategoriesRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public WorkCategoriesRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region WorkOrders
		private bool ShouldSerializeWorkOrders() {
			return false;
		}
#if WorkOrdersRowChangeEvents
		public delegate void WorkOrdersRowChangeEventHandler(object sender, WorkOrdersRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class WorkOrdersDataTable : DBIDataTable {
			#region Construction
			internal WorkOrdersDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal WorkOrdersDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(WorkOrdersDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.WONUM = (DBIDataColumn)t.Columns["WONUM"];
				  this.TYPE = (DBIDataColumn)t.Columns["TYPE"];
				  this.CLASS = (DBIDataColumn)t.Columns["CLASS"];
				  this.LINKKEY = (DBIDataColumn)t.Columns["LINKKEY"];
				  this.UNITKEY = (DBIDataColumn)t.Columns["UNITKEY"];
				  this.WTYPE = (DBIDataColumn)t.Columns["WTYPE"];
				  this.COSTCENTER = (DBIDataColumn)t.Columns["COSTCENTER"];
				  this.PROJECT = (DBIDataColumn)t.Columns["PROJECT"];
				  this.ACCESSCODE = (DBIDataColumn)t.Columns["ACCESSCODE"];
				  this.PRIORITY = (DBIDataColumn)t.Columns["PRIORITY"];
				  this.ORIGINATOR = (DBIDataColumn)t.Columns["ORIGINATOR"];
				  this.REQUESTOR = (DBIDataColumn)t.Columns["REQUESTOR"];
				  this.SUBJECT = (DBIDataColumn)t.Columns["SUBJECT"];
				  this.WDESC = (DBIDataColumn)t.Columns["WDESC"];
				  this.CREATEDATE = (DBIDataColumn)t.Columns["CREATEDATE"];
				  this.CREATETIME = (DBIDataColumn)t.Columns["CREATETIME"];
				  this.CLOSEDATE = (DBIDataColumn)t.Columns["CLOSEDATE"];
				  this.CLOSETIME = (DBIDataColumn)t.Columns["CLOSETIME"];
				  this.CLOSECODE = (DBIDataColumn)t.Columns["CLOSECODE"];
				  this.CLOSECOMM = (DBIDataColumn)t.Columns["CLOSECOMM"];
				  this.DOWNTIME = (DBIDataColumn)t.Columns["DOWNTIME"];
				  this.NEEDPRINT = (DBIDataColumn)t.Columns["NEEDPRINT"];
				  this.WORKDATE = (DBIDataColumn)t.Columns["WORKDATE"];
				  this.WINTERVAL = (DBIDataColumn)t.Columns["WINTERVAL"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn WONUM;
				public readonly DBIDataColumn TYPE;
				public readonly DBIDataColumn CLASS;
				public readonly DBIDataColumn LINKKEY;
				public readonly DBIDataColumn UNITKEY;
				public readonly DBIDataColumn WTYPE;
				public readonly DBIDataColumn COSTCENTER;
				public readonly DBIDataColumn PROJECT;
				public readonly DBIDataColumn ACCESSCODE;
				public readonly DBIDataColumn PRIORITY;
				public readonly DBIDataColumn ORIGINATOR;
				public readonly DBIDataColumn REQUESTOR;
				public readonly DBIDataColumn SUBJECT;
				public readonly DBIDataColumn WDESC;
				public readonly DBIDataColumn CREATEDATE;
				public readonly DBIDataColumn CREATETIME;
				public readonly DBIDataColumn CLOSEDATE;
				public readonly DBIDataColumn CLOSETIME;
				public readonly DBIDataColumn CLOSECODE;
				public readonly DBIDataColumn CLOSECOMM;
				public readonly DBIDataColumn DOWNTIME;
				public readonly DBIDataColumn NEEDPRINT;
				public readonly DBIDataColumn WORKDATE;
				public readonly DBIDataColumn WINTERVAL;
			}
			#endregion
			#region EventHandlers
			#if WorkOrdersRowChangeEvents
			public event WorkOrdersRowChangeEventHandler WorkOrdersRowChanged;
			public event WorkOrdersRowChangeEventHandler WorkOrdersRowChanging;
			public event WorkOrdersRowChangeEventHandler WorkOrdersRowDeleted;
			public event WorkOrdersRowChangeEventHandler WorkOrdersRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.WorkOrdersRowChanged != null)) {
					this.WorkOrdersRowChanged(this, new WorkOrdersRowChangeEvent(((WorkOrdersRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.WorkOrdersRowChanging != null)) {
					this.WorkOrdersRowChanging(this, new WorkOrdersRowChangeEvent(((WorkOrdersRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.WorkOrdersRowDeleted != null)) {
					this.WorkOrdersRowDeleted(this, new WorkOrdersRowChangeEvent(((WorkOrdersRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.WorkOrdersRowDeleting != null)) {
					 this.WorkOrdersRowDeleting(this, new WorkOrdersRowChangeEvent(((WorkOrdersRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new WorkOrdersDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public WorkOrdersRow this[int index] {
				get {
					return ((WorkOrdersRow)(this.Rows[index]));
				}
			}
			public void AddWorkOrdersRow(WorkOrdersRow row) {
				this.Rows.Add(row);
			}
			public WorkOrdersRow AddNewWorkOrdersRow() {
				return ((WorkOrdersRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.WorkOrders)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new WorkOrdersRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(WorkOrdersRow);
			}
			public void RemoveWorkOrdersRow(WorkOrdersRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region WorkOrdersRow
		[Thinkage.Libraries.Translation.Invariant]
		public class WorkOrdersRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal WorkOrdersRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly WorkOrdersDataTable this_table;
				private readonly WorkOrdersRow this_row;
				public FAccessor( WorkOrdersRow this_row )
				{
					this.this_table = ((WorkOrdersDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.WorkOrders.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.WorkOrders.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.WorkOrders.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String WONUM {
					get {
							return (System.String)Schema.T.WorkOrders.F.WONUM.EffectiveType.GenericAsNativeType(this_table.F.WONUM[this_row], typeof(System.String));
					}
					set {this_table.F.WONUM[this_row] = value; }
				}

				public System.String TYPE {
					get {
							return (System.String)Schema.T.WorkOrders.F.TYPE.EffectiveType.GenericAsNativeType(this_table.F.TYPE[this_row], typeof(System.String));
					}
					set {this_table.F.TYPE[this_row] = value; }
				}

				public System.String CLASS {
					get {
							return (System.String)Schema.T.WorkOrders.F.CLASS.EffectiveType.GenericAsNativeType(this_table.F.CLASS[this_row], typeof(System.String));
					}
					set {this_table.F.CLASS[this_row] = value; }
				}

				public System.Int32? LINKKEY {
					get {
							return (System.Int32?)Schema.T.WorkOrders.F.LINKKEY.EffectiveType.GenericAsNativeType(this_table.F.LINKKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.LINKKEY[this_row] = value; }
				}

				public System.Int32? UNITKEY {
					get {
							return (System.Int32?)Schema.T.WorkOrders.F.UNITKEY.EffectiveType.GenericAsNativeType(this_table.F.UNITKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.UNITKEY[this_row] = value; }
				}

				public System.String WTYPE {
					get {
							return (System.String)Schema.T.WorkOrders.F.WTYPE.EffectiveType.GenericAsNativeType(this_table.F.WTYPE[this_row], typeof(System.String));
					}
					set {this_table.F.WTYPE[this_row] = value; }
				}

				public System.String COSTCENTER {
					get {
							return (System.String)Schema.T.WorkOrders.F.COSTCENTER.EffectiveType.GenericAsNativeType(this_table.F.COSTCENTER[this_row], typeof(System.String));
					}
					set {this_table.F.COSTCENTER[this_row] = value; }
				}

				public System.String PROJECT {
					get {
							return (System.String)Schema.T.WorkOrders.F.PROJECT.EffectiveType.GenericAsNativeType(this_table.F.PROJECT[this_row], typeof(System.String));
					}
					set {this_table.F.PROJECT[this_row] = value; }
				}

				public System.String ACCESSCODE {
					get {
							return (System.String)Schema.T.WorkOrders.F.ACCESSCODE.EffectiveType.GenericAsNativeType(this_table.F.ACCESSCODE[this_row], typeof(System.String));
					}
					set {this_table.F.ACCESSCODE[this_row] = value; }
				}

				public System.String PRIORITY {
					get {
							return (System.String)Schema.T.WorkOrders.F.PRIORITY.EffectiveType.GenericAsNativeType(this_table.F.PRIORITY[this_row], typeof(System.String));
					}
					set {this_table.F.PRIORITY[this_row] = value; }
				}

				public System.Int32? ORIGINATOR {
					get {
							return (System.Int32?)Schema.T.WorkOrders.F.ORIGINATOR.EffectiveType.GenericAsNativeType(this_table.F.ORIGINATOR[this_row], typeof(System.Int32?));
					}
					set {this_table.F.ORIGINATOR[this_row] = value; }
				}

				public System.Int32? REQUESTOR {
					get {
							return (System.Int32?)Schema.T.WorkOrders.F.REQUESTOR.EffectiveType.GenericAsNativeType(this_table.F.REQUESTOR[this_row], typeof(System.Int32?));
					}
					set {this_table.F.REQUESTOR[this_row] = value; }
				}

				public System.String SUBJECT {
					get {
							return (System.String)Schema.T.WorkOrders.F.SUBJECT.EffectiveType.GenericAsNativeType(this_table.F.SUBJECT[this_row], typeof(System.String));
					}
					set {this_table.F.SUBJECT[this_row] = value; }
				}

				public System.String WDESC {
					get {
							return (System.String)Schema.T.WorkOrders.F.WDESC.EffectiveType.GenericAsNativeType(this_table.F.WDESC[this_row], typeof(System.String));
					}
					set {this_table.F.WDESC[this_row] = value; }
				}

				public System.DateTime? CREATEDATE {
					get {
							return (System.DateTime?)Schema.T.WorkOrders.F.CREATEDATE.EffectiveType.GenericAsNativeType(this_table.F.CREATEDATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.CREATEDATE[this_row] = value; }
				}

				public System.String CREATETIME {
					get {
							return (System.String)Schema.T.WorkOrders.F.CREATETIME.EffectiveType.GenericAsNativeType(this_table.F.CREATETIME[this_row], typeof(System.String));
					}
					set {this_table.F.CREATETIME[this_row] = value; }
				}

				public System.DateTime? CLOSEDATE {
					get {
							return (System.DateTime?)Schema.T.WorkOrders.F.CLOSEDATE.EffectiveType.GenericAsNativeType(this_table.F.CLOSEDATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.CLOSEDATE[this_row] = value; }
				}

				public System.String CLOSETIME {
					get {
							return (System.String)Schema.T.WorkOrders.F.CLOSETIME.EffectiveType.GenericAsNativeType(this_table.F.CLOSETIME[this_row], typeof(System.String));
					}
					set {this_table.F.CLOSETIME[this_row] = value; }
				}

				public System.String CLOSECODE {
					get {
							return (System.String)Schema.T.WorkOrders.F.CLOSECODE.EffectiveType.GenericAsNativeType(this_table.F.CLOSECODE[this_row], typeof(System.String));
					}
					set {this_table.F.CLOSECODE[this_row] = value; }
				}

				public System.String CLOSECOMM {
					get {
							return (System.String)Schema.T.WorkOrders.F.CLOSECOMM.EffectiveType.GenericAsNativeType(this_table.F.CLOSECOMM[this_row], typeof(System.String));
					}
					set {this_table.F.CLOSECOMM[this_row] = value; }
				}

				public System.String DOWNTIME {
					get {
							return (System.String)Schema.T.WorkOrders.F.DOWNTIME.EffectiveType.GenericAsNativeType(this_table.F.DOWNTIME[this_row], typeof(System.String));
					}
					set {this_table.F.DOWNTIME[this_row] = value; }
				}

				public System.Boolean? NEEDPRINT {
					get {
							return (System.Boolean?)Schema.T.WorkOrders.F.NEEDPRINT.EffectiveType.GenericAsNativeType(this_table.F.NEEDPRINT[this_row], typeof(System.Boolean?));
					}
					set {this_table.F.NEEDPRINT[this_row] = value; }
				}

				public System.DateTime? WORKDATE {
					get {
							return (System.DateTime?)Schema.T.WorkOrders.F.WORKDATE.EffectiveType.GenericAsNativeType(this_table.F.WORKDATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.WORKDATE[this_row] = value; }
				}

				public System.Int32? WINTERVAL {
					get {
							return (System.Int32?)Schema.T.WorkOrders.F.WINTERVAL.EffectiveType.GenericAsNativeType(this_table.F.WINTERVAL[this_row], typeof(System.Int32?));
					}
					set {this_table.F.WINTERVAL[this_row] = value; }
				}
			}
		}
		#endregion
		#region WorkOrdersRowChangeEvent
#if WorkOrdersRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class WorkOrdersRowChangeEvent : EventArgs {

			private WorkOrdersRow eventRow;

			private DataRowAction eventAction;

			public WorkOrdersRowChangeEvent(WorkOrdersRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public WorkOrdersRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#region WorkRequests
		private bool ShouldSerializeWorkRequests() {
			return false;
		}
#if WorkRequestsRowChangeEvents
		public delegate void WorkRequestsRowChangeEventHandler(object sender, WorkRequestsRowChangeEvent e);
#endif


		[Thinkage.Libraries.Translation.Invariant]
		public class WorkRequestsDataTable : DBIDataTable {
			#region Construction
			internal WorkRequestsDataTable(DBI_Table tableSchema, IServer s) :
					base(tableSchema, s) {
				Schema.InitColumns(this);
				#if DefineUniqueConstraints
				Schema.InitUniqueConstraints(this);
				#endif
				Columns.CollectionChanged += delegate(object sender, System.ComponentModel.CollectionChangeEventArgs ea) {
					_F = null;
				};
			}
#if SerializationSupport
			internal WorkRequestsDataTable(DataTable table) :
					base(table.TableName) {
				if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
					this.CaseSensitive = table.CaseSensitive;
				}
				if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
					this.Locale = table.Locale;
				}
				if ((table.Namespace != table.DataSet.Namespace)) {
					this.Namespace = table.Namespace;
				}
				this.Prefix = table.Prefix;
				this.MinimumCapacity = table.MinimumCapacity;
			}
#endif
			#endregion
			#region Typed Column accessor
			internal FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal class FAccessor {
				public FAccessor(WorkRequestsDataTable t) {
				  this.RECNO = (DBIDataColumn)t.Columns["RECNO"];
				  this.Id = (DBIDataColumn)t.Columns["Id"];
				  this.KEY = (DBIDataColumn)t.Columns["KEY"];
				  this.WRNUM = (DBIDataColumn)t.Columns["WRNUM"];
				  this.STATUS = (DBIDataColumn)t.Columns["STATUS"];
				  this.DATE = (DBIDataColumn)t.Columns["DATE"];
				  this.TIME = (DBIDataColumn)t.Columns["TIME"];
				  this.REQUESTOR = (DBIDataColumn)t.Columns["REQUESTOR"];
				  this.UNITKEY = (DBIDataColumn)t.Columns["UNITKEY"];
				  this.WTYPE = (DBIDataColumn)t.Columns["WTYPE"];
				  this.SUBJECT = (DBIDataColumn)t.Columns["SUBJECT"];
				  this.ACCESSCODE = (DBIDataColumn)t.Columns["ACCESSCODE"];
				  this.PRIORITY = (DBIDataColumn)t.Columns["PRIORITY"];
				  this.WDESC = (DBIDataColumn)t.Columns["WDESC"];
				  this.CLOSEDATE = (DBIDataColumn)t.Columns["CLOSEDATE"];
				  this.CLOSETIME = (DBIDataColumn)t.Columns["CLOSETIME"];
				  this.COMMENT = (DBIDataColumn)t.Columns["COMMENT"];
				}
				public readonly DBIDataColumn RECNO;
				public readonly DBIDataColumn Id;
				public readonly DBIDataColumn KEY;
				public readonly DBIDataColumn WRNUM;
				public readonly DBIDataColumn STATUS;
				public readonly DBIDataColumn DATE;
				public readonly DBIDataColumn TIME;
				public readonly DBIDataColumn REQUESTOR;
				public readonly DBIDataColumn UNITKEY;
				public readonly DBIDataColumn WTYPE;
				public readonly DBIDataColumn SUBJECT;
				public readonly DBIDataColumn ACCESSCODE;
				public readonly DBIDataColumn PRIORITY;
				public readonly DBIDataColumn WDESC;
				public readonly DBIDataColumn CLOSEDATE;
				public readonly DBIDataColumn CLOSETIME;
				public readonly DBIDataColumn COMMENT;
			}
			#endregion
			#region EventHandlers
			#if WorkRequestsRowChangeEvents
			public event WorkRequestsRowChangeEventHandler WorkRequestsRowChanged;
			public event WorkRequestsRowChangeEventHandler WorkRequestsRowChanging;
			public event WorkRequestsRowChangeEventHandler WorkRequestsRowDeleted;
			public event WorkRequestsRowChangeEventHandler WorkRequestsRowDeleting;

			protected override void OnRowChanged(DataRowChangeEventArgs e) {
				base.OnRowChanged(e);
				if ((this.WorkRequestsRowChanged != null)) {
					this.WorkRequestsRowChanged(this, new WorkRequestsRowChangeEvent(((WorkRequestsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowChanging(DataRowChangeEventArgs e) {
				base.OnRowChanging(e);
				if ((this.WorkRequestsRowChanging != null)) {
					this.WorkRequestsRowChanging(this, new WorkRequestsRowChangeEvent(((WorkRequestsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleted(DataRowChangeEventArgs e) {
				base.OnRowDeleted(e);
				if ((this.WorkRequestsRowDeleted != null)) {
					this.WorkRequestsRowDeleted(this, new WorkRequestsRowChangeEvent(((WorkRequestsRow)(e.Row)), e.Action));
				}
			}
			protected override void OnRowDeleting(DataRowChangeEventArgs e) {
				base.OnRowDeleting(e);
				if ((this.WorkRequestsRowDeleting != null)) {
					 this.WorkRequestsRowDeleting(this, new WorkRequestsRowChangeEvent(((WorkRequestsRow)(e.Row)), e.Action));
				}
			}
			#endif
			#endregion
			#region Instantiation used by DataSet.Clone
			// DataSet.Clone calls.CreateInstance on each table in the DataSet being cloned to make the tables for the new DataSet
			protected override DataTable CreateInstance() {
				return new WorkRequestsDataTable(Schema, Server);
			}
			#endregion
			#region Row Accessors
			[System.ComponentModel.Browsable(false)]
			public int Count {
				get {
					return this.Rows.Count;
				}
			}
			public WorkRequestsRow this[int index] {
				get {
					return ((WorkRequestsRow)(this.Rows[index]));
				}
			}
			public void AddWorkRequestsRow(WorkRequestsRow row) {
				this.Rows.Add(row);
			}
			public WorkRequestsRow AddNewWorkRequestsRow() {
				return ((WorkRequestsRow)(((DBDataSet)this.DataSet).DB.AddNewRowAndBases((DBDataSet)this.DataSet, MB29.Schema.T.WorkRequests)));
			}
			protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
				return new WorkRequestsRow(builder);
			}
			protected override System.Type GetRowType() {
				return typeof(WorkRequestsRow);
			}
			public void RemoveWorkRequestsRow(WorkRequestsRow row) {
				this.Rows.Remove(row);
			}
			#endregion
		}
		#region WorkRequestsRow
		[Thinkage.Libraries.Translation.Invariant]
		public class WorkRequestsRow : DataRow {
			public FAccessor F {
				get {
					if (_F == null)
						_F = new FAccessor(this);
					return _F;
				}
			}
			private FAccessor _F = null;
			internal WorkRequestsRow(DataRowBuilder rb)
				: base(rb) {
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class FAccessor {
				private readonly WorkRequestsDataTable this_table;
				private readonly WorkRequestsRow this_row;
				public FAccessor( WorkRequestsRow this_row )
				{
					this.this_table = ((WorkRequestsDataTable)(this_row.Table));
					this.this_row = this_row;
				}

				public System.Int32? RECNO {
					get {
							return (System.Int32?)Schema.T.WorkRequests.F.RECNO.EffectiveType.GenericAsNativeType(this_table.F.RECNO[this_row], typeof(System.Int32?));
					}
					set {this_table.F.RECNO[this_row] = value; }
				}

				public System.Guid Id {
					get {
							return (System.Guid)Schema.T.WorkRequests.F.Id.EffectiveType.GenericAsNativeType(this_table.F.Id[this_row], typeof(System.Guid));
					}
				}

				public System.Int32? KEY {
					get {
							return (System.Int32?)Schema.T.WorkRequests.F.KEY.EffectiveType.GenericAsNativeType(this_table.F.KEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.KEY[this_row] = value; }
				}

				public System.String WRNUM {
					get {
							return (System.String)Schema.T.WorkRequests.F.WRNUM.EffectiveType.GenericAsNativeType(this_table.F.WRNUM[this_row], typeof(System.String));
					}
					set {this_table.F.WRNUM[this_row] = value; }
				}

				public System.String STATUS {
					get {
							return (System.String)Schema.T.WorkRequests.F.STATUS.EffectiveType.GenericAsNativeType(this_table.F.STATUS[this_row], typeof(System.String));
					}
					set {this_table.F.STATUS[this_row] = value; }
				}

				public System.DateTime? DATE {
					get {
							return (System.DateTime?)Schema.T.WorkRequests.F.DATE.EffectiveType.GenericAsNativeType(this_table.F.DATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.DATE[this_row] = value; }
				}

				public System.String TIME {
					get {
							return (System.String)Schema.T.WorkRequests.F.TIME.EffectiveType.GenericAsNativeType(this_table.F.TIME[this_row], typeof(System.String));
					}
					set {this_table.F.TIME[this_row] = value; }
				}

				public System.Int32? REQUESTOR {
					get {
							return (System.Int32?)Schema.T.WorkRequests.F.REQUESTOR.EffectiveType.GenericAsNativeType(this_table.F.REQUESTOR[this_row], typeof(System.Int32?));
					}
					set {this_table.F.REQUESTOR[this_row] = value; }
				}

				public System.Int32? UNITKEY {
					get {
							return (System.Int32?)Schema.T.WorkRequests.F.UNITKEY.EffectiveType.GenericAsNativeType(this_table.F.UNITKEY[this_row], typeof(System.Int32?));
					}
					set {this_table.F.UNITKEY[this_row] = value; }
				}

				public System.String WTYPE {
					get {
							return (System.String)Schema.T.WorkRequests.F.WTYPE.EffectiveType.GenericAsNativeType(this_table.F.WTYPE[this_row], typeof(System.String));
					}
					set {this_table.F.WTYPE[this_row] = value; }
				}

				public System.String SUBJECT {
					get {
							return (System.String)Schema.T.WorkRequests.F.SUBJECT.EffectiveType.GenericAsNativeType(this_table.F.SUBJECT[this_row], typeof(System.String));
					}
					set {this_table.F.SUBJECT[this_row] = value; }
				}

				public System.String ACCESSCODE {
					get {
							return (System.String)Schema.T.WorkRequests.F.ACCESSCODE.EffectiveType.GenericAsNativeType(this_table.F.ACCESSCODE[this_row], typeof(System.String));
					}
					set {this_table.F.ACCESSCODE[this_row] = value; }
				}

				public System.String PRIORITY {
					get {
							return (System.String)Schema.T.WorkRequests.F.PRIORITY.EffectiveType.GenericAsNativeType(this_table.F.PRIORITY[this_row], typeof(System.String));
					}
					set {this_table.F.PRIORITY[this_row] = value; }
				}

				public System.String WDESC {
					get {
							return (System.String)Schema.T.WorkRequests.F.WDESC.EffectiveType.GenericAsNativeType(this_table.F.WDESC[this_row], typeof(System.String));
					}
					set {this_table.F.WDESC[this_row] = value; }
				}

				public System.DateTime? CLOSEDATE {
					get {
							return (System.DateTime?)Schema.T.WorkRequests.F.CLOSEDATE.EffectiveType.GenericAsNativeType(this_table.F.CLOSEDATE[this_row], typeof(System.DateTime?));
					}
					set {this_table.F.CLOSEDATE[this_row] = value; }
				}

				public System.String CLOSETIME {
					get {
							return (System.String)Schema.T.WorkRequests.F.CLOSETIME.EffectiveType.GenericAsNativeType(this_table.F.CLOSETIME[this_row], typeof(System.String));
					}
					set {this_table.F.CLOSETIME[this_row] = value; }
				}

				public System.String COMMENT {
					get {
							return (System.String)Schema.T.WorkRequests.F.COMMENT.EffectiveType.GenericAsNativeType(this_table.F.COMMENT[this_row], typeof(System.String));
					}
					set {this_table.F.COMMENT[this_row] = value; }
				}
			}
		}
		#endregion
		#region WorkRequestsRowChangeEvent
#if WorkRequestsRowChangeEvents
		[Thinkage.Libraries.Translation.Invariant]
		public class WorkRequestsRowChangeEvent : EventArgs {

			private WorkRequestsRow eventRow;

			private DataRowAction eventAction;

			public WorkRequestsRowChangeEvent(WorkRequestsRow row, DataRowAction action) {
				this.eventRow = row;
				this.eventAction = action;
			}

			public WorkRequestsRow Row {
				get {
					return this.eventRow;
				}
			}

			public DataRowAction Action {
				get {
					return this.eventAction;
				}
			}
		}
#endif
		#endregion
		#endregion
		#endregion

		#region Custom database schema definitions
		#region - the custom Schema class
		/// <summary>
		/// Singleton class containing the schema of all tables,
		/// columns, and relationships in a database.
		/// </summary>
		[Thinkage.Libraries.Translation.Invariant]
		public class SchemaClass : DBI_Database {
			#region singleton construction
			private SchemaClass() {
				_T = new TAccessor(this);
				vstruct = new VAccessor(this);
				__CustomImportDirectives = new DBI_CustomImportDirectives();
				Tables.Add( __CustomImportDirectives);
				__AtRequestAccounts = new DBI_AtRequestAccounts();
				Tables.Add( __AtRequestAccounts);
				__AtRequestConfiguration = new DBI_AtRequestConfiguration();
				Tables.Add( __AtRequestConfiguration);
				__Defaults = new DBI_Defaults();
				Tables.Add( __Defaults);
				__ArchivedSets = new DBI_ArchivedSets();
				Tables.Add( __ArchivedSets);
				__Permissions = new DBI_Permissions();
				Tables.Add( __Permissions);
				__EditPrograms = new DBI_EditPrograms();
				Tables.Add( __EditPrograms);
				__Settings = new DBI_Settings();
				Tables.Add( __Settings);
				__AccessCodes = new DBI_AccessCodes();
				Tables.Add( __AccessCodes);
				__Adjustments = new DBI_Adjustments();
				Tables.Add( __Adjustments);
				__AssetCodes = new DBI_AssetCodes();
				Tables.Add( __AssetCodes);
				__Buildings = new DBI_Buildings();
				Tables.Add( __Buildings);
				__Chargebacks = new DBI_Chargebacks();
				Tables.Add( __Chargebacks);
				__ClosingCodes = new DBI_ClosingCodes();
				Tables.Add( __ClosingCodes);
				__Contacts = new DBI_Contacts();
				Tables.Add( __Contacts);
				__CostCenters = new DBI_CostCenters();
				Tables.Add( __CostCenters);
				__InvCategories = new DBI_InvCategories();
				Tables.Add( __InvCategories);
				__InvItems = new DBI_InvItems();
				Tables.Add( __InvItems);
				__InvLocations = new DBI_InvLocations();
				Tables.Add( __InvLocations);
				__InvTransactions = new DBI_InvTransactions();
				Tables.Add( __InvTransactions);
				__Issues = new DBI_Issues();
				Tables.Add( __Issues);
				__Labor = new DBI_Labor();
				Tables.Add( __Labor);
				__MeterHistory = new DBI_MeterHistory();
				Tables.Add( __MeterHistory);
				__Meters = new DBI_Meters();
				Tables.Add( __Meters);
				__Obsoletes = new DBI_Obsoletes();
				Tables.Add( __Obsoletes);
				__Ownerships = new DBI_Ownerships();
				Tables.Add( __Ownerships);
				__Personnel = new DBI_Personnel();
				Tables.Add( __Personnel);
				__PreventiveSchedules = new DBI_PreventiveSchedules();
				Tables.Add( __PreventiveSchedules);
				__Priorities = new DBI_Priorities();
				Tables.Add( __Priorities);
				__Projects = new DBI_Projects();
				Tables.Add( __Projects);
				__PurchaseExtras = new DBI_PurchaseExtras();
				Tables.Add( __PurchaseExtras);
				__Purchases = new DBI_Purchases();
				Tables.Add( __Purchases);
				__Receipts = new DBI_Receipts();
				Tables.Add( __Receipts);
				__ServiceContracts = new DBI_ServiceContracts();
				Tables.Add( __ServiceContracts);
				__ServicedEquipment = new DBI_ServicedEquipment();
				Tables.Add( __ServicedEquipment);
				__ShippingModes = new DBI_ShippingModes();
				Tables.Add( __ShippingModes);
				__SpareParts = new DBI_SpareParts();
				Tables.Add( __SpareParts);
				__Specifications = new DBI_Specifications();
				Tables.Add( __Specifications);
				__Storerooms = new DBI_Storerooms();
				Tables.Add( __Storerooms);
				__Systems = new DBI_Systems();
				Tables.Add( __Systems);
				__Templates = new DBI_Templates();
				Tables.Add( __Templates);
				__Terms = new DBI_Terms();
				Tables.Add( __Terms);
				__Trades = new DBI_Trades();
				Tables.Add( __Trades);
				__UnitCategories = new DBI_UnitCategories();
				Tables.Add( __UnitCategories);
				__Units = new DBI_Units();
				Tables.Add( __Units);
				__UoM = new DBI_UoM();
				Tables.Add( __UoM);
				__VendorCategories = new DBI_VendorCategories();
				Tables.Add( __VendorCategories);
				__Vendors = new DBI_Vendors();
				Tables.Add( __Vendors);
				__WorkCategories = new DBI_WorkCategories();
				Tables.Add( __WorkCategories);
				__WorkOrders = new DBI_WorkOrders();
				Tables.Add( __WorkOrders);
				__WorkRequests = new DBI_WorkRequests();
				Tables.Add( __WorkRequests);
				CompleteDBI(System.Reflection.Assembly.GetExecutingAssembly(), "manifest://localhost/Thinkage/MainBoss/MB29Conversion/mb29.xafdb", typeof(MB29));
			 }
			/// <summary>
			/// The instantiation of the singleton SchemaClass object
			/// </summary>
			public static readonly SchemaClass Instance = new SchemaClass();
			#endregion
			#region Custom DBI_Table derivations and their private reference in the schema object
			#region - CustomImportDirectives table
			private DBI_CustomImportDirectives __CustomImportDirectives;

			/// <summary>
			/// Class to describe a CustomImportDirectives table
			/// </summary>
			public class DBI_CustomImportDirectives : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __DIRECTIVE;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_CustomImportDirectives this_table;
					public FAccessor( DBI_CustomImportDirectives this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the CustomImportDirectives's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the CustomImportDirectives's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the CustomImportDirectives's DIRECTIVE column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='DIRECTIVE'
					/// </summary>
					public DBI_Column DIRECTIVE { get { return this_table.__DIRECTIVE; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_CustomImportDirectives()
					: base( "CustomImportDirectives",
							delegate(DBI_Table tableSchema, IServer s) {
								return new CustomImportDirectivesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 3, "Table 'CustomImportDirectives' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__DIRECTIVE = Columns["DIRECTIVE"];
					System.Diagnostics.Debug.Assert(__DIRECTIVE != null, "Column 'DIRECTIVE' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - AtRequestAccounts table
			private DBI_AtRequestAccounts __AtRequestAccounts;

			/// <summary>
			/// Class to describe a AtRequestAccounts table
			/// </summary>
			public class DBI_AtRequestAccounts : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __FLAGS;
				private DBI_Column __CONTACTKEY;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_AtRequestAccounts this_table;
					public FAccessor( DBI_AtRequestAccounts this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the AtRequestAccounts's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the AtRequestAccounts's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the AtRequestAccounts's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the AtRequestAccounts's FLAGS column with type integer(32) with labelkey='FLAGS'
					/// </summary>
					public DBI_Column FLAGS { get { return this_table.__FLAGS; } }
					/// <summary>
					/// Denotes the AtRequestAccounts's CONTACTKEY column with type integer(32) with labelkey='CONTACTKEY'
					/// </summary>
					public DBI_Column CONTACTKEY { get { return this_table.__CONTACTKEY; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_AtRequestAccounts()
					: base( "AtRequestAccounts",
							delegate(DBI_Table tableSchema, IServer s) {
								return new AtRequestAccountsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 5, "Table 'AtRequestAccounts' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__FLAGS = Columns["FLAGS"];
					System.Diagnostics.Debug.Assert(__FLAGS != null, "Column 'FLAGS' not found");
					__CONTACTKEY = Columns["CONTACTKEY"];
					System.Diagnostics.Debug.Assert(__CONTACTKEY != null, "Column 'CONTACTKEY' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - AtRequestConfiguration table
			private DBI_AtRequestConfiguration __AtRequestConfiguration;

			/// <summary>
			/// Class to describe a AtRequestConfiguration table
			/// </summary>
			public class DBI_AtRequestConfiguration : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __VALUE;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_AtRequestConfiguration this_table;
					public FAccessor( DBI_AtRequestConfiguration this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the AtRequestConfiguration's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the AtRequestConfiguration's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the AtRequestConfiguration's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the AtRequestConfiguration's VALUE column with type string(maxlength 512, maxlines 0, trim) with labelkey='VALUE'
					/// </summary>
					public DBI_Column VALUE { get { return this_table.__VALUE; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_AtRequestConfiguration()
					: base( "AtRequestConfiguration",
							delegate(DBI_Table tableSchema, IServer s) {
								return new AtRequestConfigurationDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'AtRequestConfiguration' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__VALUE = Columns["VALUE"];
					System.Diagnostics.Debug.Assert(__VALUE != null, "Column 'VALUE' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Defaults table
			private DBI_Defaults __Defaults;

			/// <summary>
			/// Class to describe a Defaults table
			/// </summary>
			public class DBI_Defaults : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __LGEND;
				private DBI_Column __GFREQ;
				private DBI_Column __PHONEPREX;
				private DBI_Column __EDITPKEY;
				private DBI_Column __SERIAL;
				private DBI_Column __COMPANYNAM;
				private DBI_Column __COMPANYADD;
				private DBI_Column __BILLADDR;
				private DBI_Column __POCONTACT;
				private DBI_Column __REINDEX;
				private DBI_Column __PRFORMAT;
				private DBI_Column __POFORMAT;
				private DBI_Column __WRFORMAT;
				private DBI_Column __WOFORMAT;
				private DBI_Column __CURRSYM;
				private DBI_Column __FRDATE;
				private DBI_Column __FRCPOS;
				private DBI_Column __FRCNEG;
				private DBI_Column __FRCDEC;
				private DBI_Column __FRCGROUP;
				private DBI_Column __FRCGSIZE;
				private DBI_Column __FRCLGSIZE;
				private DBI_Column __FCDORDER;
				private DBI_Column __FCDDELIM;
				private DBI_Column __FCDMFORM;
				private DBI_Column __FCTAMPM;
				private DBI_Column __DBVERSION;
				private DBI_Column __MINVERSION;
				private DBI_Column __UPGRSTEP;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Defaults this_table;
					public FAccessor( DBI_Defaults this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Defaults's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Defaults's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Defaults's LGEND column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='LGEND'
					/// </summary>
					public DBI_Column LGEND { get { return this_table.__LGEND; } }
					/// <summary>
					/// Denotes the Defaults's GFREQ column with type string(maxlength 3, maxlines 0, trim) with labelkey='GFREQ'
					/// </summary>
					public DBI_Column GFREQ { get { return this_table.__GFREQ; } }
					/// <summary>
					/// Denotes the Defaults's PHONEPREX column with type string(maxlength 16, maxlines 0, trim) with labelkey='PHONEPREX'
					/// </summary>
					public DBI_Column PHONEPREX { get { return this_table.__PHONEPREX; } }
					/// <summary>
					/// Denotes the Defaults's EDITPKEY column with type integer(32) with labelkey='EDITPKEY'
					/// </summary>
					public DBI_Column EDITPKEY { get { return this_table.__EDITPKEY; } }
					/// <summary>
					/// Denotes the Defaults's SERIAL column with type string(maxlength 10, maxlines 0, trim) with labelkey='SERIAL'
					/// </summary>
					public DBI_Column SERIAL { get { return this_table.__SERIAL; } }
					/// <summary>
					/// Denotes the Defaults's COMPANYNAM column with type string(maxlength 30, maxlines 0, trim) with labelkey='COMPANYNAM'
					/// </summary>
					public DBI_Column COMPANYNAM { get { return this_table.__COMPANYNAM; } }
					/// <summary>
					/// Denotes the Defaults's COMPANYADD column with type string(maxlength 250, maxlines 0, trim) with labelkey='COMPANYADD'
					/// </summary>
					public DBI_Column COMPANYADD { get { return this_table.__COMPANYADD; } }
					/// <summary>
					/// Denotes the Defaults's BILLADDR column with type string(maxlength 250, maxlines 0, trim) with labelkey='BILLADDR'
					/// </summary>
					public DBI_Column BILLADDR { get { return this_table.__BILLADDR; } }
					/// <summary>
					/// Denotes the Defaults's POCONTACT column with type string(maxlength 250, maxlines 0, trim) with labelkey='POCONTACT'
					/// </summary>
					public DBI_Column POCONTACT { get { return this_table.__POCONTACT; } }
					/// <summary>
					/// Denotes the Defaults's REINDEX column with type integer(32) with labelkey='REINDEX'
					/// </summary>
					public DBI_Column REINDEX { get { return this_table.__REINDEX; } }
					/// <summary>
					/// Denotes the Defaults's PRFORMAT column with type string(maxlength 15, maxlines 0, trim) with labelkey='PRFORMAT'
					/// </summary>
					public DBI_Column PRFORMAT { get { return this_table.__PRFORMAT; } }
					/// <summary>
					/// Denotes the Defaults's POFORMAT column with type string(maxlength 15, maxlines 0, trim) with labelkey='POFORMAT'
					/// </summary>
					public DBI_Column POFORMAT { get { return this_table.__POFORMAT; } }
					/// <summary>
					/// Denotes the Defaults's WRFORMAT column with type string(maxlength 15, maxlines 0, trim) with labelkey='WRFORMAT'
					/// </summary>
					public DBI_Column WRFORMAT { get { return this_table.__WRFORMAT; } }
					/// <summary>
					/// Denotes the Defaults's WOFORMAT column with type string(maxlength 15, maxlines 0, trim) with labelkey='WOFORMAT'
					/// </summary>
					public DBI_Column WOFORMAT { get { return this_table.__WOFORMAT; } }
					/// <summary>
					/// Denotes the Defaults's CURRSYM column with type string(maxlength 10, maxlines 0, trim) with labelkey='CURRSYM'
					/// </summary>
					public DBI_Column CURRSYM { get { return this_table.__CURRSYM; } }
					/// <summary>
					/// Denotes the Defaults's FRDATE column with type string(maxlength 30, maxlines 0, trim) with labelkey='FRDATE'
					/// </summary>
					public DBI_Column FRDATE { get { return this_table.__FRDATE; } }
					/// <summary>
					/// Denotes the Defaults's FRCPOS column with type string(maxlength 20, maxlines 0, trim) with labelkey='FRCPOS'
					/// </summary>
					public DBI_Column FRCPOS { get { return this_table.__FRCPOS; } }
					/// <summary>
					/// Denotes the Defaults's FRCNEG column with type string(maxlength 20, maxlines 0, trim) with labelkey='FRCNEG'
					/// </summary>
					public DBI_Column FRCNEG { get { return this_table.__FRCNEG; } }
					/// <summary>
					/// Denotes the Defaults's FRCDEC column with type string(maxlength 1, maxlines 0, trim) with labelkey='FRCDEC'
					/// </summary>
					public DBI_Column FRCDEC { get { return this_table.__FRCDEC; } }
					/// <summary>
					/// Denotes the Defaults's FRCGROUP column with type string(maxlength 1, maxlines 0, trim) with labelkey='FRCGROUP'
					/// </summary>
					public DBI_Column FRCGROUP { get { return this_table.__FRCGROUP; } }
					/// <summary>
					/// Denotes the Defaults's FRCGSIZE column with type integer(32) with labelkey='FRCGSIZE'
					/// </summary>
					public DBI_Column FRCGSIZE { get { return this_table.__FRCGSIZE; } }
					/// <summary>
					/// Denotes the Defaults's FRCLGSIZE column with type integer(32) with labelkey='FRCLGSIZE'
					/// </summary>
					public DBI_Column FRCLGSIZE { get { return this_table.__FRCLGSIZE; } }
					/// <summary>
					/// Denotes the Defaults's FCDORDER column with type integer(32) with labelkey='FCDORDER'
					/// </summary>
					public DBI_Column FCDORDER { get { return this_table.__FCDORDER; } }
					/// <summary>
					/// Denotes the Defaults's FCDDELIM column with type integer(32) with labelkey='FCDDELIM'
					/// </summary>
					public DBI_Column FCDDELIM { get { return this_table.__FCDDELIM; } }
					/// <summary>
					/// Denotes the Defaults's FCDMFORM column with type integer(32) with labelkey='FCDMFORM'
					/// </summary>
					public DBI_Column FCDMFORM { get { return this_table.__FCDMFORM; } }
					/// <summary>
					/// Denotes the Defaults's FCTAMPM column with type bool with labelkey='FCTAMPM'
					/// </summary>
					public DBI_Column FCTAMPM { get { return this_table.__FCTAMPM; } }
					/// <summary>
					/// Denotes the Defaults's DBVERSION column with type string(maxlength 3, maxlines 0, trim) with labelkey='DBVERSION'
					/// </summary>
					public DBI_Column DBVERSION { get { return this_table.__DBVERSION; } }
					/// <summary>
					/// Denotes the Defaults's MINVERSION column with type string(maxlength 1, maxlines 0, trim) with labelkey='MINVERSION'
					/// </summary>
					public DBI_Column MINVERSION { get { return this_table.__MINVERSION; } }
					/// <summary>
					/// Denotes the Defaults's UPGRSTEP column with type string(maxlength 1, maxlines 0, trim) with labelkey='UPGRSTEP'
					/// </summary>
					public DBI_Column UPGRSTEP { get { return this_table.__UPGRSTEP; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Defaults()
					: base( "Defaults",
							delegate(DBI_Table tableSchema, IServer s) {
								return new DefaultsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 31, "Table 'Defaults' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__LGEND = Columns["LGEND"];
					System.Diagnostics.Debug.Assert(__LGEND != null, "Column 'LGEND' not found");
					__GFREQ = Columns["GFREQ"];
					System.Diagnostics.Debug.Assert(__GFREQ != null, "Column 'GFREQ' not found");
					__PHONEPREX = Columns["PHONEPREX"];
					System.Diagnostics.Debug.Assert(__PHONEPREX != null, "Column 'PHONEPREX' not found");
					__EDITPKEY = Columns["EDITPKEY"];
					System.Diagnostics.Debug.Assert(__EDITPKEY != null, "Column 'EDITPKEY' not found");
					__SERIAL = Columns["SERIAL"];
					System.Diagnostics.Debug.Assert(__SERIAL != null, "Column 'SERIAL' not found");
					__COMPANYNAM = Columns["COMPANYNAM"];
					System.Diagnostics.Debug.Assert(__COMPANYNAM != null, "Column 'COMPANYNAM' not found");
					__COMPANYADD = Columns["COMPANYADD"];
					System.Diagnostics.Debug.Assert(__COMPANYADD != null, "Column 'COMPANYADD' not found");
					__BILLADDR = Columns["BILLADDR"];
					System.Diagnostics.Debug.Assert(__BILLADDR != null, "Column 'BILLADDR' not found");
					__POCONTACT = Columns["POCONTACT"];
					System.Diagnostics.Debug.Assert(__POCONTACT != null, "Column 'POCONTACT' not found");
					__REINDEX = Columns["REINDEX"];
					System.Diagnostics.Debug.Assert(__REINDEX != null, "Column 'REINDEX' not found");
					__PRFORMAT = Columns["PRFORMAT"];
					System.Diagnostics.Debug.Assert(__PRFORMAT != null, "Column 'PRFORMAT' not found");
					__POFORMAT = Columns["POFORMAT"];
					System.Diagnostics.Debug.Assert(__POFORMAT != null, "Column 'POFORMAT' not found");
					__WRFORMAT = Columns["WRFORMAT"];
					System.Diagnostics.Debug.Assert(__WRFORMAT != null, "Column 'WRFORMAT' not found");
					__WOFORMAT = Columns["WOFORMAT"];
					System.Diagnostics.Debug.Assert(__WOFORMAT != null, "Column 'WOFORMAT' not found");
					__CURRSYM = Columns["CURRSYM"];
					System.Diagnostics.Debug.Assert(__CURRSYM != null, "Column 'CURRSYM' not found");
					__FRDATE = Columns["FRDATE"];
					System.Diagnostics.Debug.Assert(__FRDATE != null, "Column 'FRDATE' not found");
					__FRCPOS = Columns["FRCPOS"];
					System.Diagnostics.Debug.Assert(__FRCPOS != null, "Column 'FRCPOS' not found");
					__FRCNEG = Columns["FRCNEG"];
					System.Diagnostics.Debug.Assert(__FRCNEG != null, "Column 'FRCNEG' not found");
					__FRCDEC = Columns["FRCDEC"];
					System.Diagnostics.Debug.Assert(__FRCDEC != null, "Column 'FRCDEC' not found");
					__FRCGROUP = Columns["FRCGROUP"];
					System.Diagnostics.Debug.Assert(__FRCGROUP != null, "Column 'FRCGROUP' not found");
					__FRCGSIZE = Columns["FRCGSIZE"];
					System.Diagnostics.Debug.Assert(__FRCGSIZE != null, "Column 'FRCGSIZE' not found");
					__FRCLGSIZE = Columns["FRCLGSIZE"];
					System.Diagnostics.Debug.Assert(__FRCLGSIZE != null, "Column 'FRCLGSIZE' not found");
					__FCDORDER = Columns["FCDORDER"];
					System.Diagnostics.Debug.Assert(__FCDORDER != null, "Column 'FCDORDER' not found");
					__FCDDELIM = Columns["FCDDELIM"];
					System.Diagnostics.Debug.Assert(__FCDDELIM != null, "Column 'FCDDELIM' not found");
					__FCDMFORM = Columns["FCDMFORM"];
					System.Diagnostics.Debug.Assert(__FCDMFORM != null, "Column 'FCDMFORM' not found");
					__FCTAMPM = Columns["FCTAMPM"];
					System.Diagnostics.Debug.Assert(__FCTAMPM != null, "Column 'FCTAMPM' not found");
					__DBVERSION = Columns["DBVERSION"];
					System.Diagnostics.Debug.Assert(__DBVERSION != null, "Column 'DBVERSION' not found");
					__MINVERSION = Columns["MINVERSION"];
					System.Diagnostics.Debug.Assert(__MINVERSION != null, "Column 'MINVERSION' not found");
					__UPGRSTEP = Columns["UPGRSTEP"];
					System.Diagnostics.Debug.Assert(__UPGRSTEP != null, "Column 'UPGRSTEP' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - ArchivedSets table
			private DBI_ArchivedSets __ArchivedSets;

			/// <summary>
			/// Class to describe a ArchivedSets table
			/// </summary>
			public class DBI_ArchivedSets : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __CODE;
				private DBI_Column __BACKDATE;
				private DBI_Column __S_DATE;
				private DBI_Column __E_DATE;
				private DBI_Column __DESC;
				private DBI_Column __LZHFILE;
				private DBI_Column __DBVERSION;
				private DBI_Column __RESTORED;
				private DBI_Column __ARCHIVING;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_ArchivedSets this_table;
					public FAccessor( DBI_ArchivedSets this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the ArchivedSets's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the ArchivedSets's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the ArchivedSets's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the ArchivedSets's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the ArchivedSets's BACKDATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='BACKDATE'
					/// </summary>
					public DBI_Column BACKDATE { get { return this_table.__BACKDATE; } }
					/// <summary>
					/// Denotes the ArchivedSets's S_DATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='S_DATE'
					/// </summary>
					public DBI_Column S_DATE { get { return this_table.__S_DATE; } }
					/// <summary>
					/// Denotes the ArchivedSets's E_DATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='E_DATE'
					/// </summary>
					public DBI_Column E_DATE { get { return this_table.__E_DATE; } }
					/// <summary>
					/// Denotes the ArchivedSets's DESC column with type string(maxlength 50, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the ArchivedSets's LZHFILE column with type string(maxlength 15, maxlines 0, trim) with labelkey='LZHFILE'
					/// </summary>
					public DBI_Column LZHFILE { get { return this_table.__LZHFILE; } }
					/// <summary>
					/// Denotes the ArchivedSets's DBVERSION column with type string(maxlength 23, maxlines 0, trim) with labelkey='DBVERSION'
					/// </summary>
					public DBI_Column DBVERSION { get { return this_table.__DBVERSION; } }
					/// <summary>
					/// Denotes the ArchivedSets's RESTORED column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='RESTORED'
					/// </summary>
					public DBI_Column RESTORED { get { return this_table.__RESTORED; } }
					/// <summary>
					/// Denotes the ArchivedSets's ARCHIVING column with type bool with labelkey='ARCHIVING'
					/// </summary>
					public DBI_Column ARCHIVING { get { return this_table.__ARCHIVING; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_ArchivedSets()
					: base( "ArchivedSets",
							delegate(DBI_Table tableSchema, IServer s) {
								return new ArchivedSetsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 12, "Table 'ArchivedSets' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__BACKDATE = Columns["BACKDATE"];
					System.Diagnostics.Debug.Assert(__BACKDATE != null, "Column 'BACKDATE' not found");
					__S_DATE = Columns["S_DATE"];
					System.Diagnostics.Debug.Assert(__S_DATE != null, "Column 'S_DATE' not found");
					__E_DATE = Columns["E_DATE"];
					System.Diagnostics.Debug.Assert(__E_DATE != null, "Column 'E_DATE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__LZHFILE = Columns["LZHFILE"];
					System.Diagnostics.Debug.Assert(__LZHFILE != null, "Column 'LZHFILE' not found");
					__DBVERSION = Columns["DBVERSION"];
					System.Diagnostics.Debug.Assert(__DBVERSION != null, "Column 'DBVERSION' not found");
					__RESTORED = Columns["RESTORED"];
					System.Diagnostics.Debug.Assert(__RESTORED != null, "Column 'RESTORED' not found");
					__ARCHIVING = Columns["ARCHIVING"];
					System.Diagnostics.Debug.Assert(__ARCHIVING != null, "Column 'ARCHIVING' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Permissions table
			private DBI_Permissions __Permissions;

			/// <summary>
			/// Class to describe a Permissions table
			/// </summary>
			public class DBI_Permissions : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __NAME;
				private DBI_Column __PASSWORD;
				private DBI_Column __STATUS;
				private DBI_Column __L11;
				private DBI_Column __L12;
				private DBI_Column __L13;
				private DBI_Column __L14;
				private DBI_Column __L15;
				private DBI_Column __L16;
				private DBI_Column __L17;
				private DBI_Column __L18;
				private DBI_Column __L19;
				private DBI_Column __L21;
				private DBI_Column __L22;
				private DBI_Column __L23;
				private DBI_Column __L24;
				private DBI_Column __L25;
				private DBI_Column __L26;
				private DBI_Column __L27;
				private DBI_Column __L28;
				private DBI_Column __L29;
				private DBI_Column __L31;
				private DBI_Column __L32;
				private DBI_Column __L33;
				private DBI_Column __L34;
				private DBI_Column __L35;
				private DBI_Column __L36;
				private DBI_Column __L37;
				private DBI_Column __L38;
				private DBI_Column __L39;
				private DBI_Column __L41;
				private DBI_Column __L42;
				private DBI_Column __L43;
				private DBI_Column __L44;
				private DBI_Column __L45;
				private DBI_Column __L46;
				private DBI_Column __L47;
				private DBI_Column __L48;
				private DBI_Column __L49;
				private DBI_Column __L410;
				private DBI_Column __L51;
				private DBI_Column __L52;
				private DBI_Column __L53;
				private DBI_Column __L54;
				private DBI_Column __L55;
				private DBI_Column __L56;
				private DBI_Column __L57;
				private DBI_Column __L58;
				private DBI_Column __L59;
				private DBI_Column __L510;
				private DBI_Column __L511;
				private DBI_Column __L512;
				private DBI_Column __L513;
				private DBI_Column __L514;
				private DBI_Column __L515;
				private DBI_Column __L516;
				private DBI_Column __L517;
				private DBI_Column __L518;
				private DBI_Column __L519;
				private DBI_Column __L520;
				private DBI_Column __L521;
				private DBI_Column __L522;
				private DBI_Column __L523;
				private DBI_Column __L524;
				private DBI_Column __L525;
				private DBI_Column __L526;
				private DBI_Column __L527;
				private DBI_Column __L528;
				private DBI_Column __L529;
				private DBI_Column __L530;
				private DBI_Column __L61;
				private DBI_Column __L62;
				private DBI_Column __L63;
				private DBI_Column __L64;
				private DBI_Column __L65;
				private DBI_Column __L66;
				private DBI_Column __L67;
				private DBI_Column __L68;
				private DBI_Column __L69;
				private DBI_Column __L610;
				private DBI_Column __L611;
				private DBI_Column __L612;
				private DBI_Column __L613;
				private DBI_Column __L614;
				private DBI_Column __L615;
				private DBI_Column __L616;
				private DBI_Column __L617;
				private DBI_Column __L618;
				private DBI_Column __L619;
				private DBI_Column __L620;
				private DBI_Column __L621;
				private DBI_Column __L622;
				private DBI_Column __L623;
				private DBI_Column __L624;
				private DBI_Column __L625;
				private DBI_Column __L626;
				private DBI_Column __ADMIN1;
				private DBI_Column __ADMIN2;
				private DBI_Column __ADMIN3;
				private DBI_Column __ADMIN4;
				private DBI_Column __ADMIN5;
				private DBI_Column __ADMIN6;
				private DBI_Column __ADMIN7;
				private DBI_Column __ADMIN8;
				private DBI_Column __ADMIN9;
				private DBI_Column __ADMIN10;
				private DBI_Column __ADMIN11;
				private DBI_Column __ADMIN12;
				private DBI_Column __ADMIN13;
				private DBI_Column __ADMIN14;
				private DBI_Column __ADMIN15;
				private DBI_Column __ADMIN16;
				private DBI_Column __ADMIN17;
				private DBI_Column __ADMIN18;
				private DBI_Column __ADMIN19;
				private DBI_Column __ADMIN20;
				private DBI_Column __ADMIN21;
				private DBI_Column __ADMIN22;
				private DBI_Column __ADMIN23;
				private DBI_Column __ADMIN24;
				private DBI_Column __ADMIN25;
				private DBI_Column __L121;
				private DBI_Column __L122;
				private DBI_Column __L123;
				private DBI_Column __L124;
				private DBI_Column __L125;
				private DBI_Column __L126;
				private DBI_Column __L127;
				private DBI_Column __L128;
				private DBI_Column __L129;
				private DBI_Column __L130;
				private DBI_Column __L131;
				private DBI_Column __L132;
				private DBI_Column __L133;
				private DBI_Column __L134;
				private DBI_Column __L135;
				private DBI_Column __L136;
				private DBI_Column __L137;
				private DBI_Column __L138;
				private DBI_Column __L139;
				private DBI_Column __L140;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Permissions this_table;
					public FAccessor( DBI_Permissions this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Permissions's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Permissions's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Permissions's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the Permissions's NAME column with type string(maxlength 30, maxlines 0, trim) with labelkey='NAME'
					/// </summary>
					public DBI_Column NAME { get { return this_table.__NAME; } }
					/// <summary>
					/// Denotes the Permissions's PASSWORD column with type string(maxlength 10, maxlines 0, trim) with labelkey='PASSWORD'
					/// </summary>
					public DBI_Column PASSWORD { get { return this_table.__PASSWORD; } }
					/// <summary>
					/// Denotes the Permissions's STATUS column with type string(maxlength 1, maxlines 0, trim) with labelkey='STATUS'
					/// </summary>
					public DBI_Column STATUS { get { return this_table.__STATUS; } }
					/// <summary>
					/// Denotes the Permissions's L11 column with type bool with labelkey='L11'
					/// </summary>
					public DBI_Column L11 { get { return this_table.__L11; } }
					/// <summary>
					/// Denotes the Permissions's L12 column with type bool with labelkey='L12'
					/// </summary>
					public DBI_Column L12 { get { return this_table.__L12; } }
					/// <summary>
					/// Denotes the Permissions's L13 column with type bool with labelkey='L13'
					/// </summary>
					public DBI_Column L13 { get { return this_table.__L13; } }
					/// <summary>
					/// Denotes the Permissions's L14 column with type bool with labelkey='L14'
					/// </summary>
					public DBI_Column L14 { get { return this_table.__L14; } }
					/// <summary>
					/// Denotes the Permissions's L15 column with type bool with labelkey='L15'
					/// </summary>
					public DBI_Column L15 { get { return this_table.__L15; } }
					/// <summary>
					/// Denotes the Permissions's L16 column with type bool with labelkey='L16'
					/// </summary>
					public DBI_Column L16 { get { return this_table.__L16; } }
					/// <summary>
					/// Denotes the Permissions's L17 column with type bool with labelkey='L17'
					/// </summary>
					public DBI_Column L17 { get { return this_table.__L17; } }
					/// <summary>
					/// Denotes the Permissions's L18 column with type bool with labelkey='L18'
					/// </summary>
					public DBI_Column L18 { get { return this_table.__L18; } }
					/// <summary>
					/// Denotes the Permissions's L19 column with type bool with labelkey='L19'
					/// </summary>
					public DBI_Column L19 { get { return this_table.__L19; } }
					/// <summary>
					/// Denotes the Permissions's L21 column with type bool with labelkey='L21'
					/// </summary>
					public DBI_Column L21 { get { return this_table.__L21; } }
					/// <summary>
					/// Denotes the Permissions's L22 column with type bool with labelkey='L22'
					/// </summary>
					public DBI_Column L22 { get { return this_table.__L22; } }
					/// <summary>
					/// Denotes the Permissions's L23 column with type bool with labelkey='L23'
					/// </summary>
					public DBI_Column L23 { get { return this_table.__L23; } }
					/// <summary>
					/// Denotes the Permissions's L24 column with type bool with labelkey='L24'
					/// </summary>
					public DBI_Column L24 { get { return this_table.__L24; } }
					/// <summary>
					/// Denotes the Permissions's L25 column with type bool with labelkey='L25'
					/// </summary>
					public DBI_Column L25 { get { return this_table.__L25; } }
					/// <summary>
					/// Denotes the Permissions's L26 column with type bool with labelkey='L26'
					/// </summary>
					public DBI_Column L26 { get { return this_table.__L26; } }
					/// <summary>
					/// Denotes the Permissions's L27 column with type bool with labelkey='L27'
					/// </summary>
					public DBI_Column L27 { get { return this_table.__L27; } }
					/// <summary>
					/// Denotes the Permissions's L28 column with type bool with labelkey='L28'
					/// </summary>
					public DBI_Column L28 { get { return this_table.__L28; } }
					/// <summary>
					/// Denotes the Permissions's L29 column with type bool with labelkey='L29'
					/// </summary>
					public DBI_Column L29 { get { return this_table.__L29; } }
					/// <summary>
					/// Denotes the Permissions's L31 column with type bool with labelkey='L31'
					/// </summary>
					public DBI_Column L31 { get { return this_table.__L31; } }
					/// <summary>
					/// Denotes the Permissions's L32 column with type bool with labelkey='L32'
					/// </summary>
					public DBI_Column L32 { get { return this_table.__L32; } }
					/// <summary>
					/// Denotes the Permissions's L33 column with type bool with labelkey='L33'
					/// </summary>
					public DBI_Column L33 { get { return this_table.__L33; } }
					/// <summary>
					/// Denotes the Permissions's L34 column with type bool with labelkey='L34'
					/// </summary>
					public DBI_Column L34 { get { return this_table.__L34; } }
					/// <summary>
					/// Denotes the Permissions's L35 column with type bool with labelkey='L35'
					/// </summary>
					public DBI_Column L35 { get { return this_table.__L35; } }
					/// <summary>
					/// Denotes the Permissions's L36 column with type bool with labelkey='L36'
					/// </summary>
					public DBI_Column L36 { get { return this_table.__L36; } }
					/// <summary>
					/// Denotes the Permissions's L37 column with type bool with labelkey='L37'
					/// </summary>
					public DBI_Column L37 { get { return this_table.__L37; } }
					/// <summary>
					/// Denotes the Permissions's L38 column with type bool with labelkey='L38'
					/// </summary>
					public DBI_Column L38 { get { return this_table.__L38; } }
					/// <summary>
					/// Denotes the Permissions's L39 column with type bool with labelkey='L39'
					/// </summary>
					public DBI_Column L39 { get { return this_table.__L39; } }
					/// <summary>
					/// Denotes the Permissions's L41 column with type bool with labelkey='L41'
					/// </summary>
					public DBI_Column L41 { get { return this_table.__L41; } }
					/// <summary>
					/// Denotes the Permissions's L42 column with type bool with labelkey='L42'
					/// </summary>
					public DBI_Column L42 { get { return this_table.__L42; } }
					/// <summary>
					/// Denotes the Permissions's L43 column with type bool with labelkey='L43'
					/// </summary>
					public DBI_Column L43 { get { return this_table.__L43; } }
					/// <summary>
					/// Denotes the Permissions's L44 column with type bool with labelkey='L44'
					/// </summary>
					public DBI_Column L44 { get { return this_table.__L44; } }
					/// <summary>
					/// Denotes the Permissions's L45 column with type bool with labelkey='L45'
					/// </summary>
					public DBI_Column L45 { get { return this_table.__L45; } }
					/// <summary>
					/// Denotes the Permissions's L46 column with type bool with labelkey='L46'
					/// </summary>
					public DBI_Column L46 { get { return this_table.__L46; } }
					/// <summary>
					/// Denotes the Permissions's L47 column with type bool with labelkey='L47'
					/// </summary>
					public DBI_Column L47 { get { return this_table.__L47; } }
					/// <summary>
					/// Denotes the Permissions's L48 column with type bool with labelkey='L48'
					/// </summary>
					public DBI_Column L48 { get { return this_table.__L48; } }
					/// <summary>
					/// Denotes the Permissions's L49 column with type bool with labelkey='L49'
					/// </summary>
					public DBI_Column L49 { get { return this_table.__L49; } }
					/// <summary>
					/// Denotes the Permissions's L410 column with type bool with labelkey='L410'
					/// </summary>
					public DBI_Column L410 { get { return this_table.__L410; } }
					/// <summary>
					/// Denotes the Permissions's L51 column with type bool with labelkey='L51'
					/// </summary>
					public DBI_Column L51 { get { return this_table.__L51; } }
					/// <summary>
					/// Denotes the Permissions's L52 column with type bool with labelkey='L52'
					/// </summary>
					public DBI_Column L52 { get { return this_table.__L52; } }
					/// <summary>
					/// Denotes the Permissions's L53 column with type bool with labelkey='L53'
					/// </summary>
					public DBI_Column L53 { get { return this_table.__L53; } }
					/// <summary>
					/// Denotes the Permissions's L54 column with type bool with labelkey='L54'
					/// </summary>
					public DBI_Column L54 { get { return this_table.__L54; } }
					/// <summary>
					/// Denotes the Permissions's L55 column with type bool with labelkey='L55'
					/// </summary>
					public DBI_Column L55 { get { return this_table.__L55; } }
					/// <summary>
					/// Denotes the Permissions's L56 column with type bool with labelkey='L56'
					/// </summary>
					public DBI_Column L56 { get { return this_table.__L56; } }
					/// <summary>
					/// Denotes the Permissions's L57 column with type bool with labelkey='L57'
					/// </summary>
					public DBI_Column L57 { get { return this_table.__L57; } }
					/// <summary>
					/// Denotes the Permissions's L58 column with type bool with labelkey='L58'
					/// </summary>
					public DBI_Column L58 { get { return this_table.__L58; } }
					/// <summary>
					/// Denotes the Permissions's L59 column with type bool with labelkey='L59'
					/// </summary>
					public DBI_Column L59 { get { return this_table.__L59; } }
					/// <summary>
					/// Denotes the Permissions's L510 column with type bool with labelkey='L510'
					/// </summary>
					public DBI_Column L510 { get { return this_table.__L510; } }
					/// <summary>
					/// Denotes the Permissions's L511 column with type bool with labelkey='L511'
					/// </summary>
					public DBI_Column L511 { get { return this_table.__L511; } }
					/// <summary>
					/// Denotes the Permissions's L512 column with type bool with labelkey='L512'
					/// </summary>
					public DBI_Column L512 { get { return this_table.__L512; } }
					/// <summary>
					/// Denotes the Permissions's L513 column with type bool with labelkey='L513'
					/// </summary>
					public DBI_Column L513 { get { return this_table.__L513; } }
					/// <summary>
					/// Denotes the Permissions's L514 column with type bool with labelkey='L514'
					/// </summary>
					public DBI_Column L514 { get { return this_table.__L514; } }
					/// <summary>
					/// Denotes the Permissions's L515 column with type bool with labelkey='L515'
					/// </summary>
					public DBI_Column L515 { get { return this_table.__L515; } }
					/// <summary>
					/// Denotes the Permissions's L516 column with type bool with labelkey='L516'
					/// </summary>
					public DBI_Column L516 { get { return this_table.__L516; } }
					/// <summary>
					/// Denotes the Permissions's L517 column with type bool with labelkey='L517'
					/// </summary>
					public DBI_Column L517 { get { return this_table.__L517; } }
					/// <summary>
					/// Denotes the Permissions's L518 column with type bool with labelkey='L518'
					/// </summary>
					public DBI_Column L518 { get { return this_table.__L518; } }
					/// <summary>
					/// Denotes the Permissions's L519 column with type bool with labelkey='L519'
					/// </summary>
					public DBI_Column L519 { get { return this_table.__L519; } }
					/// <summary>
					/// Denotes the Permissions's L520 column with type bool with labelkey='L520'
					/// </summary>
					public DBI_Column L520 { get { return this_table.__L520; } }
					/// <summary>
					/// Denotes the Permissions's L521 column with type bool with labelkey='L521'
					/// </summary>
					public DBI_Column L521 { get { return this_table.__L521; } }
					/// <summary>
					/// Denotes the Permissions's L522 column with type bool with labelkey='L522'
					/// </summary>
					public DBI_Column L522 { get { return this_table.__L522; } }
					/// <summary>
					/// Denotes the Permissions's L523 column with type bool with labelkey='L523'
					/// </summary>
					public DBI_Column L523 { get { return this_table.__L523; } }
					/// <summary>
					/// Denotes the Permissions's L524 column with type bool with labelkey='L524'
					/// </summary>
					public DBI_Column L524 { get { return this_table.__L524; } }
					/// <summary>
					/// Denotes the Permissions's L525 column with type bool with labelkey='L525'
					/// </summary>
					public DBI_Column L525 { get { return this_table.__L525; } }
					/// <summary>
					/// Denotes the Permissions's L526 column with type bool with labelkey='L526'
					/// </summary>
					public DBI_Column L526 { get { return this_table.__L526; } }
					/// <summary>
					/// Denotes the Permissions's L527 column with type bool with labelkey='L527'
					/// </summary>
					public DBI_Column L527 { get { return this_table.__L527; } }
					/// <summary>
					/// Denotes the Permissions's L528 column with type bool with labelkey='L528'
					/// </summary>
					public DBI_Column L528 { get { return this_table.__L528; } }
					/// <summary>
					/// Denotes the Permissions's L529 column with type bool with labelkey='L529'
					/// </summary>
					public DBI_Column L529 { get { return this_table.__L529; } }
					/// <summary>
					/// Denotes the Permissions's L530 column with type bool with labelkey='L530'
					/// </summary>
					public DBI_Column L530 { get { return this_table.__L530; } }
					/// <summary>
					/// Denotes the Permissions's L61 column with type bool with labelkey='L61'
					/// </summary>
					public DBI_Column L61 { get { return this_table.__L61; } }
					/// <summary>
					/// Denotes the Permissions's L62 column with type bool with labelkey='L62'
					/// </summary>
					public DBI_Column L62 { get { return this_table.__L62; } }
					/// <summary>
					/// Denotes the Permissions's L63 column with type bool with labelkey='L63'
					/// </summary>
					public DBI_Column L63 { get { return this_table.__L63; } }
					/// <summary>
					/// Denotes the Permissions's L64 column with type bool with labelkey='L64'
					/// </summary>
					public DBI_Column L64 { get { return this_table.__L64; } }
					/// <summary>
					/// Denotes the Permissions's L65 column with type bool with labelkey='L65'
					/// </summary>
					public DBI_Column L65 { get { return this_table.__L65; } }
					/// <summary>
					/// Denotes the Permissions's L66 column with type bool with labelkey='L66'
					/// </summary>
					public DBI_Column L66 { get { return this_table.__L66; } }
					/// <summary>
					/// Denotes the Permissions's L67 column with type bool with labelkey='L67'
					/// </summary>
					public DBI_Column L67 { get { return this_table.__L67; } }
					/// <summary>
					/// Denotes the Permissions's L68 column with type bool with labelkey='L68'
					/// </summary>
					public DBI_Column L68 { get { return this_table.__L68; } }
					/// <summary>
					/// Denotes the Permissions's L69 column with type bool with labelkey='L69'
					/// </summary>
					public DBI_Column L69 { get { return this_table.__L69; } }
					/// <summary>
					/// Denotes the Permissions's L610 column with type bool with labelkey='L610'
					/// </summary>
					public DBI_Column L610 { get { return this_table.__L610; } }
					/// <summary>
					/// Denotes the Permissions's L611 column with type bool with labelkey='L611'
					/// </summary>
					public DBI_Column L611 { get { return this_table.__L611; } }
					/// <summary>
					/// Denotes the Permissions's L612 column with type bool with labelkey='L612'
					/// </summary>
					public DBI_Column L612 { get { return this_table.__L612; } }
					/// <summary>
					/// Denotes the Permissions's L613 column with type bool with labelkey='L613'
					/// </summary>
					public DBI_Column L613 { get { return this_table.__L613; } }
					/// <summary>
					/// Denotes the Permissions's L614 column with type bool with labelkey='L614'
					/// </summary>
					public DBI_Column L614 { get { return this_table.__L614; } }
					/// <summary>
					/// Denotes the Permissions's L615 column with type bool with labelkey='L615'
					/// </summary>
					public DBI_Column L615 { get { return this_table.__L615; } }
					/// <summary>
					/// Denotes the Permissions's L616 column with type bool with labelkey='L616'
					/// </summary>
					public DBI_Column L616 { get { return this_table.__L616; } }
					/// <summary>
					/// Denotes the Permissions's L617 column with type bool with labelkey='L617'
					/// </summary>
					public DBI_Column L617 { get { return this_table.__L617; } }
					/// <summary>
					/// Denotes the Permissions's L618 column with type bool with labelkey='L618'
					/// </summary>
					public DBI_Column L618 { get { return this_table.__L618; } }
					/// <summary>
					/// Denotes the Permissions's L619 column with type bool with labelkey='L619'
					/// </summary>
					public DBI_Column L619 { get { return this_table.__L619; } }
					/// <summary>
					/// Denotes the Permissions's L620 column with type bool with labelkey='L620'
					/// </summary>
					public DBI_Column L620 { get { return this_table.__L620; } }
					/// <summary>
					/// Denotes the Permissions's L621 column with type bool with labelkey='L621'
					/// </summary>
					public DBI_Column L621 { get { return this_table.__L621; } }
					/// <summary>
					/// Denotes the Permissions's L622 column with type bool with labelkey='L622'
					/// </summary>
					public DBI_Column L622 { get { return this_table.__L622; } }
					/// <summary>
					/// Denotes the Permissions's L623 column with type bool with labelkey='L623'
					/// </summary>
					public DBI_Column L623 { get { return this_table.__L623; } }
					/// <summary>
					/// Denotes the Permissions's L624 column with type bool with labelkey='L624'
					/// </summary>
					public DBI_Column L624 { get { return this_table.__L624; } }
					/// <summary>
					/// Denotes the Permissions's L625 column with type bool with labelkey='L625'
					/// </summary>
					public DBI_Column L625 { get { return this_table.__L625; } }
					/// <summary>
					/// Denotes the Permissions's L626 column with type bool with labelkey='L626'
					/// </summary>
					public DBI_Column L626 { get { return this_table.__L626; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN1 column with type bool with labelkey='ADMIN1'
					/// </summary>
					public DBI_Column ADMIN1 { get { return this_table.__ADMIN1; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN2 column with type bool with labelkey='ADMIN2'
					/// </summary>
					public DBI_Column ADMIN2 { get { return this_table.__ADMIN2; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN3 column with type bool with labelkey='ADMIN3'
					/// </summary>
					public DBI_Column ADMIN3 { get { return this_table.__ADMIN3; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN4 column with type bool with labelkey='ADMIN4'
					/// </summary>
					public DBI_Column ADMIN4 { get { return this_table.__ADMIN4; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN5 column with type bool with labelkey='ADMIN5'
					/// </summary>
					public DBI_Column ADMIN5 { get { return this_table.__ADMIN5; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN6 column with type bool with labelkey='ADMIN6'
					/// </summary>
					public DBI_Column ADMIN6 { get { return this_table.__ADMIN6; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN7 column with type bool with labelkey='ADMIN7'
					/// </summary>
					public DBI_Column ADMIN7 { get { return this_table.__ADMIN7; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN8 column with type bool with labelkey='ADMIN8'
					/// </summary>
					public DBI_Column ADMIN8 { get { return this_table.__ADMIN8; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN9 column with type bool with labelkey='ADMIN9'
					/// </summary>
					public DBI_Column ADMIN9 { get { return this_table.__ADMIN9; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN10 column with type bool with labelkey='ADMIN10'
					/// </summary>
					public DBI_Column ADMIN10 { get { return this_table.__ADMIN10; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN11 column with type bool with labelkey='ADMIN11'
					/// </summary>
					public DBI_Column ADMIN11 { get { return this_table.__ADMIN11; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN12 column with type bool with labelkey='ADMIN12'
					/// </summary>
					public DBI_Column ADMIN12 { get { return this_table.__ADMIN12; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN13 column with type bool with labelkey='ADMIN13'
					/// </summary>
					public DBI_Column ADMIN13 { get { return this_table.__ADMIN13; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN14 column with type bool with labelkey='ADMIN14'
					/// </summary>
					public DBI_Column ADMIN14 { get { return this_table.__ADMIN14; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN15 column with type bool with labelkey='ADMIN15'
					/// </summary>
					public DBI_Column ADMIN15 { get { return this_table.__ADMIN15; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN16 column with type bool with labelkey='ADMIN16'
					/// </summary>
					public DBI_Column ADMIN16 { get { return this_table.__ADMIN16; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN17 column with type bool with labelkey='ADMIN17'
					/// </summary>
					public DBI_Column ADMIN17 { get { return this_table.__ADMIN17; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN18 column with type bool with labelkey='ADMIN18'
					/// </summary>
					public DBI_Column ADMIN18 { get { return this_table.__ADMIN18; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN19 column with type bool with labelkey='ADMIN19'
					/// </summary>
					public DBI_Column ADMIN19 { get { return this_table.__ADMIN19; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN20 column with type bool with labelkey='ADMIN20'
					/// </summary>
					public DBI_Column ADMIN20 { get { return this_table.__ADMIN20; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN21 column with type bool with labelkey='ADMIN21'
					/// </summary>
					public DBI_Column ADMIN21 { get { return this_table.__ADMIN21; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN22 column with type bool with labelkey='ADMIN22'
					/// </summary>
					public DBI_Column ADMIN22 { get { return this_table.__ADMIN22; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN23 column with type bool with labelkey='ADMIN23'
					/// </summary>
					public DBI_Column ADMIN23 { get { return this_table.__ADMIN23; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN24 column with type bool with labelkey='ADMIN24'
					/// </summary>
					public DBI_Column ADMIN24 { get { return this_table.__ADMIN24; } }
					/// <summary>
					/// Denotes the Permissions's ADMIN25 column with type bool with labelkey='ADMIN25'
					/// </summary>
					public DBI_Column ADMIN25 { get { return this_table.__ADMIN25; } }
					/// <summary>
					/// Denotes the Permissions's L121 column with type bool with labelkey='L121'
					/// </summary>
					public DBI_Column L121 { get { return this_table.__L121; } }
					/// <summary>
					/// Denotes the Permissions's L122 column with type bool with labelkey='L122'
					/// </summary>
					public DBI_Column L122 { get { return this_table.__L122; } }
					/// <summary>
					/// Denotes the Permissions's L123 column with type bool with labelkey='L123'
					/// </summary>
					public DBI_Column L123 { get { return this_table.__L123; } }
					/// <summary>
					/// Denotes the Permissions's L124 column with type bool with labelkey='L124'
					/// </summary>
					public DBI_Column L124 { get { return this_table.__L124; } }
					/// <summary>
					/// Denotes the Permissions's L125 column with type bool with labelkey='L125'
					/// </summary>
					public DBI_Column L125 { get { return this_table.__L125; } }
					/// <summary>
					/// Denotes the Permissions's L126 column with type bool with labelkey='L126'
					/// </summary>
					public DBI_Column L126 { get { return this_table.__L126; } }
					/// <summary>
					/// Denotes the Permissions's L127 column with type bool with labelkey='L127'
					/// </summary>
					public DBI_Column L127 { get { return this_table.__L127; } }
					/// <summary>
					/// Denotes the Permissions's L128 column with type bool with labelkey='L128'
					/// </summary>
					public DBI_Column L128 { get { return this_table.__L128; } }
					/// <summary>
					/// Denotes the Permissions's L129 column with type bool with labelkey='L129'
					/// </summary>
					public DBI_Column L129 { get { return this_table.__L129; } }
					/// <summary>
					/// Denotes the Permissions's L130 column with type bool with labelkey='L130'
					/// </summary>
					public DBI_Column L130 { get { return this_table.__L130; } }
					/// <summary>
					/// Denotes the Permissions's L131 column with type bool with labelkey='L131'
					/// </summary>
					public DBI_Column L131 { get { return this_table.__L131; } }
					/// <summary>
					/// Denotes the Permissions's L132 column with type bool with labelkey='L132'
					/// </summary>
					public DBI_Column L132 { get { return this_table.__L132; } }
					/// <summary>
					/// Denotes the Permissions's L133 column with type bool with labelkey='L133'
					/// </summary>
					public DBI_Column L133 { get { return this_table.__L133; } }
					/// <summary>
					/// Denotes the Permissions's L134 column with type bool with labelkey='L134'
					/// </summary>
					public DBI_Column L134 { get { return this_table.__L134; } }
					/// <summary>
					/// Denotes the Permissions's L135 column with type bool with labelkey='L135'
					/// </summary>
					public DBI_Column L135 { get { return this_table.__L135; } }
					/// <summary>
					/// Denotes the Permissions's L136 column with type bool with labelkey='L136'
					/// </summary>
					public DBI_Column L136 { get { return this_table.__L136; } }
					/// <summary>
					/// Denotes the Permissions's L137 column with type bool with labelkey='L137'
					/// </summary>
					public DBI_Column L137 { get { return this_table.__L137; } }
					/// <summary>
					/// Denotes the Permissions's L138 column with type bool with labelkey='L138'
					/// </summary>
					public DBI_Column L138 { get { return this_table.__L138; } }
					/// <summary>
					/// Denotes the Permissions's L139 column with type bool with labelkey='L139'
					/// </summary>
					public DBI_Column L139 { get { return this_table.__L139; } }
					/// <summary>
					/// Denotes the Permissions's L140 column with type bool with labelkey='L140'
					/// </summary>
					public DBI_Column L140 { get { return this_table.__L140; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Permissions()
					: base( "Permissions",
							delegate(DBI_Table tableSchema, IServer s) {
								return new PermissionsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 144, "Table 'Permissions' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__NAME = Columns["NAME"];
					System.Diagnostics.Debug.Assert(__NAME != null, "Column 'NAME' not found");
					__PASSWORD = Columns["PASSWORD"];
					System.Diagnostics.Debug.Assert(__PASSWORD != null, "Column 'PASSWORD' not found");
					__STATUS = Columns["STATUS"];
					System.Diagnostics.Debug.Assert(__STATUS != null, "Column 'STATUS' not found");
					__L11 = Columns["L11"];
					System.Diagnostics.Debug.Assert(__L11 != null, "Column 'L11' not found");
					__L12 = Columns["L12"];
					System.Diagnostics.Debug.Assert(__L12 != null, "Column 'L12' not found");
					__L13 = Columns["L13"];
					System.Diagnostics.Debug.Assert(__L13 != null, "Column 'L13' not found");
					__L14 = Columns["L14"];
					System.Diagnostics.Debug.Assert(__L14 != null, "Column 'L14' not found");
					__L15 = Columns["L15"];
					System.Diagnostics.Debug.Assert(__L15 != null, "Column 'L15' not found");
					__L16 = Columns["L16"];
					System.Diagnostics.Debug.Assert(__L16 != null, "Column 'L16' not found");
					__L17 = Columns["L17"];
					System.Diagnostics.Debug.Assert(__L17 != null, "Column 'L17' not found");
					__L18 = Columns["L18"];
					System.Diagnostics.Debug.Assert(__L18 != null, "Column 'L18' not found");
					__L19 = Columns["L19"];
					System.Diagnostics.Debug.Assert(__L19 != null, "Column 'L19' not found");
					__L21 = Columns["L21"];
					System.Diagnostics.Debug.Assert(__L21 != null, "Column 'L21' not found");
					__L22 = Columns["L22"];
					System.Diagnostics.Debug.Assert(__L22 != null, "Column 'L22' not found");
					__L23 = Columns["L23"];
					System.Diagnostics.Debug.Assert(__L23 != null, "Column 'L23' not found");
					__L24 = Columns["L24"];
					System.Diagnostics.Debug.Assert(__L24 != null, "Column 'L24' not found");
					__L25 = Columns["L25"];
					System.Diagnostics.Debug.Assert(__L25 != null, "Column 'L25' not found");
					__L26 = Columns["L26"];
					System.Diagnostics.Debug.Assert(__L26 != null, "Column 'L26' not found");
					__L27 = Columns["L27"];
					System.Diagnostics.Debug.Assert(__L27 != null, "Column 'L27' not found");
					__L28 = Columns["L28"];
					System.Diagnostics.Debug.Assert(__L28 != null, "Column 'L28' not found");
					__L29 = Columns["L29"];
					System.Diagnostics.Debug.Assert(__L29 != null, "Column 'L29' not found");
					__L31 = Columns["L31"];
					System.Diagnostics.Debug.Assert(__L31 != null, "Column 'L31' not found");
					__L32 = Columns["L32"];
					System.Diagnostics.Debug.Assert(__L32 != null, "Column 'L32' not found");
					__L33 = Columns["L33"];
					System.Diagnostics.Debug.Assert(__L33 != null, "Column 'L33' not found");
					__L34 = Columns["L34"];
					System.Diagnostics.Debug.Assert(__L34 != null, "Column 'L34' not found");
					__L35 = Columns["L35"];
					System.Diagnostics.Debug.Assert(__L35 != null, "Column 'L35' not found");
					__L36 = Columns["L36"];
					System.Diagnostics.Debug.Assert(__L36 != null, "Column 'L36' not found");
					__L37 = Columns["L37"];
					System.Diagnostics.Debug.Assert(__L37 != null, "Column 'L37' not found");
					__L38 = Columns["L38"];
					System.Diagnostics.Debug.Assert(__L38 != null, "Column 'L38' not found");
					__L39 = Columns["L39"];
					System.Diagnostics.Debug.Assert(__L39 != null, "Column 'L39' not found");
					__L41 = Columns["L41"];
					System.Diagnostics.Debug.Assert(__L41 != null, "Column 'L41' not found");
					__L42 = Columns["L42"];
					System.Diagnostics.Debug.Assert(__L42 != null, "Column 'L42' not found");
					__L43 = Columns["L43"];
					System.Diagnostics.Debug.Assert(__L43 != null, "Column 'L43' not found");
					__L44 = Columns["L44"];
					System.Diagnostics.Debug.Assert(__L44 != null, "Column 'L44' not found");
					__L45 = Columns["L45"];
					System.Diagnostics.Debug.Assert(__L45 != null, "Column 'L45' not found");
					__L46 = Columns["L46"];
					System.Diagnostics.Debug.Assert(__L46 != null, "Column 'L46' not found");
					__L47 = Columns["L47"];
					System.Diagnostics.Debug.Assert(__L47 != null, "Column 'L47' not found");
					__L48 = Columns["L48"];
					System.Diagnostics.Debug.Assert(__L48 != null, "Column 'L48' not found");
					__L49 = Columns["L49"];
					System.Diagnostics.Debug.Assert(__L49 != null, "Column 'L49' not found");
					__L410 = Columns["L410"];
					System.Diagnostics.Debug.Assert(__L410 != null, "Column 'L410' not found");
					__L51 = Columns["L51"];
					System.Diagnostics.Debug.Assert(__L51 != null, "Column 'L51' not found");
					__L52 = Columns["L52"];
					System.Diagnostics.Debug.Assert(__L52 != null, "Column 'L52' not found");
					__L53 = Columns["L53"];
					System.Diagnostics.Debug.Assert(__L53 != null, "Column 'L53' not found");
					__L54 = Columns["L54"];
					System.Diagnostics.Debug.Assert(__L54 != null, "Column 'L54' not found");
					__L55 = Columns["L55"];
					System.Diagnostics.Debug.Assert(__L55 != null, "Column 'L55' not found");
					__L56 = Columns["L56"];
					System.Diagnostics.Debug.Assert(__L56 != null, "Column 'L56' not found");
					__L57 = Columns["L57"];
					System.Diagnostics.Debug.Assert(__L57 != null, "Column 'L57' not found");
					__L58 = Columns["L58"];
					System.Diagnostics.Debug.Assert(__L58 != null, "Column 'L58' not found");
					__L59 = Columns["L59"];
					System.Diagnostics.Debug.Assert(__L59 != null, "Column 'L59' not found");
					__L510 = Columns["L510"];
					System.Diagnostics.Debug.Assert(__L510 != null, "Column 'L510' not found");
					__L511 = Columns["L511"];
					System.Diagnostics.Debug.Assert(__L511 != null, "Column 'L511' not found");
					__L512 = Columns["L512"];
					System.Diagnostics.Debug.Assert(__L512 != null, "Column 'L512' not found");
					__L513 = Columns["L513"];
					System.Diagnostics.Debug.Assert(__L513 != null, "Column 'L513' not found");
					__L514 = Columns["L514"];
					System.Diagnostics.Debug.Assert(__L514 != null, "Column 'L514' not found");
					__L515 = Columns["L515"];
					System.Diagnostics.Debug.Assert(__L515 != null, "Column 'L515' not found");
					__L516 = Columns["L516"];
					System.Diagnostics.Debug.Assert(__L516 != null, "Column 'L516' not found");
					__L517 = Columns["L517"];
					System.Diagnostics.Debug.Assert(__L517 != null, "Column 'L517' not found");
					__L518 = Columns["L518"];
					System.Diagnostics.Debug.Assert(__L518 != null, "Column 'L518' not found");
					__L519 = Columns["L519"];
					System.Diagnostics.Debug.Assert(__L519 != null, "Column 'L519' not found");
					__L520 = Columns["L520"];
					System.Diagnostics.Debug.Assert(__L520 != null, "Column 'L520' not found");
					__L521 = Columns["L521"];
					System.Diagnostics.Debug.Assert(__L521 != null, "Column 'L521' not found");
					__L522 = Columns["L522"];
					System.Diagnostics.Debug.Assert(__L522 != null, "Column 'L522' not found");
					__L523 = Columns["L523"];
					System.Diagnostics.Debug.Assert(__L523 != null, "Column 'L523' not found");
					__L524 = Columns["L524"];
					System.Diagnostics.Debug.Assert(__L524 != null, "Column 'L524' not found");
					__L525 = Columns["L525"];
					System.Diagnostics.Debug.Assert(__L525 != null, "Column 'L525' not found");
					__L526 = Columns["L526"];
					System.Diagnostics.Debug.Assert(__L526 != null, "Column 'L526' not found");
					__L527 = Columns["L527"];
					System.Diagnostics.Debug.Assert(__L527 != null, "Column 'L527' not found");
					__L528 = Columns["L528"];
					System.Diagnostics.Debug.Assert(__L528 != null, "Column 'L528' not found");
					__L529 = Columns["L529"];
					System.Diagnostics.Debug.Assert(__L529 != null, "Column 'L529' not found");
					__L530 = Columns["L530"];
					System.Diagnostics.Debug.Assert(__L530 != null, "Column 'L530' not found");
					__L61 = Columns["L61"];
					System.Diagnostics.Debug.Assert(__L61 != null, "Column 'L61' not found");
					__L62 = Columns["L62"];
					System.Diagnostics.Debug.Assert(__L62 != null, "Column 'L62' not found");
					__L63 = Columns["L63"];
					System.Diagnostics.Debug.Assert(__L63 != null, "Column 'L63' not found");
					__L64 = Columns["L64"];
					System.Diagnostics.Debug.Assert(__L64 != null, "Column 'L64' not found");
					__L65 = Columns["L65"];
					System.Diagnostics.Debug.Assert(__L65 != null, "Column 'L65' not found");
					__L66 = Columns["L66"];
					System.Diagnostics.Debug.Assert(__L66 != null, "Column 'L66' not found");
					__L67 = Columns["L67"];
					System.Diagnostics.Debug.Assert(__L67 != null, "Column 'L67' not found");
					__L68 = Columns["L68"];
					System.Diagnostics.Debug.Assert(__L68 != null, "Column 'L68' not found");
					__L69 = Columns["L69"];
					System.Diagnostics.Debug.Assert(__L69 != null, "Column 'L69' not found");
					__L610 = Columns["L610"];
					System.Diagnostics.Debug.Assert(__L610 != null, "Column 'L610' not found");
					__L611 = Columns["L611"];
					System.Diagnostics.Debug.Assert(__L611 != null, "Column 'L611' not found");
					__L612 = Columns["L612"];
					System.Diagnostics.Debug.Assert(__L612 != null, "Column 'L612' not found");
					__L613 = Columns["L613"];
					System.Diagnostics.Debug.Assert(__L613 != null, "Column 'L613' not found");
					__L614 = Columns["L614"];
					System.Diagnostics.Debug.Assert(__L614 != null, "Column 'L614' not found");
					__L615 = Columns["L615"];
					System.Diagnostics.Debug.Assert(__L615 != null, "Column 'L615' not found");
					__L616 = Columns["L616"];
					System.Diagnostics.Debug.Assert(__L616 != null, "Column 'L616' not found");
					__L617 = Columns["L617"];
					System.Diagnostics.Debug.Assert(__L617 != null, "Column 'L617' not found");
					__L618 = Columns["L618"];
					System.Diagnostics.Debug.Assert(__L618 != null, "Column 'L618' not found");
					__L619 = Columns["L619"];
					System.Diagnostics.Debug.Assert(__L619 != null, "Column 'L619' not found");
					__L620 = Columns["L620"];
					System.Diagnostics.Debug.Assert(__L620 != null, "Column 'L620' not found");
					__L621 = Columns["L621"];
					System.Diagnostics.Debug.Assert(__L621 != null, "Column 'L621' not found");
					__L622 = Columns["L622"];
					System.Diagnostics.Debug.Assert(__L622 != null, "Column 'L622' not found");
					__L623 = Columns["L623"];
					System.Diagnostics.Debug.Assert(__L623 != null, "Column 'L623' not found");
					__L624 = Columns["L624"];
					System.Diagnostics.Debug.Assert(__L624 != null, "Column 'L624' not found");
					__L625 = Columns["L625"];
					System.Diagnostics.Debug.Assert(__L625 != null, "Column 'L625' not found");
					__L626 = Columns["L626"];
					System.Diagnostics.Debug.Assert(__L626 != null, "Column 'L626' not found");
					__ADMIN1 = Columns["ADMIN1"];
					System.Diagnostics.Debug.Assert(__ADMIN1 != null, "Column 'ADMIN1' not found");
					__ADMIN2 = Columns["ADMIN2"];
					System.Diagnostics.Debug.Assert(__ADMIN2 != null, "Column 'ADMIN2' not found");
					__ADMIN3 = Columns["ADMIN3"];
					System.Diagnostics.Debug.Assert(__ADMIN3 != null, "Column 'ADMIN3' not found");
					__ADMIN4 = Columns["ADMIN4"];
					System.Diagnostics.Debug.Assert(__ADMIN4 != null, "Column 'ADMIN4' not found");
					__ADMIN5 = Columns["ADMIN5"];
					System.Diagnostics.Debug.Assert(__ADMIN5 != null, "Column 'ADMIN5' not found");
					__ADMIN6 = Columns["ADMIN6"];
					System.Diagnostics.Debug.Assert(__ADMIN6 != null, "Column 'ADMIN6' not found");
					__ADMIN7 = Columns["ADMIN7"];
					System.Diagnostics.Debug.Assert(__ADMIN7 != null, "Column 'ADMIN7' not found");
					__ADMIN8 = Columns["ADMIN8"];
					System.Diagnostics.Debug.Assert(__ADMIN8 != null, "Column 'ADMIN8' not found");
					__ADMIN9 = Columns["ADMIN9"];
					System.Diagnostics.Debug.Assert(__ADMIN9 != null, "Column 'ADMIN9' not found");
					__ADMIN10 = Columns["ADMIN10"];
					System.Diagnostics.Debug.Assert(__ADMIN10 != null, "Column 'ADMIN10' not found");
					__ADMIN11 = Columns["ADMIN11"];
					System.Diagnostics.Debug.Assert(__ADMIN11 != null, "Column 'ADMIN11' not found");
					__ADMIN12 = Columns["ADMIN12"];
					System.Diagnostics.Debug.Assert(__ADMIN12 != null, "Column 'ADMIN12' not found");
					__ADMIN13 = Columns["ADMIN13"];
					System.Diagnostics.Debug.Assert(__ADMIN13 != null, "Column 'ADMIN13' not found");
					__ADMIN14 = Columns["ADMIN14"];
					System.Diagnostics.Debug.Assert(__ADMIN14 != null, "Column 'ADMIN14' not found");
					__ADMIN15 = Columns["ADMIN15"];
					System.Diagnostics.Debug.Assert(__ADMIN15 != null, "Column 'ADMIN15' not found");
					__ADMIN16 = Columns["ADMIN16"];
					System.Diagnostics.Debug.Assert(__ADMIN16 != null, "Column 'ADMIN16' not found");
					__ADMIN17 = Columns["ADMIN17"];
					System.Diagnostics.Debug.Assert(__ADMIN17 != null, "Column 'ADMIN17' not found");
					__ADMIN18 = Columns["ADMIN18"];
					System.Diagnostics.Debug.Assert(__ADMIN18 != null, "Column 'ADMIN18' not found");
					__ADMIN19 = Columns["ADMIN19"];
					System.Diagnostics.Debug.Assert(__ADMIN19 != null, "Column 'ADMIN19' not found");
					__ADMIN20 = Columns["ADMIN20"];
					System.Diagnostics.Debug.Assert(__ADMIN20 != null, "Column 'ADMIN20' not found");
					__ADMIN21 = Columns["ADMIN21"];
					System.Diagnostics.Debug.Assert(__ADMIN21 != null, "Column 'ADMIN21' not found");
					__ADMIN22 = Columns["ADMIN22"];
					System.Diagnostics.Debug.Assert(__ADMIN22 != null, "Column 'ADMIN22' not found");
					__ADMIN23 = Columns["ADMIN23"];
					System.Diagnostics.Debug.Assert(__ADMIN23 != null, "Column 'ADMIN23' not found");
					__ADMIN24 = Columns["ADMIN24"];
					System.Diagnostics.Debug.Assert(__ADMIN24 != null, "Column 'ADMIN24' not found");
					__ADMIN25 = Columns["ADMIN25"];
					System.Diagnostics.Debug.Assert(__ADMIN25 != null, "Column 'ADMIN25' not found");
					__L121 = Columns["L121"];
					System.Diagnostics.Debug.Assert(__L121 != null, "Column 'L121' not found");
					__L122 = Columns["L122"];
					System.Diagnostics.Debug.Assert(__L122 != null, "Column 'L122' not found");
					__L123 = Columns["L123"];
					System.Diagnostics.Debug.Assert(__L123 != null, "Column 'L123' not found");
					__L124 = Columns["L124"];
					System.Diagnostics.Debug.Assert(__L124 != null, "Column 'L124' not found");
					__L125 = Columns["L125"];
					System.Diagnostics.Debug.Assert(__L125 != null, "Column 'L125' not found");
					__L126 = Columns["L126"];
					System.Diagnostics.Debug.Assert(__L126 != null, "Column 'L126' not found");
					__L127 = Columns["L127"];
					System.Diagnostics.Debug.Assert(__L127 != null, "Column 'L127' not found");
					__L128 = Columns["L128"];
					System.Diagnostics.Debug.Assert(__L128 != null, "Column 'L128' not found");
					__L129 = Columns["L129"];
					System.Diagnostics.Debug.Assert(__L129 != null, "Column 'L129' not found");
					__L130 = Columns["L130"];
					System.Diagnostics.Debug.Assert(__L130 != null, "Column 'L130' not found");
					__L131 = Columns["L131"];
					System.Diagnostics.Debug.Assert(__L131 != null, "Column 'L131' not found");
					__L132 = Columns["L132"];
					System.Diagnostics.Debug.Assert(__L132 != null, "Column 'L132' not found");
					__L133 = Columns["L133"];
					System.Diagnostics.Debug.Assert(__L133 != null, "Column 'L133' not found");
					__L134 = Columns["L134"];
					System.Diagnostics.Debug.Assert(__L134 != null, "Column 'L134' not found");
					__L135 = Columns["L135"];
					System.Diagnostics.Debug.Assert(__L135 != null, "Column 'L135' not found");
					__L136 = Columns["L136"];
					System.Diagnostics.Debug.Assert(__L136 != null, "Column 'L136' not found");
					__L137 = Columns["L137"];
					System.Diagnostics.Debug.Assert(__L137 != null, "Column 'L137' not found");
					__L138 = Columns["L138"];
					System.Diagnostics.Debug.Assert(__L138 != null, "Column 'L138' not found");
					__L139 = Columns["L139"];
					System.Diagnostics.Debug.Assert(__L139 != null, "Column 'L139' not found");
					__L140 = Columns["L140"];
					System.Diagnostics.Debug.Assert(__L140 != null, "Column 'L140' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - EditPrograms table
			private DBI_EditPrograms __EditPrograms;

			/// <summary>
			/// Class to describe a EditPrograms table
			/// </summary>
			public class DBI_EditPrograms : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __PRONAME;
				private DBI_Column __VIEWCMD;
				private DBI_Column __PRINTCMD;
				private DBI_Column __STARTUP;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_EditPrograms this_table;
					public FAccessor( DBI_EditPrograms this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the EditPrograms's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the EditPrograms's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the EditPrograms's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the EditPrograms's PRONAME column with type string(maxlength 50, maxlines 0, trim) with labelkey='PRONAME'
					/// </summary>
					public DBI_Column PRONAME { get { return this_table.__PRONAME; } }
					/// <summary>
					/// Denotes the EditPrograms's VIEWCMD column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='VIEWCMD'
					/// </summary>
					public DBI_Column VIEWCMD { get { return this_table.__VIEWCMD; } }
					/// <summary>
					/// Denotes the EditPrograms's PRINTCMD column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='PRINTCMD'
					/// </summary>
					public DBI_Column PRINTCMD { get { return this_table.__PRINTCMD; } }
					/// <summary>
					/// Denotes the EditPrograms's STARTUP column with type string(maxlength 1, maxlines 0, trim) with labelkey='STARTUP'
					/// </summary>
					public DBI_Column STARTUP { get { return this_table.__STARTUP; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_EditPrograms()
					: base( "EditPrograms",
							delegate(DBI_Table tableSchema, IServer s) {
								return new EditProgramsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 7, "Table 'EditPrograms' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__PRONAME = Columns["PRONAME"];
					System.Diagnostics.Debug.Assert(__PRONAME != null, "Column 'PRONAME' not found");
					__VIEWCMD = Columns["VIEWCMD"];
					System.Diagnostics.Debug.Assert(__VIEWCMD != null, "Column 'VIEWCMD' not found");
					__PRINTCMD = Columns["PRINTCMD"];
					System.Diagnostics.Debug.Assert(__PRINTCMD != null, "Column 'PRINTCMD' not found");
					__STARTUP = Columns["STARTUP"];
					System.Diagnostics.Debug.Assert(__STARTUP != null, "Column 'STARTUP' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Settings table
			private DBI_Settings __Settings;

			/// <summary>
			/// Class to describe a Settings table
			/// </summary>
			public class DBI_Settings : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __IDD;
				private DBI_Column __IDC;
				private DBI_Column __ORIGINATOR;
				private DBI_Column __VALUE;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Settings this_table;
					public FAccessor( DBI_Settings this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Settings's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Settings's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Settings's IDD column with type string(maxlength 32, maxlines 0, trim) with labelkey='IDD'
					/// </summary>
					public DBI_Column IDD { get { return this_table.__IDD; } }
					/// <summary>
					/// Denotes the Settings's IDC column with type string(maxlength 32, maxlines 0, trim) with labelkey='IDC'
					/// </summary>
					public DBI_Column IDC { get { return this_table.__IDC; } }
					/// <summary>
					/// Denotes the Settings's ORIGINATOR column with type integer(32) with labelkey='ORIGINATOR'
					/// </summary>
					public DBI_Column ORIGINATOR { get { return this_table.__ORIGINATOR; } }
					/// <summary>
					/// Denotes the Settings's VALUE column with type string(maxlength 64, maxlines 0, trim) with labelkey='VALUE'
					/// </summary>
					public DBI_Column VALUE { get { return this_table.__VALUE; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Settings()
					: base( "Settings",
							delegate(DBI_Table tableSchema, IServer s) {
								return new SettingsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 6, "Table 'Settings' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__IDD = Columns["IDD"];
					System.Diagnostics.Debug.Assert(__IDD != null, "Column 'IDD' not found");
					__IDC = Columns["IDC"];
					System.Diagnostics.Debug.Assert(__IDC != null, "Column 'IDC' not found");
					__ORIGINATOR = Columns["ORIGINATOR"];
					System.Diagnostics.Debug.Assert(__ORIGINATOR != null, "Column 'ORIGINATOR' not found");
					__VALUE = Columns["VALUE"];
					System.Diagnostics.Debug.Assert(__VALUE != null, "Column 'VALUE' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - AccessCodes table
			private DBI_AccessCodes __AccessCodes;

			/// <summary>
			/// Class to describe a AccessCodes table
			/// </summary>
			public class DBI_AccessCodes : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_AccessCodes this_table;
					public FAccessor( DBI_AccessCodes this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the AccessCodes's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the AccessCodes's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the AccessCodes's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the AccessCodes's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_AccessCodes()
					: base( "AccessCodes",
							delegate(DBI_Table tableSchema, IServer s) {
								return new AccessCodesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'AccessCodes' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Adjustments table
			private DBI_Adjustments __Adjustments;

			/// <summary>
			/// Class to describe a Adjustments table
			/// </summary>
			public class DBI_Adjustments : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Adjustments this_table;
					public FAccessor( DBI_Adjustments this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Adjustments's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Adjustments's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Adjustments's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Adjustments's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Adjustments()
					: base( "Adjustments",
							delegate(DBI_Table tableSchema, IServer s) {
								return new AdjustmentsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'Adjustments' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - AssetCodes table
			private DBI_AssetCodes __AssetCodes;

			/// <summary>
			/// Class to describe a AssetCodes table
			/// </summary>
			public class DBI_AssetCodes : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_AssetCodes this_table;
					public FAccessor( DBI_AssetCodes this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the AssetCodes's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the AssetCodes's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the AssetCodes's CODE column with type string(maxlength 15, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the AssetCodes's DESC column with type string(maxlength 40, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_AssetCodes()
					: base( "AssetCodes",
							delegate(DBI_Table tableSchema, IServer s) {
								return new AssetCodesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'AssetCodes' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Buildings table
			private DBI_Buildings __Buildings;

			/// <summary>
			/// Class to describe a Buildings table
			/// </summary>
			public class DBI_Buildings : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				private DBI_Column __ADDRESS1;
				private DBI_Column __ADDRESS2;
				private DBI_Column __CITY;
				private DBI_Column __TERRITORY;
				private DBI_Column __COUNTRY;
				private DBI_Column __PCODE;
				private DBI_Column __HIDDEN;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Buildings this_table;
					public FAccessor( DBI_Buildings this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Buildings's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Buildings's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Buildings's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the Buildings's CODE column with type string(maxlength 15, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Buildings's DESC column with type string(maxlength 50, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the Buildings's ADDRESS1 column with type string(maxlength 30, maxlines 0, trim) with labelkey='ADDRESS1'
					/// </summary>
					public DBI_Column ADDRESS1 { get { return this_table.__ADDRESS1; } }
					/// <summary>
					/// Denotes the Buildings's ADDRESS2 column with type string(maxlength 30, maxlines 0, trim) with labelkey='ADDRESS2'
					/// </summary>
					public DBI_Column ADDRESS2 { get { return this_table.__ADDRESS2; } }
					/// <summary>
					/// Denotes the Buildings's CITY column with type string(maxlength 30, maxlines 0, trim) with labelkey='CITY'
					/// </summary>
					public DBI_Column CITY { get { return this_table.__CITY; } }
					/// <summary>
					/// Denotes the Buildings's TERRITORY column with type string(maxlength 20, maxlines 0, trim) with labelkey='TERRITORY'
					/// </summary>
					public DBI_Column TERRITORY { get { return this_table.__TERRITORY; } }
					/// <summary>
					/// Denotes the Buildings's COUNTRY column with type string(maxlength 20, maxlines 0, trim) with labelkey='COUNTRY'
					/// </summary>
					public DBI_Column COUNTRY { get { return this_table.__COUNTRY; } }
					/// <summary>
					/// Denotes the Buildings's PCODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='PCODE'
					/// </summary>
					public DBI_Column PCODE { get { return this_table.__PCODE; } }
					/// <summary>
					/// Denotes the Buildings's HIDDEN column with type bool with labelkey='HIDDEN'
					/// </summary>
					public DBI_Column HIDDEN { get { return this_table.__HIDDEN; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Buildings()
					: base( "Buildings",
							delegate(DBI_Table tableSchema, IServer s) {
								return new BuildingsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 12, "Table 'Buildings' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__ADDRESS1 = Columns["ADDRESS1"];
					System.Diagnostics.Debug.Assert(__ADDRESS1 != null, "Column 'ADDRESS1' not found");
					__ADDRESS2 = Columns["ADDRESS2"];
					System.Diagnostics.Debug.Assert(__ADDRESS2 != null, "Column 'ADDRESS2' not found");
					__CITY = Columns["CITY"];
					System.Diagnostics.Debug.Assert(__CITY != null, "Column 'CITY' not found");
					__TERRITORY = Columns["TERRITORY"];
					System.Diagnostics.Debug.Assert(__TERRITORY != null, "Column 'TERRITORY' not found");
					__COUNTRY = Columns["COUNTRY"];
					System.Diagnostics.Debug.Assert(__COUNTRY != null, "Column 'COUNTRY' not found");
					__PCODE = Columns["PCODE"];
					System.Diagnostics.Debug.Assert(__PCODE != null, "Column 'PCODE' not found");
					__HIDDEN = Columns["HIDDEN"];
					System.Diagnostics.Debug.Assert(__HIDDEN != null, "Column 'HIDDEN' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Chargebacks table
			private DBI_Chargebacks __Chargebacks;

			/// <summary>
			/// Class to describe a Chargebacks table
			/// </summary>
			public class DBI_Chargebacks : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __WOKEY;
				private DBI_Column __CHARGETO;
				private DBI_Column __LABOR;
				private DBI_Column __MATERIAL;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Chargebacks this_table;
					public FAccessor( DBI_Chargebacks this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Chargebacks's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Chargebacks's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Chargebacks's WOKEY column with type integer(32) with labelkey='WOKEY'
					/// </summary>
					public DBI_Column WOKEY { get { return this_table.__WOKEY; } }
					/// <summary>
					/// Denotes the Chargebacks's CHARGETO column with type string(maxlength 30, maxlines 0, trim) with labelkey='CHARGETO'
					/// </summary>
					public DBI_Column CHARGETO { get { return this_table.__CHARGETO; } }
					/// <summary>
					/// Denotes the Chargebacks's LABOR column with type integer(32) with labelkey='LABOR'
					/// </summary>
					public DBI_Column LABOR { get { return this_table.__LABOR; } }
					/// <summary>
					/// Denotes the Chargebacks's MATERIAL column with type integer(32) with labelkey='MATERIAL'
					/// </summary>
					public DBI_Column MATERIAL { get { return this_table.__MATERIAL; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Chargebacks()
					: base( "Chargebacks",
							delegate(DBI_Table tableSchema, IServer s) {
								return new ChargebacksDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 6, "Table 'Chargebacks' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__WOKEY = Columns["WOKEY"];
					System.Diagnostics.Debug.Assert(__WOKEY != null, "Column 'WOKEY' not found");
					__CHARGETO = Columns["CHARGETO"];
					System.Diagnostics.Debug.Assert(__CHARGETO != null, "Column 'CHARGETO' not found");
					__LABOR = Columns["LABOR"];
					System.Diagnostics.Debug.Assert(__LABOR != null, "Column 'LABOR' not found");
					__MATERIAL = Columns["MATERIAL"];
					System.Diagnostics.Debug.Assert(__MATERIAL != null, "Column 'MATERIAL' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - ClosingCodes table
			private DBI_ClosingCodes __ClosingCodes;

			/// <summary>
			/// Class to describe a ClosingCodes table
			/// </summary>
			public class DBI_ClosingCodes : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_ClosingCodes this_table;
					public FAccessor( DBI_ClosingCodes this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the ClosingCodes's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the ClosingCodes's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the ClosingCodes's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the ClosingCodes's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_ClosingCodes()
					: base( "ClosingCodes",
							delegate(DBI_Table tableSchema, IServer s) {
								return new ClosingCodesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'ClosingCodes' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Contacts table
			private DBI_Contacts __Contacts;

			/// <summary>
			/// Class to describe a Contacts table
			/// </summary>
			public class DBI_Contacts : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __CODE;
				private DBI_Column __BTEL;
				private DBI_Column __HTEL;
				private DBI_Column __PAGER;
				private DBI_Column __MOBILE;
				private DBI_Column __HIDDEN;
				private DBI_Column __EMAIL;
				private DBI_Column __COMMENT;
				private DBI_Column __LANGID;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Contacts this_table;
					public FAccessor( DBI_Contacts this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Contacts's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Contacts's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Contacts's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the Contacts's CODE column with type string(maxlength 50, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Contacts's BTEL column with type string(maxlength 42, maxlines 0, trim) with labelkey='BTEL'
					/// </summary>
					public DBI_Column BTEL { get { return this_table.__BTEL; } }
					/// <summary>
					/// Denotes the Contacts's HTEL column with type string(maxlength 42, maxlines 0, trim) with labelkey='HTEL'
					/// </summary>
					public DBI_Column HTEL { get { return this_table.__HTEL; } }
					/// <summary>
					/// Denotes the Contacts's PAGER column with type string(maxlength 42, maxlines 0, trim) with labelkey='PAGER'
					/// </summary>
					public DBI_Column PAGER { get { return this_table.__PAGER; } }
					/// <summary>
					/// Denotes the Contacts's MOBILE column with type string(maxlength 42, maxlines 0, trim) with labelkey='MOBILE'
					/// </summary>
					public DBI_Column MOBILE { get { return this_table.__MOBILE; } }
					/// <summary>
					/// Denotes the Contacts's HIDDEN column with type bool with labelkey='HIDDEN'
					/// </summary>
					public DBI_Column HIDDEN { get { return this_table.__HIDDEN; } }
					/// <summary>
					/// Denotes the Contacts's EMAIL column with type string(maxlength 128, maxlines 0, trim) with labelkey='EMAIL'
					/// </summary>
					public DBI_Column EMAIL { get { return this_table.__EMAIL; } }
					/// <summary>
					/// Denotes the Contacts's COMMENT column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='COMMENT'
					/// </summary>
					public DBI_Column COMMENT { get { return this_table.__COMMENT; } }
					/// <summary>
					/// Denotes the Contacts's LANGID column with type string(maxlength 4, maxlines 0, trim) with labelkey='LANGID'
					/// </summary>
					public DBI_Column LANGID { get { return this_table.__LANGID; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Contacts()
					: base( "Contacts",
							delegate(DBI_Table tableSchema, IServer s) {
								return new ContactsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 12, "Table 'Contacts' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__BTEL = Columns["BTEL"];
					System.Diagnostics.Debug.Assert(__BTEL != null, "Column 'BTEL' not found");
					__HTEL = Columns["HTEL"];
					System.Diagnostics.Debug.Assert(__HTEL != null, "Column 'HTEL' not found");
					__PAGER = Columns["PAGER"];
					System.Diagnostics.Debug.Assert(__PAGER != null, "Column 'PAGER' not found");
					__MOBILE = Columns["MOBILE"];
					System.Diagnostics.Debug.Assert(__MOBILE != null, "Column 'MOBILE' not found");
					__HIDDEN = Columns["HIDDEN"];
					System.Diagnostics.Debug.Assert(__HIDDEN != null, "Column 'HIDDEN' not found");
					__EMAIL = Columns["EMAIL"];
					System.Diagnostics.Debug.Assert(__EMAIL != null, "Column 'EMAIL' not found");
					__COMMENT = Columns["COMMENT"];
					System.Diagnostics.Debug.Assert(__COMMENT != null, "Column 'COMMENT' not found");
					__LANGID = Columns["LANGID"];
					System.Diagnostics.Debug.Assert(__LANGID != null, "Column 'LANGID' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - CostCenters table
			private DBI_CostCenters __CostCenters;

			/// <summary>
			/// Class to describe a CostCenters table
			/// </summary>
			public class DBI_CostCenters : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_CostCenters this_table;
					public FAccessor( DBI_CostCenters this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the CostCenters's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the CostCenters's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the CostCenters's CODE column with type string(maxlength 15, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the CostCenters's DESC column with type string(maxlength 40, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_CostCenters()
					: base( "CostCenters",
							delegate(DBI_Table tableSchema, IServer s) {
								return new CostCentersDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'CostCenters' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - InvCategories table
			private DBI_InvCategories __InvCategories;

			/// <summary>
			/// Class to describe a InvCategories table
			/// </summary>
			public class DBI_InvCategories : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_InvCategories this_table;
					public FAccessor( DBI_InvCategories this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the InvCategories's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the InvCategories's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the InvCategories's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the InvCategories's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_InvCategories()
					: base( "InvCategories",
							delegate(DBI_Table tableSchema, IServer s) {
								return new InvCategoriesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'InvCategories' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - InvItems table
			private DBI_InvItems __InvItems;

			/// <summary>
			/// Class to describe a InvItems table
			/// </summary>
			public class DBI_InvItems : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				private DBI_Column __CAT;
				private DBI_Column __UOMKEY;
				private DBI_Column __MINI;
				private DBI_Column __MAXI;
				private DBI_Column __TOTALCOST;
				private DBI_Column __ONHAND;
				private DBI_Column __ONORDER;
				private DBI_Column __ONRESERVE;
				private DBI_Column __TOTALSEQ;
				private DBI_Column __INVENTORY;
				private DBI_Column __COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_InvItems this_table;
					public FAccessor( DBI_InvItems this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the InvItems's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the InvItems's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the InvItems's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the InvItems's CODE column with type string(maxlength 30, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the InvItems's DESC column with type string(maxlength 50, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the InvItems's CAT column with type string(maxlength 10, maxlines 0, trim) with labelkey='CAT'
					/// </summary>
					public DBI_Column CAT { get { return this_table.__CAT; } }
					/// <summary>
					/// Denotes the InvItems's UOMKEY column with type integer(32) with labelkey='UOMKEY'
					/// </summary>
					public DBI_Column UOMKEY { get { return this_table.__UOMKEY; } }
					/// <summary>
					/// Denotes the InvItems's MINI column with type integer(32) with labelkey='MINI'
					/// </summary>
					public DBI_Column MINI { get { return this_table.__MINI; } }
					/// <summary>
					/// Denotes the InvItems's MAXI column with type integer(32) with labelkey='MAXI'
					/// </summary>
					public DBI_Column MAXI { get { return this_table.__MAXI; } }
					/// <summary>
					/// Denotes the InvItems's TOTALCOST column with type integer(32) with labelkey='TOTALCOST'
					/// </summary>
					public DBI_Column TOTALCOST { get { return this_table.__TOTALCOST; } }
					/// <summary>
					/// Denotes the InvItems's ONHAND column with type integer(32) with labelkey='ONHAND'
					/// </summary>
					public DBI_Column ONHAND { get { return this_table.__ONHAND; } }
					/// <summary>
					/// Denotes the InvItems's ONORDER column with type integer(32) with labelkey='ONORDER'
					/// </summary>
					public DBI_Column ONORDER { get { return this_table.__ONORDER; } }
					/// <summary>
					/// Denotes the InvItems's ONRESERVE column with type integer(32) with labelkey='ONRESERVE'
					/// </summary>
					public DBI_Column ONRESERVE { get { return this_table.__ONRESERVE; } }
					/// <summary>
					/// Denotes the InvItems's TOTALSEQ column with type integer(32) with labelkey='TOTALSEQ'
					/// </summary>
					public DBI_Column TOTALSEQ { get { return this_table.__TOTALSEQ; } }
					/// <summary>
					/// Denotes the InvItems's INVENTORY column with type bool with labelkey='INVENTORY'
					/// </summary>
					public DBI_Column INVENTORY { get { return this_table.__INVENTORY; } }
					/// <summary>
					/// Denotes the InvItems's COMMENT column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='COMMENT'
					/// </summary>
					public DBI_Column COMMENT { get { return this_table.__COMMENT; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_InvItems()
					: base( "InvItems",
							delegate(DBI_Table tableSchema, IServer s) {
								return new InvItemsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 16, "Table 'InvItems' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__CAT = Columns["CAT"];
					System.Diagnostics.Debug.Assert(__CAT != null, "Column 'CAT' not found");
					__UOMKEY = Columns["UOMKEY"];
					System.Diagnostics.Debug.Assert(__UOMKEY != null, "Column 'UOMKEY' not found");
					__MINI = Columns["MINI"];
					System.Diagnostics.Debug.Assert(__MINI != null, "Column 'MINI' not found");
					__MAXI = Columns["MAXI"];
					System.Diagnostics.Debug.Assert(__MAXI != null, "Column 'MAXI' not found");
					__TOTALCOST = Columns["TOTALCOST"];
					System.Diagnostics.Debug.Assert(__TOTALCOST != null, "Column 'TOTALCOST' not found");
					__ONHAND = Columns["ONHAND"];
					System.Diagnostics.Debug.Assert(__ONHAND != null, "Column 'ONHAND' not found");
					__ONORDER = Columns["ONORDER"];
					System.Diagnostics.Debug.Assert(__ONORDER != null, "Column 'ONORDER' not found");
					__ONRESERVE = Columns["ONRESERVE"];
					System.Diagnostics.Debug.Assert(__ONRESERVE != null, "Column 'ONRESERVE' not found");
					__TOTALSEQ = Columns["TOTALSEQ"];
					System.Diagnostics.Debug.Assert(__TOTALSEQ != null, "Column 'TOTALSEQ' not found");
					__INVENTORY = Columns["INVENTORY"];
					System.Diagnostics.Debug.Assert(__INVENTORY != null, "Column 'INVENTORY' not found");
					__COMMENT = Columns["COMMENT"];
					System.Diagnostics.Debug.Assert(__COMMENT != null, "Column 'COMMENT' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - InvLocations table
			private DBI_InvLocations __InvLocations;

			/// <summary>
			/// Class to describe a InvLocations table
			/// </summary>
			public class DBI_InvLocations : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __STRMKEY;
				private DBI_Column __ITEMKEY;
				private DBI_Column __LOC;
				private DBI_Column __ONHAND;
				private DBI_Column __TOTALCOST;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_InvLocations this_table;
					public FAccessor( DBI_InvLocations this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the InvLocations's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the InvLocations's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the InvLocations's STRMKEY column with type integer(32) with labelkey='STRMKEY'
					/// </summary>
					public DBI_Column STRMKEY { get { return this_table.__STRMKEY; } }
					/// <summary>
					/// Denotes the InvLocations's ITEMKEY column with type integer(32) with labelkey='ITEMKEY'
					/// </summary>
					public DBI_Column ITEMKEY { get { return this_table.__ITEMKEY; } }
					/// <summary>
					/// Denotes the InvLocations's LOC column with type string(maxlength 20, maxlines 0, trim) with labelkey='LOC'
					/// </summary>
					public DBI_Column LOC { get { return this_table.__LOC; } }
					/// <summary>
					/// Denotes the InvLocations's ONHAND column with type integer(32) with labelkey='ONHAND'
					/// </summary>
					public DBI_Column ONHAND { get { return this_table.__ONHAND; } }
					/// <summary>
					/// Denotes the InvLocations's TOTALCOST column with type integer(32) with labelkey='TOTALCOST'
					/// </summary>
					public DBI_Column TOTALCOST { get { return this_table.__TOTALCOST; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_InvLocations()
					: base( "InvLocations",
							delegate(DBI_Table tableSchema, IServer s) {
								return new InvLocationsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 7, "Table 'InvLocations' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__STRMKEY = Columns["STRMKEY"];
					System.Diagnostics.Debug.Assert(__STRMKEY != null, "Column 'STRMKEY' not found");
					__ITEMKEY = Columns["ITEMKEY"];
					System.Diagnostics.Debug.Assert(__ITEMKEY != null, "Column 'ITEMKEY' not found");
					__LOC = Columns["LOC"];
					System.Diagnostics.Debug.Assert(__LOC != null, "Column 'LOC' not found");
					__ONHAND = Columns["ONHAND"];
					System.Diagnostics.Debug.Assert(__ONHAND != null, "Column 'ONHAND' not found");
					__TOTALCOST = Columns["TOTALCOST"];
					System.Diagnostics.Debug.Assert(__TOTALCOST != null, "Column 'TOTALCOST' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - InvTransactions table
			private DBI_InvTransactions __InvTransactions;

			/// <summary>
			/// Class to describe a InvTransactions table
			/// </summary>
			public class DBI_InvTransactions : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __ITEMKEY;
				private DBI_Column __TYPE;
				private DBI_Column __DATE;
				private DBI_Column __TIME;
				private DBI_Column __QTY;
				private DBI_Column __TOTALCOST;
				private DBI_Column __REASON;
				private DBI_Column __STRMKEY;
				private DBI_Column __LOC;
				private DBI_Column __REFER;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_InvTransactions this_table;
					public FAccessor( DBI_InvTransactions this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the InvTransactions's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the InvTransactions's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the InvTransactions's ITEMKEY column with type integer(32) with labelkey='ITEMKEY'
					/// </summary>
					public DBI_Column ITEMKEY { get { return this_table.__ITEMKEY; } }
					/// <summary>
					/// Denotes the InvTransactions's TYPE column with type string(maxlength 2, maxlines 0, trim) with labelkey='TYPE'
					/// </summary>
					public DBI_Column TYPE { get { return this_table.__TYPE; } }
					/// <summary>
					/// Denotes the InvTransactions's DATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='DATE'
					/// </summary>
					public DBI_Column DATE { get { return this_table.__DATE; } }
					/// <summary>
					/// Denotes the InvTransactions's TIME column with type string(maxlength 6, maxlines 0, trim) with labelkey='TIME'
					/// </summary>
					public DBI_Column TIME { get { return this_table.__TIME; } }
					/// <summary>
					/// Denotes the InvTransactions's QTY column with type integer(32) with labelkey='QTY'
					/// </summary>
					public DBI_Column QTY { get { return this_table.__QTY; } }
					/// <summary>
					/// Denotes the InvTransactions's TOTALCOST column with type integer(32) with labelkey='TOTALCOST'
					/// </summary>
					public DBI_Column TOTALCOST { get { return this_table.__TOTALCOST; } }
					/// <summary>
					/// Denotes the InvTransactions's REASON column with type string(maxlength 10, maxlines 0, trim) with labelkey='REASON'
					/// </summary>
					public DBI_Column REASON { get { return this_table.__REASON; } }
					/// <summary>
					/// Denotes the InvTransactions's STRMKEY column with type integer(32) with labelkey='STRMKEY'
					/// </summary>
					public DBI_Column STRMKEY { get { return this_table.__STRMKEY; } }
					/// <summary>
					/// Denotes the InvTransactions's LOC column with type string(maxlength 20, maxlines 0, trim) with labelkey='LOC'
					/// </summary>
					public DBI_Column LOC { get { return this_table.__LOC; } }
					/// <summary>
					/// Denotes the InvTransactions's REFER column with type string(maxlength 30, maxlines 0, trim) with labelkey='REFER'
					/// </summary>
					public DBI_Column REFER { get { return this_table.__REFER; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_InvTransactions()
					: base( "InvTransactions",
							delegate(DBI_Table tableSchema, IServer s) {
								return new InvTransactionsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 12, "Table 'InvTransactions' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__ITEMKEY = Columns["ITEMKEY"];
					System.Diagnostics.Debug.Assert(__ITEMKEY != null, "Column 'ITEMKEY' not found");
					__TYPE = Columns["TYPE"];
					System.Diagnostics.Debug.Assert(__TYPE != null, "Column 'TYPE' not found");
					__DATE = Columns["DATE"];
					System.Diagnostics.Debug.Assert(__DATE != null, "Column 'DATE' not found");
					__TIME = Columns["TIME"];
					System.Diagnostics.Debug.Assert(__TIME != null, "Column 'TIME' not found");
					__QTY = Columns["QTY"];
					System.Diagnostics.Debug.Assert(__QTY != null, "Column 'QTY' not found");
					__TOTALCOST = Columns["TOTALCOST"];
					System.Diagnostics.Debug.Assert(__TOTALCOST != null, "Column 'TOTALCOST' not found");
					__REASON = Columns["REASON"];
					System.Diagnostics.Debug.Assert(__REASON != null, "Column 'REASON' not found");
					__STRMKEY = Columns["STRMKEY"];
					System.Diagnostics.Debug.Assert(__STRMKEY != null, "Column 'STRMKEY' not found");
					__LOC = Columns["LOC"];
					System.Diagnostics.Debug.Assert(__LOC != null, "Column 'LOC' not found");
					__REFER = Columns["REFER"];
					System.Diagnostics.Debug.Assert(__REFER != null, "Column 'REFER' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Issues table
			private DBI_Issues __Issues;

			/// <summary>
			/// Class to describe a Issues table
			/// </summary>
			public class DBI_Issues : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Issues this_table;
					public FAccessor( DBI_Issues this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Issues's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Issues's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Issues's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Issues's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Issues()
					: base( "Issues",
							delegate(DBI_Table tableSchema, IServer s) {
								return new IssuesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'Issues' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Labor table
			private DBI_Labor __Labor;

			/// <summary>
			/// Class to describe a Labor table
			/// </summary>
			public class DBI_Labor : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __WOKEY;
				private DBI_Column __LABORKEY;
				private DBI_Column __TRADE;
				private DBI_Column __STARTDATE;
				private DBI_Column __STARTTIME;
				private DBI_Column __TIME;
				private DBI_Column __LABORRATE;
				private DBI_Column __ESTIMATE;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Labor this_table;
					public FAccessor( DBI_Labor this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Labor's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Labor's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Labor's WOKEY column with type integer(32) with labelkey='WOKEY'
					/// </summary>
					public DBI_Column WOKEY { get { return this_table.__WOKEY; } }
					/// <summary>
					/// Denotes the Labor's LABORKEY column with type integer(32) with labelkey='LABORKEY'
					/// </summary>
					public DBI_Column LABORKEY { get { return this_table.__LABORKEY; } }
					/// <summary>
					/// Denotes the Labor's TRADE column with type string(maxlength 10, maxlines 0, trim) with labelkey='TRADE'
					/// </summary>
					public DBI_Column TRADE { get { return this_table.__TRADE; } }
					/// <summary>
					/// Denotes the Labor's STARTDATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='STARTDATE'
					/// </summary>
					public DBI_Column STARTDATE { get { return this_table.__STARTDATE; } }
					/// <summary>
					/// Denotes the Labor's STARTTIME column with type string(maxlength 6, maxlines 0, trim) with labelkey='STARTTIME'
					/// </summary>
					public DBI_Column STARTTIME { get { return this_table.__STARTTIME; } }
					/// <summary>
					/// Denotes the Labor's TIME column with type string(maxlength 6, maxlines 0, trim) with labelkey='TIME'
					/// </summary>
					public DBI_Column TIME { get { return this_table.__TIME; } }
					/// <summary>
					/// Denotes the Labor's LABORRATE column with type integer(32) with labelkey='LABORRATE'
					/// </summary>
					public DBI_Column LABORRATE { get { return this_table.__LABORRATE; } }
					/// <summary>
					/// Denotes the Labor's ESTIMATE column with type bool with labelkey='ESTIMATE'
					/// </summary>
					public DBI_Column ESTIMATE { get { return this_table.__ESTIMATE; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Labor()
					: base( "Labor",
							delegate(DBI_Table tableSchema, IServer s) {
								return new LaborDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 10, "Table 'Labor' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__WOKEY = Columns["WOKEY"];
					System.Diagnostics.Debug.Assert(__WOKEY != null, "Column 'WOKEY' not found");
					__LABORKEY = Columns["LABORKEY"];
					System.Diagnostics.Debug.Assert(__LABORKEY != null, "Column 'LABORKEY' not found");
					__TRADE = Columns["TRADE"];
					System.Diagnostics.Debug.Assert(__TRADE != null, "Column 'TRADE' not found");
					__STARTDATE = Columns["STARTDATE"];
					System.Diagnostics.Debug.Assert(__STARTDATE != null, "Column 'STARTDATE' not found");
					__STARTTIME = Columns["STARTTIME"];
					System.Diagnostics.Debug.Assert(__STARTTIME != null, "Column 'STARTTIME' not found");
					__TIME = Columns["TIME"];
					System.Diagnostics.Debug.Assert(__TIME != null, "Column 'TIME' not found");
					__LABORRATE = Columns["LABORRATE"];
					System.Diagnostics.Debug.Assert(__LABORRATE != null, "Column 'LABORRATE' not found");
					__ESTIMATE = Columns["ESTIMATE"];
					System.Diagnostics.Debug.Assert(__ESTIMATE != null, "Column 'ESTIMATE' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - MeterHistory table
			private DBI_MeterHistory __MeterHistory;

			/// <summary>
			/// Class to describe a MeterHistory table
			/// </summary>
			public class DBI_MeterHistory : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __METERKEY;
				private DBI_Column __DATE;
				private DBI_Column __TIME;
				private DBI_Column __ORIGINKEY;
				private DBI_Column __READING;
				private DBI_Column __EFFECTIVE;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_MeterHistory this_table;
					public FAccessor( DBI_MeterHistory this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the MeterHistory's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the MeterHistory's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the MeterHistory's METERKEY column with type integer(32) with labelkey='METERKEY'
					/// </summary>
					public DBI_Column METERKEY { get { return this_table.__METERKEY; } }
					/// <summary>
					/// Denotes the MeterHistory's DATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='DATE'
					/// </summary>
					public DBI_Column DATE { get { return this_table.__DATE; } }
					/// <summary>
					/// Denotes the MeterHistory's TIME column with type string(maxlength 6, maxlines 0, trim) with labelkey='TIME'
					/// </summary>
					public DBI_Column TIME { get { return this_table.__TIME; } }
					/// <summary>
					/// Denotes the MeterHistory's ORIGINKEY column with type integer(32) with labelkey='ORIGINKEY'
					/// </summary>
					public DBI_Column ORIGINKEY { get { return this_table.__ORIGINKEY; } }
					/// <summary>
					/// Denotes the MeterHistory's READING column with type integer(32) with labelkey='READING'
					/// </summary>
					public DBI_Column READING { get { return this_table.__READING; } }
					/// <summary>
					/// Denotes the MeterHistory's EFFECTIVE column with type integer(32) with labelkey='EFFECTIVE'
					/// </summary>
					public DBI_Column EFFECTIVE { get { return this_table.__EFFECTIVE; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_MeterHistory()
					: base( "MeterHistory",
							delegate(DBI_Table tableSchema, IServer s) {
								return new MeterHistoryDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 8, "Table 'MeterHistory' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__METERKEY = Columns["METERKEY"];
					System.Diagnostics.Debug.Assert(__METERKEY != null, "Column 'METERKEY' not found");
					__DATE = Columns["DATE"];
					System.Diagnostics.Debug.Assert(__DATE != null, "Column 'DATE' not found");
					__TIME = Columns["TIME"];
					System.Diagnostics.Debug.Assert(__TIME != null, "Column 'TIME' not found");
					__ORIGINKEY = Columns["ORIGINKEY"];
					System.Diagnostics.Debug.Assert(__ORIGINKEY != null, "Column 'ORIGINKEY' not found");
					__READING = Columns["READING"];
					System.Diagnostics.Debug.Assert(__READING != null, "Column 'READING' not found");
					__EFFECTIVE = Columns["EFFECTIVE"];
					System.Diagnostics.Debug.Assert(__EFFECTIVE != null, "Column 'EFFECTIVE' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Meters table
			private DBI_Meters __Meters;

			/// <summary>
			/// Class to describe a Meters table
			/// </summary>
			public class DBI_Meters : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				private DBI_Column __TYPE;
				private DBI_Column __UNITKEY;
				private DBI_Column __OFFSET;
				private DBI_Column __UOMKEY;
				private DBI_Column __CREATEDATE;
				private DBI_Column __CREATETIME;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Meters this_table;
					public FAccessor( DBI_Meters this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Meters's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Meters's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Meters's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the Meters's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Meters's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the Meters's TYPE column with type string(maxlength 1, maxlines 0, trim) with labelkey='TYPE'
					/// </summary>
					public DBI_Column TYPE { get { return this_table.__TYPE; } }
					/// <summary>
					/// Denotes the Meters's UNITKEY column with type integer(32) with labelkey='UNITKEY'
					/// </summary>
					public DBI_Column UNITKEY { get { return this_table.__UNITKEY; } }
					/// <summary>
					/// Denotes the Meters's OFFSET column with type integer(32) with labelkey='OFFSET'
					/// </summary>
					public DBI_Column OFFSET { get { return this_table.__OFFSET; } }
					/// <summary>
					/// Denotes the Meters's UOMKEY column with type integer(32) with labelkey='UOMKEY'
					/// </summary>
					public DBI_Column UOMKEY { get { return this_table.__UOMKEY; } }
					/// <summary>
					/// Denotes the Meters's CREATEDATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='CREATEDATE'
					/// </summary>
					public DBI_Column CREATEDATE { get { return this_table.__CREATEDATE; } }
					/// <summary>
					/// Denotes the Meters's CREATETIME column with type string(maxlength 6, maxlines 0, trim) with labelkey='CREATETIME'
					/// </summary>
					public DBI_Column CREATETIME { get { return this_table.__CREATETIME; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Meters()
					: base( "Meters",
							delegate(DBI_Table tableSchema, IServer s) {
								return new MetersDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 11, "Table 'Meters' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__TYPE = Columns["TYPE"];
					System.Diagnostics.Debug.Assert(__TYPE != null, "Column 'TYPE' not found");
					__UNITKEY = Columns["UNITKEY"];
					System.Diagnostics.Debug.Assert(__UNITKEY != null, "Column 'UNITKEY' not found");
					__OFFSET = Columns["OFFSET"];
					System.Diagnostics.Debug.Assert(__OFFSET != null, "Column 'OFFSET' not found");
					__UOMKEY = Columns["UOMKEY"];
					System.Diagnostics.Debug.Assert(__UOMKEY != null, "Column 'UOMKEY' not found");
					__CREATEDATE = Columns["CREATEDATE"];
					System.Diagnostics.Debug.Assert(__CREATEDATE != null, "Column 'CREATEDATE' not found");
					__CREATETIME = Columns["CREATETIME"];
					System.Diagnostics.Debug.Assert(__CREATETIME != null, "Column 'CREATETIME' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Obsoletes table
			private DBI_Obsoletes __Obsoletes;

			/// <summary>
			/// Class to describe a Obsoletes table
			/// </summary>
			public class DBI_Obsoletes : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Obsoletes this_table;
					public FAccessor( DBI_Obsoletes this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Obsoletes's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Obsoletes's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Obsoletes's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Obsoletes's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Obsoletes()
					: base( "Obsoletes",
							delegate(DBI_Table tableSchema, IServer s) {
								return new ObsoletesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'Obsoletes' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Ownerships table
			private DBI_Ownerships __Ownerships;

			/// <summary>
			/// Class to describe a Ownerships table
			/// </summary>
			public class DBI_Ownerships : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Ownerships this_table;
					public FAccessor( DBI_Ownerships this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Ownerships's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Ownerships's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Ownerships's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Ownerships's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Ownerships()
					: base( "Ownerships",
							delegate(DBI_Table tableSchema, IServer s) {
								return new OwnershipsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'Ownerships' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Personnel table
			private DBI_Personnel __Personnel;

			/// <summary>
			/// Class to describe a Personnel table
			/// </summary>
			public class DBI_Personnel : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				private DBI_Column __TRADE;
				private DBI_Column __BTEL;
				private DBI_Column __HTEL;
				private DBI_Column __PAGER;
				private DBI_Column __MOBILE;
				private DBI_Column __CURRATE;
				private DBI_Column __NEWRATE;
				private DBI_Column __EFFDATE;
				private DBI_Column __HIDDEN;
				private DBI_Column __EMAIL;
				private DBI_Column __COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Personnel this_table;
					public FAccessor( DBI_Personnel this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Personnel's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Personnel's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Personnel's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the Personnel's CODE column with type string(maxlength 15, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Personnel's DESC column with type string(maxlength 40, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the Personnel's TRADE column with type string(maxlength 10, maxlines 0, trim) with labelkey='TRADE'
					/// </summary>
					public DBI_Column TRADE { get { return this_table.__TRADE; } }
					/// <summary>
					/// Denotes the Personnel's BTEL column with type string(maxlength 42, maxlines 0, trim) with labelkey='BTEL'
					/// </summary>
					public DBI_Column BTEL { get { return this_table.__BTEL; } }
					/// <summary>
					/// Denotes the Personnel's HTEL column with type string(maxlength 42, maxlines 0, trim) with labelkey='HTEL'
					/// </summary>
					public DBI_Column HTEL { get { return this_table.__HTEL; } }
					/// <summary>
					/// Denotes the Personnel's PAGER column with type string(maxlength 42, maxlines 0, trim) with labelkey='PAGER'
					/// </summary>
					public DBI_Column PAGER { get { return this_table.__PAGER; } }
					/// <summary>
					/// Denotes the Personnel's MOBILE column with type string(maxlength 42, maxlines 0, trim) with labelkey='MOBILE'
					/// </summary>
					public DBI_Column MOBILE { get { return this_table.__MOBILE; } }
					/// <summary>
					/// Denotes the Personnel's CURRATE column with type integer(32) with labelkey='CURRATE'
					/// </summary>
					public DBI_Column CURRATE { get { return this_table.__CURRATE; } }
					/// <summary>
					/// Denotes the Personnel's NEWRATE column with type integer(32) with labelkey='NEWRATE'
					/// </summary>
					public DBI_Column NEWRATE { get { return this_table.__NEWRATE; } }
					/// <summary>
					/// Denotes the Personnel's EFFDATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='EFFDATE'
					/// </summary>
					public DBI_Column EFFDATE { get { return this_table.__EFFDATE; } }
					/// <summary>
					/// Denotes the Personnel's HIDDEN column with type bool with labelkey='HIDDEN'
					/// </summary>
					public DBI_Column HIDDEN { get { return this_table.__HIDDEN; } }
					/// <summary>
					/// Denotes the Personnel's EMAIL column with type string(maxlength 128, maxlines 0, trim) with labelkey='EMAIL'
					/// </summary>
					public DBI_Column EMAIL { get { return this_table.__EMAIL; } }
					/// <summary>
					/// Denotes the Personnel's COMMENT column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='COMMENT'
					/// </summary>
					public DBI_Column COMMENT { get { return this_table.__COMMENT; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Personnel()
					: base( "Personnel",
							delegate(DBI_Table tableSchema, IServer s) {
								return new PersonnelDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 16, "Table 'Personnel' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__TRADE = Columns["TRADE"];
					System.Diagnostics.Debug.Assert(__TRADE != null, "Column 'TRADE' not found");
					__BTEL = Columns["BTEL"];
					System.Diagnostics.Debug.Assert(__BTEL != null, "Column 'BTEL' not found");
					__HTEL = Columns["HTEL"];
					System.Diagnostics.Debug.Assert(__HTEL != null, "Column 'HTEL' not found");
					__PAGER = Columns["PAGER"];
					System.Diagnostics.Debug.Assert(__PAGER != null, "Column 'PAGER' not found");
					__MOBILE = Columns["MOBILE"];
					System.Diagnostics.Debug.Assert(__MOBILE != null, "Column 'MOBILE' not found");
					__CURRATE = Columns["CURRATE"];
					System.Diagnostics.Debug.Assert(__CURRATE != null, "Column 'CURRATE' not found");
					__NEWRATE = Columns["NEWRATE"];
					System.Diagnostics.Debug.Assert(__NEWRATE != null, "Column 'NEWRATE' not found");
					__EFFDATE = Columns["EFFDATE"];
					System.Diagnostics.Debug.Assert(__EFFDATE != null, "Column 'EFFDATE' not found");
					__HIDDEN = Columns["HIDDEN"];
					System.Diagnostics.Debug.Assert(__HIDDEN != null, "Column 'HIDDEN' not found");
					__EMAIL = Columns["EMAIL"];
					System.Diagnostics.Debug.Assert(__EMAIL != null, "Column 'EMAIL' not found");
					__COMMENT = Columns["COMMENT"];
					System.Diagnostics.Debug.Assert(__COMMENT != null, "Column 'COMMENT' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - PreventiveSchedules table
			private DBI_PreventiveSchedules __PreventiveSchedules;

			/// <summary>
			/// Class to describe a PreventiveSchedules table
			/// </summary>
			public class DBI_PreventiveSchedules : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __WOKEY;
				private DBI_Column __TYPE;
				private DBI_Column __METERKEY;
				private DBI_Column __LASTSCHED;
				private DBI_Column __INTERVAL;
				private DBI_Column __SEASONBEG;
				private DBI_Column __SEASONEND;
				private DBI_Column __INHSEASON;
				private DBI_Column __WEEKMASK;
				private DBI_Column __INHWEEK;
				private DBI_Column __ALGORITHM;
				private DBI_Column __INHIBIT;
				private DBI_Column __LASTWOMADE;
				private DBI_Column __LATEINHIB;
				private DBI_Column __LASTDATE;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_PreventiveSchedules this_table;
					public FAccessor( DBI_PreventiveSchedules this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the PreventiveSchedules's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's WOKEY column with type integer(32) with labelkey='WOKEY'
					/// </summary>
					public DBI_Column WOKEY { get { return this_table.__WOKEY; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's TYPE column with type string(maxlength 1, maxlines 0, trim) with labelkey='TYPE'
					/// </summary>
					public DBI_Column TYPE { get { return this_table.__TYPE; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's METERKEY column with type integer(32) with labelkey='METERKEY'
					/// </summary>
					public DBI_Column METERKEY { get { return this_table.__METERKEY; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's LASTSCHED column with type integer(32) with labelkey='LASTSCHED'
					/// </summary>
					public DBI_Column LASTSCHED { get { return this_table.__LASTSCHED; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's INTERVAL column with type integer(32) with labelkey='INTERVAL'
					/// </summary>
					public DBI_Column INTERVAL { get { return this_table.__INTERVAL; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's SEASONBEG column with type string(maxlength 4, maxlines 0, trim) with labelkey='SEASONBEG'
					/// </summary>
					public DBI_Column SEASONBEG { get { return this_table.__SEASONBEG; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's SEASONEND column with type string(maxlength 4, maxlines 0, trim) with labelkey='SEASONEND'
					/// </summary>
					public DBI_Column SEASONEND { get { return this_table.__SEASONEND; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's INHSEASON column with type bool with labelkey='INHSEASON'
					/// </summary>
					public DBI_Column INHSEASON { get { return this_table.__INHSEASON; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's WEEKMASK column with type string(maxlength 2, maxlines 0, trim) with labelkey='WEEKMASK'
					/// </summary>
					public DBI_Column WEEKMASK { get { return this_table.__WEEKMASK; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's INHWEEK column with type bool with labelkey='INHWEEK'
					/// </summary>
					public DBI_Column INHWEEK { get { return this_table.__INHWEEK; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's ALGORITHM column with type string(maxlength 1, maxlines 0, trim) with labelkey='ALGORITHM'
					/// </summary>
					public DBI_Column ALGORITHM { get { return this_table.__ALGORITHM; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's INHIBIT column with type bool with labelkey='INHIBIT'
					/// </summary>
					public DBI_Column INHIBIT { get { return this_table.__INHIBIT; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's LASTWOMADE column with type integer(32) with labelkey='LASTWOMADE'
					/// </summary>
					public DBI_Column LASTWOMADE { get { return this_table.__LASTWOMADE; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's LATEINHIB column with type bool with labelkey='LATEINHIB'
					/// </summary>
					public DBI_Column LATEINHIB { get { return this_table.__LATEINHIB; } }
					/// <summary>
					/// Denotes the PreventiveSchedules's LASTDATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='LASTDATE'
					/// </summary>
					public DBI_Column LASTDATE { get { return this_table.__LASTDATE; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_PreventiveSchedules()
					: base( "PreventiveSchedules",
							delegate(DBI_Table tableSchema, IServer s) {
								return new PreventiveSchedulesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 18, "Table 'PreventiveSchedules' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__WOKEY = Columns["WOKEY"];
					System.Diagnostics.Debug.Assert(__WOKEY != null, "Column 'WOKEY' not found");
					__TYPE = Columns["TYPE"];
					System.Diagnostics.Debug.Assert(__TYPE != null, "Column 'TYPE' not found");
					__METERKEY = Columns["METERKEY"];
					System.Diagnostics.Debug.Assert(__METERKEY != null, "Column 'METERKEY' not found");
					__LASTSCHED = Columns["LASTSCHED"];
					System.Diagnostics.Debug.Assert(__LASTSCHED != null, "Column 'LASTSCHED' not found");
					__INTERVAL = Columns["INTERVAL"];
					System.Diagnostics.Debug.Assert(__INTERVAL != null, "Column 'INTERVAL' not found");
					__SEASONBEG = Columns["SEASONBEG"];
					System.Diagnostics.Debug.Assert(__SEASONBEG != null, "Column 'SEASONBEG' not found");
					__SEASONEND = Columns["SEASONEND"];
					System.Diagnostics.Debug.Assert(__SEASONEND != null, "Column 'SEASONEND' not found");
					__INHSEASON = Columns["INHSEASON"];
					System.Diagnostics.Debug.Assert(__INHSEASON != null, "Column 'INHSEASON' not found");
					__WEEKMASK = Columns["WEEKMASK"];
					System.Diagnostics.Debug.Assert(__WEEKMASK != null, "Column 'WEEKMASK' not found");
					__INHWEEK = Columns["INHWEEK"];
					System.Diagnostics.Debug.Assert(__INHWEEK != null, "Column 'INHWEEK' not found");
					__ALGORITHM = Columns["ALGORITHM"];
					System.Diagnostics.Debug.Assert(__ALGORITHM != null, "Column 'ALGORITHM' not found");
					__INHIBIT = Columns["INHIBIT"];
					System.Diagnostics.Debug.Assert(__INHIBIT != null, "Column 'INHIBIT' not found");
					__LASTWOMADE = Columns["LASTWOMADE"];
					System.Diagnostics.Debug.Assert(__LASTWOMADE != null, "Column 'LASTWOMADE' not found");
					__LATEINHIB = Columns["LATEINHIB"];
					System.Diagnostics.Debug.Assert(__LATEINHIB != null, "Column 'LATEINHIB' not found");
					__LASTDATE = Columns["LASTDATE"];
					System.Diagnostics.Debug.Assert(__LASTDATE != null, "Column 'LASTDATE' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Priorities table
			private DBI_Priorities __Priorities;

			/// <summary>
			/// Class to describe a Priorities table
			/// </summary>
			public class DBI_Priorities : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Priorities this_table;
					public FAccessor( DBI_Priorities this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Priorities's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Priorities's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Priorities's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Priorities's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Priorities()
					: base( "Priorities",
							delegate(DBI_Table tableSchema, IServer s) {
								return new PrioritiesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'Priorities' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Projects table
			private DBI_Projects __Projects;

			/// <summary>
			/// Class to describe a Projects table
			/// </summary>
			public class DBI_Projects : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Projects this_table;
					public FAccessor( DBI_Projects this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Projects's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Projects's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Projects's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Projects's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Projects()
					: base( "Projects",
							delegate(DBI_Table tableSchema, IServer s) {
								return new ProjectsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'Projects' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - PurchaseExtras table
			private DBI_PurchaseExtras __PurchaseExtras;

			/// <summary>
			/// Class to describe a PurchaseExtras table
			/// </summary>
			public class DBI_PurchaseExtras : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __POKEY;
				private DBI_Column __QTY;
				private DBI_Column __UOMKEY;
				private DBI_Column __COST;
				private DBI_Column __DESC;
				private DBI_Column __CATNO;
				private DBI_Column __ESTIMATE;
				private DBI_Column __TYPE;
				private DBI_Column __WOKEY;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_PurchaseExtras this_table;
					public FAccessor( DBI_PurchaseExtras this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the PurchaseExtras's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the PurchaseExtras's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the PurchaseExtras's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the PurchaseExtras's POKEY column with type integer(32) with labelkey='POKEY'
					/// </summary>
					public DBI_Column POKEY { get { return this_table.__POKEY; } }
					/// <summary>
					/// Denotes the PurchaseExtras's QTY column with type integer(32) with labelkey='QTY'
					/// </summary>
					public DBI_Column QTY { get { return this_table.__QTY; } }
					/// <summary>
					/// Denotes the PurchaseExtras's UOMKEY column with type integer(32) with labelkey='UOMKEY'
					/// </summary>
					public DBI_Column UOMKEY { get { return this_table.__UOMKEY; } }
					/// <summary>
					/// Denotes the PurchaseExtras's COST column with type integer(32) with labelkey='COST'
					/// </summary>
					public DBI_Column COST { get { return this_table.__COST; } }
					/// <summary>
					/// Denotes the PurchaseExtras's DESC column with type string(maxlength 40, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the PurchaseExtras's CATNO column with type string(maxlength 20, maxlines 0, trim) with labelkey='CATNO'
					/// </summary>
					public DBI_Column CATNO { get { return this_table.__CATNO; } }
					/// <summary>
					/// Denotes the PurchaseExtras's ESTIMATE column with type bool with labelkey='ESTIMATE'
					/// </summary>
					public DBI_Column ESTIMATE { get { return this_table.__ESTIMATE; } }
					/// <summary>
					/// Denotes the PurchaseExtras's TYPE column with type string(maxlength 1, maxlines 0, trim) with labelkey='TYPE'
					/// </summary>
					public DBI_Column TYPE { get { return this_table.__TYPE; } }
					/// <summary>
					/// Denotes the PurchaseExtras's WOKEY column with type integer(32) with labelkey='WOKEY'
					/// </summary>
					public DBI_Column WOKEY { get { return this_table.__WOKEY; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_PurchaseExtras()
					: base( "PurchaseExtras",
							delegate(DBI_Table tableSchema, IServer s) {
								return new PurchaseExtrasDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 12, "Table 'PurchaseExtras' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__POKEY = Columns["POKEY"];
					System.Diagnostics.Debug.Assert(__POKEY != null, "Column 'POKEY' not found");
					__QTY = Columns["QTY"];
					System.Diagnostics.Debug.Assert(__QTY != null, "Column 'QTY' not found");
					__UOMKEY = Columns["UOMKEY"];
					System.Diagnostics.Debug.Assert(__UOMKEY != null, "Column 'UOMKEY' not found");
					__COST = Columns["COST"];
					System.Diagnostics.Debug.Assert(__COST != null, "Column 'COST' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__CATNO = Columns["CATNO"];
					System.Diagnostics.Debug.Assert(__CATNO != null, "Column 'CATNO' not found");
					__ESTIMATE = Columns["ESTIMATE"];
					System.Diagnostics.Debug.Assert(__ESTIMATE != null, "Column 'ESTIMATE' not found");
					__TYPE = Columns["TYPE"];
					System.Diagnostics.Debug.Assert(__TYPE != null, "Column 'TYPE' not found");
					__WOKEY = Columns["WOKEY"];
					System.Diagnostics.Debug.Assert(__WOKEY != null, "Column 'WOKEY' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Purchases table
			private DBI_Purchases __Purchases;

			/// <summary>
			/// Class to describe a Purchases table
			/// </summary>
			public class DBI_Purchases : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __PONUM;
				private DBI_Column __VENDOR;
				private DBI_Column __ORDERNUM;
				private DBI_Column __COSTCENTER;
				private DBI_Column __NEEDED;
				private DBI_Column __EXPECTED;
				private DBI_Column __COMMENT;
				private DBI_Column __STATE;
				private DBI_Column __VOID;
				private DBI_Column __CREATED;
				private DBI_Column __CREATET;
				private DBI_Column __COMPLETED;
				private DBI_Column __COMPLETET;
				private DBI_Column __SUBMITD;
				private DBI_Column __SUBMITT;
				private DBI_Column __CLOSED;
				private DBI_Column __CLOSET;
				private DBI_Column __SHIPPING;
				private DBI_Column __TERMS;
				private DBI_Column __VCOMMENT;
				private DBI_Column __SHIPTO;
				private DBI_Column __DESC;
				private DBI_Column __NEEDPRINT;
				private DBI_Column __ORIGINATOR;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Purchases this_table;
					public FAccessor( DBI_Purchases this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Purchases's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Purchases's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Purchases's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the Purchases's PONUM column with type string(maxlength 15, maxlines 0, trim) with labelkey='PONUM'
					/// </summary>
					public DBI_Column PONUM { get { return this_table.__PONUM; } }
					/// <summary>
					/// Denotes the Purchases's VENDOR column with type integer(32) with labelkey='VENDOR'
					/// </summary>
					public DBI_Column VENDOR { get { return this_table.__VENDOR; } }
					/// <summary>
					/// Denotes the Purchases's ORDERNUM column with type string(maxlength 40, maxlines 0, trim) with labelkey='ORDERNUM'
					/// </summary>
					public DBI_Column ORDERNUM { get { return this_table.__ORDERNUM; } }
					/// <summary>
					/// Denotes the Purchases's COSTCENTER column with type string(maxlength 15, maxlines 0, trim) with labelkey='COSTCENTER'
					/// </summary>
					public DBI_Column COSTCENTER { get { return this_table.__COSTCENTER; } }
					/// <summary>
					/// Denotes the Purchases's NEEDED column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='NEEDED'
					/// </summary>
					public DBI_Column NEEDED { get { return this_table.__NEEDED; } }
					/// <summary>
					/// Denotes the Purchases's EXPECTED column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='EXPECTED'
					/// </summary>
					public DBI_Column EXPECTED { get { return this_table.__EXPECTED; } }
					/// <summary>
					/// Denotes the Purchases's COMMENT column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='COMMENT'
					/// </summary>
					public DBI_Column COMMENT { get { return this_table.__COMMENT; } }
					/// <summary>
					/// Denotes the Purchases's STATE column with type string(maxlength 1, maxlines 0, trim) with labelkey='STATE'
					/// </summary>
					public DBI_Column STATE { get { return this_table.__STATE; } }
					/// <summary>
					/// Denotes the Purchases's VOID column with type bool with labelkey='VOID'
					/// </summary>
					public DBI_Column VOID { get { return this_table.__VOID; } }
					/// <summary>
					/// Denotes the Purchases's CREATED column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='CREATED'
					/// </summary>
					public DBI_Column CREATED { get { return this_table.__CREATED; } }
					/// <summary>
					/// Denotes the Purchases's CREATET column with type string(maxlength 6, maxlines 0, trim) with labelkey='CREATET'
					/// </summary>
					public DBI_Column CREATET { get { return this_table.__CREATET; } }
					/// <summary>
					/// Denotes the Purchases's COMPLETED column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='COMPLETED'
					/// </summary>
					public DBI_Column COMPLETED { get { return this_table.__COMPLETED; } }
					/// <summary>
					/// Denotes the Purchases's COMPLETET column with type string(maxlength 6, maxlines 0, trim) with labelkey='COMPLETET'
					/// </summary>
					public DBI_Column COMPLETET { get { return this_table.__COMPLETET; } }
					/// <summary>
					/// Denotes the Purchases's SUBMITD column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='SUBMITD'
					/// </summary>
					public DBI_Column SUBMITD { get { return this_table.__SUBMITD; } }
					/// <summary>
					/// Denotes the Purchases's SUBMITT column with type string(maxlength 6, maxlines 0, trim) with labelkey='SUBMITT'
					/// </summary>
					public DBI_Column SUBMITT { get { return this_table.__SUBMITT; } }
					/// <summary>
					/// Denotes the Purchases's CLOSED column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='CLOSED'
					/// </summary>
					public DBI_Column CLOSED { get { return this_table.__CLOSED; } }
					/// <summary>
					/// Denotes the Purchases's CLOSET column with type string(maxlength 6, maxlines 0, trim) with labelkey='CLOSET'
					/// </summary>
					public DBI_Column CLOSET { get { return this_table.__CLOSET; } }
					/// <summary>
					/// Denotes the Purchases's SHIPPING column with type string(maxlength 10, maxlines 0, trim) with labelkey='SHIPPING'
					/// </summary>
					public DBI_Column SHIPPING { get { return this_table.__SHIPPING; } }
					/// <summary>
					/// Denotes the Purchases's TERMS column with type string(maxlength 10, maxlines 0, trim) with labelkey='TERMS'
					/// </summary>
					public DBI_Column TERMS { get { return this_table.__TERMS; } }
					/// <summary>
					/// Denotes the Purchases's VCOMMENT column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='VCOMMENT'
					/// </summary>
					public DBI_Column VCOMMENT { get { return this_table.__VCOMMENT; } }
					/// <summary>
					/// Denotes the Purchases's SHIPTO column with type integer(32) with labelkey='SHIPTO'
					/// </summary>
					public DBI_Column SHIPTO { get { return this_table.__SHIPTO; } }
					/// <summary>
					/// Denotes the Purchases's DESC column with type string(maxlength 60, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the Purchases's NEEDPRINT column with type bool with labelkey='NEEDPRINT'
					/// </summary>
					public DBI_Column NEEDPRINT { get { return this_table.__NEEDPRINT; } }
					/// <summary>
					/// Denotes the Purchases's ORIGINATOR column with type integer(32) with labelkey='ORIGINATOR'
					/// </summary>
					public DBI_Column ORIGINATOR { get { return this_table.__ORIGINATOR; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Purchases()
					: base( "Purchases",
							delegate(DBI_Table tableSchema, IServer s) {
								return new PurchasesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 27, "Table 'Purchases' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__PONUM = Columns["PONUM"];
					System.Diagnostics.Debug.Assert(__PONUM != null, "Column 'PONUM' not found");
					__VENDOR = Columns["VENDOR"];
					System.Diagnostics.Debug.Assert(__VENDOR != null, "Column 'VENDOR' not found");
					__ORDERNUM = Columns["ORDERNUM"];
					System.Diagnostics.Debug.Assert(__ORDERNUM != null, "Column 'ORDERNUM' not found");
					__COSTCENTER = Columns["COSTCENTER"];
					System.Diagnostics.Debug.Assert(__COSTCENTER != null, "Column 'COSTCENTER' not found");
					__NEEDED = Columns["NEEDED"];
					System.Diagnostics.Debug.Assert(__NEEDED != null, "Column 'NEEDED' not found");
					__EXPECTED = Columns["EXPECTED"];
					System.Diagnostics.Debug.Assert(__EXPECTED != null, "Column 'EXPECTED' not found");
					__COMMENT = Columns["COMMENT"];
					System.Diagnostics.Debug.Assert(__COMMENT != null, "Column 'COMMENT' not found");
					__STATE = Columns["STATE"];
					System.Diagnostics.Debug.Assert(__STATE != null, "Column 'STATE' not found");
					__VOID = Columns["VOID"];
					System.Diagnostics.Debug.Assert(__VOID != null, "Column 'VOID' not found");
					__CREATED = Columns["CREATED"];
					System.Diagnostics.Debug.Assert(__CREATED != null, "Column 'CREATED' not found");
					__CREATET = Columns["CREATET"];
					System.Diagnostics.Debug.Assert(__CREATET != null, "Column 'CREATET' not found");
					__COMPLETED = Columns["COMPLETED"];
					System.Diagnostics.Debug.Assert(__COMPLETED != null, "Column 'COMPLETED' not found");
					__COMPLETET = Columns["COMPLETET"];
					System.Diagnostics.Debug.Assert(__COMPLETET != null, "Column 'COMPLETET' not found");
					__SUBMITD = Columns["SUBMITD"];
					System.Diagnostics.Debug.Assert(__SUBMITD != null, "Column 'SUBMITD' not found");
					__SUBMITT = Columns["SUBMITT"];
					System.Diagnostics.Debug.Assert(__SUBMITT != null, "Column 'SUBMITT' not found");
					__CLOSED = Columns["CLOSED"];
					System.Diagnostics.Debug.Assert(__CLOSED != null, "Column 'CLOSED' not found");
					__CLOSET = Columns["CLOSET"];
					System.Diagnostics.Debug.Assert(__CLOSET != null, "Column 'CLOSET' not found");
					__SHIPPING = Columns["SHIPPING"];
					System.Diagnostics.Debug.Assert(__SHIPPING != null, "Column 'SHIPPING' not found");
					__TERMS = Columns["TERMS"];
					System.Diagnostics.Debug.Assert(__TERMS != null, "Column 'TERMS' not found");
					__VCOMMENT = Columns["VCOMMENT"];
					System.Diagnostics.Debug.Assert(__VCOMMENT != null, "Column 'VCOMMENT' not found");
					__SHIPTO = Columns["SHIPTO"];
					System.Diagnostics.Debug.Assert(__SHIPTO != null, "Column 'SHIPTO' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__NEEDPRINT = Columns["NEEDPRINT"];
					System.Diagnostics.Debug.Assert(__NEEDPRINT != null, "Column 'NEEDPRINT' not found");
					__ORIGINATOR = Columns["ORIGINATOR"];
					System.Diagnostics.Debug.Assert(__ORIGINATOR != null, "Column 'ORIGINATOR' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Receipts table
			private DBI_Receipts __Receipts;

			/// <summary>
			/// Class to describe a Receipts table
			/// </summary>
			public class DBI_Receipts : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __POKEY;
				private DBI_Column __DATE;
				private DBI_Column __TIME;
				private DBI_Column __WAYBILL;
				private DBI_Column __EXTRACOST;
				private DBI_Column __COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Receipts this_table;
					public FAccessor( DBI_Receipts this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Receipts's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Receipts's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Receipts's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the Receipts's POKEY column with type integer(32) with labelkey='POKEY'
					/// </summary>
					public DBI_Column POKEY { get { return this_table.__POKEY; } }
					/// <summary>
					/// Denotes the Receipts's DATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='DATE'
					/// </summary>
					public DBI_Column DATE { get { return this_table.__DATE; } }
					/// <summary>
					/// Denotes the Receipts's TIME column with type string(maxlength 6, maxlines 0, trim) with labelkey='TIME'
					/// </summary>
					public DBI_Column TIME { get { return this_table.__TIME; } }
					/// <summary>
					/// Denotes the Receipts's WAYBILL column with type string(maxlength 15, maxlines 0, trim) with labelkey='WAYBILL'
					/// </summary>
					public DBI_Column WAYBILL { get { return this_table.__WAYBILL; } }
					/// <summary>
					/// Denotes the Receipts's EXTRACOST column with type integer(32) with labelkey='EXTRACOST'
					/// </summary>
					public DBI_Column EXTRACOST { get { return this_table.__EXTRACOST; } }
					/// <summary>
					/// Denotes the Receipts's COMMENT column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='COMMENT'
					/// </summary>
					public DBI_Column COMMENT { get { return this_table.__COMMENT; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Receipts()
					: base( "Receipts",
							delegate(DBI_Table tableSchema, IServer s) {
								return new ReceiptsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 9, "Table 'Receipts' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__POKEY = Columns["POKEY"];
					System.Diagnostics.Debug.Assert(__POKEY != null, "Column 'POKEY' not found");
					__DATE = Columns["DATE"];
					System.Diagnostics.Debug.Assert(__DATE != null, "Column 'DATE' not found");
					__TIME = Columns["TIME"];
					System.Diagnostics.Debug.Assert(__TIME != null, "Column 'TIME' not found");
					__WAYBILL = Columns["WAYBILL"];
					System.Diagnostics.Debug.Assert(__WAYBILL != null, "Column 'WAYBILL' not found");
					__EXTRACOST = Columns["EXTRACOST"];
					System.Diagnostics.Debug.Assert(__EXTRACOST != null, "Column 'EXTRACOST' not found");
					__COMMENT = Columns["COMMENT"];
					System.Diagnostics.Debug.Assert(__COMMENT != null, "Column 'COMMENT' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - ServiceContracts table
			private DBI_ServiceContracts __ServiceContracts;

			/// <summary>
			/// Class to describe a ServiceContracts table
			/// </summary>
			public class DBI_ServiceContracts : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				private DBI_Column __VENDOR;
				private DBI_Column __STARTDATE;
				private DBI_Column __EXPIRYDATE;
				private DBI_Column __PART;
				private DBI_Column __LABOR;
				private DBI_Column __COST;
				private DBI_Column __COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_ServiceContracts this_table;
					public FAccessor( DBI_ServiceContracts this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the ServiceContracts's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the ServiceContracts's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the ServiceContracts's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the ServiceContracts's CODE column with type string(maxlength 15, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the ServiceContracts's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the ServiceContracts's VENDOR column with type integer(32) with labelkey='VENDOR'
					/// </summary>
					public DBI_Column VENDOR { get { return this_table.__VENDOR; } }
					/// <summary>
					/// Denotes the ServiceContracts's STARTDATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='STARTDATE'
					/// </summary>
					public DBI_Column STARTDATE { get { return this_table.__STARTDATE; } }
					/// <summary>
					/// Denotes the ServiceContracts's EXPIRYDATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='EXPIRYDATE'
					/// </summary>
					public DBI_Column EXPIRYDATE { get { return this_table.__EXPIRYDATE; } }
					/// <summary>
					/// Denotes the ServiceContracts's PART column with type bool with labelkey='PART'
					/// </summary>
					public DBI_Column PART { get { return this_table.__PART; } }
					/// <summary>
					/// Denotes the ServiceContracts's LABOR column with type bool with labelkey='LABOR'
					/// </summary>
					public DBI_Column LABOR { get { return this_table.__LABOR; } }
					/// <summary>
					/// Denotes the ServiceContracts's COST column with type integer(32) with labelkey='COST'
					/// </summary>
					public DBI_Column COST { get { return this_table.__COST; } }
					/// <summary>
					/// Denotes the ServiceContracts's COMMENT column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='COMMENT'
					/// </summary>
					public DBI_Column COMMENT { get { return this_table.__COMMENT; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_ServiceContracts()
					: base( "ServiceContracts",
							delegate(DBI_Table tableSchema, IServer s) {
								return new ServiceContractsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 12, "Table 'ServiceContracts' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__VENDOR = Columns["VENDOR"];
					System.Diagnostics.Debug.Assert(__VENDOR != null, "Column 'VENDOR' not found");
					__STARTDATE = Columns["STARTDATE"];
					System.Diagnostics.Debug.Assert(__STARTDATE != null, "Column 'STARTDATE' not found");
					__EXPIRYDATE = Columns["EXPIRYDATE"];
					System.Diagnostics.Debug.Assert(__EXPIRYDATE != null, "Column 'EXPIRYDATE' not found");
					__PART = Columns["PART"];
					System.Diagnostics.Debug.Assert(__PART != null, "Column 'PART' not found");
					__LABOR = Columns["LABOR"];
					System.Diagnostics.Debug.Assert(__LABOR != null, "Column 'LABOR' not found");
					__COST = Columns["COST"];
					System.Diagnostics.Debug.Assert(__COST != null, "Column 'COST' not found");
					__COMMENT = Columns["COMMENT"];
					System.Diagnostics.Debug.Assert(__COMMENT != null, "Column 'COMMENT' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - ServicedEquipment table
			private DBI_ServicedEquipment __ServicedEquipment;

			/// <summary>
			/// Class to describe a ServicedEquipment table
			/// </summary>
			public class DBI_ServicedEquipment : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __SVCKEY;
				private DBI_Column __EQUIPKEY;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_ServicedEquipment this_table;
					public FAccessor( DBI_ServicedEquipment this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the ServicedEquipment's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the ServicedEquipment's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the ServicedEquipment's SVCKEY column with type integer(32) with labelkey='SVCKEY'
					/// </summary>
					public DBI_Column SVCKEY { get { return this_table.__SVCKEY; } }
					/// <summary>
					/// Denotes the ServicedEquipment's EQUIPKEY column with type integer(32) with labelkey='EQUIPKEY'
					/// </summary>
					public DBI_Column EQUIPKEY { get { return this_table.__EQUIPKEY; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_ServicedEquipment()
					: base( "ServicedEquipment",
							delegate(DBI_Table tableSchema, IServer s) {
								return new ServicedEquipmentDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'ServicedEquipment' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__SVCKEY = Columns["SVCKEY"];
					System.Diagnostics.Debug.Assert(__SVCKEY != null, "Column 'SVCKEY' not found");
					__EQUIPKEY = Columns["EQUIPKEY"];
					System.Diagnostics.Debug.Assert(__EQUIPKEY != null, "Column 'EQUIPKEY' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - ShippingModes table
			private DBI_ShippingModes __ShippingModes;

			/// <summary>
			/// Class to describe a ShippingModes table
			/// </summary>
			public class DBI_ShippingModes : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_ShippingModes this_table;
					public FAccessor( DBI_ShippingModes this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the ShippingModes's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the ShippingModes's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the ShippingModes's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the ShippingModes's DESC column with type string(maxlength 40, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_ShippingModes()
					: base( "ShippingModes",
							delegate(DBI_Table tableSchema, IServer s) {
								return new ShippingModesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'ShippingModes' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - SpareParts table
			private DBI_SpareParts __SpareParts;

			/// <summary>
			/// Class to describe a SpareParts table
			/// </summary>
			public class DBI_SpareParts : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __EQUIPKEY;
				private DBI_Column __ITEMKEY;
				private DBI_Column __QTY;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_SpareParts this_table;
					public FAccessor( DBI_SpareParts this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the SpareParts's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the SpareParts's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the SpareParts's EQUIPKEY column with type integer(32) with labelkey='EQUIPKEY'
					/// </summary>
					public DBI_Column EQUIPKEY { get { return this_table.__EQUIPKEY; } }
					/// <summary>
					/// Denotes the SpareParts's ITEMKEY column with type integer(32) with labelkey='ITEMKEY'
					/// </summary>
					public DBI_Column ITEMKEY { get { return this_table.__ITEMKEY; } }
					/// <summary>
					/// Denotes the SpareParts's QTY column with type integer(32) with labelkey='QTY'
					/// </summary>
					public DBI_Column QTY { get { return this_table.__QTY; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_SpareParts()
					: base( "SpareParts",
							delegate(DBI_Table tableSchema, IServer s) {
								return new SparePartsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 5, "Table 'SpareParts' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__EQUIPKEY = Columns["EQUIPKEY"];
					System.Diagnostics.Debug.Assert(__EQUIPKEY != null, "Column 'EQUIPKEY' not found");
					__ITEMKEY = Columns["ITEMKEY"];
					System.Diagnostics.Debug.Assert(__ITEMKEY != null, "Column 'ITEMKEY' not found");
					__QTY = Columns["QTY"];
					System.Diagnostics.Debug.Assert(__QTY != null, "Column 'QTY' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Specifications table
			private DBI_Specifications __Specifications;

			/// <summary>
			/// Class to describe a Specifications table
			/// </summary>
			public class DBI_Specifications : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __ASSOCKEY;
				private DBI_Column __TYPE;
				private DBI_Column __CODE;
				private DBI_Column __TKEY;
				private DBI_Column __INFO;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Specifications this_table;
					public FAccessor( DBI_Specifications this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Specifications's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Specifications's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Specifications's ASSOCKEY column with type integer(32) with labelkey='ASSOCKEY'
					/// </summary>
					public DBI_Column ASSOCKEY { get { return this_table.__ASSOCKEY; } }
					/// <summary>
					/// Denotes the Specifications's TYPE column with type string(maxlength 1, maxlines 0, trim) with labelkey='TYPE'
					/// </summary>
					public DBI_Column TYPE { get { return this_table.__TYPE; } }
					/// <summary>
					/// Denotes the Specifications's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Specifications's TKEY column with type integer(32) with labelkey='TKEY'
					/// </summary>
					public DBI_Column TKEY { get { return this_table.__TKEY; } }
					/// <summary>
					/// Denotes the Specifications's INFO column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='INFO'
					/// </summary>
					public DBI_Column INFO { get { return this_table.__INFO; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Specifications()
					: base( "Specifications",
							delegate(DBI_Table tableSchema, IServer s) {
								return new SpecificationsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 7, "Table 'Specifications' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__ASSOCKEY = Columns["ASSOCKEY"];
					System.Diagnostics.Debug.Assert(__ASSOCKEY != null, "Column 'ASSOCKEY' not found");
					__TYPE = Columns["TYPE"];
					System.Diagnostics.Debug.Assert(__TYPE != null, "Column 'TYPE' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__TKEY = Columns["TKEY"];
					System.Diagnostics.Debug.Assert(__TKEY != null, "Column 'TKEY' not found");
					__INFO = Columns["INFO"];
					System.Diagnostics.Debug.Assert(__INFO != null, "Column 'INFO' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Storerooms table
			private DBI_Storerooms __Storerooms;

			/// <summary>
			/// Class to describe a Storerooms table
			/// </summary>
			public class DBI_Storerooms : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __BUILDING;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				private DBI_Column __HIDDEN;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Storerooms this_table;
					public FAccessor( DBI_Storerooms this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Storerooms's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Storerooms's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Storerooms's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the Storerooms's BUILDING column with type integer(32) with labelkey='BUILDING'
					/// </summary>
					public DBI_Column BUILDING { get { return this_table.__BUILDING; } }
					/// <summary>
					/// Denotes the Storerooms's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Storerooms's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the Storerooms's HIDDEN column with type bool with labelkey='HIDDEN'
					/// </summary>
					public DBI_Column HIDDEN { get { return this_table.__HIDDEN; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Storerooms()
					: base( "Storerooms",
							delegate(DBI_Table tableSchema, IServer s) {
								return new StoreroomsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 7, "Table 'Storerooms' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__BUILDING = Columns["BUILDING"];
					System.Diagnostics.Debug.Assert(__BUILDING != null, "Column 'BUILDING' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__HIDDEN = Columns["HIDDEN"];
					System.Diagnostics.Debug.Assert(__HIDDEN != null, "Column 'HIDDEN' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Systems table
			private DBI_Systems __Systems;

			/// <summary>
			/// Class to describe a Systems table
			/// </summary>
			public class DBI_Systems : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Systems this_table;
					public FAccessor( DBI_Systems this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Systems's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Systems's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Systems's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Systems's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Systems()
					: base( "Systems",
							delegate(DBI_Table tableSchema, IServer s) {
								return new SystemsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'Systems' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Templates table
			private DBI_Templates __Templates;

			/// <summary>
			/// Class to describe a Templates table
			/// </summary>
			public class DBI_Templates : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				private DBI_Column __HIDDEN;
				private DBI_Column __PLATE;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Templates this_table;
					public FAccessor( DBI_Templates this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Templates's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Templates's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Templates's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the Templates's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Templates's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the Templates's HIDDEN column with type bool with labelkey='HIDDEN'
					/// </summary>
					public DBI_Column HIDDEN { get { return this_table.__HIDDEN; } }
					/// <summary>
					/// Denotes the Templates's PLATE column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='PLATE'
					/// </summary>
					public DBI_Column PLATE { get { return this_table.__PLATE; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Templates()
					: base( "Templates",
							delegate(DBI_Table tableSchema, IServer s) {
								return new TemplatesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 7, "Table 'Templates' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__HIDDEN = Columns["HIDDEN"];
					System.Diagnostics.Debug.Assert(__HIDDEN != null, "Column 'HIDDEN' not found");
					__PLATE = Columns["PLATE"];
					System.Diagnostics.Debug.Assert(__PLATE != null, "Column 'PLATE' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Terms table
			private DBI_Terms __Terms;

			/// <summary>
			/// Class to describe a Terms table
			/// </summary>
			public class DBI_Terms : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Terms this_table;
					public FAccessor( DBI_Terms this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Terms's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Terms's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Terms's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Terms's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Terms()
					: base( "Terms",
							delegate(DBI_Table tableSchema, IServer s) {
								return new TermsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'Terms' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Trades table
			private DBI_Trades __Trades;

			/// <summary>
			/// Class to describe a Trades table
			/// </summary>
			public class DBI_Trades : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Trades this_table;
					public FAccessor( DBI_Trades this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Trades's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Trades's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Trades's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Trades's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Trades()
					: base( "Trades",
							delegate(DBI_Table tableSchema, IServer s) {
								return new TradesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'Trades' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - UnitCategories table
			private DBI_UnitCategories __UnitCategories;

			/// <summary>
			/// Class to describe a UnitCategories table
			/// </summary>
			public class DBI_UnitCategories : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __UTYPE;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_UnitCategories this_table;
					public FAccessor( DBI_UnitCategories this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the UnitCategories's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the UnitCategories's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the UnitCategories's UTYPE column with type string(maxlength 1, maxlines 0, trim) with labelkey='UTYPE'
					/// </summary>
					public DBI_Column UTYPE { get { return this_table.__UTYPE; } }
					/// <summary>
					/// Denotes the UnitCategories's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the UnitCategories's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_UnitCategories()
					: base( "UnitCategories",
							delegate(DBI_Table tableSchema, IServer s) {
								return new UnitCategoriesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 5, "Table 'UnitCategories' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__UTYPE = Columns["UTYPE"];
					System.Diagnostics.Debug.Assert(__UTYPE != null, "Column 'UTYPE' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Units table
			private DBI_Units __Units;

			/// <summary>
			/// Class to describe a Units table
			/// </summary>
			public class DBI_Units : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __UTYPE;
				private DBI_Column __BUILDING;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				private DBI_Column __LOCATION;
				private DBI_Column __CATEGORY;
				private DBI_Column __MAKE;
				private DBI_Column __MODEL;
				private DBI_Column __SERIAL;
				private DBI_Column __DRAW;
				private DBI_Column __PURCHASE;
				private DBI_Column __ORGCOST;
				private DBI_Column __REPCOST;
				private DBI_Column __ESTIMATE;
				private DBI_Column __TLIFE;
				private DBI_Column __VENDOR;
				private DBI_Column __SERVICE;
				private DBI_Column __WEXPIRY;
				private DBI_Column __OWNER;
				private DBI_Column __ASSET;
				private DBI_Column __COSTCENTER;
				private DBI_Column __SYSTEM;
				private DBI_Column __OBSOLETE;
				private DBI_Column __DEPRATE;
				private DBI_Column __SCRAPD;
				private DBI_Column __SCRAPV;
				private DBI_Column __CONTACT;
				private DBI_Column __ACCESS;
				private DBI_Column __COMMENT;
				private DBI_Column __HIDDEN;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Units this_table;
					public FAccessor( DBI_Units this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Units's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Units's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Units's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the Units's UTYPE column with type string(maxlength 1, maxlines 0, trim) with labelkey='UTYPE'
					/// </summary>
					public DBI_Column UTYPE { get { return this_table.__UTYPE; } }
					/// <summary>
					/// Denotes the Units's BUILDING column with type integer(32) with labelkey='BUILDING'
					/// </summary>
					public DBI_Column BUILDING { get { return this_table.__BUILDING; } }
					/// <summary>
					/// Denotes the Units's CODE column with type string(maxlength 30, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Units's DESC column with type string(maxlength 50, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the Units's LOCATION column with type string(maxlength 40, maxlines 0, trim) with labelkey='LOCATION'
					/// </summary>
					public DBI_Column LOCATION { get { return this_table.__LOCATION; } }
					/// <summary>
					/// Denotes the Units's CATEGORY column with type string(maxlength 10, maxlines 0, trim) with labelkey='CATEGORY'
					/// </summary>
					public DBI_Column CATEGORY { get { return this_table.__CATEGORY; } }
					/// <summary>
					/// Denotes the Units's MAKE column with type string(maxlength 30, maxlines 0, trim) with labelkey='MAKE'
					/// </summary>
					public DBI_Column MAKE { get { return this_table.__MAKE; } }
					/// <summary>
					/// Denotes the Units's MODEL column with type string(maxlength 30, maxlines 0, trim) with labelkey='MODEL'
					/// </summary>
					public DBI_Column MODEL { get { return this_table.__MODEL; } }
					/// <summary>
					/// Denotes the Units's SERIAL column with type string(maxlength 30, maxlines 0, trim) with labelkey='SERIAL'
					/// </summary>
					public DBI_Column SERIAL { get { return this_table.__SERIAL; } }
					/// <summary>
					/// Denotes the Units's DRAW column with type string(maxlength 10, maxlines 0, trim) with labelkey='DRAW'
					/// </summary>
					public DBI_Column DRAW { get { return this_table.__DRAW; } }
					/// <summary>
					/// Denotes the Units's PURCHASE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='PURCHASE'
					/// </summary>
					public DBI_Column PURCHASE { get { return this_table.__PURCHASE; } }
					/// <summary>
					/// Denotes the Units's ORGCOST column with type integer(32) with labelkey='ORGCOST'
					/// </summary>
					public DBI_Column ORGCOST { get { return this_table.__ORGCOST; } }
					/// <summary>
					/// Denotes the Units's REPCOST column with type integer(32) with labelkey='REPCOST'
					/// </summary>
					public DBI_Column REPCOST { get { return this_table.__REPCOST; } }
					/// <summary>
					/// Denotes the Units's ESTIMATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='ESTIMATE'
					/// </summary>
					public DBI_Column ESTIMATE { get { return this_table.__ESTIMATE; } }
					/// <summary>
					/// Denotes the Units's TLIFE column with type integer(32) with labelkey='TLIFE'
					/// </summary>
					public DBI_Column TLIFE { get { return this_table.__TLIFE; } }
					/// <summary>
					/// Denotes the Units's VENDOR column with type integer(32) with labelkey='VENDOR'
					/// </summary>
					public DBI_Column VENDOR { get { return this_table.__VENDOR; } }
					/// <summary>
					/// Denotes the Units's SERVICE column with type integer(32) with labelkey='SERVICE'
					/// </summary>
					public DBI_Column SERVICE { get { return this_table.__SERVICE; } }
					/// <summary>
					/// Denotes the Units's WEXPIRY column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='WEXPIRY'
					/// </summary>
					public DBI_Column WEXPIRY { get { return this_table.__WEXPIRY; } }
					/// <summary>
					/// Denotes the Units's OWNER column with type string(maxlength 10, maxlines 0, trim) with labelkey='OWNER'
					/// </summary>
					public DBI_Column OWNER { get { return this_table.__OWNER; } }
					/// <summary>
					/// Denotes the Units's ASSET column with type string(maxlength 15, maxlines 0, trim) with labelkey='ASSET'
					/// </summary>
					public DBI_Column ASSET { get { return this_table.__ASSET; } }
					/// <summary>
					/// Denotes the Units's COSTCENTER column with type string(maxlength 15, maxlines 0, trim) with labelkey='COSTCENTER'
					/// </summary>
					public DBI_Column COSTCENTER { get { return this_table.__COSTCENTER; } }
					/// <summary>
					/// Denotes the Units's SYSTEM column with type string(maxlength 10, maxlines 0, trim) with labelkey='SYSTEM'
					/// </summary>
					public DBI_Column SYSTEM { get { return this_table.__SYSTEM; } }
					/// <summary>
					/// Denotes the Units's OBSOLETE column with type string(maxlength 10, maxlines 0, trim) with labelkey='OBSOLETE'
					/// </summary>
					public DBI_Column OBSOLETE { get { return this_table.__OBSOLETE; } }
					/// <summary>
					/// Denotes the Units's DEPRATE column with type integer(32) with labelkey='DEPRATE'
					/// </summary>
					public DBI_Column DEPRATE { get { return this_table.__DEPRATE; } }
					/// <summary>
					/// Denotes the Units's SCRAPD column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='SCRAPD'
					/// </summary>
					public DBI_Column SCRAPD { get { return this_table.__SCRAPD; } }
					/// <summary>
					/// Denotes the Units's SCRAPV column with type integer(32) with labelkey='SCRAPV'
					/// </summary>
					public DBI_Column SCRAPV { get { return this_table.__SCRAPV; } }
					/// <summary>
					/// Denotes the Units's CONTACT column with type integer(32) with labelkey='CONTACT'
					/// </summary>
					public DBI_Column CONTACT { get { return this_table.__CONTACT; } }
					/// <summary>
					/// Denotes the Units's ACCESS column with type string(maxlength 10, maxlines 0, trim) with labelkey='ACCESS'
					/// </summary>
					public DBI_Column ACCESS { get { return this_table.__ACCESS; } }
					/// <summary>
					/// Denotes the Units's COMMENT column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='COMMENT'
					/// </summary>
					public DBI_Column COMMENT { get { return this_table.__COMMENT; } }
					/// <summary>
					/// Denotes the Units's HIDDEN column with type bool with labelkey='HIDDEN'
					/// </summary>
					public DBI_Column HIDDEN { get { return this_table.__HIDDEN; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Units()
					: base( "Units",
							delegate(DBI_Table tableSchema, IServer s) {
								return new UnitsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 33, "Table 'Units' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__UTYPE = Columns["UTYPE"];
					System.Diagnostics.Debug.Assert(__UTYPE != null, "Column 'UTYPE' not found");
					__BUILDING = Columns["BUILDING"];
					System.Diagnostics.Debug.Assert(__BUILDING != null, "Column 'BUILDING' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__LOCATION = Columns["LOCATION"];
					System.Diagnostics.Debug.Assert(__LOCATION != null, "Column 'LOCATION' not found");
					__CATEGORY = Columns["CATEGORY"];
					System.Diagnostics.Debug.Assert(__CATEGORY != null, "Column 'CATEGORY' not found");
					__MAKE = Columns["MAKE"];
					System.Diagnostics.Debug.Assert(__MAKE != null, "Column 'MAKE' not found");
					__MODEL = Columns["MODEL"];
					System.Diagnostics.Debug.Assert(__MODEL != null, "Column 'MODEL' not found");
					__SERIAL = Columns["SERIAL"];
					System.Diagnostics.Debug.Assert(__SERIAL != null, "Column 'SERIAL' not found");
					__DRAW = Columns["DRAW"];
					System.Diagnostics.Debug.Assert(__DRAW != null, "Column 'DRAW' not found");
					__PURCHASE = Columns["PURCHASE"];
					System.Diagnostics.Debug.Assert(__PURCHASE != null, "Column 'PURCHASE' not found");
					__ORGCOST = Columns["ORGCOST"];
					System.Diagnostics.Debug.Assert(__ORGCOST != null, "Column 'ORGCOST' not found");
					__REPCOST = Columns["REPCOST"];
					System.Diagnostics.Debug.Assert(__REPCOST != null, "Column 'REPCOST' not found");
					__ESTIMATE = Columns["ESTIMATE"];
					System.Diagnostics.Debug.Assert(__ESTIMATE != null, "Column 'ESTIMATE' not found");
					__TLIFE = Columns["TLIFE"];
					System.Diagnostics.Debug.Assert(__TLIFE != null, "Column 'TLIFE' not found");
					__VENDOR = Columns["VENDOR"];
					System.Diagnostics.Debug.Assert(__VENDOR != null, "Column 'VENDOR' not found");
					__SERVICE = Columns["SERVICE"];
					System.Diagnostics.Debug.Assert(__SERVICE != null, "Column 'SERVICE' not found");
					__WEXPIRY = Columns["WEXPIRY"];
					System.Diagnostics.Debug.Assert(__WEXPIRY != null, "Column 'WEXPIRY' not found");
					__OWNER = Columns["OWNER"];
					System.Diagnostics.Debug.Assert(__OWNER != null, "Column 'OWNER' not found");
					__ASSET = Columns["ASSET"];
					System.Diagnostics.Debug.Assert(__ASSET != null, "Column 'ASSET' not found");
					__COSTCENTER = Columns["COSTCENTER"];
					System.Diagnostics.Debug.Assert(__COSTCENTER != null, "Column 'COSTCENTER' not found");
					__SYSTEM = Columns["SYSTEM"];
					System.Diagnostics.Debug.Assert(__SYSTEM != null, "Column 'SYSTEM' not found");
					__OBSOLETE = Columns["OBSOLETE"];
					System.Diagnostics.Debug.Assert(__OBSOLETE != null, "Column 'OBSOLETE' not found");
					__DEPRATE = Columns["DEPRATE"];
					System.Diagnostics.Debug.Assert(__DEPRATE != null, "Column 'DEPRATE' not found");
					__SCRAPD = Columns["SCRAPD"];
					System.Diagnostics.Debug.Assert(__SCRAPD != null, "Column 'SCRAPD' not found");
					__SCRAPV = Columns["SCRAPV"];
					System.Diagnostics.Debug.Assert(__SCRAPV != null, "Column 'SCRAPV' not found");
					__CONTACT = Columns["CONTACT"];
					System.Diagnostics.Debug.Assert(__CONTACT != null, "Column 'CONTACT' not found");
					__ACCESS = Columns["ACCESS"];
					System.Diagnostics.Debug.Assert(__ACCESS != null, "Column 'ACCESS' not found");
					__COMMENT = Columns["COMMENT"];
					System.Diagnostics.Debug.Assert(__COMMENT != null, "Column 'COMMENT' not found");
					__HIDDEN = Columns["HIDDEN"];
					System.Diagnostics.Debug.Assert(__HIDDEN != null, "Column 'HIDDEN' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - UoM table
			private DBI_UoM __UoM;

			/// <summary>
			/// Class to describe a UoM table
			/// </summary>
			public class DBI_UoM : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				private DBI_Column __KEY;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_UoM this_table;
					public FAccessor( DBI_UoM this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the UoM's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the UoM's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the UoM's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the UoM's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the UoM's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_UoM()
					: base( "UoM",
							delegate(DBI_Table tableSchema, IServer s) {
								return new UoMDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 5, "Table 'UoM' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - VendorCategories table
			private DBI_VendorCategories __VendorCategories;

			/// <summary>
			/// Class to describe a VendorCategories table
			/// </summary>
			public class DBI_VendorCategories : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_VendorCategories this_table;
					public FAccessor( DBI_VendorCategories this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the VendorCategories's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the VendorCategories's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the VendorCategories's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the VendorCategories's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_VendorCategories()
					: base( "VendorCategories",
							delegate(DBI_Table tableSchema, IServer s) {
								return new VendorCategoriesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'VendorCategories' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - Vendors table
			private DBI_Vendors __Vendors;

			/// <summary>
			/// Class to describe a Vendors table
			/// </summary>
			public class DBI_Vendors : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				private DBI_Column __CONTACT;
				private DBI_Column __CATEGORY;
				private DBI_Column __ADD1;
				private DBI_Column __ADD2;
				private DBI_Column __ADD3;
				private DBI_Column __TEL;
				private DBI_Column __FAX;
				private DBI_Column __WEB;
				private DBI_Column __ACCOUNTNUM;
				private DBI_Column __EMAIL;
				private DBI_Column __HIDDEN;
				private DBI_Column __COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_Vendors this_table;
					public FAccessor( DBI_Vendors this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the Vendors's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the Vendors's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the Vendors's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the Vendors's CODE column with type string(maxlength 15, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the Vendors's DESC column with type string(maxlength 40, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
					/// <summary>
					/// Denotes the Vendors's CONTACT column with type string(maxlength 30, maxlines 0, trim) with labelkey='CONTACT'
					/// </summary>
					public DBI_Column CONTACT { get { return this_table.__CONTACT; } }
					/// <summary>
					/// Denotes the Vendors's CATEGORY column with type string(maxlength 10, maxlines 0, trim) with labelkey='CATEGORY'
					/// </summary>
					public DBI_Column CATEGORY { get { return this_table.__CATEGORY; } }
					/// <summary>
					/// Denotes the Vendors's ADD1 column with type string(maxlength 30, maxlines 0, trim) with labelkey='ADD1'
					/// </summary>
					public DBI_Column ADD1 { get { return this_table.__ADD1; } }
					/// <summary>
					/// Denotes the Vendors's ADD2 column with type string(maxlength 30, maxlines 0, trim) with labelkey='ADD2'
					/// </summary>
					public DBI_Column ADD2 { get { return this_table.__ADD2; } }
					/// <summary>
					/// Denotes the Vendors's ADD3 column with type string(maxlength 30, maxlines 0, trim) with labelkey='ADD3'
					/// </summary>
					public DBI_Column ADD3 { get { return this_table.__ADD3; } }
					/// <summary>
					/// Denotes the Vendors's TEL column with type string(maxlength 42, maxlines 0, trim) with labelkey='TEL'
					/// </summary>
					public DBI_Column TEL { get { return this_table.__TEL; } }
					/// <summary>
					/// Denotes the Vendors's FAX column with type string(maxlength 42, maxlines 0, trim) with labelkey='FAX'
					/// </summary>
					public DBI_Column FAX { get { return this_table.__FAX; } }
					/// <summary>
					/// Denotes the Vendors's WEB column with type string(maxlength 128, maxlines 0, trim) with labelkey='WEB'
					/// </summary>
					public DBI_Column WEB { get { return this_table.__WEB; } }
					/// <summary>
					/// Denotes the Vendors's ACCOUNTNUM column with type string(maxlength 30, maxlines 0, trim) with labelkey='ACCOUNTNUM'
					/// </summary>
					public DBI_Column ACCOUNTNUM { get { return this_table.__ACCOUNTNUM; } }
					/// <summary>
					/// Denotes the Vendors's EMAIL column with type string(maxlength 128, maxlines 0, trim) with labelkey='EMAIL'
					/// </summary>
					public DBI_Column EMAIL { get { return this_table.__EMAIL; } }
					/// <summary>
					/// Denotes the Vendors's HIDDEN column with type bool with labelkey='HIDDEN'
					/// </summary>
					public DBI_Column HIDDEN { get { return this_table.__HIDDEN; } }
					/// <summary>
					/// Denotes the Vendors's COMMENT column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='COMMENT'
					/// </summary>
					public DBI_Column COMMENT { get { return this_table.__COMMENT; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_Vendors()
					: base( "Vendors",
							delegate(DBI_Table tableSchema, IServer s) {
								return new VendorsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 17, "Table 'Vendors' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					__CONTACT = Columns["CONTACT"];
					System.Diagnostics.Debug.Assert(__CONTACT != null, "Column 'CONTACT' not found");
					__CATEGORY = Columns["CATEGORY"];
					System.Diagnostics.Debug.Assert(__CATEGORY != null, "Column 'CATEGORY' not found");
					__ADD1 = Columns["ADD1"];
					System.Diagnostics.Debug.Assert(__ADD1 != null, "Column 'ADD1' not found");
					__ADD2 = Columns["ADD2"];
					System.Diagnostics.Debug.Assert(__ADD2 != null, "Column 'ADD2' not found");
					__ADD3 = Columns["ADD3"];
					System.Diagnostics.Debug.Assert(__ADD3 != null, "Column 'ADD3' not found");
					__TEL = Columns["TEL"];
					System.Diagnostics.Debug.Assert(__TEL != null, "Column 'TEL' not found");
					__FAX = Columns["FAX"];
					System.Diagnostics.Debug.Assert(__FAX != null, "Column 'FAX' not found");
					__WEB = Columns["WEB"];
					System.Diagnostics.Debug.Assert(__WEB != null, "Column 'WEB' not found");
					__ACCOUNTNUM = Columns["ACCOUNTNUM"];
					System.Diagnostics.Debug.Assert(__ACCOUNTNUM != null, "Column 'ACCOUNTNUM' not found");
					__EMAIL = Columns["EMAIL"];
					System.Diagnostics.Debug.Assert(__EMAIL != null, "Column 'EMAIL' not found");
					__HIDDEN = Columns["HIDDEN"];
					System.Diagnostics.Debug.Assert(__HIDDEN != null, "Column 'HIDDEN' not found");
					__COMMENT = Columns["COMMENT"];
					System.Diagnostics.Debug.Assert(__COMMENT != null, "Column 'COMMENT' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - WorkCategories table
			private DBI_WorkCategories __WorkCategories;

			/// <summary>
			/// Class to describe a WorkCategories table
			/// </summary>
			public class DBI_WorkCategories : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __CODE;
				private DBI_Column __DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_WorkCategories this_table;
					public FAccessor( DBI_WorkCategories this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the WorkCategories's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the WorkCategories's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the WorkCategories's CODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CODE'
					/// </summary>
					public DBI_Column CODE { get { return this_table.__CODE; } }
					/// <summary>
					/// Denotes the WorkCategories's DESC column with type string(maxlength 30, maxlines 0, trim) with labelkey='DESC'
					/// </summary>
					public DBI_Column DESC { get { return this_table.__DESC; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_WorkCategories()
					: base( "WorkCategories",
							delegate(DBI_Table tableSchema, IServer s) {
								return new WorkCategoriesDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 4, "Table 'WorkCategories' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__CODE = Columns["CODE"];
					System.Diagnostics.Debug.Assert(__CODE != null, "Column 'CODE' not found");
					__DESC = Columns["DESC"];
					System.Diagnostics.Debug.Assert(__DESC != null, "Column 'DESC' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - WorkOrders table
			private DBI_WorkOrders __WorkOrders;

			/// <summary>
			/// Class to describe a WorkOrders table
			/// </summary>
			public class DBI_WorkOrders : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __WONUM;
				private DBI_Column __TYPE;
				private DBI_Column __CLASS;
				private DBI_Column __LINKKEY;
				private DBI_Column __UNITKEY;
				private DBI_Column __WTYPE;
				private DBI_Column __COSTCENTER;
				private DBI_Column __PROJECT;
				private DBI_Column __ACCESSCODE;
				private DBI_Column __PRIORITY;
				private DBI_Column __ORIGINATOR;
				private DBI_Column __REQUESTOR;
				private DBI_Column __SUBJECT;
				private DBI_Column __WDESC;
				private DBI_Column __CREATEDATE;
				private DBI_Column __CREATETIME;
				private DBI_Column __CLOSEDATE;
				private DBI_Column __CLOSETIME;
				private DBI_Column __CLOSECODE;
				private DBI_Column __CLOSECOMM;
				private DBI_Column __DOWNTIME;
				private DBI_Column __NEEDPRINT;
				private DBI_Column __WORKDATE;
				private DBI_Column __WINTERVAL;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_WorkOrders this_table;
					public FAccessor( DBI_WorkOrders this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the WorkOrders's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the WorkOrders's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the WorkOrders's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the WorkOrders's WONUM column with type string(maxlength 15, maxlines 0, trim) with labelkey='WONUM'
					/// </summary>
					public DBI_Column WONUM { get { return this_table.__WONUM; } }
					/// <summary>
					/// Denotes the WorkOrders's TYPE column with type string(maxlength 1, maxlines 0, trim) with labelkey='TYPE'
					/// </summary>
					public DBI_Column TYPE { get { return this_table.__TYPE; } }
					/// <summary>
					/// Denotes the WorkOrders's CLASS column with type string(maxlength 1, maxlines 0, trim) with labelkey='CLASS'
					/// </summary>
					public DBI_Column CLASS { get { return this_table.__CLASS; } }
					/// <summary>
					/// Denotes the WorkOrders's LINKKEY column with type integer(32) with labelkey='LINKKEY'
					/// </summary>
					public DBI_Column LINKKEY { get { return this_table.__LINKKEY; } }
					/// <summary>
					/// Denotes the WorkOrders's UNITKEY column with type integer(32) with labelkey='UNITKEY'
					/// </summary>
					public DBI_Column UNITKEY { get { return this_table.__UNITKEY; } }
					/// <summary>
					/// Denotes the WorkOrders's WTYPE column with type string(maxlength 10, maxlines 0, trim) with labelkey='WTYPE'
					/// </summary>
					public DBI_Column WTYPE { get { return this_table.__WTYPE; } }
					/// <summary>
					/// Denotes the WorkOrders's COSTCENTER column with type string(maxlength 15, maxlines 0, trim) with labelkey='COSTCENTER'
					/// </summary>
					public DBI_Column COSTCENTER { get { return this_table.__COSTCENTER; } }
					/// <summary>
					/// Denotes the WorkOrders's PROJECT column with type string(maxlength 10, maxlines 0, trim) with labelkey='PROJECT'
					/// </summary>
					public DBI_Column PROJECT { get { return this_table.__PROJECT; } }
					/// <summary>
					/// Denotes the WorkOrders's ACCESSCODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='ACCESSCODE'
					/// </summary>
					public DBI_Column ACCESSCODE { get { return this_table.__ACCESSCODE; } }
					/// <summary>
					/// Denotes the WorkOrders's PRIORITY column with type string(maxlength 10, maxlines 0, trim) with labelkey='PRIORITY'
					/// </summary>
					public DBI_Column PRIORITY { get { return this_table.__PRIORITY; } }
					/// <summary>
					/// Denotes the WorkOrders's ORIGINATOR column with type integer(32) with labelkey='ORIGINATOR'
					/// </summary>
					public DBI_Column ORIGINATOR { get { return this_table.__ORIGINATOR; } }
					/// <summary>
					/// Denotes the WorkOrders's REQUESTOR column with type integer(32) with labelkey='REQUESTOR'
					/// </summary>
					public DBI_Column REQUESTOR { get { return this_table.__REQUESTOR; } }
					/// <summary>
					/// Denotes the WorkOrders's SUBJECT column with type string(maxlength 60, maxlines 0, trim) with labelkey='SUBJECT'
					/// </summary>
					public DBI_Column SUBJECT { get { return this_table.__SUBJECT; } }
					/// <summary>
					/// Denotes the WorkOrders's WDESC column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='WDESC'
					/// </summary>
					public DBI_Column WDESC { get { return this_table.__WDESC; } }
					/// <summary>
					/// Denotes the WorkOrders's CREATEDATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='CREATEDATE'
					/// </summary>
					public DBI_Column CREATEDATE { get { return this_table.__CREATEDATE; } }
					/// <summary>
					/// Denotes the WorkOrders's CREATETIME column with type string(maxlength 6, maxlines 0, trim) with labelkey='CREATETIME'
					/// </summary>
					public DBI_Column CREATETIME { get { return this_table.__CREATETIME; } }
					/// <summary>
					/// Denotes the WorkOrders's CLOSEDATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='CLOSEDATE'
					/// </summary>
					public DBI_Column CLOSEDATE { get { return this_table.__CLOSEDATE; } }
					/// <summary>
					/// Denotes the WorkOrders's CLOSETIME column with type string(maxlength 6, maxlines 0, trim) with labelkey='CLOSETIME'
					/// </summary>
					public DBI_Column CLOSETIME { get { return this_table.__CLOSETIME; } }
					/// <summary>
					/// Denotes the WorkOrders's CLOSECODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='CLOSECODE'
					/// </summary>
					public DBI_Column CLOSECODE { get { return this_table.__CLOSECODE; } }
					/// <summary>
					/// Denotes the WorkOrders's CLOSECOMM column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='CLOSECOMM'
					/// </summary>
					public DBI_Column CLOSECOMM { get { return this_table.__CLOSECOMM; } }
					/// <summary>
					/// Denotes the WorkOrders's DOWNTIME column with type string(maxlength 6, maxlines 0, trim) with labelkey='DOWNTIME'
					/// </summary>
					public DBI_Column DOWNTIME { get { return this_table.__DOWNTIME; } }
					/// <summary>
					/// Denotes the WorkOrders's NEEDPRINT column with type bool with labelkey='NEEDPRINT'
					/// </summary>
					public DBI_Column NEEDPRINT { get { return this_table.__NEEDPRINT; } }
					/// <summary>
					/// Denotes the WorkOrders's WORKDATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='WORKDATE'
					/// </summary>
					public DBI_Column WORKDATE { get { return this_table.__WORKDATE; } }
					/// <summary>
					/// Denotes the WorkOrders's WINTERVAL column with type integer(32) with labelkey='WINTERVAL'
					/// </summary>
					public DBI_Column WINTERVAL { get { return this_table.__WINTERVAL; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_WorkOrders()
					: base( "WorkOrders",
							delegate(DBI_Table tableSchema, IServer s) {
								return new WorkOrdersDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 27, "Table 'WorkOrders' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__WONUM = Columns["WONUM"];
					System.Diagnostics.Debug.Assert(__WONUM != null, "Column 'WONUM' not found");
					__TYPE = Columns["TYPE"];
					System.Diagnostics.Debug.Assert(__TYPE != null, "Column 'TYPE' not found");
					__CLASS = Columns["CLASS"];
					System.Diagnostics.Debug.Assert(__CLASS != null, "Column 'CLASS' not found");
					__LINKKEY = Columns["LINKKEY"];
					System.Diagnostics.Debug.Assert(__LINKKEY != null, "Column 'LINKKEY' not found");
					__UNITKEY = Columns["UNITKEY"];
					System.Diagnostics.Debug.Assert(__UNITKEY != null, "Column 'UNITKEY' not found");
					__WTYPE = Columns["WTYPE"];
					System.Diagnostics.Debug.Assert(__WTYPE != null, "Column 'WTYPE' not found");
					__COSTCENTER = Columns["COSTCENTER"];
					System.Diagnostics.Debug.Assert(__COSTCENTER != null, "Column 'COSTCENTER' not found");
					__PROJECT = Columns["PROJECT"];
					System.Diagnostics.Debug.Assert(__PROJECT != null, "Column 'PROJECT' not found");
					__ACCESSCODE = Columns["ACCESSCODE"];
					System.Diagnostics.Debug.Assert(__ACCESSCODE != null, "Column 'ACCESSCODE' not found");
					__PRIORITY = Columns["PRIORITY"];
					System.Diagnostics.Debug.Assert(__PRIORITY != null, "Column 'PRIORITY' not found");
					__ORIGINATOR = Columns["ORIGINATOR"];
					System.Diagnostics.Debug.Assert(__ORIGINATOR != null, "Column 'ORIGINATOR' not found");
					__REQUESTOR = Columns["REQUESTOR"];
					System.Diagnostics.Debug.Assert(__REQUESTOR != null, "Column 'REQUESTOR' not found");
					__SUBJECT = Columns["SUBJECT"];
					System.Diagnostics.Debug.Assert(__SUBJECT != null, "Column 'SUBJECT' not found");
					__WDESC = Columns["WDESC"];
					System.Diagnostics.Debug.Assert(__WDESC != null, "Column 'WDESC' not found");
					__CREATEDATE = Columns["CREATEDATE"];
					System.Diagnostics.Debug.Assert(__CREATEDATE != null, "Column 'CREATEDATE' not found");
					__CREATETIME = Columns["CREATETIME"];
					System.Diagnostics.Debug.Assert(__CREATETIME != null, "Column 'CREATETIME' not found");
					__CLOSEDATE = Columns["CLOSEDATE"];
					System.Diagnostics.Debug.Assert(__CLOSEDATE != null, "Column 'CLOSEDATE' not found");
					__CLOSETIME = Columns["CLOSETIME"];
					System.Diagnostics.Debug.Assert(__CLOSETIME != null, "Column 'CLOSETIME' not found");
					__CLOSECODE = Columns["CLOSECODE"];
					System.Diagnostics.Debug.Assert(__CLOSECODE != null, "Column 'CLOSECODE' not found");
					__CLOSECOMM = Columns["CLOSECOMM"];
					System.Diagnostics.Debug.Assert(__CLOSECOMM != null, "Column 'CLOSECOMM' not found");
					__DOWNTIME = Columns["DOWNTIME"];
					System.Diagnostics.Debug.Assert(__DOWNTIME != null, "Column 'DOWNTIME' not found");
					__NEEDPRINT = Columns["NEEDPRINT"];
					System.Diagnostics.Debug.Assert(__NEEDPRINT != null, "Column 'NEEDPRINT' not found");
					__WORKDATE = Columns["WORKDATE"];
					System.Diagnostics.Debug.Assert(__WORKDATE != null, "Column 'WORKDATE' not found");
					__WINTERVAL = Columns["WINTERVAL"];
					System.Diagnostics.Debug.Assert(__WINTERVAL != null, "Column 'WINTERVAL' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#region - WorkRequests table
			private DBI_WorkRequests __WorkRequests;

			/// <summary>
			/// Class to describe a WorkRequests table
			/// </summary>
			public class DBI_WorkRequests : DBI_Table {
				public FAccessor F;
				private DBI_Column __RECNO;
				private DBI_Column __Id;
				private DBI_Column __KEY;
				private DBI_Column __WRNUM;
				private DBI_Column __STATUS;
				private DBI_Column __DATE;
				private DBI_Column __TIME;
				private DBI_Column __REQUESTOR;
				private DBI_Column __UNITKEY;
				private DBI_Column __WTYPE;
				private DBI_Column __SUBJECT;
				private DBI_Column __ACCESSCODE;
				private DBI_Column __PRIORITY;
				private DBI_Column __WDESC;
				private DBI_Column __CLOSEDATE;
				private DBI_Column __CLOSETIME;
				private DBI_Column __COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public struct FAccessor {
					private DBI_WorkRequests this_table;
					public FAccessor( DBI_WorkRequests this_table )
					{
						this.this_table = this_table;
					}
					/// <summary>
					/// Denotes the WorkRequests's RECNO column with type integer(32) with labelkey='RECNO'
					/// </summary>
					public DBI_Column RECNO { get { return this_table.__RECNO; } }
					/// <summary>
					/// Denotes the WorkRequests's Id column with type id(nonnull) with labelkey='Id'
					/// </summary>
					public DBI_Column Id { get { return this_table.__Id; } }
					/// <summary>
					/// Denotes the WorkRequests's KEY column with type integer(32) with labelkey='KEY'
					/// </summary>
					public DBI_Column KEY { get { return this_table.__KEY; } }
					/// <summary>
					/// Denotes the WorkRequests's WRNUM column with type string(maxlength 15, maxlines 0, trim) with labelkey='WRNUM'
					/// </summary>
					public DBI_Column WRNUM { get { return this_table.__WRNUM; } }
					/// <summary>
					/// Denotes the WorkRequests's STATUS column with type string(maxlength 1, maxlines 0, trim) with labelkey='STATUS'
					/// </summary>
					public DBI_Column STATUS { get { return this_table.__STATUS; } }
					/// <summary>
					/// Denotes the WorkRequests's DATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='DATE'
					/// </summary>
					public DBI_Column DATE { get { return this_table.__DATE; } }
					/// <summary>
					/// Denotes the WorkRequests's TIME column with type string(maxlength 6, maxlines 0, trim) with labelkey='TIME'
					/// </summary>
					public DBI_Column TIME { get { return this_table.__TIME; } }
					/// <summary>
					/// Denotes the WorkRequests's REQUESTOR column with type integer(32) with labelkey='REQUESTOR'
					/// </summary>
					public DBI_Column REQUESTOR { get { return this_table.__REQUESTOR; } }
					/// <summary>
					/// Denotes the WorkRequests's UNITKEY column with type integer(32) with labelkey='UNITKEY'
					/// </summary>
					public DBI_Column UNITKEY { get { return this_table.__UNITKEY; } }
					/// <summary>
					/// Denotes the WorkRequests's WTYPE column with type string(maxlength 10, maxlines 0, trim) with labelkey='WTYPE'
					/// </summary>
					public DBI_Column WTYPE { get { return this_table.__WTYPE; } }
					/// <summary>
					/// Denotes the WorkRequests's SUBJECT column with type string(maxlength 60, maxlines 0, trim) with labelkey='SUBJECT'
					/// </summary>
					public DBI_Column SUBJECT { get { return this_table.__SUBJECT; } }
					/// <summary>
					/// Denotes the WorkRequests's ACCESSCODE column with type string(maxlength 10, maxlines 0, trim) with labelkey='ACCESSCODE'
					/// </summary>
					public DBI_Column ACCESSCODE { get { return this_table.__ACCESSCODE; } }
					/// <summary>
					/// Denotes the WorkRequests's PRIORITY column with type string(maxlength 10, maxlines 0, trim) with labelkey='PRIORITY'
					/// </summary>
					public DBI_Column PRIORITY { get { return this_table.__PRIORITY; } }
					/// <summary>
					/// Denotes the WorkRequests's WDESC column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='WDESC'
					/// </summary>
					public DBI_Column WDESC { get { return this_table.__WDESC; } }
					/// <summary>
					/// Denotes the WorkRequests's CLOSEDATE column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='CLOSEDATE'
					/// </summary>
					public DBI_Column CLOSEDATE { get { return this_table.__CLOSEDATE; } }
					/// <summary>
					/// Denotes the WorkRequests's CLOSETIME column with type string(maxlength 6, maxlines 0, trim) with labelkey='CLOSETIME'
					/// </summary>
					public DBI_Column CLOSETIME { get { return this_table.__CLOSETIME; } }
					/// <summary>
					/// Denotes the WorkRequests's COMMENT column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='COMMENT'
					/// </summary>
					public DBI_Column COMMENT { get { return this_table.__COMMENT; } }
				}

				/// <summary>
				/// Internal table constructor
				/// </summary>
				internal DBI_WorkRequests()
					: base( "WorkRequests",
							delegate(DBI_Table tableSchema, IServer s) {
								return new WorkRequestsDataTable(tableSchema, s);
							}
						) {
				}

				/// <summary>
				/// Custom-table-class member variable initialization
				/// </summary>
				public override void SetupVariables() {
					// The columns are predefined by the Xml load. In theory they are in the same order as when this file
					// was built and we could find them by index, but finding them by name is more bullet-proof.
					System.Diagnostics.Debug.Assert(Columns.Count == 17, "Table 'WorkRequests' column count mismatch");
					__RECNO = Columns["RECNO"];
					System.Diagnostics.Debug.Assert(__RECNO != null, "Column 'RECNO' not found");
					__Id = Columns["Id"];
					System.Diagnostics.Debug.Assert(__Id != null, "Column 'Id' not found");
					__KEY = Columns["KEY"];
					System.Diagnostics.Debug.Assert(__KEY != null, "Column 'KEY' not found");
					__WRNUM = Columns["WRNUM"];
					System.Diagnostics.Debug.Assert(__WRNUM != null, "Column 'WRNUM' not found");
					__STATUS = Columns["STATUS"];
					System.Diagnostics.Debug.Assert(__STATUS != null, "Column 'STATUS' not found");
					__DATE = Columns["DATE"];
					System.Diagnostics.Debug.Assert(__DATE != null, "Column 'DATE' not found");
					__TIME = Columns["TIME"];
					System.Diagnostics.Debug.Assert(__TIME != null, "Column 'TIME' not found");
					__REQUESTOR = Columns["REQUESTOR"];
					System.Diagnostics.Debug.Assert(__REQUESTOR != null, "Column 'REQUESTOR' not found");
					__UNITKEY = Columns["UNITKEY"];
					System.Diagnostics.Debug.Assert(__UNITKEY != null, "Column 'UNITKEY' not found");
					__WTYPE = Columns["WTYPE"];
					System.Diagnostics.Debug.Assert(__WTYPE != null, "Column 'WTYPE' not found");
					__SUBJECT = Columns["SUBJECT"];
					System.Diagnostics.Debug.Assert(__SUBJECT != null, "Column 'SUBJECT' not found");
					__ACCESSCODE = Columns["ACCESSCODE"];
					System.Diagnostics.Debug.Assert(__ACCESSCODE != null, "Column 'ACCESSCODE' not found");
					__PRIORITY = Columns["PRIORITY"];
					System.Diagnostics.Debug.Assert(__PRIORITY != null, "Column 'PRIORITY' not found");
					__WDESC = Columns["WDESC"];
					System.Diagnostics.Debug.Assert(__WDESC != null, "Column 'WDESC' not found");
					__CLOSEDATE = Columns["CLOSEDATE"];
					System.Diagnostics.Debug.Assert(__CLOSEDATE != null, "Column 'CLOSEDATE' not found");
					__CLOSETIME = Columns["CLOSETIME"];
					System.Diagnostics.Debug.Assert(__CLOSETIME != null, "Column 'CLOSETIME' not found");
					__COMMENT = Columns["COMMENT"];
					System.Diagnostics.Debug.Assert(__COMMENT != null, "Column 'COMMENT' not found");
					F = new FAccessor(this);
				}
			}
			#endregion
			#endregion
			#region T - the public portal for getting the custom-typed DBI_Table objects for each table
			public struct TAccessor {
				private SchemaClass this_schema;
				public TAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Accessors
				/// <summary>
				/// Denotes the CustomImportDirectives table.
				/// </summary>
				public DBI_CustomImportDirectives CustomImportDirectives { get { return this_schema.__CustomImportDirectives; }}
				/// <summary>
				/// Denotes the AtRequestAccounts table.
				/// </summary>
				public DBI_AtRequestAccounts AtRequestAccounts { get { return this_schema.__AtRequestAccounts; }}
				/// <summary>
				/// Denotes the AtRequestConfiguration table.
				/// </summary>
				public DBI_AtRequestConfiguration AtRequestConfiguration { get { return this_schema.__AtRequestConfiguration; }}
				/// <summary>
				/// Denotes the Defaults table.
				/// </summary>
				public DBI_Defaults Defaults { get { return this_schema.__Defaults; }}
				/// <summary>
				/// Denotes the ArchivedSets table.
				/// </summary>
				public DBI_ArchivedSets ArchivedSets { get { return this_schema.__ArchivedSets; }}
				/// <summary>
				/// Denotes the Permissions table.
				/// </summary>
				public DBI_Permissions Permissions { get { return this_schema.__Permissions; }}
				/// <summary>
				/// Denotes the EditPrograms table.
				/// </summary>
				public DBI_EditPrograms EditPrograms { get { return this_schema.__EditPrograms; }}
				/// <summary>
				/// Denotes the Settings table.
				/// </summary>
				public DBI_Settings Settings { get { return this_schema.__Settings; }}
				/// <summary>
				/// Denotes the AccessCodes table.
				/// </summary>
				public DBI_AccessCodes AccessCodes { get { return this_schema.__AccessCodes; }}
				/// <summary>
				/// Denotes the Adjustments table.
				/// </summary>
				public DBI_Adjustments Adjustments { get { return this_schema.__Adjustments; }}
				/// <summary>
				/// Denotes the AssetCodes table.
				/// </summary>
				public DBI_AssetCodes AssetCodes { get { return this_schema.__AssetCodes; }}
				/// <summary>
				/// Denotes the Buildings table.
				/// </summary>
				public DBI_Buildings Buildings { get { return this_schema.__Buildings; }}
				/// <summary>
				/// Denotes the Chargebacks table.
				/// </summary>
				public DBI_Chargebacks Chargebacks { get { return this_schema.__Chargebacks; }}
				/// <summary>
				/// Denotes the ClosingCodes table.
				/// </summary>
				public DBI_ClosingCodes ClosingCodes { get { return this_schema.__ClosingCodes; }}
				/// <summary>
				/// Denotes the Contacts table.
				/// </summary>
				public DBI_Contacts Contacts { get { return this_schema.__Contacts; }}
				/// <summary>
				/// Denotes the CostCenters table.
				/// </summary>
				public DBI_CostCenters CostCenters { get { return this_schema.__CostCenters; }}
				/// <summary>
				/// Denotes the InvCategories table.
				/// </summary>
				public DBI_InvCategories InvCategories { get { return this_schema.__InvCategories; }}
				/// <summary>
				/// Denotes the InvItems table.
				/// </summary>
				public DBI_InvItems InvItems { get { return this_schema.__InvItems; }}
				/// <summary>
				/// Denotes the InvLocations table.
				/// </summary>
				public DBI_InvLocations InvLocations { get { return this_schema.__InvLocations; }}
				/// <summary>
				/// Denotes the InvTransactions table.
				/// </summary>
				public DBI_InvTransactions InvTransactions { get { return this_schema.__InvTransactions; }}
				/// <summary>
				/// Denotes the Issues table.
				/// </summary>
				public DBI_Issues Issues { get { return this_schema.__Issues; }}
				/// <summary>
				/// Denotes the Labor table.
				/// </summary>
				public DBI_Labor Labor { get { return this_schema.__Labor; }}
				/// <summary>
				/// Denotes the MeterHistory table.
				/// </summary>
				public DBI_MeterHistory MeterHistory { get { return this_schema.__MeterHistory; }}
				/// <summary>
				/// Denotes the Meters table.
				/// </summary>
				public DBI_Meters Meters { get { return this_schema.__Meters; }}
				/// <summary>
				/// Denotes the Obsoletes table.
				/// </summary>
				public DBI_Obsoletes Obsoletes { get { return this_schema.__Obsoletes; }}
				/// <summary>
				/// Denotes the Ownerships table.
				/// </summary>
				public DBI_Ownerships Ownerships { get { return this_schema.__Ownerships; }}
				/// <summary>
				/// Denotes the Personnel table.
				/// </summary>
				public DBI_Personnel Personnel { get { return this_schema.__Personnel; }}
				/// <summary>
				/// Denotes the PreventiveSchedules table.
				/// </summary>
				public DBI_PreventiveSchedules PreventiveSchedules { get { return this_schema.__PreventiveSchedules; }}
				/// <summary>
				/// Denotes the Priorities table.
				/// </summary>
				public DBI_Priorities Priorities { get { return this_schema.__Priorities; }}
				/// <summary>
				/// Denotes the Projects table.
				/// </summary>
				public DBI_Projects Projects { get { return this_schema.__Projects; }}
				/// <summary>
				/// Denotes the PurchaseExtras table.
				/// </summary>
				public DBI_PurchaseExtras PurchaseExtras { get { return this_schema.__PurchaseExtras; }}
				/// <summary>
				/// Denotes the Purchases table.
				/// </summary>
				public DBI_Purchases Purchases { get { return this_schema.__Purchases; }}
				/// <summary>
				/// Denotes the Receipts table.
				/// </summary>
				public DBI_Receipts Receipts { get { return this_schema.__Receipts; }}
				/// <summary>
				/// Denotes the ServiceContracts table.
				/// </summary>
				public DBI_ServiceContracts ServiceContracts { get { return this_schema.__ServiceContracts; }}
				/// <summary>
				/// Denotes the ServicedEquipment table.
				/// </summary>
				public DBI_ServicedEquipment ServicedEquipment { get { return this_schema.__ServicedEquipment; }}
				/// <summary>
				/// Denotes the ShippingModes table.
				/// </summary>
				public DBI_ShippingModes ShippingModes { get { return this_schema.__ShippingModes; }}
				/// <summary>
				/// Denotes the SpareParts table.
				/// </summary>
				public DBI_SpareParts SpareParts { get { return this_schema.__SpareParts; }}
				/// <summary>
				/// Denotes the Specifications table.
				/// </summary>
				public DBI_Specifications Specifications { get { return this_schema.__Specifications; }}
				/// <summary>
				/// Denotes the Storerooms table.
				/// </summary>
				public DBI_Storerooms Storerooms { get { return this_schema.__Storerooms; }}
				/// <summary>
				/// Denotes the Systems table.
				/// </summary>
				public DBI_Systems Systems { get { return this_schema.__Systems; }}
				/// <summary>
				/// Denotes the Templates table.
				/// </summary>
				public DBI_Templates Templates { get { return this_schema.__Templates; }}
				/// <summary>
				/// Denotes the Terms table.
				/// </summary>
				public DBI_Terms Terms { get { return this_schema.__Terms; }}
				/// <summary>
				/// Denotes the Trades table.
				/// </summary>
				public DBI_Trades Trades { get { return this_schema.__Trades; }}
				/// <summary>
				/// Denotes the UnitCategories table.
				/// </summary>
				public DBI_UnitCategories UnitCategories { get { return this_schema.__UnitCategories; }}
				/// <summary>
				/// Denotes the Units table.
				/// </summary>
				public DBI_Units Units { get { return this_schema.__Units; }}
				/// <summary>
				/// Denotes the UoM table.
				/// </summary>
				public DBI_UoM UoM { get { return this_schema.__UoM; }}
				/// <summary>
				/// Denotes the VendorCategories table.
				/// </summary>
				public DBI_VendorCategories VendorCategories { get { return this_schema.__VendorCategories; }}
				/// <summary>
				/// Denotes the Vendors table.
				/// </summary>
				public DBI_Vendors Vendors { get { return this_schema.__Vendors; }}
				/// <summary>
				/// Denotes the WorkCategories table.
				/// </summary>
				public DBI_WorkCategories WorkCategories { get { return this_schema.__WorkCategories; }}
				/// <summary>
				/// Denotes the WorkOrders table.
				/// </summary>
				public DBI_WorkOrders WorkOrders { get { return this_schema.__WorkOrders; }}
				/// <summary>
				/// Denotes the WorkRequests table.
				/// </summary>
				public DBI_WorkRequests WorkRequests { get { return this_schema.__WorkRequests; }}
				#endregion
			}
			public TAccessor T { get { return _T; } }
			private TAccessor _T;
			#endregion
			#region V - the public portal for getting the DBI_Variable objects for Database Variables
			public struct VAccessor {
				private SchemaClass this_schema;
				public VAccessor( SchemaClass this_schema )
				{
					this.this_schema = this_schema;
				}
				#region Variable Accessors
				#endregion
			}
			public VAccessor V { get { return vstruct; } }	// Variables
			private VAccessor vstruct;
			#endregion
		}
		#endregion
		#region - The static member that contains the Schema
		public readonly static SchemaClass Schema = SchemaClass.Instance;
		#endregion
		#endregion
		#region Database Path definitions
		[Thinkage.Libraries.Translation.Invariant]
		public class PathClass {
			/// <summary>
			/// Class containing the relationship paths of all tables,
			/// </summary>
			public readonly TAccessor T;
			/// <summary>
			/// Private constructor for singleton creation
			/// </summary>
			private PathClass() {
				T = new TAccessor(this);
			}

			/// <summary>
			/// The instantiation of the singleton Path object
			/// </summary>
			public static readonly PathClass Instance = new PathClass();
			#region DBI_Path Definitions

			#region DBI_Path CustomImportDirectives
			private PathToCustomImportDirectivesRow __pCustomImportDirectives = new PathToCustomImportDirectivesRow( SchemaClass.Instance.T.CustomImportDirectives );

			/// <summary>
			/// The CustomImportDirectives path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToCustomImportDirectivesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _DIRECTIVE;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToCustomImportDirectivesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToCustomImportDirectivesRow _BasePath;
					/// <summary>
					/// Provides the path to CustomImportDirectives's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.CustomImportDirectives.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to CustomImportDirectives's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.CustomImportDirectives.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to CustomImportDirectives's DIRECTIVE with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField DIRECTIVE { get { if (_BasePath._DIRECTIVE == null) _BasePath._DIRECTIVE = new PathToField(_BasePath, Schema.T.CustomImportDirectives.F.DIRECTIVE ); return _BasePath._DIRECTIVE; } }
				}

				internal PathToCustomImportDirectivesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToCustomImportDirectivesRow( DBI_Table t ) : base( t ) { }
				internal PathToCustomImportDirectivesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToCustomImportDirectivesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToCustomImportDirectivesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToCustomImportDirectivesRow PathToReferencedRow { get { return (PathToCustomImportDirectivesRow)base.PathToReferencedRow; } }

				internal PathToCustomImportDirectivesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToCustomImportDirectivesRow(rootTableSchema, columns);
				}
			}
			public class LinkToCustomImportDirectives {
				public LinkToCustomImportDirectives(DBI_Path referencing_path) {
					RECNO = new PathToCustomImportDirectivesRow(referencing_path.PathThroughLinkage(Schema.T.CustomImportDirectives.F.RECNO));
					Id = new PathToCustomImportDirectivesRow(referencing_path.PathThroughLinkage(Schema.T.CustomImportDirectives.F.Id));
				}
				public readonly PathToCustomImportDirectivesRow RECNO;
				public readonly PathToCustomImportDirectivesRow Id;
			}
			#endregion

			#region DBI_Path AtRequestAccounts
			private PathToAtRequestAccountsRow __pAtRequestAccounts = new PathToAtRequestAccountsRow( SchemaClass.Instance.T.AtRequestAccounts );

			/// <summary>
			/// The AtRequestAccounts path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToAtRequestAccountsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _FLAGS;
				private PathToField _CONTACTKEY;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToAtRequestAccountsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToAtRequestAccountsRow _BasePath;
					/// <summary>
					/// Provides the path to AtRequestAccounts's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.AtRequestAccounts.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to AtRequestAccounts's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.AtRequestAccounts.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to AtRequestAccounts's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.AtRequestAccounts.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to AtRequestAccounts's FLAGS with type integer(32)
					/// </summary>
					public PathToField FLAGS { get { if (_BasePath._FLAGS == null) _BasePath._FLAGS = new PathToField(_BasePath, Schema.T.AtRequestAccounts.F.FLAGS ); return _BasePath._FLAGS; } }
					/// <summary>
					/// Provides the path to AtRequestAccounts's CONTACTKEY with type integer(32)
					/// </summary>
					public PathToField CONTACTKEY { get { if (_BasePath._CONTACTKEY == null) _BasePath._CONTACTKEY = new PathToField(_BasePath, Schema.T.AtRequestAccounts.F.CONTACTKEY ); return _BasePath._CONTACTKEY; } }
				}

				internal PathToAtRequestAccountsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToAtRequestAccountsRow( DBI_Table t ) : base( t ) { }
				internal PathToAtRequestAccountsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToAtRequestAccountsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToAtRequestAccountsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToAtRequestAccountsRow PathToReferencedRow { get { return (PathToAtRequestAccountsRow)base.PathToReferencedRow; } }

				internal PathToAtRequestAccountsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToAtRequestAccountsRow(rootTableSchema, columns);
				}
			}
			public class LinkToAtRequestAccounts {
				public LinkToAtRequestAccounts(DBI_Path referencing_path) {
					RECNO = new PathToAtRequestAccountsRow(referencing_path.PathThroughLinkage(Schema.T.AtRequestAccounts.F.RECNO));
					Id = new PathToAtRequestAccountsRow(referencing_path.PathThroughLinkage(Schema.T.AtRequestAccounts.F.Id));
					KEY = new PathToAtRequestAccountsRow(referencing_path.PathThroughLinkage(Schema.T.AtRequestAccounts.F.KEY));
				}
				public readonly PathToAtRequestAccountsRow RECNO;
				public readonly PathToAtRequestAccountsRow Id;
				public readonly PathToAtRequestAccountsRow KEY;
			}
			#endregion

			#region DBI_Path AtRequestConfiguration
			private PathToAtRequestConfigurationRow __pAtRequestConfiguration = new PathToAtRequestConfigurationRow( SchemaClass.Instance.T.AtRequestConfiguration );

			/// <summary>
			/// The AtRequestConfiguration path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToAtRequestConfigurationRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _VALUE;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToAtRequestConfigurationRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToAtRequestConfigurationRow _BasePath;
					/// <summary>
					/// Provides the path to AtRequestConfiguration's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.AtRequestConfiguration.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to AtRequestConfiguration's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.AtRequestConfiguration.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to AtRequestConfiguration's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.AtRequestConfiguration.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to AtRequestConfiguration's VALUE with type string(maxlength 512, maxlines 0, trim)
					/// </summary>
					public PathToField VALUE { get { if (_BasePath._VALUE == null) _BasePath._VALUE = new PathToField(_BasePath, Schema.T.AtRequestConfiguration.F.VALUE ); return _BasePath._VALUE; } }
				}

				internal PathToAtRequestConfigurationRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToAtRequestConfigurationRow( DBI_Table t ) : base( t ) { }
				internal PathToAtRequestConfigurationRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToAtRequestConfigurationLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToAtRequestConfigurationRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToAtRequestConfigurationRow PathToReferencedRow { get { return (PathToAtRequestConfigurationRow)base.PathToReferencedRow; } }

				internal PathToAtRequestConfigurationLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToAtRequestConfigurationRow(rootTableSchema, columns);
				}
			}
			public class LinkToAtRequestConfiguration {
				public LinkToAtRequestConfiguration(DBI_Path referencing_path) {
					RECNO = new PathToAtRequestConfigurationRow(referencing_path.PathThroughLinkage(Schema.T.AtRequestConfiguration.F.RECNO));
					Id = new PathToAtRequestConfigurationRow(referencing_path.PathThroughLinkage(Schema.T.AtRequestConfiguration.F.Id));
					KEY = new PathToAtRequestConfigurationRow(referencing_path.PathThroughLinkage(Schema.T.AtRequestConfiguration.F.KEY));
				}
				public readonly PathToAtRequestConfigurationRow RECNO;
				public readonly PathToAtRequestConfigurationRow Id;
				public readonly PathToAtRequestConfigurationRow KEY;
			}
			#endregion

			#region DBI_Path Defaults
			private PathToDefaultsRow __pDefaults = new PathToDefaultsRow( SchemaClass.Instance.T.Defaults );

			/// <summary>
			/// The Defaults path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToDefaultsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _LGEND;
				private PathToField _GFREQ;
				private PathToField _PHONEPREX;
				private PathToField _EDITPKEY;
				private PathToField _SERIAL;
				private PathToField _COMPANYNAM;
				private PathToField _COMPANYADD;
				private PathToField _BILLADDR;
				private PathToField _POCONTACT;
				private PathToField _REINDEX;
				private PathToField _PRFORMAT;
				private PathToField _POFORMAT;
				private PathToField _WRFORMAT;
				private PathToField _WOFORMAT;
				private PathToField _CURRSYM;
				private PathToField _FRDATE;
				private PathToField _FRCPOS;
				private PathToField _FRCNEG;
				private PathToField _FRCDEC;
				private PathToField _FRCGROUP;
				private PathToField _FRCGSIZE;
				private PathToField _FRCLGSIZE;
				private PathToField _FCDORDER;
				private PathToField _FCDDELIM;
				private PathToField _FCDMFORM;
				private PathToField _FCTAMPM;
				private PathToField _DBVERSION;
				private PathToField _MINVERSION;
				private PathToField _UPGRSTEP;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToDefaultsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToDefaultsRow _BasePath;
					/// <summary>
					/// Provides the path to Defaults's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Defaults.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Defaults's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Defaults.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Defaults's LGEND with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField LGEND { get { if (_BasePath._LGEND == null) _BasePath._LGEND = new PathToField(_BasePath, Schema.T.Defaults.F.LGEND ); return _BasePath._LGEND; } }
					/// <summary>
					/// Provides the path to Defaults's GFREQ with type string(maxlength 3, maxlines 0, trim)
					/// </summary>
					public PathToField GFREQ { get { if (_BasePath._GFREQ == null) _BasePath._GFREQ = new PathToField(_BasePath, Schema.T.Defaults.F.GFREQ ); return _BasePath._GFREQ; } }
					/// <summary>
					/// Provides the path to Defaults's PHONEPREX with type string(maxlength 16, maxlines 0, trim)
					/// </summary>
					public PathToField PHONEPREX { get { if (_BasePath._PHONEPREX == null) _BasePath._PHONEPREX = new PathToField(_BasePath, Schema.T.Defaults.F.PHONEPREX ); return _BasePath._PHONEPREX; } }
					/// <summary>
					/// Provides the path to Defaults's EDITPKEY with type integer(32)
					/// </summary>
					public PathToField EDITPKEY { get { if (_BasePath._EDITPKEY == null) _BasePath._EDITPKEY = new PathToField(_BasePath, Schema.T.Defaults.F.EDITPKEY ); return _BasePath._EDITPKEY; } }
					/// <summary>
					/// Provides the path to Defaults's SERIAL with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField SERIAL { get { if (_BasePath._SERIAL == null) _BasePath._SERIAL = new PathToField(_BasePath, Schema.T.Defaults.F.SERIAL ); return _BasePath._SERIAL; } }
					/// <summary>
					/// Provides the path to Defaults's COMPANYNAM with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField COMPANYNAM { get { if (_BasePath._COMPANYNAM == null) _BasePath._COMPANYNAM = new PathToField(_BasePath, Schema.T.Defaults.F.COMPANYNAM ); return _BasePath._COMPANYNAM; } }
					/// <summary>
					/// Provides the path to Defaults's COMPANYADD with type string(maxlength 250, maxlines 0, trim)
					/// </summary>
					public PathToField COMPANYADD { get { if (_BasePath._COMPANYADD == null) _BasePath._COMPANYADD = new PathToField(_BasePath, Schema.T.Defaults.F.COMPANYADD ); return _BasePath._COMPANYADD; } }
					/// <summary>
					/// Provides the path to Defaults's BILLADDR with type string(maxlength 250, maxlines 0, trim)
					/// </summary>
					public PathToField BILLADDR { get { if (_BasePath._BILLADDR == null) _BasePath._BILLADDR = new PathToField(_BasePath, Schema.T.Defaults.F.BILLADDR ); return _BasePath._BILLADDR; } }
					/// <summary>
					/// Provides the path to Defaults's POCONTACT with type string(maxlength 250, maxlines 0, trim)
					/// </summary>
					public PathToField POCONTACT { get { if (_BasePath._POCONTACT == null) _BasePath._POCONTACT = new PathToField(_BasePath, Schema.T.Defaults.F.POCONTACT ); return _BasePath._POCONTACT; } }
					/// <summary>
					/// Provides the path to Defaults's REINDEX with type integer(32)
					/// </summary>
					public PathToField REINDEX { get { if (_BasePath._REINDEX == null) _BasePath._REINDEX = new PathToField(_BasePath, Schema.T.Defaults.F.REINDEX ); return _BasePath._REINDEX; } }
					/// <summary>
					/// Provides the path to Defaults's PRFORMAT with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField PRFORMAT { get { if (_BasePath._PRFORMAT == null) _BasePath._PRFORMAT = new PathToField(_BasePath, Schema.T.Defaults.F.PRFORMAT ); return _BasePath._PRFORMAT; } }
					/// <summary>
					/// Provides the path to Defaults's POFORMAT with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField POFORMAT { get { if (_BasePath._POFORMAT == null) _BasePath._POFORMAT = new PathToField(_BasePath, Schema.T.Defaults.F.POFORMAT ); return _BasePath._POFORMAT; } }
					/// <summary>
					/// Provides the path to Defaults's WRFORMAT with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField WRFORMAT { get { if (_BasePath._WRFORMAT == null) _BasePath._WRFORMAT = new PathToField(_BasePath, Schema.T.Defaults.F.WRFORMAT ); return _BasePath._WRFORMAT; } }
					/// <summary>
					/// Provides the path to Defaults's WOFORMAT with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField WOFORMAT { get { if (_BasePath._WOFORMAT == null) _BasePath._WOFORMAT = new PathToField(_BasePath, Schema.T.Defaults.F.WOFORMAT ); return _BasePath._WOFORMAT; } }
					/// <summary>
					/// Provides the path to Defaults's CURRSYM with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CURRSYM { get { if (_BasePath._CURRSYM == null) _BasePath._CURRSYM = new PathToField(_BasePath, Schema.T.Defaults.F.CURRSYM ); return _BasePath._CURRSYM; } }
					/// <summary>
					/// Provides the path to Defaults's FRDATE with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField FRDATE { get { if (_BasePath._FRDATE == null) _BasePath._FRDATE = new PathToField(_BasePath, Schema.T.Defaults.F.FRDATE ); return _BasePath._FRDATE; } }
					/// <summary>
					/// Provides the path to Defaults's FRCPOS with type string(maxlength 20, maxlines 0, trim)
					/// </summary>
					public PathToField FRCPOS { get { if (_BasePath._FRCPOS == null) _BasePath._FRCPOS = new PathToField(_BasePath, Schema.T.Defaults.F.FRCPOS ); return _BasePath._FRCPOS; } }
					/// <summary>
					/// Provides the path to Defaults's FRCNEG with type string(maxlength 20, maxlines 0, trim)
					/// </summary>
					public PathToField FRCNEG { get { if (_BasePath._FRCNEG == null) _BasePath._FRCNEG = new PathToField(_BasePath, Schema.T.Defaults.F.FRCNEG ); return _BasePath._FRCNEG; } }
					/// <summary>
					/// Provides the path to Defaults's FRCDEC with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField FRCDEC { get { if (_BasePath._FRCDEC == null) _BasePath._FRCDEC = new PathToField(_BasePath, Schema.T.Defaults.F.FRCDEC ); return _BasePath._FRCDEC; } }
					/// <summary>
					/// Provides the path to Defaults's FRCGROUP with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField FRCGROUP { get { if (_BasePath._FRCGROUP == null) _BasePath._FRCGROUP = new PathToField(_BasePath, Schema.T.Defaults.F.FRCGROUP ); return _BasePath._FRCGROUP; } }
					/// <summary>
					/// Provides the path to Defaults's FRCGSIZE with type integer(32)
					/// </summary>
					public PathToField FRCGSIZE { get { if (_BasePath._FRCGSIZE == null) _BasePath._FRCGSIZE = new PathToField(_BasePath, Schema.T.Defaults.F.FRCGSIZE ); return _BasePath._FRCGSIZE; } }
					/// <summary>
					/// Provides the path to Defaults's FRCLGSIZE with type integer(32)
					/// </summary>
					public PathToField FRCLGSIZE { get { if (_BasePath._FRCLGSIZE == null) _BasePath._FRCLGSIZE = new PathToField(_BasePath, Schema.T.Defaults.F.FRCLGSIZE ); return _BasePath._FRCLGSIZE; } }
					/// <summary>
					/// Provides the path to Defaults's FCDORDER with type integer(32)
					/// </summary>
					public PathToField FCDORDER { get { if (_BasePath._FCDORDER == null) _BasePath._FCDORDER = new PathToField(_BasePath, Schema.T.Defaults.F.FCDORDER ); return _BasePath._FCDORDER; } }
					/// <summary>
					/// Provides the path to Defaults's FCDDELIM with type integer(32)
					/// </summary>
					public PathToField FCDDELIM { get { if (_BasePath._FCDDELIM == null) _BasePath._FCDDELIM = new PathToField(_BasePath, Schema.T.Defaults.F.FCDDELIM ); return _BasePath._FCDDELIM; } }
					/// <summary>
					/// Provides the path to Defaults's FCDMFORM with type integer(32)
					/// </summary>
					public PathToField FCDMFORM { get { if (_BasePath._FCDMFORM == null) _BasePath._FCDMFORM = new PathToField(_BasePath, Schema.T.Defaults.F.FCDMFORM ); return _BasePath._FCDMFORM; } }
					/// <summary>
					/// Provides the path to Defaults's FCTAMPM with type bool
					/// </summary>
					public PathToField FCTAMPM { get { if (_BasePath._FCTAMPM == null) _BasePath._FCTAMPM = new PathToField(_BasePath, Schema.T.Defaults.F.FCTAMPM ); return _BasePath._FCTAMPM; } }
					/// <summary>
					/// Provides the path to Defaults's DBVERSION with type string(maxlength 3, maxlines 0, trim)
					/// </summary>
					public PathToField DBVERSION { get { if (_BasePath._DBVERSION == null) _BasePath._DBVERSION = new PathToField(_BasePath, Schema.T.Defaults.F.DBVERSION ); return _BasePath._DBVERSION; } }
					/// <summary>
					/// Provides the path to Defaults's MINVERSION with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField MINVERSION { get { if (_BasePath._MINVERSION == null) _BasePath._MINVERSION = new PathToField(_BasePath, Schema.T.Defaults.F.MINVERSION ); return _BasePath._MINVERSION; } }
					/// <summary>
					/// Provides the path to Defaults's UPGRSTEP with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField UPGRSTEP { get { if (_BasePath._UPGRSTEP == null) _BasePath._UPGRSTEP = new PathToField(_BasePath, Schema.T.Defaults.F.UPGRSTEP ); return _BasePath._UPGRSTEP; } }
				}

				internal PathToDefaultsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToDefaultsRow( DBI_Table t ) : base( t ) { }
				internal PathToDefaultsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToDefaultsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToDefaultsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToDefaultsRow PathToReferencedRow { get { return (PathToDefaultsRow)base.PathToReferencedRow; } }

				internal PathToDefaultsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToDefaultsRow(rootTableSchema, columns);
				}
			}
			public class LinkToDefaults {
				public LinkToDefaults(DBI_Path referencing_path) {
					RECNO = new PathToDefaultsRow(referencing_path.PathThroughLinkage(Schema.T.Defaults.F.RECNO));
					Id = new PathToDefaultsRow(referencing_path.PathThroughLinkage(Schema.T.Defaults.F.Id));
				}
				public readonly PathToDefaultsRow RECNO;
				public readonly PathToDefaultsRow Id;
			}
			#endregion

			#region DBI_Path ArchivedSets
			private PathToArchivedSetsRow __pArchivedSets = new PathToArchivedSetsRow( SchemaClass.Instance.T.ArchivedSets );

			/// <summary>
			/// The ArchivedSets path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToArchivedSetsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _CODE;
				private PathToField _BACKDATE;
				private PathToField _S_DATE;
				private PathToField _E_DATE;
				private PathToField _DESC;
				private PathToField _LZHFILE;
				private PathToField _DBVERSION;
				private PathToField _RESTORED;
				private PathToField _ARCHIVING;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToArchivedSetsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToArchivedSetsRow _BasePath;
					/// <summary>
					/// Provides the path to ArchivedSets's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.ArchivedSets.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to ArchivedSets's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.ArchivedSets.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to ArchivedSets's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.ArchivedSets.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to ArchivedSets's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.ArchivedSets.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to ArchivedSets's BACKDATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField BACKDATE { get { if (_BasePath._BACKDATE == null) _BasePath._BACKDATE = new PathToField(_BasePath, Schema.T.ArchivedSets.F.BACKDATE ); return _BasePath._BACKDATE; } }
					/// <summary>
					/// Provides the path to ArchivedSets's S_DATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField S_DATE { get { if (_BasePath._S_DATE == null) _BasePath._S_DATE = new PathToField(_BasePath, Schema.T.ArchivedSets.F.S_DATE ); return _BasePath._S_DATE; } }
					/// <summary>
					/// Provides the path to ArchivedSets's E_DATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField E_DATE { get { if (_BasePath._E_DATE == null) _BasePath._E_DATE = new PathToField(_BasePath, Schema.T.ArchivedSets.F.E_DATE ); return _BasePath._E_DATE; } }
					/// <summary>
					/// Provides the path to ArchivedSets's DESC with type string(maxlength 50, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.ArchivedSets.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to ArchivedSets's LZHFILE with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField LZHFILE { get { if (_BasePath._LZHFILE == null) _BasePath._LZHFILE = new PathToField(_BasePath, Schema.T.ArchivedSets.F.LZHFILE ); return _BasePath._LZHFILE; } }
					/// <summary>
					/// Provides the path to ArchivedSets's DBVERSION with type string(maxlength 23, maxlines 0, trim)
					/// </summary>
					public PathToField DBVERSION { get { if (_BasePath._DBVERSION == null) _BasePath._DBVERSION = new PathToField(_BasePath, Schema.T.ArchivedSets.F.DBVERSION ); return _BasePath._DBVERSION; } }
					/// <summary>
					/// Provides the path to ArchivedSets's RESTORED with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField RESTORED { get { if (_BasePath._RESTORED == null) _BasePath._RESTORED = new PathToField(_BasePath, Schema.T.ArchivedSets.F.RESTORED ); return _BasePath._RESTORED; } }
					/// <summary>
					/// Provides the path to ArchivedSets's ARCHIVING with type bool
					/// </summary>
					public PathToField ARCHIVING { get { if (_BasePath._ARCHIVING == null) _BasePath._ARCHIVING = new PathToField(_BasePath, Schema.T.ArchivedSets.F.ARCHIVING ); return _BasePath._ARCHIVING; } }
				}

				internal PathToArchivedSetsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToArchivedSetsRow( DBI_Table t ) : base( t ) { }
				internal PathToArchivedSetsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToArchivedSetsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToArchivedSetsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToArchivedSetsRow PathToReferencedRow { get { return (PathToArchivedSetsRow)base.PathToReferencedRow; } }

				internal PathToArchivedSetsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToArchivedSetsRow(rootTableSchema, columns);
				}
			}
			public class LinkToArchivedSets {
				public LinkToArchivedSets(DBI_Path referencing_path) {
					RECNO = new PathToArchivedSetsRow(referencing_path.PathThroughLinkage(Schema.T.ArchivedSets.F.RECNO));
					Id = new PathToArchivedSetsRow(referencing_path.PathThroughLinkage(Schema.T.ArchivedSets.F.Id));
					KEY = new PathToArchivedSetsRow(referencing_path.PathThroughLinkage(Schema.T.ArchivedSets.F.KEY));
				}
				public readonly PathToArchivedSetsRow RECNO;
				public readonly PathToArchivedSetsRow Id;
				public readonly PathToArchivedSetsRow KEY;
			}
			#endregion

			#region DBI_Path Permissions
			private PathToPermissionsRow __pPermissions = new PathToPermissionsRow( SchemaClass.Instance.T.Permissions );

			/// <summary>
			/// The Permissions path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPermissionsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _NAME;
				private PathToField _PASSWORD;
				private PathToField _STATUS;
				private PathToField _L11;
				private PathToField _L12;
				private PathToField _L13;
				private PathToField _L14;
				private PathToField _L15;
				private PathToField _L16;
				private PathToField _L17;
				private PathToField _L18;
				private PathToField _L19;
				private PathToField _L21;
				private PathToField _L22;
				private PathToField _L23;
				private PathToField _L24;
				private PathToField _L25;
				private PathToField _L26;
				private PathToField _L27;
				private PathToField _L28;
				private PathToField _L29;
				private PathToField _L31;
				private PathToField _L32;
				private PathToField _L33;
				private PathToField _L34;
				private PathToField _L35;
				private PathToField _L36;
				private PathToField _L37;
				private PathToField _L38;
				private PathToField _L39;
				private PathToField _L41;
				private PathToField _L42;
				private PathToField _L43;
				private PathToField _L44;
				private PathToField _L45;
				private PathToField _L46;
				private PathToField _L47;
				private PathToField _L48;
				private PathToField _L49;
				private PathToField _L410;
				private PathToField _L51;
				private PathToField _L52;
				private PathToField _L53;
				private PathToField _L54;
				private PathToField _L55;
				private PathToField _L56;
				private PathToField _L57;
				private PathToField _L58;
				private PathToField _L59;
				private PathToField _L510;
				private PathToField _L511;
				private PathToField _L512;
				private PathToField _L513;
				private PathToField _L514;
				private PathToField _L515;
				private PathToField _L516;
				private PathToField _L517;
				private PathToField _L518;
				private PathToField _L519;
				private PathToField _L520;
				private PathToField _L521;
				private PathToField _L522;
				private PathToField _L523;
				private PathToField _L524;
				private PathToField _L525;
				private PathToField _L526;
				private PathToField _L527;
				private PathToField _L528;
				private PathToField _L529;
				private PathToField _L530;
				private PathToField _L61;
				private PathToField _L62;
				private PathToField _L63;
				private PathToField _L64;
				private PathToField _L65;
				private PathToField _L66;
				private PathToField _L67;
				private PathToField _L68;
				private PathToField _L69;
				private PathToField _L610;
				private PathToField _L611;
				private PathToField _L612;
				private PathToField _L613;
				private PathToField _L614;
				private PathToField _L615;
				private PathToField _L616;
				private PathToField _L617;
				private PathToField _L618;
				private PathToField _L619;
				private PathToField _L620;
				private PathToField _L621;
				private PathToField _L622;
				private PathToField _L623;
				private PathToField _L624;
				private PathToField _L625;
				private PathToField _L626;
				private PathToField _ADMIN1;
				private PathToField _ADMIN2;
				private PathToField _ADMIN3;
				private PathToField _ADMIN4;
				private PathToField _ADMIN5;
				private PathToField _ADMIN6;
				private PathToField _ADMIN7;
				private PathToField _ADMIN8;
				private PathToField _ADMIN9;
				private PathToField _ADMIN10;
				private PathToField _ADMIN11;
				private PathToField _ADMIN12;
				private PathToField _ADMIN13;
				private PathToField _ADMIN14;
				private PathToField _ADMIN15;
				private PathToField _ADMIN16;
				private PathToField _ADMIN17;
				private PathToField _ADMIN18;
				private PathToField _ADMIN19;
				private PathToField _ADMIN20;
				private PathToField _ADMIN21;
				private PathToField _ADMIN22;
				private PathToField _ADMIN23;
				private PathToField _ADMIN24;
				private PathToField _ADMIN25;
				private PathToField _L121;
				private PathToField _L122;
				private PathToField _L123;
				private PathToField _L124;
				private PathToField _L125;
				private PathToField _L126;
				private PathToField _L127;
				private PathToField _L128;
				private PathToField _L129;
				private PathToField _L130;
				private PathToField _L131;
				private PathToField _L132;
				private PathToField _L133;
				private PathToField _L134;
				private PathToField _L135;
				private PathToField _L136;
				private PathToField _L137;
				private PathToField _L138;
				private PathToField _L139;
				private PathToField _L140;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToPermissionsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToPermissionsRow _BasePath;
					/// <summary>
					/// Provides the path to Permissions's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Permissions.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Permissions's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Permissions.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Permissions's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.Permissions.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to Permissions's NAME with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField NAME { get { if (_BasePath._NAME == null) _BasePath._NAME = new PathToField(_BasePath, Schema.T.Permissions.F.NAME ); return _BasePath._NAME; } }
					/// <summary>
					/// Provides the path to Permissions's PASSWORD with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField PASSWORD { get { if (_BasePath._PASSWORD == null) _BasePath._PASSWORD = new PathToField(_BasePath, Schema.T.Permissions.F.PASSWORD ); return _BasePath._PASSWORD; } }
					/// <summary>
					/// Provides the path to Permissions's STATUS with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField STATUS { get { if (_BasePath._STATUS == null) _BasePath._STATUS = new PathToField(_BasePath, Schema.T.Permissions.F.STATUS ); return _BasePath._STATUS; } }
					/// <summary>
					/// Provides the path to Permissions's L11 with type bool
					/// </summary>
					public PathToField L11 { get { if (_BasePath._L11 == null) _BasePath._L11 = new PathToField(_BasePath, Schema.T.Permissions.F.L11 ); return _BasePath._L11; } }
					/// <summary>
					/// Provides the path to Permissions's L12 with type bool
					/// </summary>
					public PathToField L12 { get { if (_BasePath._L12 == null) _BasePath._L12 = new PathToField(_BasePath, Schema.T.Permissions.F.L12 ); return _BasePath._L12; } }
					/// <summary>
					/// Provides the path to Permissions's L13 with type bool
					/// </summary>
					public PathToField L13 { get { if (_BasePath._L13 == null) _BasePath._L13 = new PathToField(_BasePath, Schema.T.Permissions.F.L13 ); return _BasePath._L13; } }
					/// <summary>
					/// Provides the path to Permissions's L14 with type bool
					/// </summary>
					public PathToField L14 { get { if (_BasePath._L14 == null) _BasePath._L14 = new PathToField(_BasePath, Schema.T.Permissions.F.L14 ); return _BasePath._L14; } }
					/// <summary>
					/// Provides the path to Permissions's L15 with type bool
					/// </summary>
					public PathToField L15 { get { if (_BasePath._L15 == null) _BasePath._L15 = new PathToField(_BasePath, Schema.T.Permissions.F.L15 ); return _BasePath._L15; } }
					/// <summary>
					/// Provides the path to Permissions's L16 with type bool
					/// </summary>
					public PathToField L16 { get { if (_BasePath._L16 == null) _BasePath._L16 = new PathToField(_BasePath, Schema.T.Permissions.F.L16 ); return _BasePath._L16; } }
					/// <summary>
					/// Provides the path to Permissions's L17 with type bool
					/// </summary>
					public PathToField L17 { get { if (_BasePath._L17 == null) _BasePath._L17 = new PathToField(_BasePath, Schema.T.Permissions.F.L17 ); return _BasePath._L17; } }
					/// <summary>
					/// Provides the path to Permissions's L18 with type bool
					/// </summary>
					public PathToField L18 { get { if (_BasePath._L18 == null) _BasePath._L18 = new PathToField(_BasePath, Schema.T.Permissions.F.L18 ); return _BasePath._L18; } }
					/// <summary>
					/// Provides the path to Permissions's L19 with type bool
					/// </summary>
					public PathToField L19 { get { if (_BasePath._L19 == null) _BasePath._L19 = new PathToField(_BasePath, Schema.T.Permissions.F.L19 ); return _BasePath._L19; } }
					/// <summary>
					/// Provides the path to Permissions's L21 with type bool
					/// </summary>
					public PathToField L21 { get { if (_BasePath._L21 == null) _BasePath._L21 = new PathToField(_BasePath, Schema.T.Permissions.F.L21 ); return _BasePath._L21; } }
					/// <summary>
					/// Provides the path to Permissions's L22 with type bool
					/// </summary>
					public PathToField L22 { get { if (_BasePath._L22 == null) _BasePath._L22 = new PathToField(_BasePath, Schema.T.Permissions.F.L22 ); return _BasePath._L22; } }
					/// <summary>
					/// Provides the path to Permissions's L23 with type bool
					/// </summary>
					public PathToField L23 { get { if (_BasePath._L23 == null) _BasePath._L23 = new PathToField(_BasePath, Schema.T.Permissions.F.L23 ); return _BasePath._L23; } }
					/// <summary>
					/// Provides the path to Permissions's L24 with type bool
					/// </summary>
					public PathToField L24 { get { if (_BasePath._L24 == null) _BasePath._L24 = new PathToField(_BasePath, Schema.T.Permissions.F.L24 ); return _BasePath._L24; } }
					/// <summary>
					/// Provides the path to Permissions's L25 with type bool
					/// </summary>
					public PathToField L25 { get { if (_BasePath._L25 == null) _BasePath._L25 = new PathToField(_BasePath, Schema.T.Permissions.F.L25 ); return _BasePath._L25; } }
					/// <summary>
					/// Provides the path to Permissions's L26 with type bool
					/// </summary>
					public PathToField L26 { get { if (_BasePath._L26 == null) _BasePath._L26 = new PathToField(_BasePath, Schema.T.Permissions.F.L26 ); return _BasePath._L26; } }
					/// <summary>
					/// Provides the path to Permissions's L27 with type bool
					/// </summary>
					public PathToField L27 { get { if (_BasePath._L27 == null) _BasePath._L27 = new PathToField(_BasePath, Schema.T.Permissions.F.L27 ); return _BasePath._L27; } }
					/// <summary>
					/// Provides the path to Permissions's L28 with type bool
					/// </summary>
					public PathToField L28 { get { if (_BasePath._L28 == null) _BasePath._L28 = new PathToField(_BasePath, Schema.T.Permissions.F.L28 ); return _BasePath._L28; } }
					/// <summary>
					/// Provides the path to Permissions's L29 with type bool
					/// </summary>
					public PathToField L29 { get { if (_BasePath._L29 == null) _BasePath._L29 = new PathToField(_BasePath, Schema.T.Permissions.F.L29 ); return _BasePath._L29; } }
					/// <summary>
					/// Provides the path to Permissions's L31 with type bool
					/// </summary>
					public PathToField L31 { get { if (_BasePath._L31 == null) _BasePath._L31 = new PathToField(_BasePath, Schema.T.Permissions.F.L31 ); return _BasePath._L31; } }
					/// <summary>
					/// Provides the path to Permissions's L32 with type bool
					/// </summary>
					public PathToField L32 { get { if (_BasePath._L32 == null) _BasePath._L32 = new PathToField(_BasePath, Schema.T.Permissions.F.L32 ); return _BasePath._L32; } }
					/// <summary>
					/// Provides the path to Permissions's L33 with type bool
					/// </summary>
					public PathToField L33 { get { if (_BasePath._L33 == null) _BasePath._L33 = new PathToField(_BasePath, Schema.T.Permissions.F.L33 ); return _BasePath._L33; } }
					/// <summary>
					/// Provides the path to Permissions's L34 with type bool
					/// </summary>
					public PathToField L34 { get { if (_BasePath._L34 == null) _BasePath._L34 = new PathToField(_BasePath, Schema.T.Permissions.F.L34 ); return _BasePath._L34; } }
					/// <summary>
					/// Provides the path to Permissions's L35 with type bool
					/// </summary>
					public PathToField L35 { get { if (_BasePath._L35 == null) _BasePath._L35 = new PathToField(_BasePath, Schema.T.Permissions.F.L35 ); return _BasePath._L35; } }
					/// <summary>
					/// Provides the path to Permissions's L36 with type bool
					/// </summary>
					public PathToField L36 { get { if (_BasePath._L36 == null) _BasePath._L36 = new PathToField(_BasePath, Schema.T.Permissions.F.L36 ); return _BasePath._L36; } }
					/// <summary>
					/// Provides the path to Permissions's L37 with type bool
					/// </summary>
					public PathToField L37 { get { if (_BasePath._L37 == null) _BasePath._L37 = new PathToField(_BasePath, Schema.T.Permissions.F.L37 ); return _BasePath._L37; } }
					/// <summary>
					/// Provides the path to Permissions's L38 with type bool
					/// </summary>
					public PathToField L38 { get { if (_BasePath._L38 == null) _BasePath._L38 = new PathToField(_BasePath, Schema.T.Permissions.F.L38 ); return _BasePath._L38; } }
					/// <summary>
					/// Provides the path to Permissions's L39 with type bool
					/// </summary>
					public PathToField L39 { get { if (_BasePath._L39 == null) _BasePath._L39 = new PathToField(_BasePath, Schema.T.Permissions.F.L39 ); return _BasePath._L39; } }
					/// <summary>
					/// Provides the path to Permissions's L41 with type bool
					/// </summary>
					public PathToField L41 { get { if (_BasePath._L41 == null) _BasePath._L41 = new PathToField(_BasePath, Schema.T.Permissions.F.L41 ); return _BasePath._L41; } }
					/// <summary>
					/// Provides the path to Permissions's L42 with type bool
					/// </summary>
					public PathToField L42 { get { if (_BasePath._L42 == null) _BasePath._L42 = new PathToField(_BasePath, Schema.T.Permissions.F.L42 ); return _BasePath._L42; } }
					/// <summary>
					/// Provides the path to Permissions's L43 with type bool
					/// </summary>
					public PathToField L43 { get { if (_BasePath._L43 == null) _BasePath._L43 = new PathToField(_BasePath, Schema.T.Permissions.F.L43 ); return _BasePath._L43; } }
					/// <summary>
					/// Provides the path to Permissions's L44 with type bool
					/// </summary>
					public PathToField L44 { get { if (_BasePath._L44 == null) _BasePath._L44 = new PathToField(_BasePath, Schema.T.Permissions.F.L44 ); return _BasePath._L44; } }
					/// <summary>
					/// Provides the path to Permissions's L45 with type bool
					/// </summary>
					public PathToField L45 { get { if (_BasePath._L45 == null) _BasePath._L45 = new PathToField(_BasePath, Schema.T.Permissions.F.L45 ); return _BasePath._L45; } }
					/// <summary>
					/// Provides the path to Permissions's L46 with type bool
					/// </summary>
					public PathToField L46 { get { if (_BasePath._L46 == null) _BasePath._L46 = new PathToField(_BasePath, Schema.T.Permissions.F.L46 ); return _BasePath._L46; } }
					/// <summary>
					/// Provides the path to Permissions's L47 with type bool
					/// </summary>
					public PathToField L47 { get { if (_BasePath._L47 == null) _BasePath._L47 = new PathToField(_BasePath, Schema.T.Permissions.F.L47 ); return _BasePath._L47; } }
					/// <summary>
					/// Provides the path to Permissions's L48 with type bool
					/// </summary>
					public PathToField L48 { get { if (_BasePath._L48 == null) _BasePath._L48 = new PathToField(_BasePath, Schema.T.Permissions.F.L48 ); return _BasePath._L48; } }
					/// <summary>
					/// Provides the path to Permissions's L49 with type bool
					/// </summary>
					public PathToField L49 { get { if (_BasePath._L49 == null) _BasePath._L49 = new PathToField(_BasePath, Schema.T.Permissions.F.L49 ); return _BasePath._L49; } }
					/// <summary>
					/// Provides the path to Permissions's L410 with type bool
					/// </summary>
					public PathToField L410 { get { if (_BasePath._L410 == null) _BasePath._L410 = new PathToField(_BasePath, Schema.T.Permissions.F.L410 ); return _BasePath._L410; } }
					/// <summary>
					/// Provides the path to Permissions's L51 with type bool
					/// </summary>
					public PathToField L51 { get { if (_BasePath._L51 == null) _BasePath._L51 = new PathToField(_BasePath, Schema.T.Permissions.F.L51 ); return _BasePath._L51; } }
					/// <summary>
					/// Provides the path to Permissions's L52 with type bool
					/// </summary>
					public PathToField L52 { get { if (_BasePath._L52 == null) _BasePath._L52 = new PathToField(_BasePath, Schema.T.Permissions.F.L52 ); return _BasePath._L52; } }
					/// <summary>
					/// Provides the path to Permissions's L53 with type bool
					/// </summary>
					public PathToField L53 { get { if (_BasePath._L53 == null) _BasePath._L53 = new PathToField(_BasePath, Schema.T.Permissions.F.L53 ); return _BasePath._L53; } }
					/// <summary>
					/// Provides the path to Permissions's L54 with type bool
					/// </summary>
					public PathToField L54 { get { if (_BasePath._L54 == null) _BasePath._L54 = new PathToField(_BasePath, Schema.T.Permissions.F.L54 ); return _BasePath._L54; } }
					/// <summary>
					/// Provides the path to Permissions's L55 with type bool
					/// </summary>
					public PathToField L55 { get { if (_BasePath._L55 == null) _BasePath._L55 = new PathToField(_BasePath, Schema.T.Permissions.F.L55 ); return _BasePath._L55; } }
					/// <summary>
					/// Provides the path to Permissions's L56 with type bool
					/// </summary>
					public PathToField L56 { get { if (_BasePath._L56 == null) _BasePath._L56 = new PathToField(_BasePath, Schema.T.Permissions.F.L56 ); return _BasePath._L56; } }
					/// <summary>
					/// Provides the path to Permissions's L57 with type bool
					/// </summary>
					public PathToField L57 { get { if (_BasePath._L57 == null) _BasePath._L57 = new PathToField(_BasePath, Schema.T.Permissions.F.L57 ); return _BasePath._L57; } }
					/// <summary>
					/// Provides the path to Permissions's L58 with type bool
					/// </summary>
					public PathToField L58 { get { if (_BasePath._L58 == null) _BasePath._L58 = new PathToField(_BasePath, Schema.T.Permissions.F.L58 ); return _BasePath._L58; } }
					/// <summary>
					/// Provides the path to Permissions's L59 with type bool
					/// </summary>
					public PathToField L59 { get { if (_BasePath._L59 == null) _BasePath._L59 = new PathToField(_BasePath, Schema.T.Permissions.F.L59 ); return _BasePath._L59; } }
					/// <summary>
					/// Provides the path to Permissions's L510 with type bool
					/// </summary>
					public PathToField L510 { get { if (_BasePath._L510 == null) _BasePath._L510 = new PathToField(_BasePath, Schema.T.Permissions.F.L510 ); return _BasePath._L510; } }
					/// <summary>
					/// Provides the path to Permissions's L511 with type bool
					/// </summary>
					public PathToField L511 { get { if (_BasePath._L511 == null) _BasePath._L511 = new PathToField(_BasePath, Schema.T.Permissions.F.L511 ); return _BasePath._L511; } }
					/// <summary>
					/// Provides the path to Permissions's L512 with type bool
					/// </summary>
					public PathToField L512 { get { if (_BasePath._L512 == null) _BasePath._L512 = new PathToField(_BasePath, Schema.T.Permissions.F.L512 ); return _BasePath._L512; } }
					/// <summary>
					/// Provides the path to Permissions's L513 with type bool
					/// </summary>
					public PathToField L513 { get { if (_BasePath._L513 == null) _BasePath._L513 = new PathToField(_BasePath, Schema.T.Permissions.F.L513 ); return _BasePath._L513; } }
					/// <summary>
					/// Provides the path to Permissions's L514 with type bool
					/// </summary>
					public PathToField L514 { get { if (_BasePath._L514 == null) _BasePath._L514 = new PathToField(_BasePath, Schema.T.Permissions.F.L514 ); return _BasePath._L514; } }
					/// <summary>
					/// Provides the path to Permissions's L515 with type bool
					/// </summary>
					public PathToField L515 { get { if (_BasePath._L515 == null) _BasePath._L515 = new PathToField(_BasePath, Schema.T.Permissions.F.L515 ); return _BasePath._L515; } }
					/// <summary>
					/// Provides the path to Permissions's L516 with type bool
					/// </summary>
					public PathToField L516 { get { if (_BasePath._L516 == null) _BasePath._L516 = new PathToField(_BasePath, Schema.T.Permissions.F.L516 ); return _BasePath._L516; } }
					/// <summary>
					/// Provides the path to Permissions's L517 with type bool
					/// </summary>
					public PathToField L517 { get { if (_BasePath._L517 == null) _BasePath._L517 = new PathToField(_BasePath, Schema.T.Permissions.F.L517 ); return _BasePath._L517; } }
					/// <summary>
					/// Provides the path to Permissions's L518 with type bool
					/// </summary>
					public PathToField L518 { get { if (_BasePath._L518 == null) _BasePath._L518 = new PathToField(_BasePath, Schema.T.Permissions.F.L518 ); return _BasePath._L518; } }
					/// <summary>
					/// Provides the path to Permissions's L519 with type bool
					/// </summary>
					public PathToField L519 { get { if (_BasePath._L519 == null) _BasePath._L519 = new PathToField(_BasePath, Schema.T.Permissions.F.L519 ); return _BasePath._L519; } }
					/// <summary>
					/// Provides the path to Permissions's L520 with type bool
					/// </summary>
					public PathToField L520 { get { if (_BasePath._L520 == null) _BasePath._L520 = new PathToField(_BasePath, Schema.T.Permissions.F.L520 ); return _BasePath._L520; } }
					/// <summary>
					/// Provides the path to Permissions's L521 with type bool
					/// </summary>
					public PathToField L521 { get { if (_BasePath._L521 == null) _BasePath._L521 = new PathToField(_BasePath, Schema.T.Permissions.F.L521 ); return _BasePath._L521; } }
					/// <summary>
					/// Provides the path to Permissions's L522 with type bool
					/// </summary>
					public PathToField L522 { get { if (_BasePath._L522 == null) _BasePath._L522 = new PathToField(_BasePath, Schema.T.Permissions.F.L522 ); return _BasePath._L522; } }
					/// <summary>
					/// Provides the path to Permissions's L523 with type bool
					/// </summary>
					public PathToField L523 { get { if (_BasePath._L523 == null) _BasePath._L523 = new PathToField(_BasePath, Schema.T.Permissions.F.L523 ); return _BasePath._L523; } }
					/// <summary>
					/// Provides the path to Permissions's L524 with type bool
					/// </summary>
					public PathToField L524 { get { if (_BasePath._L524 == null) _BasePath._L524 = new PathToField(_BasePath, Schema.T.Permissions.F.L524 ); return _BasePath._L524; } }
					/// <summary>
					/// Provides the path to Permissions's L525 with type bool
					/// </summary>
					public PathToField L525 { get { if (_BasePath._L525 == null) _BasePath._L525 = new PathToField(_BasePath, Schema.T.Permissions.F.L525 ); return _BasePath._L525; } }
					/// <summary>
					/// Provides the path to Permissions's L526 with type bool
					/// </summary>
					public PathToField L526 { get { if (_BasePath._L526 == null) _BasePath._L526 = new PathToField(_BasePath, Schema.T.Permissions.F.L526 ); return _BasePath._L526; } }
					/// <summary>
					/// Provides the path to Permissions's L527 with type bool
					/// </summary>
					public PathToField L527 { get { if (_BasePath._L527 == null) _BasePath._L527 = new PathToField(_BasePath, Schema.T.Permissions.F.L527 ); return _BasePath._L527; } }
					/// <summary>
					/// Provides the path to Permissions's L528 with type bool
					/// </summary>
					public PathToField L528 { get { if (_BasePath._L528 == null) _BasePath._L528 = new PathToField(_BasePath, Schema.T.Permissions.F.L528 ); return _BasePath._L528; } }
					/// <summary>
					/// Provides the path to Permissions's L529 with type bool
					/// </summary>
					public PathToField L529 { get { if (_BasePath._L529 == null) _BasePath._L529 = new PathToField(_BasePath, Schema.T.Permissions.F.L529 ); return _BasePath._L529; } }
					/// <summary>
					/// Provides the path to Permissions's L530 with type bool
					/// </summary>
					public PathToField L530 { get { if (_BasePath._L530 == null) _BasePath._L530 = new PathToField(_BasePath, Schema.T.Permissions.F.L530 ); return _BasePath._L530; } }
					/// <summary>
					/// Provides the path to Permissions's L61 with type bool
					/// </summary>
					public PathToField L61 { get { if (_BasePath._L61 == null) _BasePath._L61 = new PathToField(_BasePath, Schema.T.Permissions.F.L61 ); return _BasePath._L61; } }
					/// <summary>
					/// Provides the path to Permissions's L62 with type bool
					/// </summary>
					public PathToField L62 { get { if (_BasePath._L62 == null) _BasePath._L62 = new PathToField(_BasePath, Schema.T.Permissions.F.L62 ); return _BasePath._L62; } }
					/// <summary>
					/// Provides the path to Permissions's L63 with type bool
					/// </summary>
					public PathToField L63 { get { if (_BasePath._L63 == null) _BasePath._L63 = new PathToField(_BasePath, Schema.T.Permissions.F.L63 ); return _BasePath._L63; } }
					/// <summary>
					/// Provides the path to Permissions's L64 with type bool
					/// </summary>
					public PathToField L64 { get { if (_BasePath._L64 == null) _BasePath._L64 = new PathToField(_BasePath, Schema.T.Permissions.F.L64 ); return _BasePath._L64; } }
					/// <summary>
					/// Provides the path to Permissions's L65 with type bool
					/// </summary>
					public PathToField L65 { get { if (_BasePath._L65 == null) _BasePath._L65 = new PathToField(_BasePath, Schema.T.Permissions.F.L65 ); return _BasePath._L65; } }
					/// <summary>
					/// Provides the path to Permissions's L66 with type bool
					/// </summary>
					public PathToField L66 { get { if (_BasePath._L66 == null) _BasePath._L66 = new PathToField(_BasePath, Schema.T.Permissions.F.L66 ); return _BasePath._L66; } }
					/// <summary>
					/// Provides the path to Permissions's L67 with type bool
					/// </summary>
					public PathToField L67 { get { if (_BasePath._L67 == null) _BasePath._L67 = new PathToField(_BasePath, Schema.T.Permissions.F.L67 ); return _BasePath._L67; } }
					/// <summary>
					/// Provides the path to Permissions's L68 with type bool
					/// </summary>
					public PathToField L68 { get { if (_BasePath._L68 == null) _BasePath._L68 = new PathToField(_BasePath, Schema.T.Permissions.F.L68 ); return _BasePath._L68; } }
					/// <summary>
					/// Provides the path to Permissions's L69 with type bool
					/// </summary>
					public PathToField L69 { get { if (_BasePath._L69 == null) _BasePath._L69 = new PathToField(_BasePath, Schema.T.Permissions.F.L69 ); return _BasePath._L69; } }
					/// <summary>
					/// Provides the path to Permissions's L610 with type bool
					/// </summary>
					public PathToField L610 { get { if (_BasePath._L610 == null) _BasePath._L610 = new PathToField(_BasePath, Schema.T.Permissions.F.L610 ); return _BasePath._L610; } }
					/// <summary>
					/// Provides the path to Permissions's L611 with type bool
					/// </summary>
					public PathToField L611 { get { if (_BasePath._L611 == null) _BasePath._L611 = new PathToField(_BasePath, Schema.T.Permissions.F.L611 ); return _BasePath._L611; } }
					/// <summary>
					/// Provides the path to Permissions's L612 with type bool
					/// </summary>
					public PathToField L612 { get { if (_BasePath._L612 == null) _BasePath._L612 = new PathToField(_BasePath, Schema.T.Permissions.F.L612 ); return _BasePath._L612; } }
					/// <summary>
					/// Provides the path to Permissions's L613 with type bool
					/// </summary>
					public PathToField L613 { get { if (_BasePath._L613 == null) _BasePath._L613 = new PathToField(_BasePath, Schema.T.Permissions.F.L613 ); return _BasePath._L613; } }
					/// <summary>
					/// Provides the path to Permissions's L614 with type bool
					/// </summary>
					public PathToField L614 { get { if (_BasePath._L614 == null) _BasePath._L614 = new PathToField(_BasePath, Schema.T.Permissions.F.L614 ); return _BasePath._L614; } }
					/// <summary>
					/// Provides the path to Permissions's L615 with type bool
					/// </summary>
					public PathToField L615 { get { if (_BasePath._L615 == null) _BasePath._L615 = new PathToField(_BasePath, Schema.T.Permissions.F.L615 ); return _BasePath._L615; } }
					/// <summary>
					/// Provides the path to Permissions's L616 with type bool
					/// </summary>
					public PathToField L616 { get { if (_BasePath._L616 == null) _BasePath._L616 = new PathToField(_BasePath, Schema.T.Permissions.F.L616 ); return _BasePath._L616; } }
					/// <summary>
					/// Provides the path to Permissions's L617 with type bool
					/// </summary>
					public PathToField L617 { get { if (_BasePath._L617 == null) _BasePath._L617 = new PathToField(_BasePath, Schema.T.Permissions.F.L617 ); return _BasePath._L617; } }
					/// <summary>
					/// Provides the path to Permissions's L618 with type bool
					/// </summary>
					public PathToField L618 { get { if (_BasePath._L618 == null) _BasePath._L618 = new PathToField(_BasePath, Schema.T.Permissions.F.L618 ); return _BasePath._L618; } }
					/// <summary>
					/// Provides the path to Permissions's L619 with type bool
					/// </summary>
					public PathToField L619 { get { if (_BasePath._L619 == null) _BasePath._L619 = new PathToField(_BasePath, Schema.T.Permissions.F.L619 ); return _BasePath._L619; } }
					/// <summary>
					/// Provides the path to Permissions's L620 with type bool
					/// </summary>
					public PathToField L620 { get { if (_BasePath._L620 == null) _BasePath._L620 = new PathToField(_BasePath, Schema.T.Permissions.F.L620 ); return _BasePath._L620; } }
					/// <summary>
					/// Provides the path to Permissions's L621 with type bool
					/// </summary>
					public PathToField L621 { get { if (_BasePath._L621 == null) _BasePath._L621 = new PathToField(_BasePath, Schema.T.Permissions.F.L621 ); return _BasePath._L621; } }
					/// <summary>
					/// Provides the path to Permissions's L622 with type bool
					/// </summary>
					public PathToField L622 { get { if (_BasePath._L622 == null) _BasePath._L622 = new PathToField(_BasePath, Schema.T.Permissions.F.L622 ); return _BasePath._L622; } }
					/// <summary>
					/// Provides the path to Permissions's L623 with type bool
					/// </summary>
					public PathToField L623 { get { if (_BasePath._L623 == null) _BasePath._L623 = new PathToField(_BasePath, Schema.T.Permissions.F.L623 ); return _BasePath._L623; } }
					/// <summary>
					/// Provides the path to Permissions's L624 with type bool
					/// </summary>
					public PathToField L624 { get { if (_BasePath._L624 == null) _BasePath._L624 = new PathToField(_BasePath, Schema.T.Permissions.F.L624 ); return _BasePath._L624; } }
					/// <summary>
					/// Provides the path to Permissions's L625 with type bool
					/// </summary>
					public PathToField L625 { get { if (_BasePath._L625 == null) _BasePath._L625 = new PathToField(_BasePath, Schema.T.Permissions.F.L625 ); return _BasePath._L625; } }
					/// <summary>
					/// Provides the path to Permissions's L626 with type bool
					/// </summary>
					public PathToField L626 { get { if (_BasePath._L626 == null) _BasePath._L626 = new PathToField(_BasePath, Schema.T.Permissions.F.L626 ); return _BasePath._L626; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN1 with type bool
					/// </summary>
					public PathToField ADMIN1 { get { if (_BasePath._ADMIN1 == null) _BasePath._ADMIN1 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN1 ); return _BasePath._ADMIN1; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN2 with type bool
					/// </summary>
					public PathToField ADMIN2 { get { if (_BasePath._ADMIN2 == null) _BasePath._ADMIN2 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN2 ); return _BasePath._ADMIN2; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN3 with type bool
					/// </summary>
					public PathToField ADMIN3 { get { if (_BasePath._ADMIN3 == null) _BasePath._ADMIN3 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN3 ); return _BasePath._ADMIN3; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN4 with type bool
					/// </summary>
					public PathToField ADMIN4 { get { if (_BasePath._ADMIN4 == null) _BasePath._ADMIN4 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN4 ); return _BasePath._ADMIN4; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN5 with type bool
					/// </summary>
					public PathToField ADMIN5 { get { if (_BasePath._ADMIN5 == null) _BasePath._ADMIN5 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN5 ); return _BasePath._ADMIN5; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN6 with type bool
					/// </summary>
					public PathToField ADMIN6 { get { if (_BasePath._ADMIN6 == null) _BasePath._ADMIN6 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN6 ); return _BasePath._ADMIN6; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN7 with type bool
					/// </summary>
					public PathToField ADMIN7 { get { if (_BasePath._ADMIN7 == null) _BasePath._ADMIN7 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN7 ); return _BasePath._ADMIN7; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN8 with type bool
					/// </summary>
					public PathToField ADMIN8 { get { if (_BasePath._ADMIN8 == null) _BasePath._ADMIN8 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN8 ); return _BasePath._ADMIN8; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN9 with type bool
					/// </summary>
					public PathToField ADMIN9 { get { if (_BasePath._ADMIN9 == null) _BasePath._ADMIN9 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN9 ); return _BasePath._ADMIN9; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN10 with type bool
					/// </summary>
					public PathToField ADMIN10 { get { if (_BasePath._ADMIN10 == null) _BasePath._ADMIN10 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN10 ); return _BasePath._ADMIN10; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN11 with type bool
					/// </summary>
					public PathToField ADMIN11 { get { if (_BasePath._ADMIN11 == null) _BasePath._ADMIN11 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN11 ); return _BasePath._ADMIN11; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN12 with type bool
					/// </summary>
					public PathToField ADMIN12 { get { if (_BasePath._ADMIN12 == null) _BasePath._ADMIN12 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN12 ); return _BasePath._ADMIN12; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN13 with type bool
					/// </summary>
					public PathToField ADMIN13 { get { if (_BasePath._ADMIN13 == null) _BasePath._ADMIN13 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN13 ); return _BasePath._ADMIN13; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN14 with type bool
					/// </summary>
					public PathToField ADMIN14 { get { if (_BasePath._ADMIN14 == null) _BasePath._ADMIN14 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN14 ); return _BasePath._ADMIN14; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN15 with type bool
					/// </summary>
					public PathToField ADMIN15 { get { if (_BasePath._ADMIN15 == null) _BasePath._ADMIN15 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN15 ); return _BasePath._ADMIN15; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN16 with type bool
					/// </summary>
					public PathToField ADMIN16 { get { if (_BasePath._ADMIN16 == null) _BasePath._ADMIN16 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN16 ); return _BasePath._ADMIN16; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN17 with type bool
					/// </summary>
					public PathToField ADMIN17 { get { if (_BasePath._ADMIN17 == null) _BasePath._ADMIN17 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN17 ); return _BasePath._ADMIN17; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN18 with type bool
					/// </summary>
					public PathToField ADMIN18 { get { if (_BasePath._ADMIN18 == null) _BasePath._ADMIN18 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN18 ); return _BasePath._ADMIN18; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN19 with type bool
					/// </summary>
					public PathToField ADMIN19 { get { if (_BasePath._ADMIN19 == null) _BasePath._ADMIN19 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN19 ); return _BasePath._ADMIN19; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN20 with type bool
					/// </summary>
					public PathToField ADMIN20 { get { if (_BasePath._ADMIN20 == null) _BasePath._ADMIN20 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN20 ); return _BasePath._ADMIN20; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN21 with type bool
					/// </summary>
					public PathToField ADMIN21 { get { if (_BasePath._ADMIN21 == null) _BasePath._ADMIN21 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN21 ); return _BasePath._ADMIN21; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN22 with type bool
					/// </summary>
					public PathToField ADMIN22 { get { if (_BasePath._ADMIN22 == null) _BasePath._ADMIN22 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN22 ); return _BasePath._ADMIN22; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN23 with type bool
					/// </summary>
					public PathToField ADMIN23 { get { if (_BasePath._ADMIN23 == null) _BasePath._ADMIN23 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN23 ); return _BasePath._ADMIN23; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN24 with type bool
					/// </summary>
					public PathToField ADMIN24 { get { if (_BasePath._ADMIN24 == null) _BasePath._ADMIN24 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN24 ); return _BasePath._ADMIN24; } }
					/// <summary>
					/// Provides the path to Permissions's ADMIN25 with type bool
					/// </summary>
					public PathToField ADMIN25 { get { if (_BasePath._ADMIN25 == null) _BasePath._ADMIN25 = new PathToField(_BasePath, Schema.T.Permissions.F.ADMIN25 ); return _BasePath._ADMIN25; } }
					/// <summary>
					/// Provides the path to Permissions's L121 with type bool
					/// </summary>
					public PathToField L121 { get { if (_BasePath._L121 == null) _BasePath._L121 = new PathToField(_BasePath, Schema.T.Permissions.F.L121 ); return _BasePath._L121; } }
					/// <summary>
					/// Provides the path to Permissions's L122 with type bool
					/// </summary>
					public PathToField L122 { get { if (_BasePath._L122 == null) _BasePath._L122 = new PathToField(_BasePath, Schema.T.Permissions.F.L122 ); return _BasePath._L122; } }
					/// <summary>
					/// Provides the path to Permissions's L123 with type bool
					/// </summary>
					public PathToField L123 { get { if (_BasePath._L123 == null) _BasePath._L123 = new PathToField(_BasePath, Schema.T.Permissions.F.L123 ); return _BasePath._L123; } }
					/// <summary>
					/// Provides the path to Permissions's L124 with type bool
					/// </summary>
					public PathToField L124 { get { if (_BasePath._L124 == null) _BasePath._L124 = new PathToField(_BasePath, Schema.T.Permissions.F.L124 ); return _BasePath._L124; } }
					/// <summary>
					/// Provides the path to Permissions's L125 with type bool
					/// </summary>
					public PathToField L125 { get { if (_BasePath._L125 == null) _BasePath._L125 = new PathToField(_BasePath, Schema.T.Permissions.F.L125 ); return _BasePath._L125; } }
					/// <summary>
					/// Provides the path to Permissions's L126 with type bool
					/// </summary>
					public PathToField L126 { get { if (_BasePath._L126 == null) _BasePath._L126 = new PathToField(_BasePath, Schema.T.Permissions.F.L126 ); return _BasePath._L126; } }
					/// <summary>
					/// Provides the path to Permissions's L127 with type bool
					/// </summary>
					public PathToField L127 { get { if (_BasePath._L127 == null) _BasePath._L127 = new PathToField(_BasePath, Schema.T.Permissions.F.L127 ); return _BasePath._L127; } }
					/// <summary>
					/// Provides the path to Permissions's L128 with type bool
					/// </summary>
					public PathToField L128 { get { if (_BasePath._L128 == null) _BasePath._L128 = new PathToField(_BasePath, Schema.T.Permissions.F.L128 ); return _BasePath._L128; } }
					/// <summary>
					/// Provides the path to Permissions's L129 with type bool
					/// </summary>
					public PathToField L129 { get { if (_BasePath._L129 == null) _BasePath._L129 = new PathToField(_BasePath, Schema.T.Permissions.F.L129 ); return _BasePath._L129; } }
					/// <summary>
					/// Provides the path to Permissions's L130 with type bool
					/// </summary>
					public PathToField L130 { get { if (_BasePath._L130 == null) _BasePath._L130 = new PathToField(_BasePath, Schema.T.Permissions.F.L130 ); return _BasePath._L130; } }
					/// <summary>
					/// Provides the path to Permissions's L131 with type bool
					/// </summary>
					public PathToField L131 { get { if (_BasePath._L131 == null) _BasePath._L131 = new PathToField(_BasePath, Schema.T.Permissions.F.L131 ); return _BasePath._L131; } }
					/// <summary>
					/// Provides the path to Permissions's L132 with type bool
					/// </summary>
					public PathToField L132 { get { if (_BasePath._L132 == null) _BasePath._L132 = new PathToField(_BasePath, Schema.T.Permissions.F.L132 ); return _BasePath._L132; } }
					/// <summary>
					/// Provides the path to Permissions's L133 with type bool
					/// </summary>
					public PathToField L133 { get { if (_BasePath._L133 == null) _BasePath._L133 = new PathToField(_BasePath, Schema.T.Permissions.F.L133 ); return _BasePath._L133; } }
					/// <summary>
					/// Provides the path to Permissions's L134 with type bool
					/// </summary>
					public PathToField L134 { get { if (_BasePath._L134 == null) _BasePath._L134 = new PathToField(_BasePath, Schema.T.Permissions.F.L134 ); return _BasePath._L134; } }
					/// <summary>
					/// Provides the path to Permissions's L135 with type bool
					/// </summary>
					public PathToField L135 { get { if (_BasePath._L135 == null) _BasePath._L135 = new PathToField(_BasePath, Schema.T.Permissions.F.L135 ); return _BasePath._L135; } }
					/// <summary>
					/// Provides the path to Permissions's L136 with type bool
					/// </summary>
					public PathToField L136 { get { if (_BasePath._L136 == null) _BasePath._L136 = new PathToField(_BasePath, Schema.T.Permissions.F.L136 ); return _BasePath._L136; } }
					/// <summary>
					/// Provides the path to Permissions's L137 with type bool
					/// </summary>
					public PathToField L137 { get { if (_BasePath._L137 == null) _BasePath._L137 = new PathToField(_BasePath, Schema.T.Permissions.F.L137 ); return _BasePath._L137; } }
					/// <summary>
					/// Provides the path to Permissions's L138 with type bool
					/// </summary>
					public PathToField L138 { get { if (_BasePath._L138 == null) _BasePath._L138 = new PathToField(_BasePath, Schema.T.Permissions.F.L138 ); return _BasePath._L138; } }
					/// <summary>
					/// Provides the path to Permissions's L139 with type bool
					/// </summary>
					public PathToField L139 { get { if (_BasePath._L139 == null) _BasePath._L139 = new PathToField(_BasePath, Schema.T.Permissions.F.L139 ); return _BasePath._L139; } }
					/// <summary>
					/// Provides the path to Permissions's L140 with type bool
					/// </summary>
					public PathToField L140 { get { if (_BasePath._L140 == null) _BasePath._L140 = new PathToField(_BasePath, Schema.T.Permissions.F.L140 ); return _BasePath._L140; } }
				}

				internal PathToPermissionsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToPermissionsRow( DBI_Table t ) : base( t ) { }
				internal PathToPermissionsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPermissionsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToPermissionsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToPermissionsRow PathToReferencedRow { get { return (PathToPermissionsRow)base.PathToReferencedRow; } }

				internal PathToPermissionsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToPermissionsRow(rootTableSchema, columns);
				}
			}
			public class LinkToPermissions {
				public LinkToPermissions(DBI_Path referencing_path) {
					RECNO = new PathToPermissionsRow(referencing_path.PathThroughLinkage(Schema.T.Permissions.F.RECNO));
					Id = new PathToPermissionsRow(referencing_path.PathThroughLinkage(Schema.T.Permissions.F.Id));
					KEY = new PathToPermissionsRow(referencing_path.PathThroughLinkage(Schema.T.Permissions.F.KEY));
				}
				public readonly PathToPermissionsRow RECNO;
				public readonly PathToPermissionsRow Id;
				public readonly PathToPermissionsRow KEY;
			}
			#endregion

			#region DBI_Path EditPrograms
			private PathToEditProgramsRow __pEditPrograms = new PathToEditProgramsRow( SchemaClass.Instance.T.EditPrograms );

			/// <summary>
			/// The EditPrograms path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToEditProgramsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _PRONAME;
				private PathToField _VIEWCMD;
				private PathToField _PRINTCMD;
				private PathToField _STARTUP;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToEditProgramsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToEditProgramsRow _BasePath;
					/// <summary>
					/// Provides the path to EditPrograms's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.EditPrograms.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to EditPrograms's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.EditPrograms.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to EditPrograms's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.EditPrograms.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to EditPrograms's PRONAME with type string(maxlength 50, maxlines 0, trim)
					/// </summary>
					public PathToField PRONAME { get { if (_BasePath._PRONAME == null) _BasePath._PRONAME = new PathToField(_BasePath, Schema.T.EditPrograms.F.PRONAME ); return _BasePath._PRONAME; } }
					/// <summary>
					/// Provides the path to EditPrograms's VIEWCMD with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField VIEWCMD { get { if (_BasePath._VIEWCMD == null) _BasePath._VIEWCMD = new PathToField(_BasePath, Schema.T.EditPrograms.F.VIEWCMD ); return _BasePath._VIEWCMD; } }
					/// <summary>
					/// Provides the path to EditPrograms's PRINTCMD with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField PRINTCMD { get { if (_BasePath._PRINTCMD == null) _BasePath._PRINTCMD = new PathToField(_BasePath, Schema.T.EditPrograms.F.PRINTCMD ); return _BasePath._PRINTCMD; } }
					/// <summary>
					/// Provides the path to EditPrograms's STARTUP with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField STARTUP { get { if (_BasePath._STARTUP == null) _BasePath._STARTUP = new PathToField(_BasePath, Schema.T.EditPrograms.F.STARTUP ); return _BasePath._STARTUP; } }
				}

				internal PathToEditProgramsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToEditProgramsRow( DBI_Table t ) : base( t ) { }
				internal PathToEditProgramsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToEditProgramsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToEditProgramsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToEditProgramsRow PathToReferencedRow { get { return (PathToEditProgramsRow)base.PathToReferencedRow; } }

				internal PathToEditProgramsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToEditProgramsRow(rootTableSchema, columns);
				}
			}
			public class LinkToEditPrograms {
				public LinkToEditPrograms(DBI_Path referencing_path) {
					RECNO = new PathToEditProgramsRow(referencing_path.PathThroughLinkage(Schema.T.EditPrograms.F.RECNO));
					Id = new PathToEditProgramsRow(referencing_path.PathThroughLinkage(Schema.T.EditPrograms.F.Id));
					KEY = new PathToEditProgramsRow(referencing_path.PathThroughLinkage(Schema.T.EditPrograms.F.KEY));
				}
				public readonly PathToEditProgramsRow RECNO;
				public readonly PathToEditProgramsRow Id;
				public readonly PathToEditProgramsRow KEY;
			}
			#endregion

			#region DBI_Path Settings
			private PathToSettingsRow __pSettings = new PathToSettingsRow( SchemaClass.Instance.T.Settings );

			/// <summary>
			/// The Settings path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSettingsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _IDD;
				private PathToField _IDC;
				private PathToField _ORIGINATOR;
				private PathToField _VALUE;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToSettingsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToSettingsRow _BasePath;
					/// <summary>
					/// Provides the path to Settings's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Settings.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Settings's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Settings.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Settings's IDD with type string(maxlength 32, maxlines 0, trim)
					/// </summary>
					public PathToField IDD { get { if (_BasePath._IDD == null) _BasePath._IDD = new PathToField(_BasePath, Schema.T.Settings.F.IDD ); return _BasePath._IDD; } }
					/// <summary>
					/// Provides the path to Settings's IDC with type string(maxlength 32, maxlines 0, trim)
					/// </summary>
					public PathToField IDC { get { if (_BasePath._IDC == null) _BasePath._IDC = new PathToField(_BasePath, Schema.T.Settings.F.IDC ); return _BasePath._IDC; } }
					/// <summary>
					/// Provides the path to Settings's ORIGINATOR with type integer(32)
					/// </summary>
					public PathToField ORIGINATOR { get { if (_BasePath._ORIGINATOR == null) _BasePath._ORIGINATOR = new PathToField(_BasePath, Schema.T.Settings.F.ORIGINATOR ); return _BasePath._ORIGINATOR; } }
					/// <summary>
					/// Provides the path to Settings's VALUE with type string(maxlength 64, maxlines 0, trim)
					/// </summary>
					public PathToField VALUE { get { if (_BasePath._VALUE == null) _BasePath._VALUE = new PathToField(_BasePath, Schema.T.Settings.F.VALUE ); return _BasePath._VALUE; } }
				}

				internal PathToSettingsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToSettingsRow( DBI_Table t ) : base( t ) { }
				internal PathToSettingsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSettingsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToSettingsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToSettingsRow PathToReferencedRow { get { return (PathToSettingsRow)base.PathToReferencedRow; } }

				internal PathToSettingsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToSettingsRow(rootTableSchema, columns);
				}
			}
			public class LinkToSettings {
				public LinkToSettings(DBI_Path referencing_path) {
					RECNO = new PathToSettingsRow(referencing_path.PathThroughLinkage(Schema.T.Settings.F.RECNO));
					Id = new PathToSettingsRow(referencing_path.PathThroughLinkage(Schema.T.Settings.F.Id));
				}
				public readonly PathToSettingsRow RECNO;
				public readonly PathToSettingsRow Id;
			}
			#endregion

			#region DBI_Path AccessCodes
			private PathToAccessCodesRow __pAccessCodes = new PathToAccessCodesRow( SchemaClass.Instance.T.AccessCodes );

			/// <summary>
			/// The AccessCodes path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToAccessCodesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToAccessCodesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToAccessCodesRow _BasePath;
					/// <summary>
					/// Provides the path to AccessCodes's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.AccessCodes.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to AccessCodes's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.AccessCodes.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to AccessCodes's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.AccessCodes.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to AccessCodes's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.AccessCodes.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToAccessCodesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToAccessCodesRow( DBI_Table t ) : base( t ) { }
				internal PathToAccessCodesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToAccessCodesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToAccessCodesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToAccessCodesRow PathToReferencedRow { get { return (PathToAccessCodesRow)base.PathToReferencedRow; } }

				internal PathToAccessCodesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToAccessCodesRow(rootTableSchema, columns);
				}
			}
			public class LinkToAccessCodes {
				public LinkToAccessCodes(DBI_Path referencing_path) {
					RECNO = new PathToAccessCodesRow(referencing_path.PathThroughLinkage(Schema.T.AccessCodes.F.RECNO));
					Id = new PathToAccessCodesRow(referencing_path.PathThroughLinkage(Schema.T.AccessCodes.F.Id));
				}
				public readonly PathToAccessCodesRow RECNO;
				public readonly PathToAccessCodesRow Id;
			}
			#endregion

			#region DBI_Path Adjustments
			private PathToAdjustmentsRow __pAdjustments = new PathToAdjustmentsRow( SchemaClass.Instance.T.Adjustments );

			/// <summary>
			/// The Adjustments path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToAdjustmentsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToAdjustmentsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToAdjustmentsRow _BasePath;
					/// <summary>
					/// Provides the path to Adjustments's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Adjustments.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Adjustments's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Adjustments.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Adjustments's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Adjustments.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Adjustments's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Adjustments.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToAdjustmentsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToAdjustmentsRow( DBI_Table t ) : base( t ) { }
				internal PathToAdjustmentsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToAdjustmentsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToAdjustmentsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToAdjustmentsRow PathToReferencedRow { get { return (PathToAdjustmentsRow)base.PathToReferencedRow; } }

				internal PathToAdjustmentsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToAdjustmentsRow(rootTableSchema, columns);
				}
			}
			public class LinkToAdjustments {
				public LinkToAdjustments(DBI_Path referencing_path) {
					RECNO = new PathToAdjustmentsRow(referencing_path.PathThroughLinkage(Schema.T.Adjustments.F.RECNO));
					Id = new PathToAdjustmentsRow(referencing_path.PathThroughLinkage(Schema.T.Adjustments.F.Id));
				}
				public readonly PathToAdjustmentsRow RECNO;
				public readonly PathToAdjustmentsRow Id;
			}
			#endregion

			#region DBI_Path AssetCodes
			private PathToAssetCodesRow __pAssetCodes = new PathToAssetCodesRow( SchemaClass.Instance.T.AssetCodes );

			/// <summary>
			/// The AssetCodes path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToAssetCodesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToAssetCodesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToAssetCodesRow _BasePath;
					/// <summary>
					/// Provides the path to AssetCodes's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.AssetCodes.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to AssetCodes's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.AssetCodes.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to AssetCodes's CODE with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.AssetCodes.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to AssetCodes's DESC with type string(maxlength 40, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.AssetCodes.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToAssetCodesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToAssetCodesRow( DBI_Table t ) : base( t ) { }
				internal PathToAssetCodesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToAssetCodesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToAssetCodesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToAssetCodesRow PathToReferencedRow { get { return (PathToAssetCodesRow)base.PathToReferencedRow; } }

				internal PathToAssetCodesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToAssetCodesRow(rootTableSchema, columns);
				}
			}
			public class LinkToAssetCodes {
				public LinkToAssetCodes(DBI_Path referencing_path) {
					RECNO = new PathToAssetCodesRow(referencing_path.PathThroughLinkage(Schema.T.AssetCodes.F.RECNO));
					Id = new PathToAssetCodesRow(referencing_path.PathThroughLinkage(Schema.T.AssetCodes.F.Id));
				}
				public readonly PathToAssetCodesRow RECNO;
				public readonly PathToAssetCodesRow Id;
			}
			#endregion

			#region DBI_Path Buildings
			private PathToBuildingsRow __pBuildings = new PathToBuildingsRow( SchemaClass.Instance.T.Buildings );

			/// <summary>
			/// The Buildings path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToBuildingsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _CODE;
				private PathToField _DESC;
				private PathToField _ADDRESS1;
				private PathToField _ADDRESS2;
				private PathToField _CITY;
				private PathToField _TERRITORY;
				private PathToField _COUNTRY;
				private PathToField _PCODE;
				private PathToField _HIDDEN;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToBuildingsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToBuildingsRow _BasePath;
					/// <summary>
					/// Provides the path to Buildings's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Buildings.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Buildings's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Buildings.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Buildings's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.Buildings.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to Buildings's CODE with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Buildings.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Buildings's DESC with type string(maxlength 50, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Buildings.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to Buildings's ADDRESS1 with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField ADDRESS1 { get { if (_BasePath._ADDRESS1 == null) _BasePath._ADDRESS1 = new PathToField(_BasePath, Schema.T.Buildings.F.ADDRESS1 ); return _BasePath._ADDRESS1; } }
					/// <summary>
					/// Provides the path to Buildings's ADDRESS2 with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField ADDRESS2 { get { if (_BasePath._ADDRESS2 == null) _BasePath._ADDRESS2 = new PathToField(_BasePath, Schema.T.Buildings.F.ADDRESS2 ); return _BasePath._ADDRESS2; } }
					/// <summary>
					/// Provides the path to Buildings's CITY with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField CITY { get { if (_BasePath._CITY == null) _BasePath._CITY = new PathToField(_BasePath, Schema.T.Buildings.F.CITY ); return _BasePath._CITY; } }
					/// <summary>
					/// Provides the path to Buildings's TERRITORY with type string(maxlength 20, maxlines 0, trim)
					/// </summary>
					public PathToField TERRITORY { get { if (_BasePath._TERRITORY == null) _BasePath._TERRITORY = new PathToField(_BasePath, Schema.T.Buildings.F.TERRITORY ); return _BasePath._TERRITORY; } }
					/// <summary>
					/// Provides the path to Buildings's COUNTRY with type string(maxlength 20, maxlines 0, trim)
					/// </summary>
					public PathToField COUNTRY { get { if (_BasePath._COUNTRY == null) _BasePath._COUNTRY = new PathToField(_BasePath, Schema.T.Buildings.F.COUNTRY ); return _BasePath._COUNTRY; } }
					/// <summary>
					/// Provides the path to Buildings's PCODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField PCODE { get { if (_BasePath._PCODE == null) _BasePath._PCODE = new PathToField(_BasePath, Schema.T.Buildings.F.PCODE ); return _BasePath._PCODE; } }
					/// <summary>
					/// Provides the path to Buildings's HIDDEN with type bool
					/// </summary>
					public PathToField HIDDEN { get { if (_BasePath._HIDDEN == null) _BasePath._HIDDEN = new PathToField(_BasePath, Schema.T.Buildings.F.HIDDEN ); return _BasePath._HIDDEN; } }
				}

				internal PathToBuildingsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToBuildingsRow( DBI_Table t ) : base( t ) { }
				internal PathToBuildingsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToBuildingsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToBuildingsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToBuildingsRow PathToReferencedRow { get { return (PathToBuildingsRow)base.PathToReferencedRow; } }

				internal PathToBuildingsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToBuildingsRow(rootTableSchema, columns);
				}
			}
			public class LinkToBuildings {
				public LinkToBuildings(DBI_Path referencing_path) {
					RECNO = new PathToBuildingsRow(referencing_path.PathThroughLinkage(Schema.T.Buildings.F.RECNO));
					Id = new PathToBuildingsRow(referencing_path.PathThroughLinkage(Schema.T.Buildings.F.Id));
					KEY = new PathToBuildingsRow(referencing_path.PathThroughLinkage(Schema.T.Buildings.F.KEY));
				}
				public readonly PathToBuildingsRow RECNO;
				public readonly PathToBuildingsRow Id;
				public readonly PathToBuildingsRow KEY;
			}
			#endregion

			#region DBI_Path Chargebacks
			private PathToChargebacksRow __pChargebacks = new PathToChargebacksRow( SchemaClass.Instance.T.Chargebacks );

			/// <summary>
			/// The Chargebacks path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToChargebacksRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _WOKEY;
				private PathToField _CHARGETO;
				private PathToField _LABOR;
				private PathToField _MATERIAL;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToChargebacksRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToChargebacksRow _BasePath;
					/// <summary>
					/// Provides the path to Chargebacks's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Chargebacks.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Chargebacks's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Chargebacks.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Chargebacks's WOKEY with type integer(32)
					/// </summary>
					public PathToField WOKEY { get { if (_BasePath._WOKEY == null) _BasePath._WOKEY = new PathToField(_BasePath, Schema.T.Chargebacks.F.WOKEY ); return _BasePath._WOKEY; } }
					/// <summary>
					/// Provides the path to Chargebacks's CHARGETO with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField CHARGETO { get { if (_BasePath._CHARGETO == null) _BasePath._CHARGETO = new PathToField(_BasePath, Schema.T.Chargebacks.F.CHARGETO ); return _BasePath._CHARGETO; } }
					/// <summary>
					/// Provides the path to Chargebacks's LABOR with type integer(32)
					/// </summary>
					public PathToField LABOR { get { if (_BasePath._LABOR == null) _BasePath._LABOR = new PathToField(_BasePath, Schema.T.Chargebacks.F.LABOR ); return _BasePath._LABOR; } }
					/// <summary>
					/// Provides the path to Chargebacks's MATERIAL with type integer(32)
					/// </summary>
					public PathToField MATERIAL { get { if (_BasePath._MATERIAL == null) _BasePath._MATERIAL = new PathToField(_BasePath, Schema.T.Chargebacks.F.MATERIAL ); return _BasePath._MATERIAL; } }
				}

				internal PathToChargebacksRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToChargebacksRow( DBI_Table t ) : base( t ) { }
				internal PathToChargebacksRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToChargebacksLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToChargebacksRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToChargebacksRow PathToReferencedRow { get { return (PathToChargebacksRow)base.PathToReferencedRow; } }

				internal PathToChargebacksLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToChargebacksRow(rootTableSchema, columns);
				}
			}
			public class LinkToChargebacks {
				public LinkToChargebacks(DBI_Path referencing_path) {
					RECNO = new PathToChargebacksRow(referencing_path.PathThroughLinkage(Schema.T.Chargebacks.F.RECNO));
					Id = new PathToChargebacksRow(referencing_path.PathThroughLinkage(Schema.T.Chargebacks.F.Id));
				}
				public readonly PathToChargebacksRow RECNO;
				public readonly PathToChargebacksRow Id;
			}
			#endregion

			#region DBI_Path ClosingCodes
			private PathToClosingCodesRow __pClosingCodes = new PathToClosingCodesRow( SchemaClass.Instance.T.ClosingCodes );

			/// <summary>
			/// The ClosingCodes path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToClosingCodesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToClosingCodesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToClosingCodesRow _BasePath;
					/// <summary>
					/// Provides the path to ClosingCodes's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.ClosingCodes.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to ClosingCodes's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.ClosingCodes.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to ClosingCodes's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.ClosingCodes.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to ClosingCodes's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.ClosingCodes.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToClosingCodesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToClosingCodesRow( DBI_Table t ) : base( t ) { }
				internal PathToClosingCodesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToClosingCodesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToClosingCodesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToClosingCodesRow PathToReferencedRow { get { return (PathToClosingCodesRow)base.PathToReferencedRow; } }

				internal PathToClosingCodesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToClosingCodesRow(rootTableSchema, columns);
				}
			}
			public class LinkToClosingCodes {
				public LinkToClosingCodes(DBI_Path referencing_path) {
					RECNO = new PathToClosingCodesRow(referencing_path.PathThroughLinkage(Schema.T.ClosingCodes.F.RECNO));
					Id = new PathToClosingCodesRow(referencing_path.PathThroughLinkage(Schema.T.ClosingCodes.F.Id));
				}
				public readonly PathToClosingCodesRow RECNO;
				public readonly PathToClosingCodesRow Id;
			}
			#endregion

			#region DBI_Path Contacts
			private PathToContactsRow __pContacts = new PathToContactsRow( SchemaClass.Instance.T.Contacts );

			/// <summary>
			/// The Contacts path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToContactsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _CODE;
				private PathToField _BTEL;
				private PathToField _HTEL;
				private PathToField _PAGER;
				private PathToField _MOBILE;
				private PathToField _HIDDEN;
				private PathToField _EMAIL;
				private PathToField _COMMENT;
				private PathToField _LANGID;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToContactsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToContactsRow _BasePath;
					/// <summary>
					/// Provides the path to Contacts's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Contacts.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Contacts's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Contacts.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Contacts's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.Contacts.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to Contacts's CODE with type string(maxlength 50, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Contacts.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Contacts's BTEL with type string(maxlength 42, maxlines 0, trim)
					/// </summary>
					public PathToField BTEL { get { if (_BasePath._BTEL == null) _BasePath._BTEL = new PathToField(_BasePath, Schema.T.Contacts.F.BTEL ); return _BasePath._BTEL; } }
					/// <summary>
					/// Provides the path to Contacts's HTEL with type string(maxlength 42, maxlines 0, trim)
					/// </summary>
					public PathToField HTEL { get { if (_BasePath._HTEL == null) _BasePath._HTEL = new PathToField(_BasePath, Schema.T.Contacts.F.HTEL ); return _BasePath._HTEL; } }
					/// <summary>
					/// Provides the path to Contacts's PAGER with type string(maxlength 42, maxlines 0, trim)
					/// </summary>
					public PathToField PAGER { get { if (_BasePath._PAGER == null) _BasePath._PAGER = new PathToField(_BasePath, Schema.T.Contacts.F.PAGER ); return _BasePath._PAGER; } }
					/// <summary>
					/// Provides the path to Contacts's MOBILE with type string(maxlength 42, maxlines 0, trim)
					/// </summary>
					public PathToField MOBILE { get { if (_BasePath._MOBILE == null) _BasePath._MOBILE = new PathToField(_BasePath, Schema.T.Contacts.F.MOBILE ); return _BasePath._MOBILE; } }
					/// <summary>
					/// Provides the path to Contacts's HIDDEN with type bool
					/// </summary>
					public PathToField HIDDEN { get { if (_BasePath._HIDDEN == null) _BasePath._HIDDEN = new PathToField(_BasePath, Schema.T.Contacts.F.HIDDEN ); return _BasePath._HIDDEN; } }
					/// <summary>
					/// Provides the path to Contacts's EMAIL with type string(maxlength 128, maxlines 0, trim)
					/// </summary>
					public PathToField EMAIL { get { if (_BasePath._EMAIL == null) _BasePath._EMAIL = new PathToField(_BasePath, Schema.T.Contacts.F.EMAIL ); return _BasePath._EMAIL; } }
					/// <summary>
					/// Provides the path to Contacts's COMMENT with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField COMMENT { get { if (_BasePath._COMMENT == null) _BasePath._COMMENT = new PathToField(_BasePath, Schema.T.Contacts.F.COMMENT ); return _BasePath._COMMENT; } }
					/// <summary>
					/// Provides the path to Contacts's LANGID with type string(maxlength 4, maxlines 0, trim)
					/// </summary>
					public PathToField LANGID { get { if (_BasePath._LANGID == null) _BasePath._LANGID = new PathToField(_BasePath, Schema.T.Contacts.F.LANGID ); return _BasePath._LANGID; } }
				}

				internal PathToContactsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToContactsRow( DBI_Table t ) : base( t ) { }
				internal PathToContactsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToContactsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToContactsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToContactsRow PathToReferencedRow { get { return (PathToContactsRow)base.PathToReferencedRow; } }

				internal PathToContactsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToContactsRow(rootTableSchema, columns);
				}
			}
			public class LinkToContacts {
				public LinkToContacts(DBI_Path referencing_path) {
					RECNO = new PathToContactsRow(referencing_path.PathThroughLinkage(Schema.T.Contacts.F.RECNO));
					Id = new PathToContactsRow(referencing_path.PathThroughLinkage(Schema.T.Contacts.F.Id));
					KEY = new PathToContactsRow(referencing_path.PathThroughLinkage(Schema.T.Contacts.F.KEY));
				}
				public readonly PathToContactsRow RECNO;
				public readonly PathToContactsRow Id;
				public readonly PathToContactsRow KEY;
			}
			#endregion

			#region DBI_Path CostCenters
			private PathToCostCentersRow __pCostCenters = new PathToCostCentersRow( SchemaClass.Instance.T.CostCenters );

			/// <summary>
			/// The CostCenters path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToCostCentersRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToCostCentersRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToCostCentersRow _BasePath;
					/// <summary>
					/// Provides the path to CostCenters's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.CostCenters.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to CostCenters's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.CostCenters.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to CostCenters's CODE with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.CostCenters.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to CostCenters's DESC with type string(maxlength 40, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.CostCenters.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToCostCentersRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToCostCentersRow( DBI_Table t ) : base( t ) { }
				internal PathToCostCentersRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToCostCentersLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToCostCentersRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToCostCentersRow PathToReferencedRow { get { return (PathToCostCentersRow)base.PathToReferencedRow; } }

				internal PathToCostCentersLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToCostCentersRow(rootTableSchema, columns);
				}
			}
			public class LinkToCostCenters {
				public LinkToCostCenters(DBI_Path referencing_path) {
					RECNO = new PathToCostCentersRow(referencing_path.PathThroughLinkage(Schema.T.CostCenters.F.RECNO));
					Id = new PathToCostCentersRow(referencing_path.PathThroughLinkage(Schema.T.CostCenters.F.Id));
				}
				public readonly PathToCostCentersRow RECNO;
				public readonly PathToCostCentersRow Id;
			}
			#endregion

			#region DBI_Path InvCategories
			private PathToInvCategoriesRow __pInvCategories = new PathToInvCategoriesRow( SchemaClass.Instance.T.InvCategories );

			/// <summary>
			/// The InvCategories path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToInvCategoriesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToInvCategoriesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToInvCategoriesRow _BasePath;
					/// <summary>
					/// Provides the path to InvCategories's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.InvCategories.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to InvCategories's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.InvCategories.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to InvCategories's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.InvCategories.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to InvCategories's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.InvCategories.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToInvCategoriesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToInvCategoriesRow( DBI_Table t ) : base( t ) { }
				internal PathToInvCategoriesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToInvCategoriesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToInvCategoriesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToInvCategoriesRow PathToReferencedRow { get { return (PathToInvCategoriesRow)base.PathToReferencedRow; } }

				internal PathToInvCategoriesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToInvCategoriesRow(rootTableSchema, columns);
				}
			}
			public class LinkToInvCategories {
				public LinkToInvCategories(DBI_Path referencing_path) {
					RECNO = new PathToInvCategoriesRow(referencing_path.PathThroughLinkage(Schema.T.InvCategories.F.RECNO));
					Id = new PathToInvCategoriesRow(referencing_path.PathThroughLinkage(Schema.T.InvCategories.F.Id));
				}
				public readonly PathToInvCategoriesRow RECNO;
				public readonly PathToInvCategoriesRow Id;
			}
			#endregion

			#region DBI_Path InvItems
			private PathToInvItemsRow __pInvItems = new PathToInvItemsRow( SchemaClass.Instance.T.InvItems );

			/// <summary>
			/// The InvItems path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToInvItemsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _CODE;
				private PathToField _DESC;
				private PathToField _CAT;
				private PathToField _UOMKEY;
				private PathToField _MINI;
				private PathToField _MAXI;
				private PathToField _TOTALCOST;
				private PathToField _ONHAND;
				private PathToField _ONORDER;
				private PathToField _ONRESERVE;
				private PathToField _TOTALSEQ;
				private PathToField _INVENTORY;
				private PathToField _COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToInvItemsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToInvItemsRow _BasePath;
					/// <summary>
					/// Provides the path to InvItems's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.InvItems.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to InvItems's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.InvItems.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to InvItems's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.InvItems.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to InvItems's CODE with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.InvItems.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to InvItems's DESC with type string(maxlength 50, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.InvItems.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to InvItems's CAT with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CAT { get { if (_BasePath._CAT == null) _BasePath._CAT = new PathToField(_BasePath, Schema.T.InvItems.F.CAT ); return _BasePath._CAT; } }
					/// <summary>
					/// Provides the path to InvItems's UOMKEY with type integer(32)
					/// </summary>
					public PathToField UOMKEY { get { if (_BasePath._UOMKEY == null) _BasePath._UOMKEY = new PathToField(_BasePath, Schema.T.InvItems.F.UOMKEY ); return _BasePath._UOMKEY; } }
					/// <summary>
					/// Provides the path to InvItems's MINI with type integer(32)
					/// </summary>
					public PathToField MINI { get { if (_BasePath._MINI == null) _BasePath._MINI = new PathToField(_BasePath, Schema.T.InvItems.F.MINI ); return _BasePath._MINI; } }
					/// <summary>
					/// Provides the path to InvItems's MAXI with type integer(32)
					/// </summary>
					public PathToField MAXI { get { if (_BasePath._MAXI == null) _BasePath._MAXI = new PathToField(_BasePath, Schema.T.InvItems.F.MAXI ); return _BasePath._MAXI; } }
					/// <summary>
					/// Provides the path to InvItems's TOTALCOST with type integer(32)
					/// </summary>
					public PathToField TOTALCOST { get { if (_BasePath._TOTALCOST == null) _BasePath._TOTALCOST = new PathToField(_BasePath, Schema.T.InvItems.F.TOTALCOST ); return _BasePath._TOTALCOST; } }
					/// <summary>
					/// Provides the path to InvItems's ONHAND with type integer(32)
					/// </summary>
					public PathToField ONHAND { get { if (_BasePath._ONHAND == null) _BasePath._ONHAND = new PathToField(_BasePath, Schema.T.InvItems.F.ONHAND ); return _BasePath._ONHAND; } }
					/// <summary>
					/// Provides the path to InvItems's ONORDER with type integer(32)
					/// </summary>
					public PathToField ONORDER { get { if (_BasePath._ONORDER == null) _BasePath._ONORDER = new PathToField(_BasePath, Schema.T.InvItems.F.ONORDER ); return _BasePath._ONORDER; } }
					/// <summary>
					/// Provides the path to InvItems's ONRESERVE with type integer(32)
					/// </summary>
					public PathToField ONRESERVE { get { if (_BasePath._ONRESERVE == null) _BasePath._ONRESERVE = new PathToField(_BasePath, Schema.T.InvItems.F.ONRESERVE ); return _BasePath._ONRESERVE; } }
					/// <summary>
					/// Provides the path to InvItems's TOTALSEQ with type integer(32)
					/// </summary>
					public PathToField TOTALSEQ { get { if (_BasePath._TOTALSEQ == null) _BasePath._TOTALSEQ = new PathToField(_BasePath, Schema.T.InvItems.F.TOTALSEQ ); return _BasePath._TOTALSEQ; } }
					/// <summary>
					/// Provides the path to InvItems's INVENTORY with type bool
					/// </summary>
					public PathToField INVENTORY { get { if (_BasePath._INVENTORY == null) _BasePath._INVENTORY = new PathToField(_BasePath, Schema.T.InvItems.F.INVENTORY ); return _BasePath._INVENTORY; } }
					/// <summary>
					/// Provides the path to InvItems's COMMENT with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField COMMENT { get { if (_BasePath._COMMENT == null) _BasePath._COMMENT = new PathToField(_BasePath, Schema.T.InvItems.F.COMMENT ); return _BasePath._COMMENT; } }
				}

				internal PathToInvItemsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToInvItemsRow( DBI_Table t ) : base( t ) { }
				internal PathToInvItemsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToInvItemsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToInvItemsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToInvItemsRow PathToReferencedRow { get { return (PathToInvItemsRow)base.PathToReferencedRow; } }

				internal PathToInvItemsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToInvItemsRow(rootTableSchema, columns);
				}
			}
			public class LinkToInvItems {
				public LinkToInvItems(DBI_Path referencing_path) {
					RECNO = new PathToInvItemsRow(referencing_path.PathThroughLinkage(Schema.T.InvItems.F.RECNO));
					Id = new PathToInvItemsRow(referencing_path.PathThroughLinkage(Schema.T.InvItems.F.Id));
					KEY = new PathToInvItemsRow(referencing_path.PathThroughLinkage(Schema.T.InvItems.F.KEY));
				}
				public readonly PathToInvItemsRow RECNO;
				public readonly PathToInvItemsRow Id;
				public readonly PathToInvItemsRow KEY;
			}
			#endregion

			#region DBI_Path InvLocations
			private PathToInvLocationsRow __pInvLocations = new PathToInvLocationsRow( SchemaClass.Instance.T.InvLocations );

			/// <summary>
			/// The InvLocations path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToInvLocationsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _STRMKEY;
				private PathToField _ITEMKEY;
				private PathToField _LOC;
				private PathToField _ONHAND;
				private PathToField _TOTALCOST;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToInvLocationsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToInvLocationsRow _BasePath;
					/// <summary>
					/// Provides the path to InvLocations's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.InvLocations.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to InvLocations's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.InvLocations.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to InvLocations's STRMKEY with type integer(32)
					/// </summary>
					public PathToField STRMKEY { get { if (_BasePath._STRMKEY == null) _BasePath._STRMKEY = new PathToField(_BasePath, Schema.T.InvLocations.F.STRMKEY ); return _BasePath._STRMKEY; } }
					/// <summary>
					/// Provides the path to InvLocations's ITEMKEY with type integer(32)
					/// </summary>
					public PathToField ITEMKEY { get { if (_BasePath._ITEMKEY == null) _BasePath._ITEMKEY = new PathToField(_BasePath, Schema.T.InvLocations.F.ITEMKEY ); return _BasePath._ITEMKEY; } }
					/// <summary>
					/// Provides the path to InvLocations's LOC with type string(maxlength 20, maxlines 0, trim)
					/// </summary>
					public PathToField LOC { get { if (_BasePath._LOC == null) _BasePath._LOC = new PathToField(_BasePath, Schema.T.InvLocations.F.LOC ); return _BasePath._LOC; } }
					/// <summary>
					/// Provides the path to InvLocations's ONHAND with type integer(32)
					/// </summary>
					public PathToField ONHAND { get { if (_BasePath._ONHAND == null) _BasePath._ONHAND = new PathToField(_BasePath, Schema.T.InvLocations.F.ONHAND ); return _BasePath._ONHAND; } }
					/// <summary>
					/// Provides the path to InvLocations's TOTALCOST with type integer(32)
					/// </summary>
					public PathToField TOTALCOST { get { if (_BasePath._TOTALCOST == null) _BasePath._TOTALCOST = new PathToField(_BasePath, Schema.T.InvLocations.F.TOTALCOST ); return _BasePath._TOTALCOST; } }
				}

				internal PathToInvLocationsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToInvLocationsRow( DBI_Table t ) : base( t ) { }
				internal PathToInvLocationsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToInvLocationsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToInvLocationsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToInvLocationsRow PathToReferencedRow { get { return (PathToInvLocationsRow)base.PathToReferencedRow; } }

				internal PathToInvLocationsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToInvLocationsRow(rootTableSchema, columns);
				}
			}
			public class LinkToInvLocations {
				public LinkToInvLocations(DBI_Path referencing_path) {
					RECNO = new PathToInvLocationsRow(referencing_path.PathThroughLinkage(Schema.T.InvLocations.F.RECNO));
					Id = new PathToInvLocationsRow(referencing_path.PathThroughLinkage(Schema.T.InvLocations.F.Id));
				}
				public readonly PathToInvLocationsRow RECNO;
				public readonly PathToInvLocationsRow Id;
			}
			#endregion

			#region DBI_Path InvTransactions
			private PathToInvTransactionsRow __pInvTransactions = new PathToInvTransactionsRow( SchemaClass.Instance.T.InvTransactions );

			/// <summary>
			/// The InvTransactions path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToInvTransactionsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _ITEMKEY;
				private PathToField _TYPE;
				private PathToField _DATE;
				private PathToField _TIME;
				private PathToField _QTY;
				private PathToField _TOTALCOST;
				private PathToField _REASON;
				private PathToField _STRMKEY;
				private PathToField _LOC;
				private PathToField _REFER;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToInvTransactionsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToInvTransactionsRow _BasePath;
					/// <summary>
					/// Provides the path to InvTransactions's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.InvTransactions.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to InvTransactions's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.InvTransactions.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to InvTransactions's ITEMKEY with type integer(32)
					/// </summary>
					public PathToField ITEMKEY { get { if (_BasePath._ITEMKEY == null) _BasePath._ITEMKEY = new PathToField(_BasePath, Schema.T.InvTransactions.F.ITEMKEY ); return _BasePath._ITEMKEY; } }
					/// <summary>
					/// Provides the path to InvTransactions's TYPE with type string(maxlength 2, maxlines 0, trim)
					/// </summary>
					public PathToField TYPE { get { if (_BasePath._TYPE == null) _BasePath._TYPE = new PathToField(_BasePath, Schema.T.InvTransactions.F.TYPE ); return _BasePath._TYPE; } }
					/// <summary>
					/// Provides the path to InvTransactions's DATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField DATE { get { if (_BasePath._DATE == null) _BasePath._DATE = new PathToField(_BasePath, Schema.T.InvTransactions.F.DATE ); return _BasePath._DATE; } }
					/// <summary>
					/// Provides the path to InvTransactions's TIME with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField TIME { get { if (_BasePath._TIME == null) _BasePath._TIME = new PathToField(_BasePath, Schema.T.InvTransactions.F.TIME ); return _BasePath._TIME; } }
					/// <summary>
					/// Provides the path to InvTransactions's QTY with type integer(32)
					/// </summary>
					public PathToField QTY { get { if (_BasePath._QTY == null) _BasePath._QTY = new PathToField(_BasePath, Schema.T.InvTransactions.F.QTY ); return _BasePath._QTY; } }
					/// <summary>
					/// Provides the path to InvTransactions's TOTALCOST with type integer(32)
					/// </summary>
					public PathToField TOTALCOST { get { if (_BasePath._TOTALCOST == null) _BasePath._TOTALCOST = new PathToField(_BasePath, Schema.T.InvTransactions.F.TOTALCOST ); return _BasePath._TOTALCOST; } }
					/// <summary>
					/// Provides the path to InvTransactions's REASON with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField REASON { get { if (_BasePath._REASON == null) _BasePath._REASON = new PathToField(_BasePath, Schema.T.InvTransactions.F.REASON ); return _BasePath._REASON; } }
					/// <summary>
					/// Provides the path to InvTransactions's STRMKEY with type integer(32)
					/// </summary>
					public PathToField STRMKEY { get { if (_BasePath._STRMKEY == null) _BasePath._STRMKEY = new PathToField(_BasePath, Schema.T.InvTransactions.F.STRMKEY ); return _BasePath._STRMKEY; } }
					/// <summary>
					/// Provides the path to InvTransactions's LOC with type string(maxlength 20, maxlines 0, trim)
					/// </summary>
					public PathToField LOC { get { if (_BasePath._LOC == null) _BasePath._LOC = new PathToField(_BasePath, Schema.T.InvTransactions.F.LOC ); return _BasePath._LOC; } }
					/// <summary>
					/// Provides the path to InvTransactions's REFER with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField REFER { get { if (_BasePath._REFER == null) _BasePath._REFER = new PathToField(_BasePath, Schema.T.InvTransactions.F.REFER ); return _BasePath._REFER; } }
				}

				internal PathToInvTransactionsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToInvTransactionsRow( DBI_Table t ) : base( t ) { }
				internal PathToInvTransactionsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToInvTransactionsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToInvTransactionsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToInvTransactionsRow PathToReferencedRow { get { return (PathToInvTransactionsRow)base.PathToReferencedRow; } }

				internal PathToInvTransactionsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToInvTransactionsRow(rootTableSchema, columns);
				}
			}
			public class LinkToInvTransactions {
				public LinkToInvTransactions(DBI_Path referencing_path) {
					RECNO = new PathToInvTransactionsRow(referencing_path.PathThroughLinkage(Schema.T.InvTransactions.F.RECNO));
					Id = new PathToInvTransactionsRow(referencing_path.PathThroughLinkage(Schema.T.InvTransactions.F.Id));
				}
				public readonly PathToInvTransactionsRow RECNO;
				public readonly PathToInvTransactionsRow Id;
			}
			#endregion

			#region DBI_Path Issues
			private PathToIssuesRow __pIssues = new PathToIssuesRow( SchemaClass.Instance.T.Issues );

			/// <summary>
			/// The Issues path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToIssuesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToIssuesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToIssuesRow _BasePath;
					/// <summary>
					/// Provides the path to Issues's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Issues.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Issues's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Issues.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Issues's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Issues.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Issues's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Issues.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToIssuesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToIssuesRow( DBI_Table t ) : base( t ) { }
				internal PathToIssuesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToIssuesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToIssuesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToIssuesRow PathToReferencedRow { get { return (PathToIssuesRow)base.PathToReferencedRow; } }

				internal PathToIssuesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToIssuesRow(rootTableSchema, columns);
				}
			}
			public class LinkToIssues {
				public LinkToIssues(DBI_Path referencing_path) {
					RECNO = new PathToIssuesRow(referencing_path.PathThroughLinkage(Schema.T.Issues.F.RECNO));
					Id = new PathToIssuesRow(referencing_path.PathThroughLinkage(Schema.T.Issues.F.Id));
				}
				public readonly PathToIssuesRow RECNO;
				public readonly PathToIssuesRow Id;
			}
			#endregion

			#region DBI_Path Labor
			private PathToLaborRow __pLabor = new PathToLaborRow( SchemaClass.Instance.T.Labor );

			/// <summary>
			/// The Labor path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToLaborRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _WOKEY;
				private PathToField _LABORKEY;
				private PathToField _TRADE;
				private PathToField _STARTDATE;
				private PathToField _STARTTIME;
				private PathToField _TIME;
				private PathToField _LABORRATE;
				private PathToField _ESTIMATE;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToLaborRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToLaborRow _BasePath;
					/// <summary>
					/// Provides the path to Labor's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Labor.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Labor's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Labor.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Labor's WOKEY with type integer(32)
					/// </summary>
					public PathToField WOKEY { get { if (_BasePath._WOKEY == null) _BasePath._WOKEY = new PathToField(_BasePath, Schema.T.Labor.F.WOKEY ); return _BasePath._WOKEY; } }
					/// <summary>
					/// Provides the path to Labor's LABORKEY with type integer(32)
					/// </summary>
					public PathToField LABORKEY { get { if (_BasePath._LABORKEY == null) _BasePath._LABORKEY = new PathToField(_BasePath, Schema.T.Labor.F.LABORKEY ); return _BasePath._LABORKEY; } }
					/// <summary>
					/// Provides the path to Labor's TRADE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField TRADE { get { if (_BasePath._TRADE == null) _BasePath._TRADE = new PathToField(_BasePath, Schema.T.Labor.F.TRADE ); return _BasePath._TRADE; } }
					/// <summary>
					/// Provides the path to Labor's STARTDATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField STARTDATE { get { if (_BasePath._STARTDATE == null) _BasePath._STARTDATE = new PathToField(_BasePath, Schema.T.Labor.F.STARTDATE ); return _BasePath._STARTDATE; } }
					/// <summary>
					/// Provides the path to Labor's STARTTIME with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField STARTTIME { get { if (_BasePath._STARTTIME == null) _BasePath._STARTTIME = new PathToField(_BasePath, Schema.T.Labor.F.STARTTIME ); return _BasePath._STARTTIME; } }
					/// <summary>
					/// Provides the path to Labor's TIME with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField TIME { get { if (_BasePath._TIME == null) _BasePath._TIME = new PathToField(_BasePath, Schema.T.Labor.F.TIME ); return _BasePath._TIME; } }
					/// <summary>
					/// Provides the path to Labor's LABORRATE with type integer(32)
					/// </summary>
					public PathToField LABORRATE { get { if (_BasePath._LABORRATE == null) _BasePath._LABORRATE = new PathToField(_BasePath, Schema.T.Labor.F.LABORRATE ); return _BasePath._LABORRATE; } }
					/// <summary>
					/// Provides the path to Labor's ESTIMATE with type bool
					/// </summary>
					public PathToField ESTIMATE { get { if (_BasePath._ESTIMATE == null) _BasePath._ESTIMATE = new PathToField(_BasePath, Schema.T.Labor.F.ESTIMATE ); return _BasePath._ESTIMATE; } }
				}

				internal PathToLaborRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToLaborRow( DBI_Table t ) : base( t ) { }
				internal PathToLaborRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToLaborLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToLaborRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToLaborRow PathToReferencedRow { get { return (PathToLaborRow)base.PathToReferencedRow; } }

				internal PathToLaborLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToLaborRow(rootTableSchema, columns);
				}
			}
			public class LinkToLabor {
				public LinkToLabor(DBI_Path referencing_path) {
					RECNO = new PathToLaborRow(referencing_path.PathThroughLinkage(Schema.T.Labor.F.RECNO));
					Id = new PathToLaborRow(referencing_path.PathThroughLinkage(Schema.T.Labor.F.Id));
				}
				public readonly PathToLaborRow RECNO;
				public readonly PathToLaborRow Id;
			}
			#endregion

			#region DBI_Path MeterHistory
			private PathToMeterHistoryRow __pMeterHistory = new PathToMeterHistoryRow( SchemaClass.Instance.T.MeterHistory );

			/// <summary>
			/// The MeterHistory path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToMeterHistoryRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _METERKEY;
				private PathToField _DATE;
				private PathToField _TIME;
				private PathToField _ORIGINKEY;
				private PathToField _READING;
				private PathToField _EFFECTIVE;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToMeterHistoryRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToMeterHistoryRow _BasePath;
					/// <summary>
					/// Provides the path to MeterHistory's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.MeterHistory.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to MeterHistory's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.MeterHistory.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to MeterHistory's METERKEY with type integer(32)
					/// </summary>
					public PathToField METERKEY { get { if (_BasePath._METERKEY == null) _BasePath._METERKEY = new PathToField(_BasePath, Schema.T.MeterHistory.F.METERKEY ); return _BasePath._METERKEY; } }
					/// <summary>
					/// Provides the path to MeterHistory's DATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField DATE { get { if (_BasePath._DATE == null) _BasePath._DATE = new PathToField(_BasePath, Schema.T.MeterHistory.F.DATE ); return _BasePath._DATE; } }
					/// <summary>
					/// Provides the path to MeterHistory's TIME with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField TIME { get { if (_BasePath._TIME == null) _BasePath._TIME = new PathToField(_BasePath, Schema.T.MeterHistory.F.TIME ); return _BasePath._TIME; } }
					/// <summary>
					/// Provides the path to MeterHistory's ORIGINKEY with type integer(32)
					/// </summary>
					public PathToField ORIGINKEY { get { if (_BasePath._ORIGINKEY == null) _BasePath._ORIGINKEY = new PathToField(_BasePath, Schema.T.MeterHistory.F.ORIGINKEY ); return _BasePath._ORIGINKEY; } }
					/// <summary>
					/// Provides the path to MeterHistory's READING with type integer(32)
					/// </summary>
					public PathToField READING { get { if (_BasePath._READING == null) _BasePath._READING = new PathToField(_BasePath, Schema.T.MeterHistory.F.READING ); return _BasePath._READING; } }
					/// <summary>
					/// Provides the path to MeterHistory's EFFECTIVE with type integer(32)
					/// </summary>
					public PathToField EFFECTIVE { get { if (_BasePath._EFFECTIVE == null) _BasePath._EFFECTIVE = new PathToField(_BasePath, Schema.T.MeterHistory.F.EFFECTIVE ); return _BasePath._EFFECTIVE; } }
				}

				internal PathToMeterHistoryRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToMeterHistoryRow( DBI_Table t ) : base( t ) { }
				internal PathToMeterHistoryRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToMeterHistoryLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToMeterHistoryRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToMeterHistoryRow PathToReferencedRow { get { return (PathToMeterHistoryRow)base.PathToReferencedRow; } }

				internal PathToMeterHistoryLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToMeterHistoryRow(rootTableSchema, columns);
				}
			}
			public class LinkToMeterHistory {
				public LinkToMeterHistory(DBI_Path referencing_path) {
					RECNO = new PathToMeterHistoryRow(referencing_path.PathThroughLinkage(Schema.T.MeterHistory.F.RECNO));
					Id = new PathToMeterHistoryRow(referencing_path.PathThroughLinkage(Schema.T.MeterHistory.F.Id));
				}
				public readonly PathToMeterHistoryRow RECNO;
				public readonly PathToMeterHistoryRow Id;
			}
			#endregion

			#region DBI_Path Meters
			private PathToMetersRow __pMeters = new PathToMetersRow( SchemaClass.Instance.T.Meters );

			/// <summary>
			/// The Meters path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToMetersRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _CODE;
				private PathToField _DESC;
				private PathToField _TYPE;
				private PathToField _UNITKEY;
				private PathToField _OFFSET;
				private PathToField _UOMKEY;
				private PathToField _CREATEDATE;
				private PathToField _CREATETIME;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToMetersRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToMetersRow _BasePath;
					/// <summary>
					/// Provides the path to Meters's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Meters.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Meters's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Meters.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Meters's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.Meters.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to Meters's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Meters.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Meters's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Meters.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to Meters's TYPE with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField TYPE { get { if (_BasePath._TYPE == null) _BasePath._TYPE = new PathToField(_BasePath, Schema.T.Meters.F.TYPE ); return _BasePath._TYPE; } }
					/// <summary>
					/// Provides the path to Meters's UNITKEY with type integer(32)
					/// </summary>
					public PathToField UNITKEY { get { if (_BasePath._UNITKEY == null) _BasePath._UNITKEY = new PathToField(_BasePath, Schema.T.Meters.F.UNITKEY ); return _BasePath._UNITKEY; } }
					/// <summary>
					/// Provides the path to Meters's OFFSET with type integer(32)
					/// </summary>
					public PathToField OFFSET { get { if (_BasePath._OFFSET == null) _BasePath._OFFSET = new PathToField(_BasePath, Schema.T.Meters.F.OFFSET ); return _BasePath._OFFSET; } }
					/// <summary>
					/// Provides the path to Meters's UOMKEY with type integer(32)
					/// </summary>
					public PathToField UOMKEY { get { if (_BasePath._UOMKEY == null) _BasePath._UOMKEY = new PathToField(_BasePath, Schema.T.Meters.F.UOMKEY ); return _BasePath._UOMKEY; } }
					/// <summary>
					/// Provides the path to Meters's CREATEDATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField CREATEDATE { get { if (_BasePath._CREATEDATE == null) _BasePath._CREATEDATE = new PathToField(_BasePath, Schema.T.Meters.F.CREATEDATE ); return _BasePath._CREATEDATE; } }
					/// <summary>
					/// Provides the path to Meters's CREATETIME with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField CREATETIME { get { if (_BasePath._CREATETIME == null) _BasePath._CREATETIME = new PathToField(_BasePath, Schema.T.Meters.F.CREATETIME ); return _BasePath._CREATETIME; } }
				}

				internal PathToMetersRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToMetersRow( DBI_Table t ) : base( t ) { }
				internal PathToMetersRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToMetersLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToMetersRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToMetersRow PathToReferencedRow { get { return (PathToMetersRow)base.PathToReferencedRow; } }

				internal PathToMetersLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToMetersRow(rootTableSchema, columns);
				}
			}
			public class LinkToMeters {
				public LinkToMeters(DBI_Path referencing_path) {
					RECNO = new PathToMetersRow(referencing_path.PathThroughLinkage(Schema.T.Meters.F.RECNO));
					Id = new PathToMetersRow(referencing_path.PathThroughLinkage(Schema.T.Meters.F.Id));
					KEY = new PathToMetersRow(referencing_path.PathThroughLinkage(Schema.T.Meters.F.KEY));
				}
				public readonly PathToMetersRow RECNO;
				public readonly PathToMetersRow Id;
				public readonly PathToMetersRow KEY;
			}
			#endregion

			#region DBI_Path Obsoletes
			private PathToObsoletesRow __pObsoletes = new PathToObsoletesRow( SchemaClass.Instance.T.Obsoletes );

			/// <summary>
			/// The Obsoletes path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToObsoletesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToObsoletesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToObsoletesRow _BasePath;
					/// <summary>
					/// Provides the path to Obsoletes's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Obsoletes.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Obsoletes's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Obsoletes.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Obsoletes's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Obsoletes.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Obsoletes's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Obsoletes.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToObsoletesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToObsoletesRow( DBI_Table t ) : base( t ) { }
				internal PathToObsoletesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToObsoletesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToObsoletesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToObsoletesRow PathToReferencedRow { get { return (PathToObsoletesRow)base.PathToReferencedRow; } }

				internal PathToObsoletesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToObsoletesRow(rootTableSchema, columns);
				}
			}
			public class LinkToObsoletes {
				public LinkToObsoletes(DBI_Path referencing_path) {
					RECNO = new PathToObsoletesRow(referencing_path.PathThroughLinkage(Schema.T.Obsoletes.F.RECNO));
					Id = new PathToObsoletesRow(referencing_path.PathThroughLinkage(Schema.T.Obsoletes.F.Id));
				}
				public readonly PathToObsoletesRow RECNO;
				public readonly PathToObsoletesRow Id;
			}
			#endregion

			#region DBI_Path Ownerships
			private PathToOwnershipsRow __pOwnerships = new PathToOwnershipsRow( SchemaClass.Instance.T.Ownerships );

			/// <summary>
			/// The Ownerships path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToOwnershipsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToOwnershipsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToOwnershipsRow _BasePath;
					/// <summary>
					/// Provides the path to Ownerships's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Ownerships.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Ownerships's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Ownerships.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Ownerships's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Ownerships.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Ownerships's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Ownerships.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToOwnershipsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToOwnershipsRow( DBI_Table t ) : base( t ) { }
				internal PathToOwnershipsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToOwnershipsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToOwnershipsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToOwnershipsRow PathToReferencedRow { get { return (PathToOwnershipsRow)base.PathToReferencedRow; } }

				internal PathToOwnershipsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToOwnershipsRow(rootTableSchema, columns);
				}
			}
			public class LinkToOwnerships {
				public LinkToOwnerships(DBI_Path referencing_path) {
					RECNO = new PathToOwnershipsRow(referencing_path.PathThroughLinkage(Schema.T.Ownerships.F.RECNO));
					Id = new PathToOwnershipsRow(referencing_path.PathThroughLinkage(Schema.T.Ownerships.F.Id));
				}
				public readonly PathToOwnershipsRow RECNO;
				public readonly PathToOwnershipsRow Id;
			}
			#endregion

			#region DBI_Path Personnel
			private PathToPersonnelRow __pPersonnel = new PathToPersonnelRow( SchemaClass.Instance.T.Personnel );

			/// <summary>
			/// The Personnel path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPersonnelRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _CODE;
				private PathToField _DESC;
				private PathToField _TRADE;
				private PathToField _BTEL;
				private PathToField _HTEL;
				private PathToField _PAGER;
				private PathToField _MOBILE;
				private PathToField _CURRATE;
				private PathToField _NEWRATE;
				private PathToField _EFFDATE;
				private PathToField _HIDDEN;
				private PathToField _EMAIL;
				private PathToField _COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToPersonnelRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToPersonnelRow _BasePath;
					/// <summary>
					/// Provides the path to Personnel's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Personnel.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Personnel's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Personnel.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Personnel's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.Personnel.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to Personnel's CODE with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Personnel.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Personnel's DESC with type string(maxlength 40, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Personnel.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to Personnel's TRADE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField TRADE { get { if (_BasePath._TRADE == null) _BasePath._TRADE = new PathToField(_BasePath, Schema.T.Personnel.F.TRADE ); return _BasePath._TRADE; } }
					/// <summary>
					/// Provides the path to Personnel's BTEL with type string(maxlength 42, maxlines 0, trim)
					/// </summary>
					public PathToField BTEL { get { if (_BasePath._BTEL == null) _BasePath._BTEL = new PathToField(_BasePath, Schema.T.Personnel.F.BTEL ); return _BasePath._BTEL; } }
					/// <summary>
					/// Provides the path to Personnel's HTEL with type string(maxlength 42, maxlines 0, trim)
					/// </summary>
					public PathToField HTEL { get { if (_BasePath._HTEL == null) _BasePath._HTEL = new PathToField(_BasePath, Schema.T.Personnel.F.HTEL ); return _BasePath._HTEL; } }
					/// <summary>
					/// Provides the path to Personnel's PAGER with type string(maxlength 42, maxlines 0, trim)
					/// </summary>
					public PathToField PAGER { get { if (_BasePath._PAGER == null) _BasePath._PAGER = new PathToField(_BasePath, Schema.T.Personnel.F.PAGER ); return _BasePath._PAGER; } }
					/// <summary>
					/// Provides the path to Personnel's MOBILE with type string(maxlength 42, maxlines 0, trim)
					/// </summary>
					public PathToField MOBILE { get { if (_BasePath._MOBILE == null) _BasePath._MOBILE = new PathToField(_BasePath, Schema.T.Personnel.F.MOBILE ); return _BasePath._MOBILE; } }
					/// <summary>
					/// Provides the path to Personnel's CURRATE with type integer(32)
					/// </summary>
					public PathToField CURRATE { get { if (_BasePath._CURRATE == null) _BasePath._CURRATE = new PathToField(_BasePath, Schema.T.Personnel.F.CURRATE ); return _BasePath._CURRATE; } }
					/// <summary>
					/// Provides the path to Personnel's NEWRATE with type integer(32)
					/// </summary>
					public PathToField NEWRATE { get { if (_BasePath._NEWRATE == null) _BasePath._NEWRATE = new PathToField(_BasePath, Schema.T.Personnel.F.NEWRATE ); return _BasePath._NEWRATE; } }
					/// <summary>
					/// Provides the path to Personnel's EFFDATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField EFFDATE { get { if (_BasePath._EFFDATE == null) _BasePath._EFFDATE = new PathToField(_BasePath, Schema.T.Personnel.F.EFFDATE ); return _BasePath._EFFDATE; } }
					/// <summary>
					/// Provides the path to Personnel's HIDDEN with type bool
					/// </summary>
					public PathToField HIDDEN { get { if (_BasePath._HIDDEN == null) _BasePath._HIDDEN = new PathToField(_BasePath, Schema.T.Personnel.F.HIDDEN ); return _BasePath._HIDDEN; } }
					/// <summary>
					/// Provides the path to Personnel's EMAIL with type string(maxlength 128, maxlines 0, trim)
					/// </summary>
					public PathToField EMAIL { get { if (_BasePath._EMAIL == null) _BasePath._EMAIL = new PathToField(_BasePath, Schema.T.Personnel.F.EMAIL ); return _BasePath._EMAIL; } }
					/// <summary>
					/// Provides the path to Personnel's COMMENT with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField COMMENT { get { if (_BasePath._COMMENT == null) _BasePath._COMMENT = new PathToField(_BasePath, Schema.T.Personnel.F.COMMENT ); return _BasePath._COMMENT; } }
				}

				internal PathToPersonnelRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToPersonnelRow( DBI_Table t ) : base( t ) { }
				internal PathToPersonnelRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPersonnelLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToPersonnelRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToPersonnelRow PathToReferencedRow { get { return (PathToPersonnelRow)base.PathToReferencedRow; } }

				internal PathToPersonnelLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToPersonnelRow(rootTableSchema, columns);
				}
			}
			public class LinkToPersonnel {
				public LinkToPersonnel(DBI_Path referencing_path) {
					RECNO = new PathToPersonnelRow(referencing_path.PathThroughLinkage(Schema.T.Personnel.F.RECNO));
					Id = new PathToPersonnelRow(referencing_path.PathThroughLinkage(Schema.T.Personnel.F.Id));
					KEY = new PathToPersonnelRow(referencing_path.PathThroughLinkage(Schema.T.Personnel.F.KEY));
				}
				public readonly PathToPersonnelRow RECNO;
				public readonly PathToPersonnelRow Id;
				public readonly PathToPersonnelRow KEY;
			}
			#endregion

			#region DBI_Path PreventiveSchedules
			private PathToPreventiveSchedulesRow __pPreventiveSchedules = new PathToPreventiveSchedulesRow( SchemaClass.Instance.T.PreventiveSchedules );

			/// <summary>
			/// The PreventiveSchedules path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPreventiveSchedulesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _WOKEY;
				private PathToField _TYPE;
				private PathToField _METERKEY;
				private PathToField _LASTSCHED;
				private PathToField _INTERVAL;
				private PathToField _SEASONBEG;
				private PathToField _SEASONEND;
				private PathToField _INHSEASON;
				private PathToField _WEEKMASK;
				private PathToField _INHWEEK;
				private PathToField _ALGORITHM;
				private PathToField _INHIBIT;
				private PathToField _LASTWOMADE;
				private PathToField _LATEINHIB;
				private PathToField _LASTDATE;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToPreventiveSchedulesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToPreventiveSchedulesRow _BasePath;
					/// <summary>
					/// Provides the path to PreventiveSchedules's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's WOKEY with type integer(32)
					/// </summary>
					public PathToField WOKEY { get { if (_BasePath._WOKEY == null) _BasePath._WOKEY = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.WOKEY ); return _BasePath._WOKEY; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's TYPE with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField TYPE { get { if (_BasePath._TYPE == null) _BasePath._TYPE = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.TYPE ); return _BasePath._TYPE; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's METERKEY with type integer(32)
					/// </summary>
					public PathToField METERKEY { get { if (_BasePath._METERKEY == null) _BasePath._METERKEY = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.METERKEY ); return _BasePath._METERKEY; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's LASTSCHED with type integer(32)
					/// </summary>
					public PathToField LASTSCHED { get { if (_BasePath._LASTSCHED == null) _BasePath._LASTSCHED = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.LASTSCHED ); return _BasePath._LASTSCHED; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's INTERVAL with type integer(32)
					/// </summary>
					public PathToField INTERVAL { get { if (_BasePath._INTERVAL == null) _BasePath._INTERVAL = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.INTERVAL ); return _BasePath._INTERVAL; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's SEASONBEG with type string(maxlength 4, maxlines 0, trim)
					/// </summary>
					public PathToField SEASONBEG { get { if (_BasePath._SEASONBEG == null) _BasePath._SEASONBEG = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.SEASONBEG ); return _BasePath._SEASONBEG; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's SEASONEND with type string(maxlength 4, maxlines 0, trim)
					/// </summary>
					public PathToField SEASONEND { get { if (_BasePath._SEASONEND == null) _BasePath._SEASONEND = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.SEASONEND ); return _BasePath._SEASONEND; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's INHSEASON with type bool
					/// </summary>
					public PathToField INHSEASON { get { if (_BasePath._INHSEASON == null) _BasePath._INHSEASON = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.INHSEASON ); return _BasePath._INHSEASON; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's WEEKMASK with type string(maxlength 2, maxlines 0, trim)
					/// </summary>
					public PathToField WEEKMASK { get { if (_BasePath._WEEKMASK == null) _BasePath._WEEKMASK = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.WEEKMASK ); return _BasePath._WEEKMASK; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's INHWEEK with type bool
					/// </summary>
					public PathToField INHWEEK { get { if (_BasePath._INHWEEK == null) _BasePath._INHWEEK = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.INHWEEK ); return _BasePath._INHWEEK; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's ALGORITHM with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField ALGORITHM { get { if (_BasePath._ALGORITHM == null) _BasePath._ALGORITHM = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.ALGORITHM ); return _BasePath._ALGORITHM; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's INHIBIT with type bool
					/// </summary>
					public PathToField INHIBIT { get { if (_BasePath._INHIBIT == null) _BasePath._INHIBIT = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.INHIBIT ); return _BasePath._INHIBIT; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's LASTWOMADE with type integer(32)
					/// </summary>
					public PathToField LASTWOMADE { get { if (_BasePath._LASTWOMADE == null) _BasePath._LASTWOMADE = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.LASTWOMADE ); return _BasePath._LASTWOMADE; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's LATEINHIB with type bool
					/// </summary>
					public PathToField LATEINHIB { get { if (_BasePath._LATEINHIB == null) _BasePath._LATEINHIB = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.LATEINHIB ); return _BasePath._LATEINHIB; } }
					/// <summary>
					/// Provides the path to PreventiveSchedules's LASTDATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField LASTDATE { get { if (_BasePath._LASTDATE == null) _BasePath._LASTDATE = new PathToField(_BasePath, Schema.T.PreventiveSchedules.F.LASTDATE ); return _BasePath._LASTDATE; } }
				}

				internal PathToPreventiveSchedulesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToPreventiveSchedulesRow( DBI_Table t ) : base( t ) { }
				internal PathToPreventiveSchedulesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPreventiveSchedulesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToPreventiveSchedulesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToPreventiveSchedulesRow PathToReferencedRow { get { return (PathToPreventiveSchedulesRow)base.PathToReferencedRow; } }

				internal PathToPreventiveSchedulesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToPreventiveSchedulesRow(rootTableSchema, columns);
				}
			}
			public class LinkToPreventiveSchedules {
				public LinkToPreventiveSchedules(DBI_Path referencing_path) {
					RECNO = new PathToPreventiveSchedulesRow(referencing_path.PathThroughLinkage(Schema.T.PreventiveSchedules.F.RECNO));
					Id = new PathToPreventiveSchedulesRow(referencing_path.PathThroughLinkage(Schema.T.PreventiveSchedules.F.Id));
					KEY = new PathToPreventiveSchedulesRow(referencing_path.PathThroughLinkage(Schema.T.PreventiveSchedules.F.KEY));
				}
				public readonly PathToPreventiveSchedulesRow RECNO;
				public readonly PathToPreventiveSchedulesRow Id;
				public readonly PathToPreventiveSchedulesRow KEY;
			}
			#endregion

			#region DBI_Path Priorities
			private PathToPrioritiesRow __pPriorities = new PathToPrioritiesRow( SchemaClass.Instance.T.Priorities );

			/// <summary>
			/// The Priorities path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPrioritiesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToPrioritiesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToPrioritiesRow _BasePath;
					/// <summary>
					/// Provides the path to Priorities's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Priorities.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Priorities's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Priorities.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Priorities's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Priorities.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Priorities's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Priorities.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToPrioritiesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToPrioritiesRow( DBI_Table t ) : base( t ) { }
				internal PathToPrioritiesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPrioritiesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToPrioritiesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToPrioritiesRow PathToReferencedRow { get { return (PathToPrioritiesRow)base.PathToReferencedRow; } }

				internal PathToPrioritiesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToPrioritiesRow(rootTableSchema, columns);
				}
			}
			public class LinkToPriorities {
				public LinkToPriorities(DBI_Path referencing_path) {
					RECNO = new PathToPrioritiesRow(referencing_path.PathThroughLinkage(Schema.T.Priorities.F.RECNO));
					Id = new PathToPrioritiesRow(referencing_path.PathThroughLinkage(Schema.T.Priorities.F.Id));
				}
				public readonly PathToPrioritiesRow RECNO;
				public readonly PathToPrioritiesRow Id;
			}
			#endregion

			#region DBI_Path Projects
			private PathToProjectsRow __pProjects = new PathToProjectsRow( SchemaClass.Instance.T.Projects );

			/// <summary>
			/// The Projects path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToProjectsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToProjectsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToProjectsRow _BasePath;
					/// <summary>
					/// Provides the path to Projects's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Projects.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Projects's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Projects.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Projects's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Projects.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Projects's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Projects.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToProjectsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToProjectsRow( DBI_Table t ) : base( t ) { }
				internal PathToProjectsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToProjectsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToProjectsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToProjectsRow PathToReferencedRow { get { return (PathToProjectsRow)base.PathToReferencedRow; } }

				internal PathToProjectsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToProjectsRow(rootTableSchema, columns);
				}
			}
			public class LinkToProjects {
				public LinkToProjects(DBI_Path referencing_path) {
					RECNO = new PathToProjectsRow(referencing_path.PathThroughLinkage(Schema.T.Projects.F.RECNO));
					Id = new PathToProjectsRow(referencing_path.PathThroughLinkage(Schema.T.Projects.F.Id));
				}
				public readonly PathToProjectsRow RECNO;
				public readonly PathToProjectsRow Id;
			}
			#endregion

			#region DBI_Path PurchaseExtras
			private PathToPurchaseExtrasRow __pPurchaseExtras = new PathToPurchaseExtrasRow( SchemaClass.Instance.T.PurchaseExtras );

			/// <summary>
			/// The PurchaseExtras path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPurchaseExtrasRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _POKEY;
				private PathToField _QTY;
				private PathToField _UOMKEY;
				private PathToField _COST;
				private PathToField _DESC;
				private PathToField _CATNO;
				private PathToField _ESTIMATE;
				private PathToField _TYPE;
				private PathToField _WOKEY;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToPurchaseExtrasRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToPurchaseExtrasRow _BasePath;
					/// <summary>
					/// Provides the path to PurchaseExtras's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to PurchaseExtras's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to PurchaseExtras's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to PurchaseExtras's POKEY with type integer(32)
					/// </summary>
					public PathToField POKEY { get { if (_BasePath._POKEY == null) _BasePath._POKEY = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.POKEY ); return _BasePath._POKEY; } }
					/// <summary>
					/// Provides the path to PurchaseExtras's QTY with type integer(32)
					/// </summary>
					public PathToField QTY { get { if (_BasePath._QTY == null) _BasePath._QTY = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.QTY ); return _BasePath._QTY; } }
					/// <summary>
					/// Provides the path to PurchaseExtras's UOMKEY with type integer(32)
					/// </summary>
					public PathToField UOMKEY { get { if (_BasePath._UOMKEY == null) _BasePath._UOMKEY = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.UOMKEY ); return _BasePath._UOMKEY; } }
					/// <summary>
					/// Provides the path to PurchaseExtras's COST with type integer(32)
					/// </summary>
					public PathToField COST { get { if (_BasePath._COST == null) _BasePath._COST = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.COST ); return _BasePath._COST; } }
					/// <summary>
					/// Provides the path to PurchaseExtras's DESC with type string(maxlength 40, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to PurchaseExtras's CATNO with type string(maxlength 20, maxlines 0, trim)
					/// </summary>
					public PathToField CATNO { get { if (_BasePath._CATNO == null) _BasePath._CATNO = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.CATNO ); return _BasePath._CATNO; } }
					/// <summary>
					/// Provides the path to PurchaseExtras's ESTIMATE with type bool
					/// </summary>
					public PathToField ESTIMATE { get { if (_BasePath._ESTIMATE == null) _BasePath._ESTIMATE = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.ESTIMATE ); return _BasePath._ESTIMATE; } }
					/// <summary>
					/// Provides the path to PurchaseExtras's TYPE with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField TYPE { get { if (_BasePath._TYPE == null) _BasePath._TYPE = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.TYPE ); return _BasePath._TYPE; } }
					/// <summary>
					/// Provides the path to PurchaseExtras's WOKEY with type integer(32)
					/// </summary>
					public PathToField WOKEY { get { if (_BasePath._WOKEY == null) _BasePath._WOKEY = new PathToField(_BasePath, Schema.T.PurchaseExtras.F.WOKEY ); return _BasePath._WOKEY; } }
				}

				internal PathToPurchaseExtrasRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToPurchaseExtrasRow( DBI_Table t ) : base( t ) { }
				internal PathToPurchaseExtrasRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPurchaseExtrasLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToPurchaseExtrasRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToPurchaseExtrasRow PathToReferencedRow { get { return (PathToPurchaseExtrasRow)base.PathToReferencedRow; } }

				internal PathToPurchaseExtrasLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToPurchaseExtrasRow(rootTableSchema, columns);
				}
			}
			public class LinkToPurchaseExtras {
				public LinkToPurchaseExtras(DBI_Path referencing_path) {
					RECNO = new PathToPurchaseExtrasRow(referencing_path.PathThroughLinkage(Schema.T.PurchaseExtras.F.RECNO));
					Id = new PathToPurchaseExtrasRow(referencing_path.PathThroughLinkage(Schema.T.PurchaseExtras.F.Id));
				}
				public readonly PathToPurchaseExtrasRow RECNO;
				public readonly PathToPurchaseExtrasRow Id;
			}
			#endregion

			#region DBI_Path Purchases
			private PathToPurchasesRow __pPurchases = new PathToPurchasesRow( SchemaClass.Instance.T.Purchases );

			/// <summary>
			/// The Purchases path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPurchasesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _PONUM;
				private PathToField _VENDOR;
				private PathToField _ORDERNUM;
				private PathToField _COSTCENTER;
				private PathToField _NEEDED;
				private PathToField _EXPECTED;
				private PathToField _COMMENT;
				private PathToField _STATE;
				private PathToField _VOID;
				private PathToField _CREATED;
				private PathToField _CREATET;
				private PathToField _COMPLETED;
				private PathToField _COMPLETET;
				private PathToField _SUBMITD;
				private PathToField _SUBMITT;
				private PathToField _CLOSED;
				private PathToField _CLOSET;
				private PathToField _SHIPPING;
				private PathToField _TERMS;
				private PathToField _VCOMMENT;
				private PathToField _SHIPTO;
				private PathToField _DESC;
				private PathToField _NEEDPRINT;
				private PathToField _ORIGINATOR;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToPurchasesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToPurchasesRow _BasePath;
					/// <summary>
					/// Provides the path to Purchases's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Purchases.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Purchases's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Purchases.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Purchases's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.Purchases.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to Purchases's PONUM with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField PONUM { get { if (_BasePath._PONUM == null) _BasePath._PONUM = new PathToField(_BasePath, Schema.T.Purchases.F.PONUM ); return _BasePath._PONUM; } }
					/// <summary>
					/// Provides the path to Purchases's VENDOR with type integer(32)
					/// </summary>
					public PathToField VENDOR { get { if (_BasePath._VENDOR == null) _BasePath._VENDOR = new PathToField(_BasePath, Schema.T.Purchases.F.VENDOR ); return _BasePath._VENDOR; } }
					/// <summary>
					/// Provides the path to Purchases's ORDERNUM with type string(maxlength 40, maxlines 0, trim)
					/// </summary>
					public PathToField ORDERNUM { get { if (_BasePath._ORDERNUM == null) _BasePath._ORDERNUM = new PathToField(_BasePath, Schema.T.Purchases.F.ORDERNUM ); return _BasePath._ORDERNUM; } }
					/// <summary>
					/// Provides the path to Purchases's COSTCENTER with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField COSTCENTER { get { if (_BasePath._COSTCENTER == null) _BasePath._COSTCENTER = new PathToField(_BasePath, Schema.T.Purchases.F.COSTCENTER ); return _BasePath._COSTCENTER; } }
					/// <summary>
					/// Provides the path to Purchases's NEEDED with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField NEEDED { get { if (_BasePath._NEEDED == null) _BasePath._NEEDED = new PathToField(_BasePath, Schema.T.Purchases.F.NEEDED ); return _BasePath._NEEDED; } }
					/// <summary>
					/// Provides the path to Purchases's EXPECTED with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField EXPECTED { get { if (_BasePath._EXPECTED == null) _BasePath._EXPECTED = new PathToField(_BasePath, Schema.T.Purchases.F.EXPECTED ); return _BasePath._EXPECTED; } }
					/// <summary>
					/// Provides the path to Purchases's COMMENT with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField COMMENT { get { if (_BasePath._COMMENT == null) _BasePath._COMMENT = new PathToField(_BasePath, Schema.T.Purchases.F.COMMENT ); return _BasePath._COMMENT; } }
					/// <summary>
					/// Provides the path to Purchases's STATE with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField STATE { get { if (_BasePath._STATE == null) _BasePath._STATE = new PathToField(_BasePath, Schema.T.Purchases.F.STATE ); return _BasePath._STATE; } }
					/// <summary>
					/// Provides the path to Purchases's VOID with type bool
					/// </summary>
					public PathToField VOID { get { if (_BasePath._VOID == null) _BasePath._VOID = new PathToField(_BasePath, Schema.T.Purchases.F.VOID ); return _BasePath._VOID; } }
					/// <summary>
					/// Provides the path to Purchases's CREATED with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField CREATED { get { if (_BasePath._CREATED == null) _BasePath._CREATED = new PathToField(_BasePath, Schema.T.Purchases.F.CREATED ); return _BasePath._CREATED; } }
					/// <summary>
					/// Provides the path to Purchases's CREATET with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField CREATET { get { if (_BasePath._CREATET == null) _BasePath._CREATET = new PathToField(_BasePath, Schema.T.Purchases.F.CREATET ); return _BasePath._CREATET; } }
					/// <summary>
					/// Provides the path to Purchases's COMPLETED with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField COMPLETED { get { if (_BasePath._COMPLETED == null) _BasePath._COMPLETED = new PathToField(_BasePath, Schema.T.Purchases.F.COMPLETED ); return _BasePath._COMPLETED; } }
					/// <summary>
					/// Provides the path to Purchases's COMPLETET with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField COMPLETET { get { if (_BasePath._COMPLETET == null) _BasePath._COMPLETET = new PathToField(_BasePath, Schema.T.Purchases.F.COMPLETET ); return _BasePath._COMPLETET; } }
					/// <summary>
					/// Provides the path to Purchases's SUBMITD with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField SUBMITD { get { if (_BasePath._SUBMITD == null) _BasePath._SUBMITD = new PathToField(_BasePath, Schema.T.Purchases.F.SUBMITD ); return _BasePath._SUBMITD; } }
					/// <summary>
					/// Provides the path to Purchases's SUBMITT with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField SUBMITT { get { if (_BasePath._SUBMITT == null) _BasePath._SUBMITT = new PathToField(_BasePath, Schema.T.Purchases.F.SUBMITT ); return _BasePath._SUBMITT; } }
					/// <summary>
					/// Provides the path to Purchases's CLOSED with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField CLOSED { get { if (_BasePath._CLOSED == null) _BasePath._CLOSED = new PathToField(_BasePath, Schema.T.Purchases.F.CLOSED ); return _BasePath._CLOSED; } }
					/// <summary>
					/// Provides the path to Purchases's CLOSET with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField CLOSET { get { if (_BasePath._CLOSET == null) _BasePath._CLOSET = new PathToField(_BasePath, Schema.T.Purchases.F.CLOSET ); return _BasePath._CLOSET; } }
					/// <summary>
					/// Provides the path to Purchases's SHIPPING with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField SHIPPING { get { if (_BasePath._SHIPPING == null) _BasePath._SHIPPING = new PathToField(_BasePath, Schema.T.Purchases.F.SHIPPING ); return _BasePath._SHIPPING; } }
					/// <summary>
					/// Provides the path to Purchases's TERMS with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField TERMS { get { if (_BasePath._TERMS == null) _BasePath._TERMS = new PathToField(_BasePath, Schema.T.Purchases.F.TERMS ); return _BasePath._TERMS; } }
					/// <summary>
					/// Provides the path to Purchases's VCOMMENT with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField VCOMMENT { get { if (_BasePath._VCOMMENT == null) _BasePath._VCOMMENT = new PathToField(_BasePath, Schema.T.Purchases.F.VCOMMENT ); return _BasePath._VCOMMENT; } }
					/// <summary>
					/// Provides the path to Purchases's SHIPTO with type integer(32)
					/// </summary>
					public PathToField SHIPTO { get { if (_BasePath._SHIPTO == null) _BasePath._SHIPTO = new PathToField(_BasePath, Schema.T.Purchases.F.SHIPTO ); return _BasePath._SHIPTO; } }
					/// <summary>
					/// Provides the path to Purchases's DESC with type string(maxlength 60, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Purchases.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to Purchases's NEEDPRINT with type bool
					/// </summary>
					public PathToField NEEDPRINT { get { if (_BasePath._NEEDPRINT == null) _BasePath._NEEDPRINT = new PathToField(_BasePath, Schema.T.Purchases.F.NEEDPRINT ); return _BasePath._NEEDPRINT; } }
					/// <summary>
					/// Provides the path to Purchases's ORIGINATOR with type integer(32)
					/// </summary>
					public PathToField ORIGINATOR { get { if (_BasePath._ORIGINATOR == null) _BasePath._ORIGINATOR = new PathToField(_BasePath, Schema.T.Purchases.F.ORIGINATOR ); return _BasePath._ORIGINATOR; } }
				}

				internal PathToPurchasesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToPurchasesRow( DBI_Table t ) : base( t ) { }
				internal PathToPurchasesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToPurchasesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToPurchasesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToPurchasesRow PathToReferencedRow { get { return (PathToPurchasesRow)base.PathToReferencedRow; } }

				internal PathToPurchasesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToPurchasesRow(rootTableSchema, columns);
				}
			}
			public class LinkToPurchases {
				public LinkToPurchases(DBI_Path referencing_path) {
					RECNO = new PathToPurchasesRow(referencing_path.PathThroughLinkage(Schema.T.Purchases.F.RECNO));
					Id = new PathToPurchasesRow(referencing_path.PathThroughLinkage(Schema.T.Purchases.F.Id));
					KEY = new PathToPurchasesRow(referencing_path.PathThroughLinkage(Schema.T.Purchases.F.KEY));
				}
				public readonly PathToPurchasesRow RECNO;
				public readonly PathToPurchasesRow Id;
				public readonly PathToPurchasesRow KEY;
			}
			#endregion

			#region DBI_Path Receipts
			private PathToReceiptsRow __pReceipts = new PathToReceiptsRow( SchemaClass.Instance.T.Receipts );

			/// <summary>
			/// The Receipts path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToReceiptsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _POKEY;
				private PathToField _DATE;
				private PathToField _TIME;
				private PathToField _WAYBILL;
				private PathToField _EXTRACOST;
				private PathToField _COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToReceiptsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToReceiptsRow _BasePath;
					/// <summary>
					/// Provides the path to Receipts's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Receipts.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Receipts's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Receipts.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Receipts's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.Receipts.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to Receipts's POKEY with type integer(32)
					/// </summary>
					public PathToField POKEY { get { if (_BasePath._POKEY == null) _BasePath._POKEY = new PathToField(_BasePath, Schema.T.Receipts.F.POKEY ); return _BasePath._POKEY; } }
					/// <summary>
					/// Provides the path to Receipts's DATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField DATE { get { if (_BasePath._DATE == null) _BasePath._DATE = new PathToField(_BasePath, Schema.T.Receipts.F.DATE ); return _BasePath._DATE; } }
					/// <summary>
					/// Provides the path to Receipts's TIME with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField TIME { get { if (_BasePath._TIME == null) _BasePath._TIME = new PathToField(_BasePath, Schema.T.Receipts.F.TIME ); return _BasePath._TIME; } }
					/// <summary>
					/// Provides the path to Receipts's WAYBILL with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField WAYBILL { get { if (_BasePath._WAYBILL == null) _BasePath._WAYBILL = new PathToField(_BasePath, Schema.T.Receipts.F.WAYBILL ); return _BasePath._WAYBILL; } }
					/// <summary>
					/// Provides the path to Receipts's EXTRACOST with type integer(32)
					/// </summary>
					public PathToField EXTRACOST { get { if (_BasePath._EXTRACOST == null) _BasePath._EXTRACOST = new PathToField(_BasePath, Schema.T.Receipts.F.EXTRACOST ); return _BasePath._EXTRACOST; } }
					/// <summary>
					/// Provides the path to Receipts's COMMENT with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField COMMENT { get { if (_BasePath._COMMENT == null) _BasePath._COMMENT = new PathToField(_BasePath, Schema.T.Receipts.F.COMMENT ); return _BasePath._COMMENT; } }
				}

				internal PathToReceiptsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToReceiptsRow( DBI_Table t ) : base( t ) { }
				internal PathToReceiptsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToReceiptsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToReceiptsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToReceiptsRow PathToReferencedRow { get { return (PathToReceiptsRow)base.PathToReferencedRow; } }

				internal PathToReceiptsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToReceiptsRow(rootTableSchema, columns);
				}
			}
			public class LinkToReceipts {
				public LinkToReceipts(DBI_Path referencing_path) {
					RECNO = new PathToReceiptsRow(referencing_path.PathThroughLinkage(Schema.T.Receipts.F.RECNO));
					Id = new PathToReceiptsRow(referencing_path.PathThroughLinkage(Schema.T.Receipts.F.Id));
					KEY = new PathToReceiptsRow(referencing_path.PathThroughLinkage(Schema.T.Receipts.F.KEY));
				}
				public readonly PathToReceiptsRow RECNO;
				public readonly PathToReceiptsRow Id;
				public readonly PathToReceiptsRow KEY;
			}
			#endregion

			#region DBI_Path ServiceContracts
			private PathToServiceContractsRow __pServiceContracts = new PathToServiceContractsRow( SchemaClass.Instance.T.ServiceContracts );

			/// <summary>
			/// The ServiceContracts path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToServiceContractsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _CODE;
				private PathToField _DESC;
				private PathToField _VENDOR;
				private PathToField _STARTDATE;
				private PathToField _EXPIRYDATE;
				private PathToField _PART;
				private PathToField _LABOR;
				private PathToField _COST;
				private PathToField _COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToServiceContractsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToServiceContractsRow _BasePath;
					/// <summary>
					/// Provides the path to ServiceContracts's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.ServiceContracts.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to ServiceContracts's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.ServiceContracts.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to ServiceContracts's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.ServiceContracts.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to ServiceContracts's CODE with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.ServiceContracts.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to ServiceContracts's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.ServiceContracts.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to ServiceContracts's VENDOR with type integer(32)
					/// </summary>
					public PathToField VENDOR { get { if (_BasePath._VENDOR == null) _BasePath._VENDOR = new PathToField(_BasePath, Schema.T.ServiceContracts.F.VENDOR ); return _BasePath._VENDOR; } }
					/// <summary>
					/// Provides the path to ServiceContracts's STARTDATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField STARTDATE { get { if (_BasePath._STARTDATE == null) _BasePath._STARTDATE = new PathToField(_BasePath, Schema.T.ServiceContracts.F.STARTDATE ); return _BasePath._STARTDATE; } }
					/// <summary>
					/// Provides the path to ServiceContracts's EXPIRYDATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField EXPIRYDATE { get { if (_BasePath._EXPIRYDATE == null) _BasePath._EXPIRYDATE = new PathToField(_BasePath, Schema.T.ServiceContracts.F.EXPIRYDATE ); return _BasePath._EXPIRYDATE; } }
					/// <summary>
					/// Provides the path to ServiceContracts's PART with type bool
					/// </summary>
					public PathToField PART { get { if (_BasePath._PART == null) _BasePath._PART = new PathToField(_BasePath, Schema.T.ServiceContracts.F.PART ); return _BasePath._PART; } }
					/// <summary>
					/// Provides the path to ServiceContracts's LABOR with type bool
					/// </summary>
					public PathToField LABOR { get { if (_BasePath._LABOR == null) _BasePath._LABOR = new PathToField(_BasePath, Schema.T.ServiceContracts.F.LABOR ); return _BasePath._LABOR; } }
					/// <summary>
					/// Provides the path to ServiceContracts's COST with type integer(32)
					/// </summary>
					public PathToField COST { get { if (_BasePath._COST == null) _BasePath._COST = new PathToField(_BasePath, Schema.T.ServiceContracts.F.COST ); return _BasePath._COST; } }
					/// <summary>
					/// Provides the path to ServiceContracts's COMMENT with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField COMMENT { get { if (_BasePath._COMMENT == null) _BasePath._COMMENT = new PathToField(_BasePath, Schema.T.ServiceContracts.F.COMMENT ); return _BasePath._COMMENT; } }
				}

				internal PathToServiceContractsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToServiceContractsRow( DBI_Table t ) : base( t ) { }
				internal PathToServiceContractsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToServiceContractsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToServiceContractsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToServiceContractsRow PathToReferencedRow { get { return (PathToServiceContractsRow)base.PathToReferencedRow; } }

				internal PathToServiceContractsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToServiceContractsRow(rootTableSchema, columns);
				}
			}
			public class LinkToServiceContracts {
				public LinkToServiceContracts(DBI_Path referencing_path) {
					RECNO = new PathToServiceContractsRow(referencing_path.PathThroughLinkage(Schema.T.ServiceContracts.F.RECNO));
					Id = new PathToServiceContractsRow(referencing_path.PathThroughLinkage(Schema.T.ServiceContracts.F.Id));
					KEY = new PathToServiceContractsRow(referencing_path.PathThroughLinkage(Schema.T.ServiceContracts.F.KEY));
				}
				public readonly PathToServiceContractsRow RECNO;
				public readonly PathToServiceContractsRow Id;
				public readonly PathToServiceContractsRow KEY;
			}
			#endregion

			#region DBI_Path ServicedEquipment
			private PathToServicedEquipmentRow __pServicedEquipment = new PathToServicedEquipmentRow( SchemaClass.Instance.T.ServicedEquipment );

			/// <summary>
			/// The ServicedEquipment path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToServicedEquipmentRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _SVCKEY;
				private PathToField _EQUIPKEY;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToServicedEquipmentRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToServicedEquipmentRow _BasePath;
					/// <summary>
					/// Provides the path to ServicedEquipment's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.ServicedEquipment.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to ServicedEquipment's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.ServicedEquipment.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to ServicedEquipment's SVCKEY with type integer(32)
					/// </summary>
					public PathToField SVCKEY { get { if (_BasePath._SVCKEY == null) _BasePath._SVCKEY = new PathToField(_BasePath, Schema.T.ServicedEquipment.F.SVCKEY ); return _BasePath._SVCKEY; } }
					/// <summary>
					/// Provides the path to ServicedEquipment's EQUIPKEY with type integer(32)
					/// </summary>
					public PathToField EQUIPKEY { get { if (_BasePath._EQUIPKEY == null) _BasePath._EQUIPKEY = new PathToField(_BasePath, Schema.T.ServicedEquipment.F.EQUIPKEY ); return _BasePath._EQUIPKEY; } }
				}

				internal PathToServicedEquipmentRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToServicedEquipmentRow( DBI_Table t ) : base( t ) { }
				internal PathToServicedEquipmentRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToServicedEquipmentLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToServicedEquipmentRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToServicedEquipmentRow PathToReferencedRow { get { return (PathToServicedEquipmentRow)base.PathToReferencedRow; } }

				internal PathToServicedEquipmentLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToServicedEquipmentRow(rootTableSchema, columns);
				}
			}
			public class LinkToServicedEquipment {
				public LinkToServicedEquipment(DBI_Path referencing_path) {
					RECNO = new PathToServicedEquipmentRow(referencing_path.PathThroughLinkage(Schema.T.ServicedEquipment.F.RECNO));
					Id = new PathToServicedEquipmentRow(referencing_path.PathThroughLinkage(Schema.T.ServicedEquipment.F.Id));
				}
				public readonly PathToServicedEquipmentRow RECNO;
				public readonly PathToServicedEquipmentRow Id;
			}
			#endregion

			#region DBI_Path ShippingModes
			private PathToShippingModesRow __pShippingModes = new PathToShippingModesRow( SchemaClass.Instance.T.ShippingModes );

			/// <summary>
			/// The ShippingModes path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToShippingModesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToShippingModesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToShippingModesRow _BasePath;
					/// <summary>
					/// Provides the path to ShippingModes's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.ShippingModes.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to ShippingModes's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.ShippingModes.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to ShippingModes's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.ShippingModes.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to ShippingModes's DESC with type string(maxlength 40, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.ShippingModes.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToShippingModesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToShippingModesRow( DBI_Table t ) : base( t ) { }
				internal PathToShippingModesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToShippingModesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToShippingModesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToShippingModesRow PathToReferencedRow { get { return (PathToShippingModesRow)base.PathToReferencedRow; } }

				internal PathToShippingModesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToShippingModesRow(rootTableSchema, columns);
				}
			}
			public class LinkToShippingModes {
				public LinkToShippingModes(DBI_Path referencing_path) {
					RECNO = new PathToShippingModesRow(referencing_path.PathThroughLinkage(Schema.T.ShippingModes.F.RECNO));
					Id = new PathToShippingModesRow(referencing_path.PathThroughLinkage(Schema.T.ShippingModes.F.Id));
				}
				public readonly PathToShippingModesRow RECNO;
				public readonly PathToShippingModesRow Id;
			}
			#endregion

			#region DBI_Path SpareParts
			private PathToSparePartsRow __pSpareParts = new PathToSparePartsRow( SchemaClass.Instance.T.SpareParts );

			/// <summary>
			/// The SpareParts path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSparePartsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _EQUIPKEY;
				private PathToField _ITEMKEY;
				private PathToField _QTY;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToSparePartsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToSparePartsRow _BasePath;
					/// <summary>
					/// Provides the path to SpareParts's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.SpareParts.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to SpareParts's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.SpareParts.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to SpareParts's EQUIPKEY with type integer(32)
					/// </summary>
					public PathToField EQUIPKEY { get { if (_BasePath._EQUIPKEY == null) _BasePath._EQUIPKEY = new PathToField(_BasePath, Schema.T.SpareParts.F.EQUIPKEY ); return _BasePath._EQUIPKEY; } }
					/// <summary>
					/// Provides the path to SpareParts's ITEMKEY with type integer(32)
					/// </summary>
					public PathToField ITEMKEY { get { if (_BasePath._ITEMKEY == null) _BasePath._ITEMKEY = new PathToField(_BasePath, Schema.T.SpareParts.F.ITEMKEY ); return _BasePath._ITEMKEY; } }
					/// <summary>
					/// Provides the path to SpareParts's QTY with type integer(32)
					/// </summary>
					public PathToField QTY { get { if (_BasePath._QTY == null) _BasePath._QTY = new PathToField(_BasePath, Schema.T.SpareParts.F.QTY ); return _BasePath._QTY; } }
				}

				internal PathToSparePartsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToSparePartsRow( DBI_Table t ) : base( t ) { }
				internal PathToSparePartsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSparePartsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToSparePartsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToSparePartsRow PathToReferencedRow { get { return (PathToSparePartsRow)base.PathToReferencedRow; } }

				internal PathToSparePartsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToSparePartsRow(rootTableSchema, columns);
				}
			}
			public class LinkToSpareParts {
				public LinkToSpareParts(DBI_Path referencing_path) {
					RECNO = new PathToSparePartsRow(referencing_path.PathThroughLinkage(Schema.T.SpareParts.F.RECNO));
					Id = new PathToSparePartsRow(referencing_path.PathThroughLinkage(Schema.T.SpareParts.F.Id));
				}
				public readonly PathToSparePartsRow RECNO;
				public readonly PathToSparePartsRow Id;
			}
			#endregion

			#region DBI_Path Specifications
			private PathToSpecificationsRow __pSpecifications = new PathToSpecificationsRow( SchemaClass.Instance.T.Specifications );

			/// <summary>
			/// The Specifications path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSpecificationsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _ASSOCKEY;
				private PathToField _TYPE;
				private PathToField _CODE;
				private PathToField _TKEY;
				private PathToField _INFO;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToSpecificationsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToSpecificationsRow _BasePath;
					/// <summary>
					/// Provides the path to Specifications's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Specifications.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Specifications's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Specifications.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Specifications's ASSOCKEY with type integer(32)
					/// </summary>
					public PathToField ASSOCKEY { get { if (_BasePath._ASSOCKEY == null) _BasePath._ASSOCKEY = new PathToField(_BasePath, Schema.T.Specifications.F.ASSOCKEY ); return _BasePath._ASSOCKEY; } }
					/// <summary>
					/// Provides the path to Specifications's TYPE with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField TYPE { get { if (_BasePath._TYPE == null) _BasePath._TYPE = new PathToField(_BasePath, Schema.T.Specifications.F.TYPE ); return _BasePath._TYPE; } }
					/// <summary>
					/// Provides the path to Specifications's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Specifications.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Specifications's TKEY with type integer(32)
					/// </summary>
					public PathToField TKEY { get { if (_BasePath._TKEY == null) _BasePath._TKEY = new PathToField(_BasePath, Schema.T.Specifications.F.TKEY ); return _BasePath._TKEY; } }
					/// <summary>
					/// Provides the path to Specifications's INFO with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField INFO { get { if (_BasePath._INFO == null) _BasePath._INFO = new PathToField(_BasePath, Schema.T.Specifications.F.INFO ); return _BasePath._INFO; } }
				}

				internal PathToSpecificationsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToSpecificationsRow( DBI_Table t ) : base( t ) { }
				internal PathToSpecificationsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSpecificationsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToSpecificationsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToSpecificationsRow PathToReferencedRow { get { return (PathToSpecificationsRow)base.PathToReferencedRow; } }

				internal PathToSpecificationsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToSpecificationsRow(rootTableSchema, columns);
				}
			}
			public class LinkToSpecifications {
				public LinkToSpecifications(DBI_Path referencing_path) {
					RECNO = new PathToSpecificationsRow(referencing_path.PathThroughLinkage(Schema.T.Specifications.F.RECNO));
					Id = new PathToSpecificationsRow(referencing_path.PathThroughLinkage(Schema.T.Specifications.F.Id));
				}
				public readonly PathToSpecificationsRow RECNO;
				public readonly PathToSpecificationsRow Id;
			}
			#endregion

			#region DBI_Path Storerooms
			private PathToStoreroomsRow __pStorerooms = new PathToStoreroomsRow( SchemaClass.Instance.T.Storerooms );

			/// <summary>
			/// The Storerooms path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToStoreroomsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _BUILDING;
				private PathToField _CODE;
				private PathToField _DESC;
				private PathToField _HIDDEN;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToStoreroomsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToStoreroomsRow _BasePath;
					/// <summary>
					/// Provides the path to Storerooms's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Storerooms.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Storerooms's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Storerooms.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Storerooms's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.Storerooms.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to Storerooms's BUILDING with type integer(32)
					/// </summary>
					public PathToField BUILDING { get { if (_BasePath._BUILDING == null) _BasePath._BUILDING = new PathToField(_BasePath, Schema.T.Storerooms.F.BUILDING ); return _BasePath._BUILDING; } }
					/// <summary>
					/// Provides the path to Storerooms's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Storerooms.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Storerooms's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Storerooms.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to Storerooms's HIDDEN with type bool
					/// </summary>
					public PathToField HIDDEN { get { if (_BasePath._HIDDEN == null) _BasePath._HIDDEN = new PathToField(_BasePath, Schema.T.Storerooms.F.HIDDEN ); return _BasePath._HIDDEN; } }
				}

				internal PathToStoreroomsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToStoreroomsRow( DBI_Table t ) : base( t ) { }
				internal PathToStoreroomsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToStoreroomsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToStoreroomsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToStoreroomsRow PathToReferencedRow { get { return (PathToStoreroomsRow)base.PathToReferencedRow; } }

				internal PathToStoreroomsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToStoreroomsRow(rootTableSchema, columns);
				}
			}
			public class LinkToStorerooms {
				public LinkToStorerooms(DBI_Path referencing_path) {
					RECNO = new PathToStoreroomsRow(referencing_path.PathThroughLinkage(Schema.T.Storerooms.F.RECNO));
					Id = new PathToStoreroomsRow(referencing_path.PathThroughLinkage(Schema.T.Storerooms.F.Id));
					KEY = new PathToStoreroomsRow(referencing_path.PathThroughLinkage(Schema.T.Storerooms.F.KEY));
				}
				public readonly PathToStoreroomsRow RECNO;
				public readonly PathToStoreroomsRow Id;
				public readonly PathToStoreroomsRow KEY;
			}
			#endregion

			#region DBI_Path Systems
			private PathToSystemsRow __pSystems = new PathToSystemsRow( SchemaClass.Instance.T.Systems );

			/// <summary>
			/// The Systems path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSystemsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToSystemsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToSystemsRow _BasePath;
					/// <summary>
					/// Provides the path to Systems's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Systems.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Systems's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Systems.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Systems's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Systems.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Systems's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Systems.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToSystemsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToSystemsRow( DBI_Table t ) : base( t ) { }
				internal PathToSystemsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToSystemsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToSystemsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToSystemsRow PathToReferencedRow { get { return (PathToSystemsRow)base.PathToReferencedRow; } }

				internal PathToSystemsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToSystemsRow(rootTableSchema, columns);
				}
			}
			public class LinkToSystems {
				public LinkToSystems(DBI_Path referencing_path) {
					RECNO = new PathToSystemsRow(referencing_path.PathThroughLinkage(Schema.T.Systems.F.RECNO));
					Id = new PathToSystemsRow(referencing_path.PathThroughLinkage(Schema.T.Systems.F.Id));
				}
				public readonly PathToSystemsRow RECNO;
				public readonly PathToSystemsRow Id;
			}
			#endregion

			#region DBI_Path Templates
			private PathToTemplatesRow __pTemplates = new PathToTemplatesRow( SchemaClass.Instance.T.Templates );

			/// <summary>
			/// The Templates path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToTemplatesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _CODE;
				private PathToField _DESC;
				private PathToField _HIDDEN;
				private PathToField _PLATE;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToTemplatesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToTemplatesRow _BasePath;
					/// <summary>
					/// Provides the path to Templates's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Templates.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Templates's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Templates.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Templates's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.Templates.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to Templates's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Templates.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Templates's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Templates.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to Templates's HIDDEN with type bool
					/// </summary>
					public PathToField HIDDEN { get { if (_BasePath._HIDDEN == null) _BasePath._HIDDEN = new PathToField(_BasePath, Schema.T.Templates.F.HIDDEN ); return _BasePath._HIDDEN; } }
					/// <summary>
					/// Provides the path to Templates's PLATE with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField PLATE { get { if (_BasePath._PLATE == null) _BasePath._PLATE = new PathToField(_BasePath, Schema.T.Templates.F.PLATE ); return _BasePath._PLATE; } }
				}

				internal PathToTemplatesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToTemplatesRow( DBI_Table t ) : base( t ) { }
				internal PathToTemplatesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToTemplatesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToTemplatesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToTemplatesRow PathToReferencedRow { get { return (PathToTemplatesRow)base.PathToReferencedRow; } }

				internal PathToTemplatesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToTemplatesRow(rootTableSchema, columns);
				}
			}
			public class LinkToTemplates {
				public LinkToTemplates(DBI_Path referencing_path) {
					RECNO = new PathToTemplatesRow(referencing_path.PathThroughLinkage(Schema.T.Templates.F.RECNO));
					Id = new PathToTemplatesRow(referencing_path.PathThroughLinkage(Schema.T.Templates.F.Id));
					KEY = new PathToTemplatesRow(referencing_path.PathThroughLinkage(Schema.T.Templates.F.KEY));
				}
				public readonly PathToTemplatesRow RECNO;
				public readonly PathToTemplatesRow Id;
				public readonly PathToTemplatesRow KEY;
			}
			#endregion

			#region DBI_Path Terms
			private PathToTermsRow __pTerms = new PathToTermsRow( SchemaClass.Instance.T.Terms );

			/// <summary>
			/// The Terms path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToTermsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToTermsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToTermsRow _BasePath;
					/// <summary>
					/// Provides the path to Terms's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Terms.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Terms's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Terms.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Terms's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Terms.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Terms's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Terms.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToTermsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToTermsRow( DBI_Table t ) : base( t ) { }
				internal PathToTermsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToTermsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToTermsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToTermsRow PathToReferencedRow { get { return (PathToTermsRow)base.PathToReferencedRow; } }

				internal PathToTermsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToTermsRow(rootTableSchema, columns);
				}
			}
			public class LinkToTerms {
				public LinkToTerms(DBI_Path referencing_path) {
					RECNO = new PathToTermsRow(referencing_path.PathThroughLinkage(Schema.T.Terms.F.RECNO));
					Id = new PathToTermsRow(referencing_path.PathThroughLinkage(Schema.T.Terms.F.Id));
				}
				public readonly PathToTermsRow RECNO;
				public readonly PathToTermsRow Id;
			}
			#endregion

			#region DBI_Path Trades
			private PathToTradesRow __pTrades = new PathToTradesRow( SchemaClass.Instance.T.Trades );

			/// <summary>
			/// The Trades path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToTradesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToTradesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToTradesRow _BasePath;
					/// <summary>
					/// Provides the path to Trades's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Trades.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Trades's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Trades.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Trades's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Trades.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Trades's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Trades.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToTradesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToTradesRow( DBI_Table t ) : base( t ) { }
				internal PathToTradesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToTradesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToTradesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToTradesRow PathToReferencedRow { get { return (PathToTradesRow)base.PathToReferencedRow; } }

				internal PathToTradesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToTradesRow(rootTableSchema, columns);
				}
			}
			public class LinkToTrades {
				public LinkToTrades(DBI_Path referencing_path) {
					RECNO = new PathToTradesRow(referencing_path.PathThroughLinkage(Schema.T.Trades.F.RECNO));
					Id = new PathToTradesRow(referencing_path.PathThroughLinkage(Schema.T.Trades.F.Id));
				}
				public readonly PathToTradesRow RECNO;
				public readonly PathToTradesRow Id;
			}
			#endregion

			#region DBI_Path UnitCategories
			private PathToUnitCategoriesRow __pUnitCategories = new PathToUnitCategoriesRow( SchemaClass.Instance.T.UnitCategories );

			/// <summary>
			/// The UnitCategories path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToUnitCategoriesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _UTYPE;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToUnitCategoriesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToUnitCategoriesRow _BasePath;
					/// <summary>
					/// Provides the path to UnitCategories's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.UnitCategories.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to UnitCategories's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.UnitCategories.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to UnitCategories's UTYPE with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField UTYPE { get { if (_BasePath._UTYPE == null) _BasePath._UTYPE = new PathToField(_BasePath, Schema.T.UnitCategories.F.UTYPE ); return _BasePath._UTYPE; } }
					/// <summary>
					/// Provides the path to UnitCategories's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.UnitCategories.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to UnitCategories's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.UnitCategories.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToUnitCategoriesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToUnitCategoriesRow( DBI_Table t ) : base( t ) { }
				internal PathToUnitCategoriesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToUnitCategoriesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToUnitCategoriesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToUnitCategoriesRow PathToReferencedRow { get { return (PathToUnitCategoriesRow)base.PathToReferencedRow; } }

				internal PathToUnitCategoriesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToUnitCategoriesRow(rootTableSchema, columns);
				}
			}
			public class LinkToUnitCategories {
				public LinkToUnitCategories(DBI_Path referencing_path) {
					RECNO = new PathToUnitCategoriesRow(referencing_path.PathThroughLinkage(Schema.T.UnitCategories.F.RECNO));
					Id = new PathToUnitCategoriesRow(referencing_path.PathThroughLinkage(Schema.T.UnitCategories.F.Id));
				}
				public readonly PathToUnitCategoriesRow RECNO;
				public readonly PathToUnitCategoriesRow Id;
			}
			#endregion

			#region DBI_Path Units
			private PathToUnitsRow __pUnits = new PathToUnitsRow( SchemaClass.Instance.T.Units );

			/// <summary>
			/// The Units path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToUnitsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _UTYPE;
				private PathToField _BUILDING;
				private PathToField _CODE;
				private PathToField _DESC;
				private PathToField _LOCATION;
				private PathToField _CATEGORY;
				private PathToField _MAKE;
				private PathToField _MODEL;
				private PathToField _SERIAL;
				private PathToField _DRAW;
				private PathToField _PURCHASE;
				private PathToField _ORGCOST;
				private PathToField _REPCOST;
				private PathToField _ESTIMATE;
				private PathToField _TLIFE;
				private PathToField _VENDOR;
				private PathToField _SERVICE;
				private PathToField _WEXPIRY;
				private PathToField _OWNER;
				private PathToField _ASSET;
				private PathToField _COSTCENTER;
				private PathToField _SYSTEM;
				private PathToField _OBSOLETE;
				private PathToField _DEPRATE;
				private PathToField _SCRAPD;
				private PathToField _SCRAPV;
				private PathToField _CONTACT;
				private PathToField _ACCESS;
				private PathToField _COMMENT;
				private PathToField _HIDDEN;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToUnitsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToUnitsRow _BasePath;
					/// <summary>
					/// Provides the path to Units's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Units.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Units's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Units.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Units's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.Units.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to Units's UTYPE with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField UTYPE { get { if (_BasePath._UTYPE == null) _BasePath._UTYPE = new PathToField(_BasePath, Schema.T.Units.F.UTYPE ); return _BasePath._UTYPE; } }
					/// <summary>
					/// Provides the path to Units's BUILDING with type integer(32)
					/// </summary>
					public PathToField BUILDING { get { if (_BasePath._BUILDING == null) _BasePath._BUILDING = new PathToField(_BasePath, Schema.T.Units.F.BUILDING ); return _BasePath._BUILDING; } }
					/// <summary>
					/// Provides the path to Units's CODE with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Units.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Units's DESC with type string(maxlength 50, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Units.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to Units's LOCATION with type string(maxlength 40, maxlines 0, trim)
					/// </summary>
					public PathToField LOCATION { get { if (_BasePath._LOCATION == null) _BasePath._LOCATION = new PathToField(_BasePath, Schema.T.Units.F.LOCATION ); return _BasePath._LOCATION; } }
					/// <summary>
					/// Provides the path to Units's CATEGORY with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CATEGORY { get { if (_BasePath._CATEGORY == null) _BasePath._CATEGORY = new PathToField(_BasePath, Schema.T.Units.F.CATEGORY ); return _BasePath._CATEGORY; } }
					/// <summary>
					/// Provides the path to Units's MAKE with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField MAKE { get { if (_BasePath._MAKE == null) _BasePath._MAKE = new PathToField(_BasePath, Schema.T.Units.F.MAKE ); return _BasePath._MAKE; } }
					/// <summary>
					/// Provides the path to Units's MODEL with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField MODEL { get { if (_BasePath._MODEL == null) _BasePath._MODEL = new PathToField(_BasePath, Schema.T.Units.F.MODEL ); return _BasePath._MODEL; } }
					/// <summary>
					/// Provides the path to Units's SERIAL with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField SERIAL { get { if (_BasePath._SERIAL == null) _BasePath._SERIAL = new PathToField(_BasePath, Schema.T.Units.F.SERIAL ); return _BasePath._SERIAL; } }
					/// <summary>
					/// Provides the path to Units's DRAW with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField DRAW { get { if (_BasePath._DRAW == null) _BasePath._DRAW = new PathToField(_BasePath, Schema.T.Units.F.DRAW ); return _BasePath._DRAW; } }
					/// <summary>
					/// Provides the path to Units's PURCHASE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField PURCHASE { get { if (_BasePath._PURCHASE == null) _BasePath._PURCHASE = new PathToField(_BasePath, Schema.T.Units.F.PURCHASE ); return _BasePath._PURCHASE; } }
					/// <summary>
					/// Provides the path to Units's ORGCOST with type integer(32)
					/// </summary>
					public PathToField ORGCOST { get { if (_BasePath._ORGCOST == null) _BasePath._ORGCOST = new PathToField(_BasePath, Schema.T.Units.F.ORGCOST ); return _BasePath._ORGCOST; } }
					/// <summary>
					/// Provides the path to Units's REPCOST with type integer(32)
					/// </summary>
					public PathToField REPCOST { get { if (_BasePath._REPCOST == null) _BasePath._REPCOST = new PathToField(_BasePath, Schema.T.Units.F.REPCOST ); return _BasePath._REPCOST; } }
					/// <summary>
					/// Provides the path to Units's ESTIMATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField ESTIMATE { get { if (_BasePath._ESTIMATE == null) _BasePath._ESTIMATE = new PathToField(_BasePath, Schema.T.Units.F.ESTIMATE ); return _BasePath._ESTIMATE; } }
					/// <summary>
					/// Provides the path to Units's TLIFE with type integer(32)
					/// </summary>
					public PathToField TLIFE { get { if (_BasePath._TLIFE == null) _BasePath._TLIFE = new PathToField(_BasePath, Schema.T.Units.F.TLIFE ); return _BasePath._TLIFE; } }
					/// <summary>
					/// Provides the path to Units's VENDOR with type integer(32)
					/// </summary>
					public PathToField VENDOR { get { if (_BasePath._VENDOR == null) _BasePath._VENDOR = new PathToField(_BasePath, Schema.T.Units.F.VENDOR ); return _BasePath._VENDOR; } }
					/// <summary>
					/// Provides the path to Units's SERVICE with type integer(32)
					/// </summary>
					public PathToField SERVICE { get { if (_BasePath._SERVICE == null) _BasePath._SERVICE = new PathToField(_BasePath, Schema.T.Units.F.SERVICE ); return _BasePath._SERVICE; } }
					/// <summary>
					/// Provides the path to Units's WEXPIRY with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField WEXPIRY { get { if (_BasePath._WEXPIRY == null) _BasePath._WEXPIRY = new PathToField(_BasePath, Schema.T.Units.F.WEXPIRY ); return _BasePath._WEXPIRY; } }
					/// <summary>
					/// Provides the path to Units's OWNER with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField OWNER { get { if (_BasePath._OWNER == null) _BasePath._OWNER = new PathToField(_BasePath, Schema.T.Units.F.OWNER ); return _BasePath._OWNER; } }
					/// <summary>
					/// Provides the path to Units's ASSET with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField ASSET { get { if (_BasePath._ASSET == null) _BasePath._ASSET = new PathToField(_BasePath, Schema.T.Units.F.ASSET ); return _BasePath._ASSET; } }
					/// <summary>
					/// Provides the path to Units's COSTCENTER with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField COSTCENTER { get { if (_BasePath._COSTCENTER == null) _BasePath._COSTCENTER = new PathToField(_BasePath, Schema.T.Units.F.COSTCENTER ); return _BasePath._COSTCENTER; } }
					/// <summary>
					/// Provides the path to Units's SYSTEM with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField SYSTEM { get { if (_BasePath._SYSTEM == null) _BasePath._SYSTEM = new PathToField(_BasePath, Schema.T.Units.F.SYSTEM ); return _BasePath._SYSTEM; } }
					/// <summary>
					/// Provides the path to Units's OBSOLETE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField OBSOLETE { get { if (_BasePath._OBSOLETE == null) _BasePath._OBSOLETE = new PathToField(_BasePath, Schema.T.Units.F.OBSOLETE ); return _BasePath._OBSOLETE; } }
					/// <summary>
					/// Provides the path to Units's DEPRATE with type integer(32)
					/// </summary>
					public PathToField DEPRATE { get { if (_BasePath._DEPRATE == null) _BasePath._DEPRATE = new PathToField(_BasePath, Schema.T.Units.F.DEPRATE ); return _BasePath._DEPRATE; } }
					/// <summary>
					/// Provides the path to Units's SCRAPD with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField SCRAPD { get { if (_BasePath._SCRAPD == null) _BasePath._SCRAPD = new PathToField(_BasePath, Schema.T.Units.F.SCRAPD ); return _BasePath._SCRAPD; } }
					/// <summary>
					/// Provides the path to Units's SCRAPV with type integer(32)
					/// </summary>
					public PathToField SCRAPV { get { if (_BasePath._SCRAPV == null) _BasePath._SCRAPV = new PathToField(_BasePath, Schema.T.Units.F.SCRAPV ); return _BasePath._SCRAPV; } }
					/// <summary>
					/// Provides the path to Units's CONTACT with type integer(32)
					/// </summary>
					public PathToField CONTACT { get { if (_BasePath._CONTACT == null) _BasePath._CONTACT = new PathToField(_BasePath, Schema.T.Units.F.CONTACT ); return _BasePath._CONTACT; } }
					/// <summary>
					/// Provides the path to Units's ACCESS with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField ACCESS { get { if (_BasePath._ACCESS == null) _BasePath._ACCESS = new PathToField(_BasePath, Schema.T.Units.F.ACCESS ); return _BasePath._ACCESS; } }
					/// <summary>
					/// Provides the path to Units's COMMENT with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField COMMENT { get { if (_BasePath._COMMENT == null) _BasePath._COMMENT = new PathToField(_BasePath, Schema.T.Units.F.COMMENT ); return _BasePath._COMMENT; } }
					/// <summary>
					/// Provides the path to Units's HIDDEN with type bool
					/// </summary>
					public PathToField HIDDEN { get { if (_BasePath._HIDDEN == null) _BasePath._HIDDEN = new PathToField(_BasePath, Schema.T.Units.F.HIDDEN ); return _BasePath._HIDDEN; } }
				}

				internal PathToUnitsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToUnitsRow( DBI_Table t ) : base( t ) { }
				internal PathToUnitsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToUnitsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToUnitsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToUnitsRow PathToReferencedRow { get { return (PathToUnitsRow)base.PathToReferencedRow; } }

				internal PathToUnitsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToUnitsRow(rootTableSchema, columns);
				}
			}
			public class LinkToUnits {
				public LinkToUnits(DBI_Path referencing_path) {
					RECNO = new PathToUnitsRow(referencing_path.PathThroughLinkage(Schema.T.Units.F.RECNO));
					Id = new PathToUnitsRow(referencing_path.PathThroughLinkage(Schema.T.Units.F.Id));
					KEY = new PathToUnitsRow(referencing_path.PathThroughLinkage(Schema.T.Units.F.KEY));
				}
				public readonly PathToUnitsRow RECNO;
				public readonly PathToUnitsRow Id;
				public readonly PathToUnitsRow KEY;
			}
			#endregion

			#region DBI_Path UoM
			private PathToUoMRow __pUoM = new PathToUoMRow( SchemaClass.Instance.T.UoM );

			/// <summary>
			/// The UoM path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToUoMRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				private PathToField _KEY;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToUoMRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToUoMRow _BasePath;
					/// <summary>
					/// Provides the path to UoM's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.UoM.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to UoM's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.UoM.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to UoM's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.UoM.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to UoM's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.UoM.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to UoM's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.UoM.F.KEY ); return _BasePath._KEY; } }
				}

				internal PathToUoMRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToUoMRow( DBI_Table t ) : base( t ) { }
				internal PathToUoMRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToUoMLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToUoMRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToUoMRow PathToReferencedRow { get { return (PathToUoMRow)base.PathToReferencedRow; } }

				internal PathToUoMLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToUoMRow(rootTableSchema, columns);
				}
			}
			public class LinkToUoM {
				public LinkToUoM(DBI_Path referencing_path) {
					RECNO = new PathToUoMRow(referencing_path.PathThroughLinkage(Schema.T.UoM.F.RECNO));
					Id = new PathToUoMRow(referencing_path.PathThroughLinkage(Schema.T.UoM.F.Id));
					KEY = new PathToUoMRow(referencing_path.PathThroughLinkage(Schema.T.UoM.F.KEY));
				}
				public readonly PathToUoMRow RECNO;
				public readonly PathToUoMRow Id;
				public readonly PathToUoMRow KEY;
			}
			#endregion

			#region DBI_Path VendorCategories
			private PathToVendorCategoriesRow __pVendorCategories = new PathToVendorCategoriesRow( SchemaClass.Instance.T.VendorCategories );

			/// <summary>
			/// The VendorCategories path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToVendorCategoriesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToVendorCategoriesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToVendorCategoriesRow _BasePath;
					/// <summary>
					/// Provides the path to VendorCategories's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.VendorCategories.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to VendorCategories's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.VendorCategories.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to VendorCategories's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.VendorCategories.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to VendorCategories's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.VendorCategories.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToVendorCategoriesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToVendorCategoriesRow( DBI_Table t ) : base( t ) { }
				internal PathToVendorCategoriesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToVendorCategoriesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToVendorCategoriesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToVendorCategoriesRow PathToReferencedRow { get { return (PathToVendorCategoriesRow)base.PathToReferencedRow; } }

				internal PathToVendorCategoriesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToVendorCategoriesRow(rootTableSchema, columns);
				}
			}
			public class LinkToVendorCategories {
				public LinkToVendorCategories(DBI_Path referencing_path) {
					RECNO = new PathToVendorCategoriesRow(referencing_path.PathThroughLinkage(Schema.T.VendorCategories.F.RECNO));
					Id = new PathToVendorCategoriesRow(referencing_path.PathThroughLinkage(Schema.T.VendorCategories.F.Id));
				}
				public readonly PathToVendorCategoriesRow RECNO;
				public readonly PathToVendorCategoriesRow Id;
			}
			#endregion

			#region DBI_Path Vendors
			private PathToVendorsRow __pVendors = new PathToVendorsRow( SchemaClass.Instance.T.Vendors );

			/// <summary>
			/// The Vendors path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToVendorsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _CODE;
				private PathToField _DESC;
				private PathToField _CONTACT;
				private PathToField _CATEGORY;
				private PathToField _ADD1;
				private PathToField _ADD2;
				private PathToField _ADD3;
				private PathToField _TEL;
				private PathToField _FAX;
				private PathToField _WEB;
				private PathToField _ACCOUNTNUM;
				private PathToField _EMAIL;
				private PathToField _HIDDEN;
				private PathToField _COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToVendorsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToVendorsRow _BasePath;
					/// <summary>
					/// Provides the path to Vendors's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.Vendors.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to Vendors's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.Vendors.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to Vendors's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.Vendors.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to Vendors's CODE with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.Vendors.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to Vendors's DESC with type string(maxlength 40, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.Vendors.F.DESC ); return _BasePath._DESC; } }
					/// <summary>
					/// Provides the path to Vendors's CONTACT with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField CONTACT { get { if (_BasePath._CONTACT == null) _BasePath._CONTACT = new PathToField(_BasePath, Schema.T.Vendors.F.CONTACT ); return _BasePath._CONTACT; } }
					/// <summary>
					/// Provides the path to Vendors's CATEGORY with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CATEGORY { get { if (_BasePath._CATEGORY == null) _BasePath._CATEGORY = new PathToField(_BasePath, Schema.T.Vendors.F.CATEGORY ); return _BasePath._CATEGORY; } }
					/// <summary>
					/// Provides the path to Vendors's ADD1 with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField ADD1 { get { if (_BasePath._ADD1 == null) _BasePath._ADD1 = new PathToField(_BasePath, Schema.T.Vendors.F.ADD1 ); return _BasePath._ADD1; } }
					/// <summary>
					/// Provides the path to Vendors's ADD2 with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField ADD2 { get { if (_BasePath._ADD2 == null) _BasePath._ADD2 = new PathToField(_BasePath, Schema.T.Vendors.F.ADD2 ); return _BasePath._ADD2; } }
					/// <summary>
					/// Provides the path to Vendors's ADD3 with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField ADD3 { get { if (_BasePath._ADD3 == null) _BasePath._ADD3 = new PathToField(_BasePath, Schema.T.Vendors.F.ADD3 ); return _BasePath._ADD3; } }
					/// <summary>
					/// Provides the path to Vendors's TEL with type string(maxlength 42, maxlines 0, trim)
					/// </summary>
					public PathToField TEL { get { if (_BasePath._TEL == null) _BasePath._TEL = new PathToField(_BasePath, Schema.T.Vendors.F.TEL ); return _BasePath._TEL; } }
					/// <summary>
					/// Provides the path to Vendors's FAX with type string(maxlength 42, maxlines 0, trim)
					/// </summary>
					public PathToField FAX { get { if (_BasePath._FAX == null) _BasePath._FAX = new PathToField(_BasePath, Schema.T.Vendors.F.FAX ); return _BasePath._FAX; } }
					/// <summary>
					/// Provides the path to Vendors's WEB with type string(maxlength 128, maxlines 0, trim)
					/// </summary>
					public PathToField WEB { get { if (_BasePath._WEB == null) _BasePath._WEB = new PathToField(_BasePath, Schema.T.Vendors.F.WEB ); return _BasePath._WEB; } }
					/// <summary>
					/// Provides the path to Vendors's ACCOUNTNUM with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField ACCOUNTNUM { get { if (_BasePath._ACCOUNTNUM == null) _BasePath._ACCOUNTNUM = new PathToField(_BasePath, Schema.T.Vendors.F.ACCOUNTNUM ); return _BasePath._ACCOUNTNUM; } }
					/// <summary>
					/// Provides the path to Vendors's EMAIL with type string(maxlength 128, maxlines 0, trim)
					/// </summary>
					public PathToField EMAIL { get { if (_BasePath._EMAIL == null) _BasePath._EMAIL = new PathToField(_BasePath, Schema.T.Vendors.F.EMAIL ); return _BasePath._EMAIL; } }
					/// <summary>
					/// Provides the path to Vendors's HIDDEN with type bool
					/// </summary>
					public PathToField HIDDEN { get { if (_BasePath._HIDDEN == null) _BasePath._HIDDEN = new PathToField(_BasePath, Schema.T.Vendors.F.HIDDEN ); return _BasePath._HIDDEN; } }
					/// <summary>
					/// Provides the path to Vendors's COMMENT with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField COMMENT { get { if (_BasePath._COMMENT == null) _BasePath._COMMENT = new PathToField(_BasePath, Schema.T.Vendors.F.COMMENT ); return _BasePath._COMMENT; } }
				}

				internal PathToVendorsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToVendorsRow( DBI_Table t ) : base( t ) { }
				internal PathToVendorsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToVendorsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToVendorsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToVendorsRow PathToReferencedRow { get { return (PathToVendorsRow)base.PathToReferencedRow; } }

				internal PathToVendorsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToVendorsRow(rootTableSchema, columns);
				}
			}
			public class LinkToVendors {
				public LinkToVendors(DBI_Path referencing_path) {
					RECNO = new PathToVendorsRow(referencing_path.PathThroughLinkage(Schema.T.Vendors.F.RECNO));
					Id = new PathToVendorsRow(referencing_path.PathThroughLinkage(Schema.T.Vendors.F.Id));
					KEY = new PathToVendorsRow(referencing_path.PathThroughLinkage(Schema.T.Vendors.F.KEY));
				}
				public readonly PathToVendorsRow RECNO;
				public readonly PathToVendorsRow Id;
				public readonly PathToVendorsRow KEY;
			}
			#endregion

			#region DBI_Path WorkCategories
			private PathToWorkCategoriesRow __pWorkCategories = new PathToWorkCategoriesRow( SchemaClass.Instance.T.WorkCategories );

			/// <summary>
			/// The WorkCategories path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToWorkCategoriesRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _CODE;
				private PathToField _DESC;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToWorkCategoriesRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToWorkCategoriesRow _BasePath;
					/// <summary>
					/// Provides the path to WorkCategories's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.WorkCategories.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to WorkCategories's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.WorkCategories.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to WorkCategories's CODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CODE { get { if (_BasePath._CODE == null) _BasePath._CODE = new PathToField(_BasePath, Schema.T.WorkCategories.F.CODE ); return _BasePath._CODE; } }
					/// <summary>
					/// Provides the path to WorkCategories's DESC with type string(maxlength 30, maxlines 0, trim)
					/// </summary>
					public PathToField DESC { get { if (_BasePath._DESC == null) _BasePath._DESC = new PathToField(_BasePath, Schema.T.WorkCategories.F.DESC ); return _BasePath._DESC; } }
				}

				internal PathToWorkCategoriesRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToWorkCategoriesRow( DBI_Table t ) : base( t ) { }
				internal PathToWorkCategoriesRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToWorkCategoriesLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToWorkCategoriesRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToWorkCategoriesRow PathToReferencedRow { get { return (PathToWorkCategoriesRow)base.PathToReferencedRow; } }

				internal PathToWorkCategoriesLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToWorkCategoriesRow(rootTableSchema, columns);
				}
			}
			public class LinkToWorkCategories {
				public LinkToWorkCategories(DBI_Path referencing_path) {
					RECNO = new PathToWorkCategoriesRow(referencing_path.PathThroughLinkage(Schema.T.WorkCategories.F.RECNO));
					Id = new PathToWorkCategoriesRow(referencing_path.PathThroughLinkage(Schema.T.WorkCategories.F.Id));
				}
				public readonly PathToWorkCategoriesRow RECNO;
				public readonly PathToWorkCategoriesRow Id;
			}
			#endregion

			#region DBI_Path WorkOrders
			private PathToWorkOrdersRow __pWorkOrders = new PathToWorkOrdersRow( SchemaClass.Instance.T.WorkOrders );

			/// <summary>
			/// The WorkOrders path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToWorkOrdersRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _WONUM;
				private PathToField _TYPE;
				private PathToField _CLASS;
				private PathToField _LINKKEY;
				private PathToField _UNITKEY;
				private PathToField _WTYPE;
				private PathToField _COSTCENTER;
				private PathToField _PROJECT;
				private PathToField _ACCESSCODE;
				private PathToField _PRIORITY;
				private PathToField _ORIGINATOR;
				private PathToField _REQUESTOR;
				private PathToField _SUBJECT;
				private PathToField _WDESC;
				private PathToField _CREATEDATE;
				private PathToField _CREATETIME;
				private PathToField _CLOSEDATE;
				private PathToField _CLOSETIME;
				private PathToField _CLOSECODE;
				private PathToField _CLOSECOMM;
				private PathToField _DOWNTIME;
				private PathToField _NEEDPRINT;
				private PathToField _WORKDATE;
				private PathToField _WINTERVAL;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToWorkOrdersRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToWorkOrdersRow _BasePath;
					/// <summary>
					/// Provides the path to WorkOrders's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.WorkOrders.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to WorkOrders's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.WorkOrders.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to WorkOrders's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.WorkOrders.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to WorkOrders's WONUM with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField WONUM { get { if (_BasePath._WONUM == null) _BasePath._WONUM = new PathToField(_BasePath, Schema.T.WorkOrders.F.WONUM ); return _BasePath._WONUM; } }
					/// <summary>
					/// Provides the path to WorkOrders's TYPE with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField TYPE { get { if (_BasePath._TYPE == null) _BasePath._TYPE = new PathToField(_BasePath, Schema.T.WorkOrders.F.TYPE ); return _BasePath._TYPE; } }
					/// <summary>
					/// Provides the path to WorkOrders's CLASS with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField CLASS { get { if (_BasePath._CLASS == null) _BasePath._CLASS = new PathToField(_BasePath, Schema.T.WorkOrders.F.CLASS ); return _BasePath._CLASS; } }
					/// <summary>
					/// Provides the path to WorkOrders's LINKKEY with type integer(32)
					/// </summary>
					public PathToField LINKKEY { get { if (_BasePath._LINKKEY == null) _BasePath._LINKKEY = new PathToField(_BasePath, Schema.T.WorkOrders.F.LINKKEY ); return _BasePath._LINKKEY; } }
					/// <summary>
					/// Provides the path to WorkOrders's UNITKEY with type integer(32)
					/// </summary>
					public PathToField UNITKEY { get { if (_BasePath._UNITKEY == null) _BasePath._UNITKEY = new PathToField(_BasePath, Schema.T.WorkOrders.F.UNITKEY ); return _BasePath._UNITKEY; } }
					/// <summary>
					/// Provides the path to WorkOrders's WTYPE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField WTYPE { get { if (_BasePath._WTYPE == null) _BasePath._WTYPE = new PathToField(_BasePath, Schema.T.WorkOrders.F.WTYPE ); return _BasePath._WTYPE; } }
					/// <summary>
					/// Provides the path to WorkOrders's COSTCENTER with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField COSTCENTER { get { if (_BasePath._COSTCENTER == null) _BasePath._COSTCENTER = new PathToField(_BasePath, Schema.T.WorkOrders.F.COSTCENTER ); return _BasePath._COSTCENTER; } }
					/// <summary>
					/// Provides the path to WorkOrders's PROJECT with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField PROJECT { get { if (_BasePath._PROJECT == null) _BasePath._PROJECT = new PathToField(_BasePath, Schema.T.WorkOrders.F.PROJECT ); return _BasePath._PROJECT; } }
					/// <summary>
					/// Provides the path to WorkOrders's ACCESSCODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField ACCESSCODE { get { if (_BasePath._ACCESSCODE == null) _BasePath._ACCESSCODE = new PathToField(_BasePath, Schema.T.WorkOrders.F.ACCESSCODE ); return _BasePath._ACCESSCODE; } }
					/// <summary>
					/// Provides the path to WorkOrders's PRIORITY with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField PRIORITY { get { if (_BasePath._PRIORITY == null) _BasePath._PRIORITY = new PathToField(_BasePath, Schema.T.WorkOrders.F.PRIORITY ); return _BasePath._PRIORITY; } }
					/// <summary>
					/// Provides the path to WorkOrders's ORIGINATOR with type integer(32)
					/// </summary>
					public PathToField ORIGINATOR { get { if (_BasePath._ORIGINATOR == null) _BasePath._ORIGINATOR = new PathToField(_BasePath, Schema.T.WorkOrders.F.ORIGINATOR ); return _BasePath._ORIGINATOR; } }
					/// <summary>
					/// Provides the path to WorkOrders's REQUESTOR with type integer(32)
					/// </summary>
					public PathToField REQUESTOR { get { if (_BasePath._REQUESTOR == null) _BasePath._REQUESTOR = new PathToField(_BasePath, Schema.T.WorkOrders.F.REQUESTOR ); return _BasePath._REQUESTOR; } }
					/// <summary>
					/// Provides the path to WorkOrders's SUBJECT with type string(maxlength 60, maxlines 0, trim)
					/// </summary>
					public PathToField SUBJECT { get { if (_BasePath._SUBJECT == null) _BasePath._SUBJECT = new PathToField(_BasePath, Schema.T.WorkOrders.F.SUBJECT ); return _BasePath._SUBJECT; } }
					/// <summary>
					/// Provides the path to WorkOrders's WDESC with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField WDESC { get { if (_BasePath._WDESC == null) _BasePath._WDESC = new PathToField(_BasePath, Schema.T.WorkOrders.F.WDESC ); return _BasePath._WDESC; } }
					/// <summary>
					/// Provides the path to WorkOrders's CREATEDATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField CREATEDATE { get { if (_BasePath._CREATEDATE == null) _BasePath._CREATEDATE = new PathToField(_BasePath, Schema.T.WorkOrders.F.CREATEDATE ); return _BasePath._CREATEDATE; } }
					/// <summary>
					/// Provides the path to WorkOrders's CREATETIME with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField CREATETIME { get { if (_BasePath._CREATETIME == null) _BasePath._CREATETIME = new PathToField(_BasePath, Schema.T.WorkOrders.F.CREATETIME ); return _BasePath._CREATETIME; } }
					/// <summary>
					/// Provides the path to WorkOrders's CLOSEDATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField CLOSEDATE { get { if (_BasePath._CLOSEDATE == null) _BasePath._CLOSEDATE = new PathToField(_BasePath, Schema.T.WorkOrders.F.CLOSEDATE ); return _BasePath._CLOSEDATE; } }
					/// <summary>
					/// Provides the path to WorkOrders's CLOSETIME with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField CLOSETIME { get { if (_BasePath._CLOSETIME == null) _BasePath._CLOSETIME = new PathToField(_BasePath, Schema.T.WorkOrders.F.CLOSETIME ); return _BasePath._CLOSETIME; } }
					/// <summary>
					/// Provides the path to WorkOrders's CLOSECODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField CLOSECODE { get { if (_BasePath._CLOSECODE == null) _BasePath._CLOSECODE = new PathToField(_BasePath, Schema.T.WorkOrders.F.CLOSECODE ); return _BasePath._CLOSECODE; } }
					/// <summary>
					/// Provides the path to WorkOrders's CLOSECOMM with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField CLOSECOMM { get { if (_BasePath._CLOSECOMM == null) _BasePath._CLOSECOMM = new PathToField(_BasePath, Schema.T.WorkOrders.F.CLOSECOMM ); return _BasePath._CLOSECOMM; } }
					/// <summary>
					/// Provides the path to WorkOrders's DOWNTIME with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField DOWNTIME { get { if (_BasePath._DOWNTIME == null) _BasePath._DOWNTIME = new PathToField(_BasePath, Schema.T.WorkOrders.F.DOWNTIME ); return _BasePath._DOWNTIME; } }
					/// <summary>
					/// Provides the path to WorkOrders's NEEDPRINT with type bool
					/// </summary>
					public PathToField NEEDPRINT { get { if (_BasePath._NEEDPRINT == null) _BasePath._NEEDPRINT = new PathToField(_BasePath, Schema.T.WorkOrders.F.NEEDPRINT ); return _BasePath._NEEDPRINT; } }
					/// <summary>
					/// Provides the path to WorkOrders's WORKDATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField WORKDATE { get { if (_BasePath._WORKDATE == null) _BasePath._WORKDATE = new PathToField(_BasePath, Schema.T.WorkOrders.F.WORKDATE ); return _BasePath._WORKDATE; } }
					/// <summary>
					/// Provides the path to WorkOrders's WINTERVAL with type integer(32)
					/// </summary>
					public PathToField WINTERVAL { get { if (_BasePath._WINTERVAL == null) _BasePath._WINTERVAL = new PathToField(_BasePath, Schema.T.WorkOrders.F.WINTERVAL ); return _BasePath._WINTERVAL; } }
				}

				internal PathToWorkOrdersRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToWorkOrdersRow( DBI_Table t ) : base( t ) { }
				internal PathToWorkOrdersRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToWorkOrdersLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToWorkOrdersRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToWorkOrdersRow PathToReferencedRow { get { return (PathToWorkOrdersRow)base.PathToReferencedRow; } }

				internal PathToWorkOrdersLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToWorkOrdersRow(rootTableSchema, columns);
				}
			}
			public class LinkToWorkOrders {
				public LinkToWorkOrders(DBI_Path referencing_path) {
					RECNO = new PathToWorkOrdersRow(referencing_path.PathThroughLinkage(Schema.T.WorkOrders.F.RECNO));
					Id = new PathToWorkOrdersRow(referencing_path.PathThroughLinkage(Schema.T.WorkOrders.F.Id));
					KEY = new PathToWorkOrdersRow(referencing_path.PathThroughLinkage(Schema.T.WorkOrders.F.KEY));
				}
				public readonly PathToWorkOrdersRow RECNO;
				public readonly PathToWorkOrdersRow Id;
				public readonly PathToWorkOrdersRow KEY;
			}
			#endregion

			#region DBI_Path WorkRequests
			private PathToWorkRequestsRow __pWorkRequests = new PathToWorkRequestsRow( SchemaClass.Instance.T.WorkRequests );

			/// <summary>
			/// The WorkRequests path information
			/// </summary>
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToWorkRequestsRow : DBI_PathToRow {
				private FAccessor _F;
				public FAccessor F {
					get {
						if (_F == null)
							_F = new FAccessor(this);
						return _F;
					}
				}
				private PathToField _RECNO;
				private PathToField _Id;
				private PathToField _KEY;
				private PathToField _WRNUM;
				private PathToField _STATUS;
				private PathToField _DATE;
				private PathToField _TIME;
				private PathToField _REQUESTOR;
				private PathToField _UNITKEY;
				private PathToField _WTYPE;
				private PathToField _SUBJECT;
				private PathToField _ACCESSCODE;
				private PathToField _PRIORITY;
				private PathToField _WDESC;
				private PathToField _CLOSEDATE;
				private PathToField _CLOSETIME;
				private PathToField _COMMENT;
				[Thinkage.Libraries.Translation.Invariant]
				public class FAccessor {
					public FAccessor( PathToWorkRequestsRow basePath ) {
						_BasePath = basePath;
					}
					private readonly PathToWorkRequestsRow _BasePath;
					/// <summary>
					/// Provides the path to WorkRequests's RECNO with type integer(32)
					/// </summary>
					public PathToField RECNO { get { if (_BasePath._RECNO == null) _BasePath._RECNO = new PathToField(_BasePath, Schema.T.WorkRequests.F.RECNO ); return _BasePath._RECNO; } }
					/// <summary>
					/// Provides the path to WorkRequests's Id with type id(nonnull)
					/// </summary>
					public PathToField Id { get { if (_BasePath._Id == null) _BasePath._Id = new PathToField(_BasePath, Schema.T.WorkRequests.F.Id ); return _BasePath._Id; } }
					/// <summary>
					/// Provides the path to WorkRequests's KEY with type integer(32)
					/// </summary>
					public PathToField KEY { get { if (_BasePath._KEY == null) _BasePath._KEY = new PathToField(_BasePath, Schema.T.WorkRequests.F.KEY ); return _BasePath._KEY; } }
					/// <summary>
					/// Provides the path to WorkRequests's WRNUM with type string(maxlength 15, maxlines 0, trim)
					/// </summary>
					public PathToField WRNUM { get { if (_BasePath._WRNUM == null) _BasePath._WRNUM = new PathToField(_BasePath, Schema.T.WorkRequests.F.WRNUM ); return _BasePath._WRNUM; } }
					/// <summary>
					/// Provides the path to WorkRequests's STATUS with type string(maxlength 1, maxlines 0, trim)
					/// </summary>
					public PathToField STATUS { get { if (_BasePath._STATUS == null) _BasePath._STATUS = new PathToField(_BasePath, Schema.T.WorkRequests.F.STATUS ); return _BasePath._STATUS; } }
					/// <summary>
					/// Provides the path to WorkRequests's DATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField DATE { get { if (_BasePath._DATE == null) _BasePath._DATE = new PathToField(_BasePath, Schema.T.WorkRequests.F.DATE ); return _BasePath._DATE; } }
					/// <summary>
					/// Provides the path to WorkRequests's TIME with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField TIME { get { if (_BasePath._TIME == null) _BasePath._TIME = new PathToField(_BasePath, Schema.T.WorkRequests.F.TIME ); return _BasePath._TIME; } }
					/// <summary>
					/// Provides the path to WorkRequests's REQUESTOR with type integer(32)
					/// </summary>
					public PathToField REQUESTOR { get { if (_BasePath._REQUESTOR == null) _BasePath._REQUESTOR = new PathToField(_BasePath, Schema.T.WorkRequests.F.REQUESTOR ); return _BasePath._REQUESTOR; } }
					/// <summary>
					/// Provides the path to WorkRequests's UNITKEY with type integer(32)
					/// </summary>
					public PathToField UNITKEY { get { if (_BasePath._UNITKEY == null) _BasePath._UNITKEY = new PathToField(_BasePath, Schema.T.WorkRequests.F.UNITKEY ); return _BasePath._UNITKEY; } }
					/// <summary>
					/// Provides the path to WorkRequests's WTYPE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField WTYPE { get { if (_BasePath._WTYPE == null) _BasePath._WTYPE = new PathToField(_BasePath, Schema.T.WorkRequests.F.WTYPE ); return _BasePath._WTYPE; } }
					/// <summary>
					/// Provides the path to WorkRequests's SUBJECT with type string(maxlength 60, maxlines 0, trim)
					/// </summary>
					public PathToField SUBJECT { get { if (_BasePath._SUBJECT == null) _BasePath._SUBJECT = new PathToField(_BasePath, Schema.T.WorkRequests.F.SUBJECT ); return _BasePath._SUBJECT; } }
					/// <summary>
					/// Provides the path to WorkRequests's ACCESSCODE with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField ACCESSCODE { get { if (_BasePath._ACCESSCODE == null) _BasePath._ACCESSCODE = new PathToField(_BasePath, Schema.T.WorkRequests.F.ACCESSCODE ); return _BasePath._ACCESSCODE; } }
					/// <summary>
					/// Provides the path to WorkRequests's PRIORITY with type string(maxlength 10, maxlines 0, trim)
					/// </summary>
					public PathToField PRIORITY { get { if (_BasePath._PRIORITY == null) _BasePath._PRIORITY = new PathToField(_BasePath, Schema.T.WorkRequests.F.PRIORITY ); return _BasePath._PRIORITY; } }
					/// <summary>
					/// Provides the path to WorkRequests's WDESC with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField WDESC { get { if (_BasePath._WDESC == null) _BasePath._WDESC = new PathToField(_BasePath, Schema.T.WorkRequests.F.WDESC ); return _BasePath._WDESC; } }
					/// <summary>
					/// Provides the path to WorkRequests's CLOSEDATE with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00)
					/// </summary>
					public PathToField CLOSEDATE { get { if (_BasePath._CLOSEDATE == null) _BasePath._CLOSEDATE = new PathToField(_BasePath, Schema.T.WorkRequests.F.CLOSEDATE ); return _BasePath._CLOSEDATE; } }
					/// <summary>
					/// Provides the path to WorkRequests's CLOSETIME with type string(maxlength 6, maxlines 0, trim)
					/// </summary>
					public PathToField CLOSETIME { get { if (_BasePath._CLOSETIME == null) _BasePath._CLOSETIME = new PathToField(_BasePath, Schema.T.WorkRequests.F.CLOSETIME ); return _BasePath._CLOSETIME; } }
					/// <summary>
					/// Provides the path to WorkRequests's COMMENT with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim)
					/// </summary>
					public PathToField COMMENT { get { if (_BasePath._COMMENT == null) _BasePath._COMMENT = new PathToField(_BasePath, Schema.T.WorkRequests.F.COMMENT ); return _BasePath._COMMENT; } }
				}

				internal PathToWorkRequestsRow( DBI_Table t, DBI_Column[] cols) : base( t, cols ) { }
				internal PathToWorkRequestsRow( DBI_Table t ) : base( t ) { }
				internal PathToWorkRequestsRow( DBI_PathToRow p ) : base( p ) { }
			}
			[Thinkage.Libraries.Translation.Invariant]
			public class PathToWorkRequestsLink : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				public PathToWorkRequestsRow.FAccessor F { get { return PathToReferencedRow.F; } }
				public new PathToWorkRequestsRow PathToReferencedRow { get { return (PathToWorkRequestsRow)base.PathToReferencedRow; } }

				internal PathToWorkRequestsLink( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
				protected override DBI_PathToRow NewPathToRow(DBI_Table rootTableSchema, DBI_Column[] columns) {
					return new PathToWorkRequestsRow(rootTableSchema, columns);
				}
			}
			public class LinkToWorkRequests {
				public LinkToWorkRequests(DBI_Path referencing_path) {
					RECNO = new PathToWorkRequestsRow(referencing_path.PathThroughLinkage(Schema.T.WorkRequests.F.RECNO));
					Id = new PathToWorkRequestsRow(referencing_path.PathThroughLinkage(Schema.T.WorkRequests.F.Id));
					KEY = new PathToWorkRequestsRow(referencing_path.PathThroughLinkage(Schema.T.WorkRequests.F.KEY));
				}
				public readonly PathToWorkRequestsRow RECNO;
				public readonly PathToWorkRequestsRow Id;
				public readonly PathToWorkRequestsRow KEY;
			}
			#endregion
			public class PathToField : DBI_Path {
				private LAccessor _L;
				public LAccessor L {
					get {
						if (_L == null)
							_L = new LAccessor(this);
						return _L;
					}
				}
				[System.Obsolete("This field is not a linkage field", true)]
				public new PathToField PathToReferencedRow { get { return null; } }

				internal PathToField( DBI_PathToRow rootPath, DBI_Column c ) : base( rootPath, c ) { }
			}
			#endregion
			public struct TAccessor {
				private PathClass this_path;
				public TAccessor( PathClass this_path )
				{
					this.this_path = this_path;
				}
				#region Accessors
				public PathToCustomImportDirectivesRow CustomImportDirectives { get { return this_path.__pCustomImportDirectives; } }
				public PathToAtRequestAccountsRow AtRequestAccounts { get { return this_path.__pAtRequestAccounts; } }
				public PathToAtRequestConfigurationRow AtRequestConfiguration { get { return this_path.__pAtRequestConfiguration; } }
				public PathToDefaultsRow Defaults { get { return this_path.__pDefaults; } }
				public PathToArchivedSetsRow ArchivedSets { get { return this_path.__pArchivedSets; } }
				public PathToPermissionsRow Permissions { get { return this_path.__pPermissions; } }
				public PathToEditProgramsRow EditPrograms { get { return this_path.__pEditPrograms; } }
				public PathToSettingsRow Settings { get { return this_path.__pSettings; } }
				public PathToAccessCodesRow AccessCodes { get { return this_path.__pAccessCodes; } }
				public PathToAdjustmentsRow Adjustments { get { return this_path.__pAdjustments; } }
				public PathToAssetCodesRow AssetCodes { get { return this_path.__pAssetCodes; } }
				public PathToBuildingsRow Buildings { get { return this_path.__pBuildings; } }
				public PathToChargebacksRow Chargebacks { get { return this_path.__pChargebacks; } }
				public PathToClosingCodesRow ClosingCodes { get { return this_path.__pClosingCodes; } }
				public PathToContactsRow Contacts { get { return this_path.__pContacts; } }
				public PathToCostCentersRow CostCenters { get { return this_path.__pCostCenters; } }
				public PathToInvCategoriesRow InvCategories { get { return this_path.__pInvCategories; } }
				public PathToInvItemsRow InvItems { get { return this_path.__pInvItems; } }
				public PathToInvLocationsRow InvLocations { get { return this_path.__pInvLocations; } }
				public PathToInvTransactionsRow InvTransactions { get { return this_path.__pInvTransactions; } }
				public PathToIssuesRow Issues { get { return this_path.__pIssues; } }
				public PathToLaborRow Labor { get { return this_path.__pLabor; } }
				public PathToMeterHistoryRow MeterHistory { get { return this_path.__pMeterHistory; } }
				public PathToMetersRow Meters { get { return this_path.__pMeters; } }
				public PathToObsoletesRow Obsoletes { get { return this_path.__pObsoletes; } }
				public PathToOwnershipsRow Ownerships { get { return this_path.__pOwnerships; } }
				public PathToPersonnelRow Personnel { get { return this_path.__pPersonnel; } }
				public PathToPreventiveSchedulesRow PreventiveSchedules { get { return this_path.__pPreventiveSchedules; } }
				public PathToPrioritiesRow Priorities { get { return this_path.__pPriorities; } }
				public PathToProjectsRow Projects { get { return this_path.__pProjects; } }
				public PathToPurchaseExtrasRow PurchaseExtras { get { return this_path.__pPurchaseExtras; } }
				public PathToPurchasesRow Purchases { get { return this_path.__pPurchases; } }
				public PathToReceiptsRow Receipts { get { return this_path.__pReceipts; } }
				public PathToServiceContractsRow ServiceContracts { get { return this_path.__pServiceContracts; } }
				public PathToServicedEquipmentRow ServicedEquipment { get { return this_path.__pServicedEquipment; } }
				public PathToShippingModesRow ShippingModes { get { return this_path.__pShippingModes; } }
				public PathToSparePartsRow SpareParts { get { return this_path.__pSpareParts; } }
				public PathToSpecificationsRow Specifications { get { return this_path.__pSpecifications; } }
				public PathToStoreroomsRow Storerooms { get { return this_path.__pStorerooms; } }
				public PathToSystemsRow Systems { get { return this_path.__pSystems; } }
				public PathToTemplatesRow Templates { get { return this_path.__pTemplates; } }
				public PathToTermsRow Terms { get { return this_path.__pTerms; } }
				public PathToTradesRow Trades { get { return this_path.__pTrades; } }
				public PathToUnitCategoriesRow UnitCategories { get { return this_path.__pUnitCategories; } }
				public PathToUnitsRow Units { get { return this_path.__pUnits; } }
				public PathToUoMRow UoM { get { return this_path.__pUoM; } }
				public PathToVendorCategoriesRow VendorCategories { get { return this_path.__pVendorCategories; } }
				public PathToVendorsRow Vendors { get { return this_path.__pVendors; } }
				public PathToWorkCategoriesRow WorkCategories { get { return this_path.__pWorkCategories; } }
				public PathToWorkOrdersRow WorkOrders { get { return this_path.__pWorkOrders; } }
				public PathToWorkRequestsRow WorkRequests { get { return this_path.__pWorkRequests; } }
				#endregion
			}
			public class LAccessorBase {
				protected LAccessorBase(DBI_Path basePath) {
					BasePath = basePath;
				}
				protected readonly DBI_Path BasePath;
				#region Cached Accessor results
				protected PathClass.LinkToCustomImportDirectives _CustomImportDirectives;
				protected PathClass.LinkToAtRequestAccounts _AtRequestAccounts;
				protected PathClass.LinkToAtRequestConfiguration _AtRequestConfiguration;
				protected PathClass.LinkToDefaults _Defaults;
				protected PathClass.LinkToArchivedSets _ArchivedSets;
				protected PathClass.LinkToPermissions _Permissions;
				protected PathClass.LinkToEditPrograms _EditPrograms;
				protected PathClass.LinkToSettings _Settings;
				protected PathClass.LinkToAccessCodes _AccessCodes;
				protected PathClass.LinkToAdjustments _Adjustments;
				protected PathClass.LinkToAssetCodes _AssetCodes;
				protected PathClass.LinkToBuildings _Buildings;
				protected PathClass.LinkToChargebacks _Chargebacks;
				protected PathClass.LinkToClosingCodes _ClosingCodes;
				protected PathClass.LinkToContacts _Contacts;
				protected PathClass.LinkToCostCenters _CostCenters;
				protected PathClass.LinkToInvCategories _InvCategories;
				protected PathClass.LinkToInvItems _InvItems;
				protected PathClass.LinkToInvLocations _InvLocations;
				protected PathClass.LinkToInvTransactions _InvTransactions;
				protected PathClass.LinkToIssues _Issues;
				protected PathClass.LinkToLabor _Labor;
				protected PathClass.LinkToMeterHistory _MeterHistory;
				protected PathClass.LinkToMeters _Meters;
				protected PathClass.LinkToObsoletes _Obsoletes;
				protected PathClass.LinkToOwnerships _Ownerships;
				protected PathClass.LinkToPersonnel _Personnel;
				protected PathClass.LinkToPreventiveSchedules _PreventiveSchedules;
				protected PathClass.LinkToPriorities _Priorities;
				protected PathClass.LinkToProjects _Projects;
				protected PathClass.LinkToPurchaseExtras _PurchaseExtras;
				protected PathClass.LinkToPurchases _Purchases;
				protected PathClass.LinkToReceipts _Receipts;
				protected PathClass.LinkToServiceContracts _ServiceContracts;
				protected PathClass.LinkToServicedEquipment _ServicedEquipment;
				protected PathClass.LinkToShippingModes _ShippingModes;
				protected PathClass.LinkToSpareParts _SpareParts;
				protected PathClass.LinkToSpecifications _Specifications;
				protected PathClass.LinkToStorerooms _Storerooms;
				protected PathClass.LinkToSystems _Systems;
				protected PathClass.LinkToTemplates _Templates;
				protected PathClass.LinkToTerms _Terms;
				protected PathClass.LinkToTrades _Trades;
				protected PathClass.LinkToUnitCategories _UnitCategories;
				protected PathClass.LinkToUnits _Units;
				protected PathClass.LinkToUoM _UoM;
				protected PathClass.LinkToVendorCategories _VendorCategories;
				protected PathClass.LinkToVendors _Vendors;
				protected PathClass.LinkToWorkCategories _WorkCategories;
				protected PathClass.LinkToWorkOrders _WorkOrders;
				protected PathClass.LinkToWorkRequests _WorkRequests;
				#endregion
			}
			public class LAccessor : LAccessorBase {
				public LAccessor( DBI_Path this_path ) 
					: base(this_path) {
				}
				#region Accessors
				public PathClass.LinkToCustomImportDirectives CustomImportDirectives { get { if (base._CustomImportDirectives == null) base._CustomImportDirectives = new PathClass.LinkToCustomImportDirectives(base.BasePath); return base._CustomImportDirectives; } }
				public PathClass.LinkToAtRequestAccounts AtRequestAccounts { get { if (base._AtRequestAccounts == null) base._AtRequestAccounts = new PathClass.LinkToAtRequestAccounts(base.BasePath); return base._AtRequestAccounts; } }
				public PathClass.LinkToAtRequestConfiguration AtRequestConfiguration { get { if (base._AtRequestConfiguration == null) base._AtRequestConfiguration = new PathClass.LinkToAtRequestConfiguration(base.BasePath); return base._AtRequestConfiguration; } }
				public PathClass.LinkToDefaults Defaults { get { if (base._Defaults == null) base._Defaults = new PathClass.LinkToDefaults(base.BasePath); return base._Defaults; } }
				public PathClass.LinkToArchivedSets ArchivedSets { get { if (base._ArchivedSets == null) base._ArchivedSets = new PathClass.LinkToArchivedSets(base.BasePath); return base._ArchivedSets; } }
				public PathClass.LinkToPermissions Permissions { get { if (base._Permissions == null) base._Permissions = new PathClass.LinkToPermissions(base.BasePath); return base._Permissions; } }
				public PathClass.LinkToEditPrograms EditPrograms { get { if (base._EditPrograms == null) base._EditPrograms = new PathClass.LinkToEditPrograms(base.BasePath); return base._EditPrograms; } }
				public PathClass.LinkToSettings Settings { get { if (base._Settings == null) base._Settings = new PathClass.LinkToSettings(base.BasePath); return base._Settings; } }
				public PathClass.LinkToAccessCodes AccessCodes { get { if (base._AccessCodes == null) base._AccessCodes = new PathClass.LinkToAccessCodes(base.BasePath); return base._AccessCodes; } }
				public PathClass.LinkToAdjustments Adjustments { get { if (base._Adjustments == null) base._Adjustments = new PathClass.LinkToAdjustments(base.BasePath); return base._Adjustments; } }
				public PathClass.LinkToAssetCodes AssetCodes { get { if (base._AssetCodes == null) base._AssetCodes = new PathClass.LinkToAssetCodes(base.BasePath); return base._AssetCodes; } }
				public PathClass.LinkToBuildings Buildings { get { if (base._Buildings == null) base._Buildings = new PathClass.LinkToBuildings(base.BasePath); return base._Buildings; } }
				public PathClass.LinkToChargebacks Chargebacks { get { if (base._Chargebacks == null) base._Chargebacks = new PathClass.LinkToChargebacks(base.BasePath); return base._Chargebacks; } }
				public PathClass.LinkToClosingCodes ClosingCodes { get { if (base._ClosingCodes == null) base._ClosingCodes = new PathClass.LinkToClosingCodes(base.BasePath); return base._ClosingCodes; } }
				public PathClass.LinkToContacts Contacts { get { if (base._Contacts == null) base._Contacts = new PathClass.LinkToContacts(base.BasePath); return base._Contacts; } }
				public PathClass.LinkToCostCenters CostCenters { get { if (base._CostCenters == null) base._CostCenters = new PathClass.LinkToCostCenters(base.BasePath); return base._CostCenters; } }
				public PathClass.LinkToInvCategories InvCategories { get { if (base._InvCategories == null) base._InvCategories = new PathClass.LinkToInvCategories(base.BasePath); return base._InvCategories; } }
				public PathClass.LinkToInvItems InvItems { get { if (base._InvItems == null) base._InvItems = new PathClass.LinkToInvItems(base.BasePath); return base._InvItems; } }
				public PathClass.LinkToInvLocations InvLocations { get { if (base._InvLocations == null) base._InvLocations = new PathClass.LinkToInvLocations(base.BasePath); return base._InvLocations; } }
				public PathClass.LinkToInvTransactions InvTransactions { get { if (base._InvTransactions == null) base._InvTransactions = new PathClass.LinkToInvTransactions(base.BasePath); return base._InvTransactions; } }
				public PathClass.LinkToIssues Issues { get { if (base._Issues == null) base._Issues = new PathClass.LinkToIssues(base.BasePath); return base._Issues; } }
				public PathClass.LinkToLabor Labor { get { if (base._Labor == null) base._Labor = new PathClass.LinkToLabor(base.BasePath); return base._Labor; } }
				public PathClass.LinkToMeterHistory MeterHistory { get { if (base._MeterHistory == null) base._MeterHistory = new PathClass.LinkToMeterHistory(base.BasePath); return base._MeterHistory; } }
				public PathClass.LinkToMeters Meters { get { if (base._Meters == null) base._Meters = new PathClass.LinkToMeters(base.BasePath); return base._Meters; } }
				public PathClass.LinkToObsoletes Obsoletes { get { if (base._Obsoletes == null) base._Obsoletes = new PathClass.LinkToObsoletes(base.BasePath); return base._Obsoletes; } }
				public PathClass.LinkToOwnerships Ownerships { get { if (base._Ownerships == null) base._Ownerships = new PathClass.LinkToOwnerships(base.BasePath); return base._Ownerships; } }
				public PathClass.LinkToPersonnel Personnel { get { if (base._Personnel == null) base._Personnel = new PathClass.LinkToPersonnel(base.BasePath); return base._Personnel; } }
				public PathClass.LinkToPreventiveSchedules PreventiveSchedules { get { if (base._PreventiveSchedules == null) base._PreventiveSchedules = new PathClass.LinkToPreventiveSchedules(base.BasePath); return base._PreventiveSchedules; } }
				public PathClass.LinkToPriorities Priorities { get { if (base._Priorities == null) base._Priorities = new PathClass.LinkToPriorities(base.BasePath); return base._Priorities; } }
				public PathClass.LinkToProjects Projects { get { if (base._Projects == null) base._Projects = new PathClass.LinkToProjects(base.BasePath); return base._Projects; } }
				public PathClass.LinkToPurchaseExtras PurchaseExtras { get { if (base._PurchaseExtras == null) base._PurchaseExtras = new PathClass.LinkToPurchaseExtras(base.BasePath); return base._PurchaseExtras; } }
				public PathClass.LinkToPurchases Purchases { get { if (base._Purchases == null) base._Purchases = new PathClass.LinkToPurchases(base.BasePath); return base._Purchases; } }
				public PathClass.LinkToReceipts Receipts { get { if (base._Receipts == null) base._Receipts = new PathClass.LinkToReceipts(base.BasePath); return base._Receipts; } }
				public PathClass.LinkToServiceContracts ServiceContracts { get { if (base._ServiceContracts == null) base._ServiceContracts = new PathClass.LinkToServiceContracts(base.BasePath); return base._ServiceContracts; } }
				public PathClass.LinkToServicedEquipment ServicedEquipment { get { if (base._ServicedEquipment == null) base._ServicedEquipment = new PathClass.LinkToServicedEquipment(base.BasePath); return base._ServicedEquipment; } }
				public PathClass.LinkToShippingModes ShippingModes { get { if (base._ShippingModes == null) base._ShippingModes = new PathClass.LinkToShippingModes(base.BasePath); return base._ShippingModes; } }
				public PathClass.LinkToSpareParts SpareParts { get { if (base._SpareParts == null) base._SpareParts = new PathClass.LinkToSpareParts(base.BasePath); return base._SpareParts; } }
				public PathClass.LinkToSpecifications Specifications { get { if (base._Specifications == null) base._Specifications = new PathClass.LinkToSpecifications(base.BasePath); return base._Specifications; } }
				public PathClass.LinkToStorerooms Storerooms { get { if (base._Storerooms == null) base._Storerooms = new PathClass.LinkToStorerooms(base.BasePath); return base._Storerooms; } }
				public PathClass.LinkToSystems Systems { get { if (base._Systems == null) base._Systems = new PathClass.LinkToSystems(base.BasePath); return base._Systems; } }
				public PathClass.LinkToTemplates Templates { get { if (base._Templates == null) base._Templates = new PathClass.LinkToTemplates(base.BasePath); return base._Templates; } }
				public PathClass.LinkToTerms Terms { get { if (base._Terms == null) base._Terms = new PathClass.LinkToTerms(base.BasePath); return base._Terms; } }
				public PathClass.LinkToTrades Trades { get { if (base._Trades == null) base._Trades = new PathClass.LinkToTrades(base.BasePath); return base._Trades; } }
				public PathClass.LinkToUnitCategories UnitCategories { get { if (base._UnitCategories == null) base._UnitCategories = new PathClass.LinkToUnitCategories(base.BasePath); return base._UnitCategories; } }
				public PathClass.LinkToUnits Units { get { if (base._Units == null) base._Units = new PathClass.LinkToUnits(base.BasePath); return base._Units; } }
				public PathClass.LinkToUoM UoM { get { if (base._UoM == null) base._UoM = new PathClass.LinkToUoM(base.BasePath); return base._UoM; } }
				public PathClass.LinkToVendorCategories VendorCategories { get { if (base._VendorCategories == null) base._VendorCategories = new PathClass.LinkToVendorCategories(base.BasePath); return base._VendorCategories; } }
				public PathClass.LinkToVendors Vendors { get { if (base._Vendors == null) base._Vendors = new PathClass.LinkToVendors(base.BasePath); return base._Vendors; } }
				public PathClass.LinkToWorkCategories WorkCategories { get { if (base._WorkCategories == null) base._WorkCategories = new PathClass.LinkToWorkCategories(base.BasePath); return base._WorkCategories; } }
				public PathClass.LinkToWorkOrders WorkOrders { get { if (base._WorkOrders == null) base._WorkOrders = new PathClass.LinkToWorkOrders(base.BasePath); return base._WorkOrders; } }
				public PathClass.LinkToWorkRequests WorkRequests { get { if (base._WorkRequests == null) base._WorkRequests = new PathClass.LinkToWorkRequests(base.BasePath); return base._WorkRequests; } }
				#endregion
			}
		}
		public static readonly PathClass Path = PathClass.Instance;
		#endregion
	}
}
