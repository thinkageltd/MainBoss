@model UnitEntities.Unit
@using System
@using Thinkage.MainBoss.WebAccess.Models
@using Thinkage.MainBoss.Database
@using Thinkage.MainBoss.WebAccess
@using Thinkage.Web.Mvc.Html
@{
	Layout = "~/Views/Shared/_LayoutLabelValueView.cshtml";
	ViewBag.Title = T.Text("View Unit {0}", Model.BaseRelativeLocation.Code);
}
@section LabelValueViewHeader {
	@if (Model.UnitGISLocationURL != null) {
		<div style="float:left">
			@(Html.ValueOnlyAsUrlLink("span", T.Text("Show on Map"), Model.UnitGISLocationURL))
		</div>
	}
}
@section LabelValueViewPanel {
	@(Html.LabelValueRow(dsMB.Path.T.Unit.F.RelativeLocationID.F.LocationID.F.Code, Model.BaseRelativeLocation.Code))
	@(Html.LabelValueRow(dsMB.Path.T.Unit.F.RelativeLocationID.F.LocationID.F.Desc, Model.BaseRelativeLocation.BaseLocation.Desc))
	@(Html.LabelValueRow(dsMB.Path.T.Unit.F.RelativeLocationID.F.ContainingLocationID.F.Code, Model.BaseRelativeLocation.BaseLocation.Code))
	@(Html.LabelValueRow(dsMB.Path.T.Unit.F.RelativeLocationID.F.LocationID.F.GISLocation, Model.UnitGISLocation))
	@(Html.LabelValueRow(dsMB.Path.T.Unit.F.Make, Model.Make))
	@(Html.LabelValueRow(dsMB.Path.T.Unit.F.Model, Model.Model))
	@(Html.LabelValueRow(dsMB.Path.T.Unit.F.Serial, Model.Serial))
	@(Html.LabelValueRowCodeDesc(dsMB.Path.T.Unit.F.UnitUsageID.F.Code, Model.UnitUsage))
	@(Html.LabelValueRowCodeDesc(dsMB.Path.T.Unit.F.UnitCategoryID.F.Code, Model.UnitCategory))
	@(Html.LabelValueRowCodeDesc(dsMB.Path.T.Unit.F.SystemCodeID.F.Code, Model.SystemCode))
	@(Html.LabelValueRow(dsMB.Path.T.Unit.F.Drawing, Model.Drawing))
	@(Html.LabelValueRowMultiLine(dsMB.Path.T.Unit.F.RelativeLocationID.F.LocationID.F.Comment, Model.BaseRelativeLocation.BaseLocation.Comment, true))
}
@section LabelValueViewTrailer {
	@{
		var attachments = Model.BaseRelativeLocation.BaseLocation.AttachmentUnitLocation;
		if (attachments.Count() > 0) {
			<h3>@(T.Text("Attachments"))</h3>
			<div class="Attachments">
				@foreach (var a in (from att in attachments
								   orderby att.Code
								   select att)) {
					@(Html.ValueOnly(dsMB.Schema.T.Attachment.F.Code.EffectiveType, a.Code, false, "h3"))
					<div>
						@if (!string.IsNullOrWhiteSpace(a.Desc)) {
							@(Html.ValueOnly(dsMB.Schema.T.Attachment.F.Desc.EffectiveType, a.Desc))
							<br><br>
						}
						@if (!string.IsNullOrWhiteSpace(a.Comment)) {
							@(Html.ValueOnly(dsMB.Schema.T.Attachment.F.Comment.EffectiveType, a.Comment));
							<br><br>
						}
						@if (a.Path != null) {
							var path = a.Path;
							try {
								var url = new Uri(a.Path).AbsolutePath;
								<div class="LabelValueRow">
									@(Html.ValueOnlyAsUrlLink("div", path, url))
								</div>
							}
							catch {
								<div class="LabelValueRow">
									@(Html.ValueOnly(dsMB.Schema.T.Attachment.F.Path.EffectiveType, path))
								</div>
							}
						}
					</div>
				}
			</div>
		}
		if (Model.BaseRelativeLocation.BaseLocation.SpecificationUnitLocation.Count() > 0) {
			<h3>@(T.Text("Specifications"))</h3>
			<div class="Attachments">
				@foreach (var a in (from att in Model.BaseRelativeLocation.BaseLocation.SpecificationUnitLocation
								   orderby att.Code
								   select att)) {

					@(Html.ValueOnly(dsMB.Schema.T.Specification.F.Code.EffectiveType, a.Code, false, "h3"))
				<div class="Specification">
<pre>
@(a.ReportText)
</pre>
					@if (!string.IsNullOrWhiteSpace(a.Comment)) {
						@(Html.ValueOnly(dsMB.Schema.T.Specification.F.Comment.EffectiveType, a.Comment));
						<br><br>
					}
				</div>
				}
			</div>
		}
	}
}
@section scripts {
	<script>
		$(function () {
			$(".Attachments").accordion({
				collapsible: true,
				active: false,
				heightStyle: "content"
			});
		});
	</script>
}
