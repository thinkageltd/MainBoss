@model WorkOrderEntities.WorkOrder
@using Thinkage.MainBoss.WebAccess.Models
@using Thinkage.MainBoss.Database
@using Thinkage.MainBoss.WebAccess
@using Thinkage.Web.Mvc.Html
@using Thinkage.Libraries.MVC.Models
@{
	Layout = "~/Views/Shared/_LayoutLabelValueView.cshtml";
	ViewBag.Title = T.Text("View WorkOrder {0}", Model.Number);
}
@section LabelValueViewHeader {
	<div class="Actions">
		<div class="Action"><a href="#History">@(T.Text("History"))</a></div>@if (Model.Resources.Count > 0) {<div class="Action"><a href="#Resources">@(T.Text("Resources"))</a></div>}
	</div>
}
@section LabelValueViewPanel {
	@(Html.LabelValueRow(dsMB.Path.T.WorkOrder.F.Number, Model.Number))
	@(Html.LabelValueRow(dsMB.Path.T.WorkOrder.F.Subject, Model.Subject))
	@(Html.LabelValueRowCodeDesc(dsMB.Path.T.WorkOrderStateHistory.F.WorkOrderStateID, Model.CurrentWorkOrderStateHistory.WorkOrderState))
	@(Html.LabelValueRowCodeDesc(dsMB.Path.T.WorkOrderStateHistory.F.WorkOrderStateHistoryStatusID, Model.CurrentWorkOrderStateHistory.WorkOrderStateHistoryStatus))
	@if (Model.UnitLocationID != null) {@(Html.LabelActionValue<WorkOrderEntities.Location>(dsMB.Path.T.WorkOrder.F.UnitLocationID, Model.UnitLocation, m => m.Code, i => Model.UnitLocationID, m => m.DerivedRelativeLocation.Hidden != null))}
	@(Html.LabelValueRow(dsMB.Path.T.WorkOrder.F.StartDateEstimate, Model.StartDateEstimate))
	@(Html.LabelValueRow(dsMB.Path.T.WorkOrder.F.EndDateEstimate, Model.EndDateEstimate))
	@(Html.LabelValueRow(dsMB.Path.T.WorkOrder.F.RequestorID, Html.ValueIfDefined<WorkOrderEntities.Requestor>(Model.Requestor, m => Html.ContactValue(m.Contact.Code, m.Contact.BusinessPhone, m.Contact.Email, m.Contact.Hidden != null || m.Hidden != null))))
	@(Html.LabelValueRowCodeDesc(dsMB.Path.T.WorkOrder.F.WorkCategoryID, Model.WorkCategory))
	@(Html.LabelValueRowCodeDesc(dsMB.Path.T.WorkOrder.F.AccessCodeID.F.Code, Model.AccessCode))
	@(Html.LabelValueRowCodeDesc(dsMB.Path.T.WorkOrder.F.WorkOrderPriorityID.F.Code, Model.WorkOrderPriority))
	@(Html.LabelValueRowCodeDesc(dsMB.Path.T.WorkOrder.F.ProjectID, Model.Project))
	@(Html.LabelValueRowMultiLine(dsMB.Path.T.WorkOrder.F.Description, Model.Description, false))
	@(Html.LabelValueRowMultiLine(dsMB.Path.T.WorkOrder.F.ClosingComment, Model.ClosingComment, true))
}
@section LabelValueViewTrailer {
	<div class="Actions">
		<div class="Action">
			@(Html.ActionLink(T.Text("Add Comment"), ((bool)ViewData["UnAssigned"]) ? "UnAssignedAddComment" : "AddComment", "WorkOrderStateHistory", new {
					ParentID = Model.Id,
					CurrentStateHistoryID = Model.CurrentWorkOrderStateHistoryID
				}, new {
					@class = "StateActionLink"
				}))
		</div>
		<div class="Action">
			@if ((bool)ViewData["UnAssigned"]) {
				if ((bool)ViewData["CanSelfAssign"]) {
					@(Html.ActionLink(T.Text("Self Assign"), "SelfAssign", "WorkOrderStateHistory", new {
							ParentID = Model.Id,
							CurrentStateHistoryID = Model.CurrentWorkOrderStateHistoryID
						}, new {
							@class = "StateActionLink"
						}))
				}
			}
			else { // The already assigned version allows Close
				if (Model.CurrentWorkOrderStateHistory.WorkOrderState.FilterAsOpen) {

					@(Html.ActionLink(T.Text("Close Work Order"), "Close", "WorkOrderStateHistory", new {
							ParentID = Model.Id,
							CurrentStateHistoryID = Model.CurrentWorkOrderStateHistoryID
						}, new {
							@class = "StateActionLink"
						}))
				}
			}
		</div>
	</div>
	<div id="History">
		<h2>@(T.Text("Current History"))</h2>
		<div class="viewHistoryItem">
			<div class="title">
				@(Model.CurrentWorkOrderStateHistory.EffectiveDate)@Html.NBSP()@if (Model.CurrentWorkOrderStateHistory.User != null && Model.CurrentWorkOrderStateHistory.User.Contact != null) {@(Model.CurrentWorkOrderStateHistory.User.Contact.Code)@Html.NBSP()}<span class="StateCode">@(Model.CurrentWorkOrderStateHistory.WorkOrderState.Code.Translate())</span>@if (Model.CurrentWorkOrderStateHistory.WorkOrderStateHistoryStatus != null) {@Html.NBSP()<span class="StatusCode">@(Model.CurrentWorkOrderStateHistory.WorkOrderStateHistoryStatus.Code)</span>}
			</div>
			<div class="body">
				@if (Model.CurrentWorkOrderStateHistory.Comment != null) {
					<div class="MultiLine">@(Model.CurrentWorkOrderStateHistory.Comment)</div>
				}
			</div>
		</div>
		<h2>@T.Text("All History")</h2>
		<div>
			@foreach (var h in (from wsh in Model.WorkOrderStateHistoryWorkOrder
							   orderby wsh.EffectiveDate ascending
							   select wsh)) {
				<div class="viewHistoryItem">
					<div class="title">
						@(h.EffectiveDate)@Html.NBSP()@if (h.User != null && h.User.Contact != null) {@(h.User.Contact.Code)@Html.NBSP()}<span class="StateCode">@(h.WorkOrderState.Code.Translate())</span>@if (h.WorkOrderStateHistoryStatus != null) {@Html.NBSP()<span class="StatusCode">@(h.WorkOrderStateHistoryStatus.Code)</span>}
					</div>
					<div class="body">
						@if (h.Comment != null) {
							<div class="MultiLine">@(h.Comment)</div>
						}
					</div>
				</div>
			}
		</div>
	</div>

	@if (Model.Resources.Count > 0) {
		<h3 id="Resources">@(T.Text("Resources"))</h3>
		using (Html.BeginForm("Actualize", "WorkOrder")) {
			@Html.AntiForgeryToken()
			bool SelfAssignView = (bool)ViewData["UnAssigned"];
			<fieldset>
				@(Html.Hidden("OriginalValuesModel", SerializationUtils.Serialize(Model.Resources)))
				@(Html.Hidden("WorkOrderID", ViewData["WorkOrderID"]))
				@foreach (var item in Model.Resources) {
					string checkId = String.Format("CheckBox_{0}", item.Id);
					string inputId = String.Format("Input_{0}", item.Id);
				<div class="viewPanel">
					@(Html.WOResourceIdentifier(item.ResourceIdentification))
					@if (item.ResourceIdentification.QuantityOnHand.HasValue) {
						@(Html.LabelValueRow(T.Text("On Hand"), Thinkage.Libraries.TypeInfo.IntegralTypeInfo.Universe, item.ResourceIdentification.QuantityOnHand.Value))
					}
					@(Html.LabelValueRow(T.Text("Demanded"), Thinkage.Libraries.TypeInfo.StringTypeInfo.Universe, item.Quantity))
					@(Html.LabelValueRow(T.Text("Actual"), Thinkage.Libraries.TypeInfo.StringTypeInfo.Universe, item.ActualQuantity))
					@(Html.LabelValueRow(T.Text("Remaining"), Thinkage.Libraries.TypeInfo.StringTypeInfo.Universe, item.RemainingToActualize))
					@if (!SelfAssignView && item.CanBeActualized && Model.CurrentWorkOrderStateHistory.WorkOrderState.FilterAsOpen) {
						<div class="ResourceRow">
							<div class="ResourceLabel">@T.Text("Actualize")</div>
							<div class="ResourceValue">@(Html.TextBox(inputId, item.RemainingToActualize, item.InputAttributes))@(Html.ValidationMessage(inputId))</div>
							<div class="ResourceCheckbox">@Html.CheckBox(checkId)</div>
						</div>
					}
				</div>
				}
				@if (Model.CurrentWorkOrderStateHistory.WorkOrderState.FilterAsOpen && !SelfAssignView) {
					var whyCantWe = Model.CannotActualizeBecause;
					if (whyCantWe == null) {
						<p><input type="submit" value="@(T.Text("Actualize Resources"))" /></p>
					}
					else {
						<p>@T.Text("Actualize Resources is disabled.")<br />@whyCantWe</p>
					}
				}
			</fieldset>
		}
	}
}
@section BackToContent {
	@(Html.BackOperation(T.Text("Back to List"), TempData))
}
@section scripts {
	<script>
		$(function () {
			$("input[type='text']").focus(function () {
				$(this).css("background-color", "yellow");
				var inputId = $(this).attr("id");
				var checkId = inputId.replace(/Input_/gi, "CheckBox_");
				var selector = "input[id='" + checkId + "']";
				$(selector).attr("checked", "true");
			});
			$("input[type='text']").blur(function () {
				$(this).css("background-color", "white");
			});
			$(".selector").accordion({ header: "h2" });
			$("#History").accordion({
				collapsible: true,
				active: 0,
				heightStyle: "content"
			});
		});
	</script>
}


