


	
	
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//		Template file LINQGenerationTemplate.xml
//		Vault version 30
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Thinkage.MainBoss.WebAccess.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;

	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Master")]
	public partial class WorkOrderDataContext : System.Data.Linq.DataContext
	{
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

	#region Extensibility Method Definitions
	partial void OnCreated();
	partial void InsertWorkOrderAssignment(WorkOrderEntities.WorkOrderAssignment instance);
	partial void UpdateWorkOrderAssignment(WorkOrderEntities.WorkOrderAssignment instance);
	partial void DeleteWorkOrderAssignment(WorkOrderEntities.WorkOrderAssignment instance);
	partial void InsertWorkOrderTemplate(WorkOrderEntities.WorkOrderTemplate instance);
	partial void UpdateWorkOrderTemplate(WorkOrderEntities.WorkOrderTemplate instance);
	partial void DeleteWorkOrderTemplate(WorkOrderEntities.WorkOrderTemplate instance);
	partial void InsertRequestState(WorkOrderEntities.RequestState instance);
	partial void UpdateRequestState(WorkOrderEntities.RequestState instance);
	partial void DeleteRequestState(WorkOrderEntities.RequestState instance);
	partial void InsertRequestStateHistory(WorkOrderEntities.RequestStateHistory instance);
	partial void UpdateRequestStateHistory(WorkOrderEntities.RequestStateHistory instance);
	partial void DeleteRequestStateHistory(WorkOrderEntities.RequestStateHistory instance);
	partial void InsertPostalAddress(WorkOrderEntities.PostalAddress instance);
	partial void UpdatePostalAddress(WorkOrderEntities.PostalAddress instance);
	partial void DeletePostalAddress(WorkOrderEntities.PostalAddress instance);
	partial void InsertTemporaryStorage(WorkOrderEntities.TemporaryStorage instance);
	partial void UpdateTemporaryStorage(WorkOrderEntities.TemporaryStorage instance);
	partial void DeleteTemporaryStorage(WorkOrderEntities.TemporaryStorage instance);
	partial void InsertTemplateTemporaryStorage(WorkOrderEntities.TemplateTemporaryStorage instance);
	partial void UpdateTemplateTemporaryStorage(WorkOrderEntities.TemplateTemporaryStorage instance);
	partial void DeleteTemplateTemporaryStorage(WorkOrderEntities.TemplateTemporaryStorage instance);
	partial void InsertWorkOrderStateTransition(WorkOrderEntities.WorkOrderStateTransition instance);
	partial void UpdateWorkOrderStateTransition(WorkOrderEntities.WorkOrderStateTransition instance);
	partial void DeleteWorkOrderStateTransition(WorkOrderEntities.WorkOrderStateTransition instance);
	partial void InsertWorkOrderState(WorkOrderEntities.WorkOrderState instance);
	partial void UpdateWorkOrderState(WorkOrderEntities.WorkOrderState instance);
	partial void DeleteWorkOrderState(WorkOrderEntities.WorkOrderState instance);
	partial void InsertWorkOrderAssignmentAll(WorkOrderEntities.WorkOrderAssignmentAll instance);
	partial void UpdateWorkOrderAssignmentAll(WorkOrderEntities.WorkOrderAssignmentAll instance);
	partial void DeleteWorkOrderAssignmentAll(WorkOrderEntities.WorkOrderAssignmentAll instance);
	partial void InsertWorkOrderAssignee(WorkOrderEntities.WorkOrderAssignee instance);
	partial void UpdateWorkOrderAssignee(WorkOrderEntities.WorkOrderAssignee instance);
	partial void DeleteWorkOrderAssignee(WorkOrderEntities.WorkOrderAssignee instance);
	partial void InsertWorkOrder(WorkOrderEntities.WorkOrder instance);
	partial void UpdateWorkOrder(WorkOrderEntities.WorkOrder instance);
	partial void DeleteWorkOrder(WorkOrderEntities.WorkOrder instance);
	partial void InsertContact(WorkOrderEntities.Contact instance);
	partial void UpdateContact(WorkOrderEntities.Contact instance);
	partial void DeleteContact(WorkOrderEntities.Contact instance);
	partial void InsertWorkOrderAssignmentByAssignee(WorkOrderEntities.WorkOrderAssignmentByAssignee instance);
	partial void UpdateWorkOrderAssignmentByAssignee(WorkOrderEntities.WorkOrderAssignmentByAssignee instance);
	partial void DeleteWorkOrderAssignmentByAssignee(WorkOrderEntities.WorkOrderAssignmentByAssignee instance);
	partial void InsertWorkOrderStateHistory(WorkOrderEntities.WorkOrderStateHistory instance);
	partial void UpdateWorkOrderStateHistory(WorkOrderEntities.WorkOrderStateHistory instance);
	partial void DeleteWorkOrderStateHistory(WorkOrderEntities.WorkOrderStateHistory instance);
	partial void InsertLocation(WorkOrderEntities.Location instance);
	partial void UpdateLocation(WorkOrderEntities.Location instance);
	partial void DeleteLocation(WorkOrderEntities.Location instance);
	partial void InsertRequestor(WorkOrderEntities.Requestor instance);
	partial void UpdateRequestor(WorkOrderEntities.Requestor instance);
	partial void DeleteRequestor(WorkOrderEntities.Requestor instance);
	partial void InsertWorkCategory(WorkOrderEntities.WorkCategory instance);
	partial void UpdateWorkCategory(WorkOrderEntities.WorkCategory instance);
	partial void DeleteWorkCategory(WorkOrderEntities.WorkCategory instance);
	partial void InsertWorkOrderExpenseModel(WorkOrderEntities.WorkOrderExpenseModel instance);
	partial void UpdateWorkOrderExpenseModel(WorkOrderEntities.WorkOrderExpenseModel instance);
	partial void DeleteWorkOrderExpenseModel(WorkOrderEntities.WorkOrderExpenseModel instance);
	partial void InsertAccessCode(WorkOrderEntities.AccessCode instance);
	partial void UpdateAccessCode(WorkOrderEntities.AccessCode instance);
	partial void DeleteAccessCode(WorkOrderEntities.AccessCode instance);
	partial void InsertProject(WorkOrderEntities.Project instance);
	partial void UpdateProject(WorkOrderEntities.Project instance);
	partial void DeleteProject(WorkOrderEntities.Project instance);
	partial void InsertWorkOrderPriority(WorkOrderEntities.WorkOrderPriority instance);
	partial void UpdateWorkOrderPriority(WorkOrderEntities.WorkOrderPriority instance);
	partial void DeleteWorkOrderPriority(WorkOrderEntities.WorkOrderPriority instance);
	partial void InsertCloseCode(WorkOrderEntities.CloseCode instance);
	partial void UpdateCloseCode(WorkOrderEntities.CloseCode instance);
	partial void DeleteCloseCode(WorkOrderEntities.CloseCode instance);
	partial void InsertPMGenerationBatch(WorkOrderEntities.PMGenerationBatch instance);
	partial void UpdatePMGenerationBatch(WorkOrderEntities.PMGenerationBatch instance);
	partial void DeletePMGenerationBatch(WorkOrderEntities.PMGenerationBatch instance);
	partial void InsertActualItemLocation(WorkOrderEntities.ActualItemLocation instance);
	partial void UpdateActualItemLocation(WorkOrderEntities.ActualItemLocation instance);
	partial void DeleteActualItemLocation(WorkOrderEntities.ActualItemLocation instance);
	partial void InsertItemLocation(WorkOrderEntities.ItemLocation instance);
	partial void UpdateItemLocation(WorkOrderEntities.ItemLocation instance);
	partial void DeleteItemLocation(WorkOrderEntities.ItemLocation instance);
	partial void InsertDemand(WorkOrderEntities.Demand instance);
	partial void UpdateDemand(WorkOrderEntities.Demand instance);
	partial void DeleteDemand(WorkOrderEntities.Demand instance);
	partial void InsertLocationContainment(WorkOrderEntities.LocationContainment instance);
	partial void UpdateLocationContainment(WorkOrderEntities.LocationContainment instance);
	partial void DeleteLocationContainment(WorkOrderEntities.LocationContainment instance);
	partial void InsertRelativeLocation(WorkOrderEntities.RelativeLocation instance);
	partial void UpdateRelativeLocation(WorkOrderEntities.RelativeLocation instance);
	partial void DeleteRelativeLocation(WorkOrderEntities.RelativeLocation instance);
	partial void InsertUser(WorkOrderEntities.User instance);
	partial void UpdateUser(WorkOrderEntities.User instance);
	partial void DeleteUser(WorkOrderEntities.User instance);
	partial void InsertWorkOrderStateHistoryStatus(WorkOrderEntities.WorkOrderStateHistoryStatus instance);
	partial void UpdateWorkOrderStateHistoryStatus(WorkOrderEntities.WorkOrderStateHistoryStatus instance);
	partial void DeleteWorkOrderStateHistoryStatus(WorkOrderEntities.WorkOrderStateHistoryStatus instance);
	partial void InsertRequest(WorkOrderEntities.Request instance);
	partial void UpdateRequest(WorkOrderEntities.Request instance);
	partial void DeleteRequest(WorkOrderEntities.Request instance);
	partial void InsertRequestedWorkOrder(WorkOrderEntities.RequestedWorkOrder instance);
	partial void UpdateRequestedWorkOrder(WorkOrderEntities.RequestedWorkOrder instance);
	partial void DeleteRequestedWorkOrder(WorkOrderEntities.RequestedWorkOrder instance);
	#endregion

		public WorkOrderDataContext() :
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Master"].ConnectionString, mappingSource)
		{
			OnCreated();
		}

		public WorkOrderDataContext(string connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public WorkOrderDataContext(System.Data.IDbConnection connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public WorkOrderDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public WorkOrderDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrderAssignment> WorkOrderAssignment
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrderAssignment>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrderTemplate> WorkOrderTemplate
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrderTemplate>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.RequestState> RequestState
		{
			get
			{
				return this.GetTable<WorkOrderEntities.RequestState>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.RequestStateHistory> RequestStateHistory
		{
			get
			{
				return this.GetTable<WorkOrderEntities.RequestStateHistory>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.PostalAddress> PostalAddress
		{
			get
			{
				return this.GetTable<WorkOrderEntities.PostalAddress>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.TemporaryStorage> TemporaryStorage
		{
			get
			{
				return this.GetTable<WorkOrderEntities.TemporaryStorage>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.TemplateTemporaryStorage> TemplateTemporaryStorage
		{
			get
			{
				return this.GetTable<WorkOrderEntities.TemplateTemporaryStorage>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrderStateTransition> WorkOrderStateTransition
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrderStateTransition>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrderState> WorkOrderState
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrderState>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrderAssignmentAll> WorkOrderAssignmentAll
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrderAssignmentAll>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrderAssignee> WorkOrderAssignee
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrderAssignee>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrder> WorkOrder
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrder>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.Contact> Contact
		{
			get
			{
				return this.GetTable<WorkOrderEntities.Contact>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrderAssignmentByAssignee> WorkOrderAssignmentByAssignee
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrderAssignmentByAssignee>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrderStateHistory> WorkOrderStateHistory
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrderStateHistory>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.Location> Location
		{
			get
			{
				return this.GetTable<WorkOrderEntities.Location>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.Requestor> Requestor
		{
			get
			{
				return this.GetTable<WorkOrderEntities.Requestor>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkCategory> WorkCategory
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkCategory>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrderExpenseModel> WorkOrderExpenseModel
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrderExpenseModel>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.AccessCode> AccessCode
		{
			get
			{
				return this.GetTable<WorkOrderEntities.AccessCode>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.Project> Project
		{
			get
			{
				return this.GetTable<WorkOrderEntities.Project>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrderPriority> WorkOrderPriority
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrderPriority>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.CloseCode> CloseCode
		{
			get
			{
				return this.GetTable<WorkOrderEntities.CloseCode>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.PMGenerationBatch> PMGenerationBatch
		{
			get
			{
				return this.GetTable<WorkOrderEntities.PMGenerationBatch>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.ActualItemLocation> ActualItemLocation
		{
			get
			{
				return this.GetTable<WorkOrderEntities.ActualItemLocation>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.ItemLocation> ItemLocation
		{
			get
			{
				return this.GetTable<WorkOrderEntities.ItemLocation>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.Demand> Demand
		{
			get
			{
				return this.GetTable<WorkOrderEntities.Demand>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.LocationContainment> LocationContainment
		{
			get
			{
				return this.GetTable<WorkOrderEntities.LocationContainment>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.RelativeLocation> RelativeLocation
		{
			get
			{
				return this.GetTable<WorkOrderEntities.RelativeLocation>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.User> User
		{
			get
			{
				return this.GetTable<WorkOrderEntities.User>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.WorkOrderStateHistoryStatus> WorkOrderStateHistoryStatus
		{
			get
			{
				return this.GetTable<WorkOrderEntities.WorkOrderStateHistoryStatus>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.Request> Request
		{
			get
			{
				return this.GetTable<WorkOrderEntities.Request>();
			}
		}
		public System.Data.Linq.Table<WorkOrderEntities.RequestedWorkOrder> RequestedWorkOrder
		{
			get
			{
				return this.GetTable<WorkOrderEntities.RequestedWorkOrder>();
			}
		}
  
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.[_vgetDBVersion]", IsComposable=true)]
		public string _vgetDBVersion()
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
  
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.[_vgetWOSequence]", IsComposable=true)]
		public System.Int64 _vgetWOSequence()
		{
			return ((System.Int64)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
  
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.[_vgetWOSequenceFormat]", IsComposable=true)]
		public string _vgetWOSequenceFormat()
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
  
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.[_vgetWODefaultDuration]", IsComposable=true)]
		public System.DateTime? _vgetWODefaultDuration()
		{
			return ((System.DateTime?)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
  
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.[_vgetPhonePrefix]", IsComposable=true)]
		public string _vgetPhonePrefix()
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
  
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.[_vgetManageRequestStates]", IsComposable=true)]
		public bool _vgetManageRequestStates()
		{
			return ((bool)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
  
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.[_vgetCopyWSHCommentToRSH]", IsComposable=true)]
		public bool _vgetCopyWSHCommentToRSH()
		{
			return ((bool)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
	}
}
namespace WorkOrderEntities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	using System.Runtime.CompilerServices;
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderAssignment")]
	public partial class WorkOrderAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderAssignment with labelkey='Work Order Assignment'
		static public string WorkOrderAssignmentLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Work Order Assignment").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<WorkOrderAssignmentAll> _WorkOrderAssignmentAllWorkOrderAssignment;
		private EntitySet<WorkOrderAssignmentByAssignee> _WorkOrderAssignmentByAssigneeWorkOrderAssignment;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public WorkOrderAssignment()
		{
			this._WorkOrderAssignmentAllWorkOrderAssignment = new EntitySet<WorkOrderAssignmentAll>(new Action<WorkOrderAssignmentAll>(this.attach_WorkOrderAssignmentAllWorkOrderAssignment), new Action<WorkOrderAssignmentAll>(this.detach_WorkOrderAssignmentAllWorkOrderAssignment));
			this._WorkOrderAssignmentByAssigneeWorkOrderAssignment = new EntitySet<WorkOrderAssignmentByAssignee>(new Action<WorkOrderAssignmentByAssignee>(this.attach_WorkOrderAssignmentByAssigneeWorkOrderAssignment), new Action<WorkOrderAssignmentByAssignee>(this.detach_WorkOrderAssignmentByAssigneeWorkOrderAssignment));
			OnCreated();
		}
		/// Denotes the WorkOrderAssignment's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderAssignment_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignment),Name="WorkOrderAssignment_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderAssignment_WorkOrderAssignmentAll", Storage="_WorkOrderAssignmentAllWorkOrderAssignment", ThisKey="Id", OtherKey="WorkOrderAssignmentID")]
		public EntitySet<WorkOrderAssignmentAll> WorkOrderAssignmentAllWorkOrderAssignment
		{
			get
			{
				return this._WorkOrderAssignmentAllWorkOrderAssignment;
			}
			set
			{
				this._WorkOrderAssignmentAllWorkOrderAssignment.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderAssignment_WorkOrderAssignmentByAssignee", Storage="_WorkOrderAssignmentByAssigneeWorkOrderAssignment", ThisKey="Id", OtherKey="WorkOrderAssignmentID")]
		public EntitySet<WorkOrderAssignmentByAssignee> WorkOrderAssignmentByAssigneeWorkOrderAssignment
		{
			get
			{
				return this._WorkOrderAssignmentByAssigneeWorkOrderAssignment;
			}
			set
			{
				this._WorkOrderAssignmentByAssigneeWorkOrderAssignment.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderAssignmentAllWorkOrderAssignment(WorkOrderAssignmentAll entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderAssignment = this;
		}
		private void detach_WorkOrderAssignmentAllWorkOrderAssignment(WorkOrderAssignmentAll entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderAssignment = null;
		}

		private void attach_WorkOrderAssignmentByAssigneeWorkOrderAssignment(WorkOrderAssignmentByAssignee entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderAssignment = this;
		}
		private void detach_WorkOrderAssignmentByAssigneeWorkOrderAssignment(WorkOrderAssignmentByAssignee entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderAssignment = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderTemplate")]
	public partial class WorkOrderTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderTemplate with labelkey='Task'
		static public string WorkOrderTemplateLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Task").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Object _Code;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(System.Object value);
	partial void OnCodeChanged();
	#endregion

		public WorkOrderTemplate()
		{
			OnCreated();
		}
		/// Denotes the WorkOrderTemplate's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderTemplate_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderTemplate),Name="WorkOrderTemplate_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrderTemplate's Code column with type null(nonnull) with labelkey='Code'
		static public string WorkOrderTemplate_Code{ get{return WorkOrderLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderTemplate),Name="WorkOrderTemplate_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestState")]
	public partial class RequestState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table RequestState with labelkey='Request State'
		static public string RequestStateLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Request State").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public RequestState()
		{
			OnCreated();
		}
		/// Denotes the RequestState's Id column with type id(nonnull) with labelkey='Id'
		static public string RequestState_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.RequestState),Name="RequestState_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestStateHistory")]
	public partial class RequestStateHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table RequestStateHistory with labelkey='Request State History'
		static public string RequestStateHistoryLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Request State History").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public RequestStateHistory()
		{
			OnCreated();
		}
		/// Denotes the RequestStateHistory's Id column with type id(nonnull) with labelkey='Id'
		static public string RequestStateHistory_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.RequestStateHistory),Name="RequestStateHistory_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PostalAddress")]
	public partial class PostalAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PostalAddress with labelkey='Postal Address'
		static public string PostalAddressLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Postal Address").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Object _Code;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(System.Object value);
	partial void OnCodeChanged();
	#endregion

		public PostalAddress()
		{
			OnCreated();
		}
		/// Denotes the PostalAddress's Id column with type id(nonnull) with labelkey='Id'
		static public string PostalAddress_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.PostalAddress),Name="PostalAddress_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the PostalAddress's Code column with type null(nonnull) with labelkey='Code'
		static public string PostalAddress_Code{ get{return WorkOrderLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.PostalAddress),Name="PostalAddress_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemporaryStorage")]
	public partial class TemporaryStorage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table TemporaryStorage with labelkey='Temporary Storage'
		static public string TemporaryStorageLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Temporary Storage").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Object _ContainingLocationID;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnContainingLocationIDChanging(System.Object value);
	partial void OnContainingLocationIDChanged();
	#endregion

		public TemporaryStorage()
		{
			OnCreated();
		}
		/// Denotes the TemporaryStorage's Id column with type id(nonnull) with labelkey='Id'
		static public string TemporaryStorage_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.TemporaryStorage),Name="TemporaryStorage_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the TemporaryStorage's ContainingLocationID column with type null(nonnull) with labelkey='ContainingLocationID'
		static public string TemporaryStorage_ContainingLocationID{ get{return WorkOrderLabelKdsMBLabel.K("ContainingLocationID").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.TemporaryStorage),Name="TemporaryStorage_ContainingLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainingLocationID", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object ContainingLocationID
		{
			get
			{
				return this._ContainingLocationID;
			}
			set
			{
				if ((this._ContainingLocationID != value))
				{
					this.OnContainingLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ContainingLocationID = value;
					this.SendPropertyChanged();
					this.OnContainingLocationIDChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateTemporaryStorage")]
	public partial class TemplateTemporaryStorage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table TemplateTemporaryStorage with labelkey='Task Temporary Storage'
		static public string TemplateTemporaryStorageLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Task Temporary Storage").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Object _ContainingLocationID;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnContainingLocationIDChanging(System.Object value);
	partial void OnContainingLocationIDChanged();
	#endregion

		public TemplateTemporaryStorage()
		{
			OnCreated();
		}
		/// Denotes the TemplateTemporaryStorage's Id column with type id(nonnull) with labelkey='Id'
		static public string TemplateTemporaryStorage_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.TemplateTemporaryStorage),Name="TemplateTemporaryStorage_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the TemplateTemporaryStorage's ContainingLocationID column with type null(nonnull) with labelkey='ContainingLocationID'
		static public string TemplateTemporaryStorage_ContainingLocationID{ get{return WorkOrderLabelKdsMBLabel.K("ContainingLocationID").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.TemplateTemporaryStorage),Name="TemplateTemporaryStorage_ContainingLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainingLocationID", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object ContainingLocationID
		{
			get
			{
				return this._ContainingLocationID;
			}
			set
			{
				if ((this._ContainingLocationID != value))
				{
					this.OnContainingLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ContainingLocationID = value;
					this.SendPropertyChanged();
					this.OnContainingLocationIDChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderStateTransition")]
	public partial class WorkOrderStateTransition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderStateTransition with labelkey='Work Order State Transition'
		static public string WorkOrderStateTransitionLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Work Order State Transition").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private Thinkage.Libraries.Translation.SimpleKey _Operation;
		private Thinkage.Libraries.Translation.SimpleKey _OperationHint;
		private bool _CanTransitionWithoutUI;
		private bool _CopyStatusFromPrevious;
		private System.Guid _FromStateID;
		private System.Guid _ToStateID;
		private short _Rank;
		private string _RightName;
		private EntityRef<WorkOrderState> _FromState;
		private EntityRef<WorkOrderState> _ToState;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnOperationChanging(Thinkage.Libraries.Translation.SimpleKey value);
	partial void OnOperationChanged();
	partial void OnOperationHintChanging(Thinkage.Libraries.Translation.SimpleKey value);
	partial void OnOperationHintChanged();
	partial void OnCanTransitionWithoutUIChanging(bool value);
	partial void OnCanTransitionWithoutUIChanged();
	partial void OnCopyStatusFromPreviousChanging(bool value);
	partial void OnCopyStatusFromPreviousChanged();
	partial void OnFromStateIDChanging(System.Guid value);
	partial void OnFromStateIDChanged();
	partial void OnToStateIDChanging(System.Guid value);
	partial void OnToStateIDChanged();
	partial void OnRankChanging(short value);
	partial void OnRankChanged();
	partial void OnRightNameChanging(string value);
	partial void OnRightNameChanged();
	#endregion

		public WorkOrderStateTransition()
		{
			this._FromState = default(EntityRef<WorkOrderState>);
			this._ToState = default(EntityRef<WorkOrderState>);
			OnCreated();
		}
		/// Denotes the WorkOrderStateTransition's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderStateTransition_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateTransition),Name="WorkOrderStateTransition_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateTransition's Operation column with type translationkey(nonnull, maxlines 0, maxkeylength 512) with labelkey='Operation'
		static public string WorkOrderStateTransition_Operation{ get{return WorkOrderLabelKdsMBLabel.K("Operation").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateTransition),Name="WorkOrderStateTransition_Operation")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operation", DbType="NVARCHAR(512)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public Thinkage.Libraries.Translation.SimpleKey Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged();
					this.OnOperationChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateTransition's OperationHint column with type translationkey(nonnull, maxlines 0, maxkeylength 512) with labelkey='OperationHint'
		static public string WorkOrderStateTransition_OperationHint{ get{return WorkOrderLabelKdsMBLabel.K("OperationHint").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateTransition),Name="WorkOrderStateTransition_OperationHint")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationHint", DbType="NVARCHAR(512)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public Thinkage.Libraries.Translation.SimpleKey OperationHint
		{
			get
			{
				return this._OperationHint;
			}
			set
			{
				if ((this._OperationHint != value))
				{
					this.OnOperationHintChanging(value);
					this.SendPropertyChanging();
					this._OperationHint = value;
					this.SendPropertyChanged();
					this.OnOperationHintChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateTransition's CanTransitionWithoutUI column with type bool(nonnull) with labelkey='CanTransitionWithoutUI'
		static public string WorkOrderStateTransition_CanTransitionWithoutUI{ get{return WorkOrderLabelKdsMBLabel.K("CanTransitionWithoutUI").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateTransition),Name="WorkOrderStateTransition_CanTransitionWithoutUI")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanTransitionWithoutUI", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool CanTransitionWithoutUI
		{
			get
			{
				return this._CanTransitionWithoutUI;
			}
			set
			{
				if ((this._CanTransitionWithoutUI != value))
				{
					this.OnCanTransitionWithoutUIChanging(value);
					this.SendPropertyChanging();
					this._CanTransitionWithoutUI = value;
					this.SendPropertyChanged();
					this.OnCanTransitionWithoutUIChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateTransition's CopyStatusFromPrevious column with type bool(nonnull) with labelkey='CopyStatusFromPrevious'
		static public string WorkOrderStateTransition_CopyStatusFromPrevious{ get{return WorkOrderLabelKdsMBLabel.K("CopyStatusFromPrevious").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateTransition),Name="WorkOrderStateTransition_CopyStatusFromPrevious")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CopyStatusFromPrevious", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool CopyStatusFromPrevious
		{
			get
			{
				return this._CopyStatusFromPrevious;
			}
			set
			{
				if ((this._CopyStatusFromPrevious != value))
				{
					this.OnCopyStatusFromPreviousChanging(value);
					this.SendPropertyChanging();
					this._CopyStatusFromPrevious = value;
					this.SendPropertyChanged();
					this.OnCopyStatusFromPreviousChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateTransition's FromStateID column with type link(nonnull, field WorkOrderState.Id) with labelkey='From State'
		static public string WorkOrderStateTransition_FromStateID{ get{return WorkOrderLabelKdsMBLabel.K("From State").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateTransition),Name="WorkOrderStateTransition_FromStateID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromStateID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid FromStateID
		{
			get
			{
				return this._FromStateID;
			}
			set
			{
				if ((this._FromStateID != value))
				{
					if (this._FromState.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromStateIDChanging(value);
					this.SendPropertyChanging();
					this._FromStateID = value;
					this.SendPropertyChanged();
					this.OnFromStateIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateTransition's ToStateID column with type link(nonnull, field WorkOrderState.Id) with labelkey='To State'
		static public string WorkOrderStateTransition_ToStateID{ get{return WorkOrderLabelKdsMBLabel.K("To State").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateTransition),Name="WorkOrderStateTransition_ToStateID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToStateID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ToStateID
		{
			get
			{
				return this._ToStateID;
			}
			set
			{
				if ((this._ToStateID != value))
				{
					if (this._ToState.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToStateIDChanging(value);
					this.SendPropertyChanging();
					this._ToStateID = value;
					this.SendPropertyChanged();
					this.OnToStateIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateTransition's Rank column with type integer(nonnull, 16) with labelkey='Rank'
		static public string WorkOrderStateTransition_Rank{ get{return WorkOrderLabelKdsMBLabel.K("Rank").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateTransition),Name="WorkOrderStateTransition_Rank")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="SMALLINT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public short Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged();
					this.OnRankChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateTransition's RightName column with type string(minlength 1, maxlength 100, maxlines 0, trim) with labelkey='RightName'
		static public string WorkOrderStateTransition_RightName{ get{return WorkOrderLabelKdsMBLabel.K("RightName").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateTransition),Name="WorkOrderStateTransition_RightName")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightName", DbType="NVARCHAR (100)")]
		public string RightName
		{
			get
			{
				return this._RightName;
			}
			set
			{
				if ((this._RightName != value))
				{
					this.OnRightNameChanging(value);
					this.SendPropertyChanging();
					this._RightName = value;
					this.SendPropertyChanged();
					this.OnRightNameChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FromState_WorkOrderStateTransition", Storage="_FromState", ThisKey="FromStateID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderState FromState
		{
			get
			{
				return this._FromState.Entity;
			}
			set
			{
				WorkOrderState previousValue = this._FromState.Entity;
				if (((previousValue != value)
							|| (this._FromState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FromState.Entity = null;
						previousValue.WorkOrderStateTransitionFromState.Remove(this);
					}
					this._FromState.Entity = value;
					if ((value != null))
					{
						value.WorkOrderStateTransitionFromState.Add(this);
						this._FromStateID = value.Id;
					}
					else
					{
						this._FromStateID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToState_WorkOrderStateTransition", Storage="_ToState", ThisKey="ToStateID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderState ToState
		{
			get
			{
				return this._ToState.Entity;
			}
			set
			{
				WorkOrderState previousValue = this._ToState.Entity;
				if (((previousValue != value)
							|| (this._ToState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToState.Entity = null;
						previousValue.WorkOrderStateTransitionToState.Remove(this);
					}
					this._ToState.Entity = value;
					if ((value != null))
					{
						value.WorkOrderStateTransitionToState.Add(this);
						this._ToStateID = value.Id;
					}
					else
					{
						this._ToStateID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderState")]
	public partial class WorkOrderState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderState with labelkey='Work Order State'
		static public string WorkOrderStateLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Work Order State").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private Thinkage.Libraries.Translation.SimpleKey _Code;
		private System.DateTime? _Hidden;
		private Thinkage.Libraries.Translation.SimpleKey _Desc;
		private string _Comment;
		private bool _DemandCountsActive;
		private bool _TemporaryStorageActive;
		private bool _CanModifyDemands;
		private bool _CanModifyActuals;
		private bool _CanModifyPOLines;
		private bool _CanModifyChargebacks;
		private bool _CanModifyChargebackLines;
		private bool _CanModifyDefinitionFields;
		private bool _CanModifyOperationalFields;
		private bool _AffectsFuturePMGeneration;
		private bool _FilterAsOpen;
		private bool _FilterAsClosed;
		private bool _FilterAsVoid;
		private bool _FilterAsDraft;
		private EntitySet<WorkOrderStateTransition> _WorkOrderStateTransitionFromState;
		private EntitySet<WorkOrderStateTransition> _WorkOrderStateTransitionToState;
		private EntitySet<WorkOrderStateHistory> _WorkOrderStateHistoryWorkOrderState;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(Thinkage.Libraries.Translation.SimpleKey value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(Thinkage.Libraries.Translation.SimpleKey value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnDemandCountsActiveChanging(bool value);
	partial void OnDemandCountsActiveChanged();
	partial void OnTemporaryStorageActiveChanging(bool value);
	partial void OnTemporaryStorageActiveChanged();
	partial void OnCanModifyDemandsChanging(bool value);
	partial void OnCanModifyDemandsChanged();
	partial void OnCanModifyActualsChanging(bool value);
	partial void OnCanModifyActualsChanged();
	partial void OnCanModifyPOLinesChanging(bool value);
	partial void OnCanModifyPOLinesChanged();
	partial void OnCanModifyChargebacksChanging(bool value);
	partial void OnCanModifyChargebacksChanged();
	partial void OnCanModifyChargebackLinesChanging(bool value);
	partial void OnCanModifyChargebackLinesChanged();
	partial void OnCanModifyDefinitionFieldsChanging(bool value);
	partial void OnCanModifyDefinitionFieldsChanged();
	partial void OnCanModifyOperationalFieldsChanging(bool value);
	partial void OnCanModifyOperationalFieldsChanged();
	partial void OnAffectsFuturePMGenerationChanging(bool value);
	partial void OnAffectsFuturePMGenerationChanged();
	partial void OnFilterAsOpenChanging(bool value);
	partial void OnFilterAsOpenChanged();
	partial void OnFilterAsClosedChanging(bool value);
	partial void OnFilterAsClosedChanged();
	partial void OnFilterAsVoidChanging(bool value);
	partial void OnFilterAsVoidChanged();
	partial void OnFilterAsDraftChanging(bool value);
	partial void OnFilterAsDraftChanged();
	#endregion

		public WorkOrderState()
		{
			this._WorkOrderStateTransitionFromState = new EntitySet<WorkOrderStateTransition>(new Action<WorkOrderStateTransition>(this.attach_WorkOrderStateTransitionFromState), new Action<WorkOrderStateTransition>(this.detach_WorkOrderStateTransitionFromState));
			this._WorkOrderStateTransitionToState = new EntitySet<WorkOrderStateTransition>(new Action<WorkOrderStateTransition>(this.attach_WorkOrderStateTransitionToState), new Action<WorkOrderStateTransition>(this.detach_WorkOrderStateTransitionToState));
			this._WorkOrderStateHistoryWorkOrderState = new EntitySet<WorkOrderStateHistory>(new Action<WorkOrderStateHistory>(this.attach_WorkOrderStateHistoryWorkOrderState), new Action<WorkOrderStateHistory>(this.detach_WorkOrderStateHistoryWorkOrderState));
			OnCreated();
		}
		/// Denotes the WorkOrderState's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderState_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's Code column with type translationkey(nonnull, maxlines 0, maxkeylength 512) with labelkey='Code'
		static public string WorkOrderState_Code{ get{return WorkOrderLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR(512)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public Thinkage.Libraries.Translation.SimpleKey Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string WorkOrderState_Hidden{ get{return WorkOrderLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's Desc column with type translationkey(maxlines 0, maxkeylength 512) with labelkey='Desc'
		static public string WorkOrderState_Desc{ get{return WorkOrderLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR(512)")]
		public Thinkage.Libraries.Translation.SimpleKey Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string WorkOrderState_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's DemandCountsActive column with type bool(nonnull) with labelkey='DemandCountsActive'
		static public string WorkOrderState_DemandCountsActive{ get{return WorkOrderLabelKdsMBLabel.K("DemandCountsActive").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_DemandCountsActive")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandCountsActive", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool DemandCountsActive
		{
			get
			{
				return this._DemandCountsActive;
			}
			set
			{
				if ((this._DemandCountsActive != value))
				{
					this.OnDemandCountsActiveChanging(value);
					this.SendPropertyChanging();
					this._DemandCountsActive = value;
					this.SendPropertyChanged();
					this.OnDemandCountsActiveChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's TemporaryStorageActive column with type bool(nonnull) with labelkey='TemporaryStorageActive'
		static public string WorkOrderState_TemporaryStorageActive{ get{return WorkOrderLabelKdsMBLabel.K("TemporaryStorageActive").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_TemporaryStorageActive")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemporaryStorageActive", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool TemporaryStorageActive
		{
			get
			{
				return this._TemporaryStorageActive;
			}
			set
			{
				if ((this._TemporaryStorageActive != value))
				{
					this.OnTemporaryStorageActiveChanging(value);
					this.SendPropertyChanging();
					this._TemporaryStorageActive = value;
					this.SendPropertyChanged();
					this.OnTemporaryStorageActiveChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's CanModifyDemands column with type bool(nonnull) with labelkey='CanModifyDemands'
		static public string WorkOrderState_CanModifyDemands{ get{return WorkOrderLabelKdsMBLabel.K("CanModifyDemands").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_CanModifyDemands")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanModifyDemands", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool CanModifyDemands
		{
			get
			{
				return this._CanModifyDemands;
			}
			set
			{
				if ((this._CanModifyDemands != value))
				{
					this.OnCanModifyDemandsChanging(value);
					this.SendPropertyChanging();
					this._CanModifyDemands = value;
					this.SendPropertyChanged();
					this.OnCanModifyDemandsChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's CanModifyActuals column with type bool(nonnull) with labelkey='CanModifyActuals'
		static public string WorkOrderState_CanModifyActuals{ get{return WorkOrderLabelKdsMBLabel.K("CanModifyActuals").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_CanModifyActuals")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanModifyActuals", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool CanModifyActuals
		{
			get
			{
				return this._CanModifyActuals;
			}
			set
			{
				if ((this._CanModifyActuals != value))
				{
					this.OnCanModifyActualsChanging(value);
					this.SendPropertyChanging();
					this._CanModifyActuals = value;
					this.SendPropertyChanged();
					this.OnCanModifyActualsChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's CanModifyPOLines column with type bool(nonnull) with labelkey='CanModifyPOLines'
		static public string WorkOrderState_CanModifyPOLines{ get{return WorkOrderLabelKdsMBLabel.K("CanModifyPOLines").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_CanModifyPOLines")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanModifyPOLines", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool CanModifyPOLines
		{
			get
			{
				return this._CanModifyPOLines;
			}
			set
			{
				if ((this._CanModifyPOLines != value))
				{
					this.OnCanModifyPOLinesChanging(value);
					this.SendPropertyChanging();
					this._CanModifyPOLines = value;
					this.SendPropertyChanged();
					this.OnCanModifyPOLinesChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's CanModifyChargebacks column with type bool(nonnull) with labelkey='CanModifyChargebacks'
		static public string WorkOrderState_CanModifyChargebacks{ get{return WorkOrderLabelKdsMBLabel.K("CanModifyChargebacks").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_CanModifyChargebacks")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanModifyChargebacks", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool CanModifyChargebacks
		{
			get
			{
				return this._CanModifyChargebacks;
			}
			set
			{
				if ((this._CanModifyChargebacks != value))
				{
					this.OnCanModifyChargebacksChanging(value);
					this.SendPropertyChanging();
					this._CanModifyChargebacks = value;
					this.SendPropertyChanged();
					this.OnCanModifyChargebacksChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's CanModifyChargebackLines column with type bool(nonnull) with labelkey='CanModifyChargebackLines'
		static public string WorkOrderState_CanModifyChargebackLines{ get{return WorkOrderLabelKdsMBLabel.K("CanModifyChargebackLines").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_CanModifyChargebackLines")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanModifyChargebackLines", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool CanModifyChargebackLines
		{
			get
			{
				return this._CanModifyChargebackLines;
			}
			set
			{
				if ((this._CanModifyChargebackLines != value))
				{
					this.OnCanModifyChargebackLinesChanging(value);
					this.SendPropertyChanging();
					this._CanModifyChargebackLines = value;
					this.SendPropertyChanged();
					this.OnCanModifyChargebackLinesChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's CanModifyDefinitionFields column with type bool(nonnull) with labelkey='CanModifyDefinitionFields'
		static public string WorkOrderState_CanModifyDefinitionFields{ get{return WorkOrderLabelKdsMBLabel.K("CanModifyDefinitionFields").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_CanModifyDefinitionFields")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanModifyDefinitionFields", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool CanModifyDefinitionFields
		{
			get
			{
				return this._CanModifyDefinitionFields;
			}
			set
			{
				if ((this._CanModifyDefinitionFields != value))
				{
					this.OnCanModifyDefinitionFieldsChanging(value);
					this.SendPropertyChanging();
					this._CanModifyDefinitionFields = value;
					this.SendPropertyChanged();
					this.OnCanModifyDefinitionFieldsChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's CanModifyOperationalFields column with type bool(nonnull) with labelkey='CanModifyOperationalFields'
		static public string WorkOrderState_CanModifyOperationalFields{ get{return WorkOrderLabelKdsMBLabel.K("CanModifyOperationalFields").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_CanModifyOperationalFields")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanModifyOperationalFields", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool CanModifyOperationalFields
		{
			get
			{
				return this._CanModifyOperationalFields;
			}
			set
			{
				if ((this._CanModifyOperationalFields != value))
				{
					this.OnCanModifyOperationalFieldsChanging(value);
					this.SendPropertyChanging();
					this._CanModifyOperationalFields = value;
					this.SendPropertyChanged();
					this.OnCanModifyOperationalFieldsChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's AffectsFuturePMGeneration column with type bool(nonnull) with labelkey='AffectsFuturePMGeneration'
		static public string WorkOrderState_AffectsFuturePMGeneration{ get{return WorkOrderLabelKdsMBLabel.K("AffectsFuturePMGeneration").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_AffectsFuturePMGeneration")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffectsFuturePMGeneration", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool AffectsFuturePMGeneration
		{
			get
			{
				return this._AffectsFuturePMGeneration;
			}
			set
			{
				if ((this._AffectsFuturePMGeneration != value))
				{
					this.OnAffectsFuturePMGenerationChanging(value);
					this.SendPropertyChanging();
					this._AffectsFuturePMGeneration = value;
					this.SendPropertyChanged();
					this.OnAffectsFuturePMGenerationChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's FilterAsOpen column with type bool(nonnull) with labelkey='FilterAsOpen'
		static public string WorkOrderState_FilterAsOpen{ get{return WorkOrderLabelKdsMBLabel.K("FilterAsOpen").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_FilterAsOpen")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterAsOpen", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool FilterAsOpen
		{
			get
			{
				return this._FilterAsOpen;
			}
			set
			{
				if ((this._FilterAsOpen != value))
				{
					this.OnFilterAsOpenChanging(value);
					this.SendPropertyChanging();
					this._FilterAsOpen = value;
					this.SendPropertyChanged();
					this.OnFilterAsOpenChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's FilterAsClosed column with type bool(nonnull) with labelkey='FilterAsClosed'
		static public string WorkOrderState_FilterAsClosed{ get{return WorkOrderLabelKdsMBLabel.K("FilterAsClosed").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_FilterAsClosed")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterAsClosed", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool FilterAsClosed
		{
			get
			{
				return this._FilterAsClosed;
			}
			set
			{
				if ((this._FilterAsClosed != value))
				{
					this.OnFilterAsClosedChanging(value);
					this.SendPropertyChanging();
					this._FilterAsClosed = value;
					this.SendPropertyChanged();
					this.OnFilterAsClosedChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's FilterAsVoid column with type bool(nonnull) with labelkey='FilterAsVoid'
		static public string WorkOrderState_FilterAsVoid{ get{return WorkOrderLabelKdsMBLabel.K("FilterAsVoid").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_FilterAsVoid")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterAsVoid", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool FilterAsVoid
		{
			get
			{
				return this._FilterAsVoid;
			}
			set
			{
				if ((this._FilterAsVoid != value))
				{
					this.OnFilterAsVoidChanging(value);
					this.SendPropertyChanging();
					this._FilterAsVoid = value;
					this.SendPropertyChanged();
					this.OnFilterAsVoidChanged();
				}
			}
		}
		/// Denotes the WorkOrderState's FilterAsDraft column with type bool(nonnull) with labelkey='FilterAsDraft'
		static public string WorkOrderState_FilterAsDraft{ get{return WorkOrderLabelKdsMBLabel.K("FilterAsDraft").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderState),Name="WorkOrderState_FilterAsDraft")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterAsDraft", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool FilterAsDraft
		{
			get
			{
				return this._FilterAsDraft;
			}
			set
			{
				if ((this._FilterAsDraft != value))
				{
					this.OnFilterAsDraftChanging(value);
					this.SendPropertyChanging();
					this._FilterAsDraft = value;
					this.SendPropertyChanged();
					this.OnFilterAsDraftChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderState_WorkOrderStateTransition", Storage="_WorkOrderStateTransitionFromState", ThisKey="Id", OtherKey="FromStateID")]
		public EntitySet<WorkOrderStateTransition> WorkOrderStateTransitionFromState
		{
			get
			{
				return this._WorkOrderStateTransitionFromState;
			}
			set
			{
				this._WorkOrderStateTransitionFromState.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderState_WorkOrderStateTransition", Storage="_WorkOrderStateTransitionToState", ThisKey="Id", OtherKey="ToStateID")]
		public EntitySet<WorkOrderStateTransition> WorkOrderStateTransitionToState
		{
			get
			{
				return this._WorkOrderStateTransitionToState;
			}
			set
			{
				this._WorkOrderStateTransitionToState.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderState_WorkOrderStateHistory", Storage="_WorkOrderStateHistoryWorkOrderState", ThisKey="Id", OtherKey="WorkOrderStateID")]
		public EntitySet<WorkOrderStateHistory> WorkOrderStateHistoryWorkOrderState
		{
			get
			{
				return this._WorkOrderStateHistoryWorkOrderState;
			}
			set
			{
				this._WorkOrderStateHistoryWorkOrderState.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderStateTransitionFromState(WorkOrderStateTransition entity)
		{
			this.SendPropertyChanging();
			entity.FromState = this;
		}
		private void detach_WorkOrderStateTransitionFromState(WorkOrderStateTransition entity)
		{
			this.SendPropertyChanging();
			entity.FromState = null;
		}

		private void attach_WorkOrderStateTransitionToState(WorkOrderStateTransition entity)
		{
			this.SendPropertyChanging();
			entity.ToState = this;
		}
		private void detach_WorkOrderStateTransitionToState(WorkOrderStateTransition entity)
		{
			this.SendPropertyChanging();
			entity.ToState = null;
		}

		private void attach_WorkOrderStateHistoryWorkOrderState(WorkOrderStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderState = this;
		}
		private void detach_WorkOrderStateHistoryWorkOrderState(WorkOrderStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderState = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderAssignmentAll")]
	public partial class WorkOrderAssignmentAll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderAssignmentAll with labelkey=''
		static public string WorkOrderAssignmentAllLabelKey { get{return WorkOrderLabelKdsMBLabel.K("").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid? _WorkOrderAssignmentID;
		private System.Guid _WorkOrderAssigneeID;
		private System.Guid _WorkOrderID;
		private EntityRef<WorkOrderAssignment> _WorkOrderAssignment;
		private EntityRef<WorkOrderAssignee> _WorkOrderAssignee;
		private EntityRef<WorkOrder> _WorkOrder;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnWorkOrderAssignmentIDChanging(System.Guid? value);
	partial void OnWorkOrderAssignmentIDChanged();
	partial void OnWorkOrderAssigneeIDChanging(System.Guid value);
	partial void OnWorkOrderAssigneeIDChanged();
	partial void OnWorkOrderIDChanging(System.Guid value);
	partial void OnWorkOrderIDChanged();
	#endregion

		public WorkOrderAssignmentAll()
		{
			this._WorkOrderAssignment = default(EntityRef<WorkOrderAssignment>);
			this._WorkOrderAssignee = default(EntityRef<WorkOrderAssignee>);
			this._WorkOrder = default(EntityRef<WorkOrder>);
			OnCreated();
		}
		/// Denotes the WorkOrderAssignmentAll's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderAssignmentAll_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignmentAll),Name="WorkOrderAssignmentAll_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrderAssignmentAll's WorkOrderAssignmentID column with type link(field WorkOrderAssignment.Id) with labelkey=''
		static public string WorkOrderAssignmentAll_WorkOrderAssignmentID{ get{return WorkOrderLabelKdsMBLabel.K("").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignmentAll),Name="WorkOrderAssignmentAll_WorkOrderAssignmentID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderAssignmentID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? WorkOrderAssignmentID
		{
			get
			{
				return this._WorkOrderAssignmentID;
			}
			set
			{
				if ((this._WorkOrderAssignmentID != value))
				{
					if (this._WorkOrderAssignment.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderAssignmentID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderAssignmentIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderAssignmentAll's WorkOrderAssigneeID column with type link(nonnull, field WorkOrderAssignee.Id) with labelkey='Assignee'
		static public string WorkOrderAssignmentAll_WorkOrderAssigneeID{ get{return WorkOrderLabelKdsMBLabel.K("Assignee").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignmentAll),Name="WorkOrderAssignmentAll_WorkOrderAssigneeID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderAssigneeID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid WorkOrderAssigneeID
		{
			get
			{
				return this._WorkOrderAssigneeID;
			}
			set
			{
				if ((this._WorkOrderAssigneeID != value))
				{
					if (this._WorkOrderAssignee.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderAssigneeIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderAssigneeID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderAssigneeIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderAssignmentAll's WorkOrderID column with type link(nonnull, field WorkOrder.Id) with labelkey=''
		static public string WorkOrderAssignmentAll_WorkOrderID{ get{return WorkOrderLabelKdsMBLabel.K("").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignmentAll),Name="WorkOrderAssignmentAll_WorkOrderID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid WorkOrderID
		{
			get
			{
				return this._WorkOrderID;
			}
			set
			{
				if ((this._WorkOrderID != value))
				{
					if (this._WorkOrder.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderAssignment_WorkOrderAssignmentAll", Storage="_WorkOrderAssignment", ThisKey="WorkOrderAssignmentID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderAssignment WorkOrderAssignment
		{
			get
			{
				return this._WorkOrderAssignment.Entity;
			}
			set
			{
				WorkOrderAssignment previousValue = this._WorkOrderAssignment.Entity;
				if (((previousValue != value)
							|| (this._WorkOrderAssignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrderAssignment.Entity = null;
						previousValue.WorkOrderAssignmentAllWorkOrderAssignment.Remove(this);
					}
					this._WorkOrderAssignment.Entity = value;
					if ((value != null))
					{
						value.WorkOrderAssignmentAllWorkOrderAssignment.Add(this);
						this._WorkOrderAssignmentID = value.Id;
					}
					else
					{
						this._WorkOrderAssignmentID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderAssignee_WorkOrderAssignmentAll", Storage="_WorkOrderAssignee", ThisKey="WorkOrderAssigneeID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderAssignee WorkOrderAssignee
		{
			get
			{
				return this._WorkOrderAssignee.Entity;
			}
			set
			{
				WorkOrderAssignee previousValue = this._WorkOrderAssignee.Entity;
				if (((previousValue != value)
							|| (this._WorkOrderAssignee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrderAssignee.Entity = null;
						previousValue.WorkOrderAssignmentAllWorkOrderAssignee.Remove(this);
					}
					this._WorkOrderAssignee.Entity = value;
					if ((value != null))
					{
						value.WorkOrderAssignmentAllWorkOrderAssignee.Add(this);
						this._WorkOrderAssigneeID = value.Id;
					}
					else
					{
						this._WorkOrderAssigneeID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrderAssignmentAll", Storage="_WorkOrder", ThisKey="WorkOrderID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrder WorkOrder
		{
			get
			{
				return this._WorkOrder.Entity;
			}
			set
			{
				WorkOrder previousValue = this._WorkOrder.Entity;
				if (((previousValue != value)
							|| (this._WorkOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrder.Entity = null;
						previousValue.WorkOrderAssignmentAllWorkOrder.Remove(this);
					}
					this._WorkOrder.Entity = value;
					if ((value != null))
					{
						value.WorkOrderAssignmentAllWorkOrder.Add(this);
						this._WorkOrderID = value.Id;
					}
					else
					{
						this._WorkOrderID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderAssignee")]
	public partial class WorkOrderAssignee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderAssignee with labelkey='Work Order Assignee'
		static public string WorkOrderAssigneeLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Work Order Assignee").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _ContactID;
		private bool _ReceiveNotification;
		private string _Comment;
		private EntitySet<WorkOrderAssignmentAll> _WorkOrderAssignmentAllWorkOrderAssignee;
		private EntityRef<Contact> _Contact;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnContactIDChanging(System.Guid value);
	partial void OnContactIDChanged();
	partial void OnReceiveNotificationChanging(bool value);
	partial void OnReceiveNotificationChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	#endregion

		public WorkOrderAssignee()
		{
			this._WorkOrderAssignmentAllWorkOrderAssignee = new EntitySet<WorkOrderAssignmentAll>(new Action<WorkOrderAssignmentAll>(this.attach_WorkOrderAssignmentAllWorkOrderAssignee), new Action<WorkOrderAssignmentAll>(this.detach_WorkOrderAssignmentAllWorkOrderAssignee));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		/// Denotes the WorkOrderAssignee's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderAssignee_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignee),Name="WorkOrderAssignee_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrderAssignee's ContactID column with type link(nonnull, field Contact.Id) with labelkey='Contact'
		static public string WorkOrderAssignee_ContactID{ get{return WorkOrderLabelKdsMBLabel.K("Contact").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignee),Name="WorkOrderAssignee_ContactID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged();
					this.OnContactIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderAssignee's ReceiveNotification column with type bool(nonnull) with labelkey='ReceiveNotification'
		static public string WorkOrderAssignee_ReceiveNotification{ get{return WorkOrderLabelKdsMBLabel.K("ReceiveNotification").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignee),Name="WorkOrderAssignee_ReceiveNotification")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiveNotification", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool ReceiveNotification
		{
			get
			{
				return this._ReceiveNotification;
			}
			set
			{
				if ((this._ReceiveNotification != value))
				{
					this.OnReceiveNotificationChanging(value);
					this.SendPropertyChanging();
					this._ReceiveNotification = value;
					this.SendPropertyChanged();
					this.OnReceiveNotificationChanged();
				}
			}
		}
		/// Denotes the WorkOrderAssignee's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string WorkOrderAssignee_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignee),Name="WorkOrderAssignee_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderAssignee_WorkOrderAssignmentAll", Storage="_WorkOrderAssignmentAllWorkOrderAssignee", ThisKey="Id", OtherKey="WorkOrderAssigneeID")]
		public EntitySet<WorkOrderAssignmentAll> WorkOrderAssignmentAllWorkOrderAssignee
		{
			get
			{
				return this._WorkOrderAssignmentAllWorkOrderAssignee;
			}
			set
			{
				this._WorkOrderAssignmentAllWorkOrderAssignee.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_WorkOrderAssignee", Storage="_Contact", ThisKey="ContactID", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value)
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.WorkOrderAssigneeContact.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.WorkOrderAssigneeContact.Add(this);
						this._ContactID = value.Id;
					}
					else
					{
						this._ContactID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderAssignmentAllWorkOrderAssignee(WorkOrderAssignmentAll entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderAssignee = this;
		}
		private void detach_WorkOrderAssignmentAllWorkOrderAssignee(WorkOrderAssignmentAll entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderAssignee = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrder")]
	public partial class WorkOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrder with labelkey='Work Order'
		static public string WorkOrderLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Work Order").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Number;
		private System.Guid _UnitLocationID;
		private System.Guid? _PMGenerationBatchID;
		private System.Guid _CurrentWorkOrderStateHistoryID;
		private string _Subject;
		private string _Description;
		private string _ClosingComment;
		private System.Guid? _RequestorID;
		private System.Guid? _WorkCategoryID;
		private System.Guid _WorkOrderExpenseModelID;
		private System.Guid? _AccessCodeID;
		private System.Guid? _ProjectID;
		private System.Guid? _WorkOrderPriorityID;
		private System.Guid? _CloseCodeID;
		private System.DateTime? _Downtime;
		private System.DateTime _StartDateEstimate;
		private System.DateTime _EndDateEstimate;
		private System.DateTime? _WorkDueDate;
		private bool _SelectPrintFlag;
		private System.Decimal _TotalDemand;
		private System.Decimal _TotalActual;
		private bool _TemporaryStorageEmpty;
		private EntitySet<WorkOrderAssignmentAll> _WorkOrderAssignmentAllWorkOrder;
		private EntitySet<WorkOrderAssignmentByAssignee> _WorkOrderAssignmentByAssigneeWorkOrder;
		private EntitySet<WorkOrderStateHistory> _WorkOrderStateHistoryWorkOrder;
		private EntityRef<Location> _UnitLocation;
		private EntityRef<PMGenerationBatch> _PMGenerationBatch;
		private EntityRef<WorkOrderStateHistory> _CurrentWorkOrderStateHistory;
		private EntityRef<Requestor> _Requestor;
		private EntityRef<WorkCategory> _WorkCategory;
		private EntityRef<WorkOrderExpenseModel> _WorkOrderExpenseModel;
		private EntityRef<AccessCode> _AccessCode;
		private EntityRef<Project> _Project;
		private EntityRef<WorkOrderPriority> _WorkOrderPriority;
		private EntityRef<CloseCode> _CloseCode;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnNumberChanging(string value);
	partial void OnNumberChanged();
	partial void OnUnitLocationIDChanging(System.Guid value);
	partial void OnUnitLocationIDChanged();
	partial void OnPMGenerationBatchIDChanging(System.Guid? value);
	partial void OnPMGenerationBatchIDChanged();
	partial void OnCurrentWorkOrderStateHistoryIDChanging(System.Guid value);
	partial void OnCurrentWorkOrderStateHistoryIDChanged();
	partial void OnSubjectChanging(string value);
	partial void OnSubjectChanged();
	partial void OnDescriptionChanging(string value);
	partial void OnDescriptionChanged();
	partial void OnClosingCommentChanging(string value);
	partial void OnClosingCommentChanged();
	partial void OnRequestorIDChanging(System.Guid? value);
	partial void OnRequestorIDChanged();
	partial void OnWorkCategoryIDChanging(System.Guid? value);
	partial void OnWorkCategoryIDChanged();
	partial void OnWorkOrderExpenseModelIDChanging(System.Guid value);
	partial void OnWorkOrderExpenseModelIDChanged();
	partial void OnAccessCodeIDChanging(System.Guid? value);
	partial void OnAccessCodeIDChanged();
	partial void OnProjectIDChanging(System.Guid? value);
	partial void OnProjectIDChanged();
	partial void OnWorkOrderPriorityIDChanging(System.Guid? value);
	partial void OnWorkOrderPriorityIDChanged();
	partial void OnCloseCodeIDChanging(System.Guid? value);
	partial void OnCloseCodeIDChanged();
	partial void OnDowntimeChanging(System.DateTime? value);
	partial void OnDowntimeChanged();
	partial void OnStartDateEstimateChanging(System.DateTime value);
	partial void OnStartDateEstimateChanged();
	partial void OnEndDateEstimateChanging(System.DateTime value);
	partial void OnEndDateEstimateChanged();
	partial void OnWorkDueDateChanging(System.DateTime? value);
	partial void OnWorkDueDateChanged();
	partial void OnSelectPrintFlagChanging(bool value);
	partial void OnSelectPrintFlagChanged();
	partial void OnTotalDemandChanging(System.Decimal value);
	partial void OnTotalDemandChanged();
	partial void OnTotalActualChanging(System.Decimal value);
	partial void OnTotalActualChanged();
	partial void OnTemporaryStorageEmptyChanging(bool value);
	partial void OnTemporaryStorageEmptyChanged();
	#endregion

		public WorkOrder()
		{
			this._WorkOrderAssignmentAllWorkOrder = new EntitySet<WorkOrderAssignmentAll>(new Action<WorkOrderAssignmentAll>(this.attach_WorkOrderAssignmentAllWorkOrder), new Action<WorkOrderAssignmentAll>(this.detach_WorkOrderAssignmentAllWorkOrder));
			this._WorkOrderAssignmentByAssigneeWorkOrder = new EntitySet<WorkOrderAssignmentByAssignee>(new Action<WorkOrderAssignmentByAssignee>(this.attach_WorkOrderAssignmentByAssigneeWorkOrder), new Action<WorkOrderAssignmentByAssignee>(this.detach_WorkOrderAssignmentByAssigneeWorkOrder));
			this._WorkOrderStateHistoryWorkOrder = new EntitySet<WorkOrderStateHistory>(new Action<WorkOrderStateHistory>(this.attach_WorkOrderStateHistoryWorkOrder), new Action<WorkOrderStateHistory>(this.detach_WorkOrderStateHistoryWorkOrder));
			this._UnitLocation = default(EntityRef<Location>);
			this._PMGenerationBatch = default(EntityRef<PMGenerationBatch>);
			this._CurrentWorkOrderStateHistory = default(EntityRef<WorkOrderStateHistory>);
			this._Requestor = default(EntityRef<Requestor>);
			this._WorkCategory = default(EntityRef<WorkCategory>);
			this._WorkOrderExpenseModel = default(EntityRef<WorkOrderExpenseModel>);
			this._AccessCode = default(EntityRef<AccessCode>);
			this._Project = default(EntityRef<Project>);
			this._WorkOrderPriority = default(EntityRef<WorkOrderPriority>);
			this._CloseCode = default(EntityRef<CloseCode>);
			OnCreated();
		}
		/// Denotes the WorkOrder's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrder_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrder's Number column with type string(nonnull, minlength 1, maxlength 20, maxlines 0, trim) with labelkey='Number'
		static public string WorkOrder_Number{ get{return WorkOrderLabelKdsMBLabel.K("Number").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_Number")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVARCHAR (20)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged();
					this.OnNumberChanged();
				}
			}
		}
		/// Denotes the WorkOrder's UnitLocationID column with type link(nonnull, field Location.Id) with labelkey='Unit'
		static public string WorkOrder_UnitLocationID{ get{return WorkOrderLabelKdsMBLabel.K("Unit").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_UnitLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid UnitLocationID
		{
			get
			{
				return this._UnitLocationID;
			}
			set
			{
				if ((this._UnitLocationID != value))
				{
					if (this._UnitLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitLocationIDChanging(value);
					this.SendPropertyChanging();
					this._UnitLocationID = value;
					this.SendPropertyChanged();
					this.OnUnitLocationIDChanged();
				}
			}
		}
		/// Denotes the WorkOrder's PMGenerationBatchID column with type link(field PMGenerationBatch.Id) with labelkey='PMGenerationBatch'
		static public string WorkOrder_PMGenerationBatchID{ get{return WorkOrderLabelKdsMBLabel.K("PMGenerationBatch").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_PMGenerationBatchID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMGenerationBatchID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? PMGenerationBatchID
		{
			get
			{
				return this._PMGenerationBatchID;
			}
			set
			{
				if ((this._PMGenerationBatchID != value))
				{
					if (this._PMGenerationBatch.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPMGenerationBatchIDChanging(value);
					this.SendPropertyChanging();
					this._PMGenerationBatchID = value;
					this.SendPropertyChanged();
					this.OnPMGenerationBatchIDChanged();
				}
			}
		}
		/// Denotes the WorkOrder's CurrentWorkOrderStateHistoryID column with type link(nonnull, field WorkOrderStateHistory.Id) with labelkey='Current State History'
		static public string WorkOrder_CurrentWorkOrderStateHistoryID{ get{return WorkOrderLabelKdsMBLabel.K("Current State History").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_CurrentWorkOrderStateHistoryID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentWorkOrderStateHistoryID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CurrentWorkOrderStateHistoryID
		{
			get
			{
				return this._CurrentWorkOrderStateHistoryID;
			}
			set
			{
				if ((this._CurrentWorkOrderStateHistoryID != value))
				{
					if (this._CurrentWorkOrderStateHistory.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentWorkOrderStateHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentWorkOrderStateHistoryID = value;
					this.SendPropertyChanged();
					this.OnCurrentWorkOrderStateHistoryIDChanged();
				}
			}
		}
		/// Denotes the WorkOrder's Subject column with type string(nonnull, minlength 1, maxlength 100, maxlines 0, trim) with labelkey='Subject'
		static public string WorkOrder_Subject{ get{return WorkOrderLabelKdsMBLabel.K("Subject").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_Subject")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVARCHAR (100)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged();
					this.OnSubjectChanged();
				}
			}
		}
		/// Denotes the WorkOrder's Description column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Description'
		static public string WorkOrder_Description{ get{return WorkOrderLabelKdsMBLabel.K("Description").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_Description")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVARCHAR(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged();
					this.OnDescriptionChanged();
				}
			}
		}
		/// Denotes the WorkOrder's ClosingComment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string WorkOrder_ClosingComment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_ClosingComment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosingComment", DbType="NVARCHAR(MAX)")]
		public string ClosingComment
		{
			get
			{
				return this._ClosingComment;
			}
			set
			{
				if ((this._ClosingComment != value))
				{
					this.OnClosingCommentChanging(value);
					this.SendPropertyChanging();
					this._ClosingComment = value;
					this.SendPropertyChanged();
					this.OnClosingCommentChanged();
				}
			}
		}
		/// Denotes the WorkOrder's RequestorID column with type link(field Requestor.Id) with labelkey='Requestor'
		static public string WorkOrder_RequestorID{ get{return WorkOrderLabelKdsMBLabel.K("Requestor").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_RequestorID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestorID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? RequestorID
		{
			get
			{
				return this._RequestorID;
			}
			set
			{
				if ((this._RequestorID != value))
				{
					if (this._Requestor.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestorIDChanging(value);
					this.SendPropertyChanging();
					this._RequestorID = value;
					this.SendPropertyChanged();
					this.OnRequestorIDChanged();
				}
			}
		}
		/// Denotes the WorkOrder's WorkCategoryID column with type link(field WorkCategory.Id) with labelkey='Work Category'
		static public string WorkOrder_WorkCategoryID{ get{return WorkOrderLabelKdsMBLabel.K("Work Category").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_WorkCategoryID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkCategoryID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? WorkCategoryID
		{
			get
			{
				return this._WorkCategoryID;
			}
			set
			{
				if ((this._WorkCategoryID != value))
				{
					if (this._WorkCategory.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._WorkCategoryID = value;
					this.SendPropertyChanged();
					this.OnWorkCategoryIDChanged();
				}
			}
		}
		/// Denotes the WorkOrder's WorkOrderExpenseModelID column with type link(nonnull, field WorkOrderExpenseModel.Id) with labelkey='Expense Model'
		static public string WorkOrder_WorkOrderExpenseModelID{ get{return WorkOrderLabelKdsMBLabel.K("Expense Model").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_WorkOrderExpenseModelID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderExpenseModelID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid WorkOrderExpenseModelID
		{
			get
			{
				return this._WorkOrderExpenseModelID;
			}
			set
			{
				if ((this._WorkOrderExpenseModelID != value))
				{
					if (this._WorkOrderExpenseModel.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderExpenseModelIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderExpenseModelID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderExpenseModelIDChanged();
				}
			}
		}
		/// Denotes the WorkOrder's AccessCodeID column with type link(field AccessCode.Id) with labelkey='Access Code'
		static public string WorkOrder_AccessCodeID{ get{return WorkOrderLabelKdsMBLabel.K("Access Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_AccessCodeID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessCodeID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? AccessCodeID
		{
			get
			{
				return this._AccessCodeID;
			}
			set
			{
				if ((this._AccessCodeID != value))
				{
					if (this._AccessCode.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessCodeIDChanging(value);
					this.SendPropertyChanging();
					this._AccessCodeID = value;
					this.SendPropertyChanged();
					this.OnAccessCodeIDChanged();
				}
			}
		}
		/// Denotes the WorkOrder's ProjectID column with type link(field Project.Id) with labelkey='Project'
		static public string WorkOrder_ProjectID{ get{return WorkOrderLabelKdsMBLabel.K("Project").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_ProjectID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged();
					this.OnProjectIDChanged();
				}
			}
		}
		/// Denotes the WorkOrder's WorkOrderPriorityID column with type link(field WorkOrderPriority.Id) with labelkey='Priority'
		static public string WorkOrder_WorkOrderPriorityID{ get{return WorkOrderLabelKdsMBLabel.K("Priority").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_WorkOrderPriorityID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderPriorityID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? WorkOrderPriorityID
		{
			get
			{
				return this._WorkOrderPriorityID;
			}
			set
			{
				if ((this._WorkOrderPriorityID != value))
				{
					if (this._WorkOrderPriority.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderPriorityIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderPriorityID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderPriorityIDChanged();
				}
			}
		}
		/// Denotes the WorkOrder's CloseCodeID column with type link(field CloseCode.Id) with labelkey='Close Code'
		static public string WorkOrder_CloseCodeID{ get{return WorkOrderLabelKdsMBLabel.K("Close Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_CloseCodeID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseCodeID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? CloseCodeID
		{
			get
			{
				return this._CloseCodeID;
			}
			set
			{
				if ((this._CloseCodeID != value))
				{
					if (this._CloseCode.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCloseCodeIDChanging(value);
					this.SendPropertyChanging();
					this._CloseCodeID = value;
					this.SendPropertyChanged();
					this.OnCloseCodeIDChanged();
				}
			}
		}
		/// Denotes the WorkOrder's Downtime column with type interval(min 0:00, max 876000:00, by 0:00:01) with labelkey='Downtime'
		static public string WorkOrder_Downtime{ get{return WorkOrderLabelKdsMBLabel.K("Downtime").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_Downtime")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Downtime", DbType="DATETIME")]
		public System.DateTime? Downtime
		{
			get
			{
				return this._Downtime;
			}
			set
			{
				if ((this._Downtime != value))
				{
					this.OnDowntimeChanging(value);
					this.SendPropertyChanging();
					this._Downtime = value;
					this.SendPropertyChanged();
					this.OnDowntimeChanged();
				}
			}
		}
		/// Denotes the WorkOrder's StartDateEstimate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='Work Start Date'
		static public string WorkOrder_StartDateEstimate{ get{return WorkOrderLabelKdsMBLabel.K("Work Start Date").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_StartDateEstimate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateEstimate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime StartDateEstimate
		{
			get
			{
				return this._StartDateEstimate;
			}
			set
			{
				if ((this._StartDateEstimate != value))
				{
					this.OnStartDateEstimateChanging(value);
					this.SendPropertyChanging();
					this._StartDateEstimate = value;
					this.SendPropertyChanged();
					this.OnStartDateEstimateChanged();
				}
			}
		}
		/// Denotes the WorkOrder's EndDateEstimate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='Work End Date'
		static public string WorkOrder_EndDateEstimate{ get{return WorkOrderLabelKdsMBLabel.K("Work End Date").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_EndDateEstimate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDateEstimate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EndDateEstimate
		{
			get
			{
				return this._EndDateEstimate;
			}
			set
			{
				if ((this._EndDateEstimate != value))
				{
					this.OnEndDateEstimateChanging(value);
					this.SendPropertyChanging();
					this._EndDateEstimate = value;
					this.SendPropertyChanged();
					this.OnEndDateEstimateChanged();
				}
			}
		}
		/// Denotes the WorkOrder's WorkDueDate column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 00:00), by 24:00) with labelkey='Work Due Date'
		static public string WorkOrder_WorkDueDate{ get{return WorkOrderLabelKdsMBLabel.K("Work Due Date").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_WorkDueDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkDueDate", DbType="DATETIME")]
		public System.DateTime? WorkDueDate
		{
			get
			{
				return this._WorkDueDate;
			}
			set
			{
				if ((this._WorkDueDate != value))
				{
					this.OnWorkDueDateChanging(value);
					this.SendPropertyChanging();
					this._WorkDueDate = value;
					this.SendPropertyChanged();
					this.OnWorkDueDateChanged();
				}
			}
		}
		/// Denotes the WorkOrder's SelectPrintFlag column with type bool(nonnull) with labelkey='Select for Printing'
		static public string WorkOrder_SelectPrintFlag{ get{return WorkOrderLabelKdsMBLabel.K("Select for Printing").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_SelectPrintFlag")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelectPrintFlag", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool SelectPrintFlag
		{
			get
			{
				return this._SelectPrintFlag;
			}
			set
			{
				if ((this._SelectPrintFlag != value))
				{
					this.OnSelectPrintFlagChanging(value);
					this.SendPropertyChanging();
					this._SelectPrintFlag = value;
					this.SendPropertyChanged();
					this.OnSelectPrintFlagChanged();
				}
			}
		}
		/// Denotes the WorkOrder's TotalDemand column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='TotalDemand'
		static public string WorkOrder_TotalDemand{ get{return WorkOrderLabelKdsMBLabel.K("TotalDemand").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_TotalDemand")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalDemand", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal TotalDemand
		{
			get
			{
				return this._TotalDemand;
			}
			set
			{
				if ((this._TotalDemand != value))
				{
					this.OnTotalDemandChanging(value);
					this.SendPropertyChanging();
					this._TotalDemand = value;
					this.SendPropertyChanged();
					this.OnTotalDemandChanged();
				}
			}
		}
		/// Denotes the WorkOrder's TotalActual column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='TotalActual'
		static public string WorkOrder_TotalActual{ get{return WorkOrderLabelKdsMBLabel.K("TotalActual").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_TotalActual")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalActual", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal TotalActual
		{
			get
			{
				return this._TotalActual;
			}
			set
			{
				if ((this._TotalActual != value))
				{
					this.OnTotalActualChanging(value);
					this.SendPropertyChanging();
					this._TotalActual = value;
					this.SendPropertyChanged();
					this.OnTotalActualChanged();
				}
			}
		}
		/// Denotes the WorkOrder's TemporaryStorageEmpty column with type bool(nonnull) with labelkey='TemporaryStorageEmpty'
		static public string WorkOrder_TemporaryStorageEmpty{ get{return WorkOrderLabelKdsMBLabel.K("TemporaryStorageEmpty").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrder),Name="WorkOrder_TemporaryStorageEmpty")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemporaryStorageEmpty", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool TemporaryStorageEmpty
		{
			get
			{
				return this._TemporaryStorageEmpty;
			}
			set
			{
				if ((this._TemporaryStorageEmpty != value))
				{
					this.OnTemporaryStorageEmptyChanging(value);
					this.SendPropertyChanging();
					this._TemporaryStorageEmpty = value;
					this.SendPropertyChanged();
					this.OnTemporaryStorageEmptyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrderAssignmentAll", Storage="_WorkOrderAssignmentAllWorkOrder", ThisKey="Id", OtherKey="WorkOrderID")]
		public EntitySet<WorkOrderAssignmentAll> WorkOrderAssignmentAllWorkOrder
		{
			get
			{
				return this._WorkOrderAssignmentAllWorkOrder;
			}
			set
			{
				this._WorkOrderAssignmentAllWorkOrder.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrderAssignmentByAssignee", Storage="_WorkOrderAssignmentByAssigneeWorkOrder", ThisKey="Id", OtherKey="WorkOrderID")]
		public EntitySet<WorkOrderAssignmentByAssignee> WorkOrderAssignmentByAssigneeWorkOrder
		{
			get
			{
				return this._WorkOrderAssignmentByAssigneeWorkOrder;
			}
			set
			{
				this._WorkOrderAssignmentByAssigneeWorkOrder.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrderStateHistory", Storage="_WorkOrderStateHistoryWorkOrder", ThisKey="Id", OtherKey="WorkOrderID")]
		public EntitySet<WorkOrderStateHistory> WorkOrderStateHistoryWorkOrder
		{
			get
			{
				return this._WorkOrderStateHistoryWorkOrder;
			}
			set
			{
				this._WorkOrderStateHistoryWorkOrder.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitLocation_WorkOrder", Storage="_UnitLocation", ThisKey="UnitLocationID", OtherKey="Id", IsForeignKey=true)]
		public Location UnitLocation
		{
			get
			{
				return this._UnitLocation.Entity;
			}
			set
			{
				Location previousValue = this._UnitLocation.Entity;
				if (((previousValue != value)
							|| (this._UnitLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitLocation.Entity = null;
						previousValue.WorkOrderUnitLocation.Remove(this);
					}
					this._UnitLocation.Entity = value;
					if ((value != null))
					{
						value.WorkOrderUnitLocation.Add(this);
						this._UnitLocationID = value.Id;
					}
					else
					{
						this._UnitLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PMGenerationBatch_WorkOrder", Storage="_PMGenerationBatch", ThisKey="PMGenerationBatchID", OtherKey="Id", IsForeignKey=true)]
		public PMGenerationBatch PMGenerationBatch
		{
			get
			{
				return this._PMGenerationBatch.Entity;
			}
			set
			{
				PMGenerationBatch previousValue = this._PMGenerationBatch.Entity;
				if (((previousValue != value)
							|| (this._PMGenerationBatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PMGenerationBatch.Entity = null;
						previousValue.WorkOrderPMGenerationBatch.Remove(this);
					}
					this._PMGenerationBatch.Entity = value;
					if ((value != null))
					{
						value.WorkOrderPMGenerationBatch.Add(this);
						this._PMGenerationBatchID = value.Id;
					}
					else
					{
						this._PMGenerationBatchID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentWorkOrderStateHistory_WorkOrder", Storage="_CurrentWorkOrderStateHistory", ThisKey="CurrentWorkOrderStateHistoryID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderStateHistory CurrentWorkOrderStateHistory
		{
			get
			{
				return this._CurrentWorkOrderStateHistory.Entity;
			}
			set
			{
				WorkOrderStateHistory previousValue = this._CurrentWorkOrderStateHistory.Entity;
				if (((previousValue != value)
							|| (this._CurrentWorkOrderStateHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentWorkOrderStateHistory.Entity = null;
						previousValue.WorkOrderCurrentWorkOrderStateHistory.Remove(this);
					}
					this._CurrentWorkOrderStateHistory.Entity = value;
					if ((value != null))
					{
						value.WorkOrderCurrentWorkOrderStateHistory.Add(this);
						this._CurrentWorkOrderStateHistoryID = value.Id;
					}
					else
					{
						this._CurrentWorkOrderStateHistoryID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Requestor_WorkOrder", Storage="_Requestor", ThisKey="RequestorID", OtherKey="Id", IsForeignKey=true)]
		public Requestor Requestor
		{
			get
			{
				return this._Requestor.Entity;
			}
			set
			{
				Requestor previousValue = this._Requestor.Entity;
				if (((previousValue != value)
							|| (this._Requestor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requestor.Entity = null;
						previousValue.WorkOrderRequestor.Remove(this);
					}
					this._Requestor.Entity = value;
					if ((value != null))
					{
						value.WorkOrderRequestor.Add(this);
						this._RequestorID = value.Id;
					}
					else
					{
						this._RequestorID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkCategory_WorkOrder", Storage="_WorkCategory", ThisKey="WorkCategoryID", OtherKey="Id", IsForeignKey=true)]
		public WorkCategory WorkCategory
		{
			get
			{
				return this._WorkCategory.Entity;
			}
			set
			{
				WorkCategory previousValue = this._WorkCategory.Entity;
				if (((previousValue != value)
							|| (this._WorkCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkCategory.Entity = null;
						previousValue.WorkOrderWorkCategory.Remove(this);
					}
					this._WorkCategory.Entity = value;
					if ((value != null))
					{
						value.WorkOrderWorkCategory.Add(this);
						this._WorkCategoryID = value.Id;
					}
					else
					{
						this._WorkCategoryID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderExpenseModel_WorkOrder", Storage="_WorkOrderExpenseModel", ThisKey="WorkOrderExpenseModelID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderExpenseModel WorkOrderExpenseModel
		{
			get
			{
				return this._WorkOrderExpenseModel.Entity;
			}
			set
			{
				WorkOrderExpenseModel previousValue = this._WorkOrderExpenseModel.Entity;
				if (((previousValue != value)
							|| (this._WorkOrderExpenseModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrderExpenseModel.Entity = null;
						previousValue.WorkOrderWorkOrderExpenseModel.Remove(this);
					}
					this._WorkOrderExpenseModel.Entity = value;
					if ((value != null))
					{
						value.WorkOrderWorkOrderExpenseModel.Add(this);
						this._WorkOrderExpenseModelID = value.Id;
					}
					else
					{
						this._WorkOrderExpenseModelID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessCode_WorkOrder", Storage="_AccessCode", ThisKey="AccessCodeID", OtherKey="Id", IsForeignKey=true)]
		public AccessCode AccessCode
		{
			get
			{
				return this._AccessCode.Entity;
			}
			set
			{
				AccessCode previousValue = this._AccessCode.Entity;
				if (((previousValue != value)
							|| (this._AccessCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessCode.Entity = null;
						previousValue.WorkOrderAccessCode.Remove(this);
					}
					this._AccessCode.Entity = value;
					if ((value != null))
					{
						value.WorkOrderAccessCode.Add(this);
						this._AccessCodeID = value.Id;
					}
					else
					{
						this._AccessCodeID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_WorkOrder", Storage="_Project", ThisKey="ProjectID", OtherKey="Id", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value)
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.WorkOrderProject.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.WorkOrderProject.Add(this);
						this._ProjectID = value.Id;
					}
					else
					{
						this._ProjectID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderPriority_WorkOrder", Storage="_WorkOrderPriority", ThisKey="WorkOrderPriorityID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderPriority WorkOrderPriority
		{
			get
			{
				return this._WorkOrderPriority.Entity;
			}
			set
			{
				WorkOrderPriority previousValue = this._WorkOrderPriority.Entity;
				if (((previousValue != value)
							|| (this._WorkOrderPriority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrderPriority.Entity = null;
						previousValue.WorkOrderWorkOrderPriority.Remove(this);
					}
					this._WorkOrderPriority.Entity = value;
					if ((value != null))
					{
						value.WorkOrderWorkOrderPriority.Add(this);
						this._WorkOrderPriorityID = value.Id;
					}
					else
					{
						this._WorkOrderPriorityID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CloseCode_WorkOrder", Storage="_CloseCode", ThisKey="CloseCodeID", OtherKey="Id", IsForeignKey=true)]
		public CloseCode CloseCode
		{
			get
			{
				return this._CloseCode.Entity;
			}
			set
			{
				CloseCode previousValue = this._CloseCode.Entity;
				if (((previousValue != value)
							|| (this._CloseCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CloseCode.Entity = null;
						previousValue.WorkOrderCloseCode.Remove(this);
					}
					this._CloseCode.Entity = value;
					if ((value != null))
					{
						value.WorkOrderCloseCode.Add(this);
						this._CloseCodeID = value.Id;
					}
					else
					{
						this._CloseCodeID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderAssignmentAllWorkOrder(WorkOrderAssignmentAll entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = this;
		}
		private void detach_WorkOrderAssignmentAllWorkOrder(WorkOrderAssignmentAll entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = null;
		}

		private void attach_WorkOrderAssignmentByAssigneeWorkOrder(WorkOrderAssignmentByAssignee entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = this;
		}
		private void detach_WorkOrderAssignmentByAssigneeWorkOrder(WorkOrderAssignmentByAssignee entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = null;
		}

		private void attach_WorkOrderStateHistoryWorkOrder(WorkOrderStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = this;
		}
		private void detach_WorkOrderStateHistoryWorkOrder(WorkOrderStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Contact with labelkey='Contact'
		static public string ContactLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Contact").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Comment;
		private string _BusinessPhone;
		private string _FaxPhone;
		private string _HomePhone;
		private string _PagerPhone;
		private string _MobilePhone;
		private string _Email;
		private string _AlternateEmail;
		private string _WebURL;
		private System.Guid? _LDAPGuid;
		private System.Guid? _LocationID;
		private int? _PreferredLanguage;
		private EntitySet<WorkOrderAssignee> _WorkOrderAssigneeContact;
		private EntitySet<WorkOrderAssignmentByAssignee> _WorkOrderAssignmentByAssigneeContact;
		private EntitySet<Requestor> _RequestorContact;
		private EntitySet<User> _UserContact;
		private EntityRef<Location> _Location;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnBusinessPhoneChanging(string value);
	partial void OnBusinessPhoneChanged();
	partial void OnFaxPhoneChanging(string value);
	partial void OnFaxPhoneChanged();
	partial void OnHomePhoneChanging(string value);
	partial void OnHomePhoneChanged();
	partial void OnPagerPhoneChanging(string value);
	partial void OnPagerPhoneChanged();
	partial void OnMobilePhoneChanging(string value);
	partial void OnMobilePhoneChanged();
	partial void OnEmailChanging(string value);
	partial void OnEmailChanged();
	partial void OnAlternateEmailChanging(string value);
	partial void OnAlternateEmailChanged();
	partial void OnWebURLChanging(string value);
	partial void OnWebURLChanged();
	partial void OnLDAPGuidChanging(System.Guid? value);
	partial void OnLDAPGuidChanged();
	partial void OnLocationIDChanging(System.Guid? value);
	partial void OnLocationIDChanged();
	partial void OnPreferredLanguageChanging(int? value);
	partial void OnPreferredLanguageChanged();
	#endregion

		public Contact()
		{
			this._WorkOrderAssigneeContact = new EntitySet<WorkOrderAssignee>(new Action<WorkOrderAssignee>(this.attach_WorkOrderAssigneeContact), new Action<WorkOrderAssignee>(this.detach_WorkOrderAssigneeContact));
			this._WorkOrderAssignmentByAssigneeContact = new EntitySet<WorkOrderAssignmentByAssignee>(new Action<WorkOrderAssignmentByAssignee>(this.attach_WorkOrderAssignmentByAssigneeContact), new Action<WorkOrderAssignmentByAssignee>(this.detach_WorkOrderAssignmentByAssigneeContact));
			this._RequestorContact = new EntitySet<Requestor>(new Action<Requestor>(this.attach_RequestorContact), new Action<Requestor>(this.detach_RequestorContact));
			this._UserContact = new EntitySet<User>(new Action<User>(this.attach_UserContact), new Action<User>(this.detach_UserContact));
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		/// Denotes the Contact's Id column with type id(nonnull) with labelkey='Id'
		static public string Contact_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Contact's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string Contact_Code{ get{return WorkOrderLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the Contact's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string Contact_Hidden{ get{return WorkOrderLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the Contact's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string Contact_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the Contact's BusinessPhone column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='BusinessPhone'
		static public string Contact_BusinessPhone{ get{return WorkOrderLabelKdsMBLabel.K("BusinessPhone").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_BusinessPhone")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessPhone", DbType="NVARCHAR (50)")]
		public string BusinessPhone
		{
			get
			{
				return this._BusinessPhone;
			}
			set
			{
				if ((this._BusinessPhone != value))
				{
					this.OnBusinessPhoneChanging(value);
					this.SendPropertyChanging();
					this._BusinessPhone = value;
					this.SendPropertyChanged();
					this.OnBusinessPhoneChanged();
				}
			}
		}
		/// Denotes the Contact's FaxPhone column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='FaxPhone'
		static public string Contact_FaxPhone{ get{return WorkOrderLabelKdsMBLabel.K("FaxPhone").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_FaxPhone")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaxPhone", DbType="NVARCHAR (50)")]
		public string FaxPhone
		{
			get
			{
				return this._FaxPhone;
			}
			set
			{
				if ((this._FaxPhone != value))
				{
					this.OnFaxPhoneChanging(value);
					this.SendPropertyChanging();
					this._FaxPhone = value;
					this.SendPropertyChanged();
					this.OnFaxPhoneChanged();
				}
			}
		}
		/// Denotes the Contact's HomePhone column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='HomePhone'
		static public string Contact_HomePhone{ get{return WorkOrderLabelKdsMBLabel.K("HomePhone").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_HomePhone")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="NVARCHAR (50)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged();
					this.OnHomePhoneChanged();
				}
			}
		}
		/// Denotes the Contact's PagerPhone column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='PagerPhone'
		static public string Contact_PagerPhone{ get{return WorkOrderLabelKdsMBLabel.K("PagerPhone").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_PagerPhone")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PagerPhone", DbType="NVARCHAR (50)")]
		public string PagerPhone
		{
			get
			{
				return this._PagerPhone;
			}
			set
			{
				if ((this._PagerPhone != value))
				{
					this.OnPagerPhoneChanging(value);
					this.SendPropertyChanging();
					this._PagerPhone = value;
					this.SendPropertyChanged();
					this.OnPagerPhoneChanged();
				}
			}
		}
		/// Denotes the Contact's MobilePhone column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='MobilePhone'
		static public string Contact_MobilePhone{ get{return WorkOrderLabelKdsMBLabel.K("MobilePhone").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_MobilePhone")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="NVARCHAR (50)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged();
					this.OnMobilePhoneChanged();
				}
			}
		}
		/// Denotes the Contact's Email column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='Email'
		static public string Contact_Email{ get{return WorkOrderLabelKdsMBLabel.K("Email").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_Email")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVARCHAR (128)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged();
					this.OnEmailChanged();
				}
			}
		}
		/// Denotes the Contact's AlternateEmail column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Alternate Email'
		static public string Contact_AlternateEmail{ get{return WorkOrderLabelKdsMBLabel.K("Alternate Email").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_AlternateEmail")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternateEmail", DbType="NVARCHAR(MAX)")]
		public string AlternateEmail
		{
			get
			{
				return this._AlternateEmail;
			}
			set
			{
				if ((this._AlternateEmail != value))
				{
					this.OnAlternateEmailChanging(value);
					this.SendPropertyChanging();
					this._AlternateEmail = value;
					this.SendPropertyChanged();
					this.OnAlternateEmailChanged();
				}
			}
		}
		/// Denotes the Contact's WebURL column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='WebURL'
		static public string Contact_WebURL{ get{return WorkOrderLabelKdsMBLabel.K("WebURL").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_WebURL")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebURL", DbType="NVARCHAR(MAX)")]
		public string WebURL
		{
			get
			{
				return this._WebURL;
			}
			set
			{
				if ((this._WebURL != value))
				{
					this.OnWebURLChanging(value);
					this.SendPropertyChanging();
					this._WebURL = value;
					this.SendPropertyChanged();
					this.OnWebURLChanged();
				}
			}
		}
		/// Denotes the Contact's LDAPGuid column with type id with labelkey='AD Reference'
		static public string Contact_LDAPGuid{ get{return WorkOrderLabelKdsMBLabel.K("AD Reference").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_LDAPGuid")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LDAPGuid", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? LDAPGuid
		{
			get
			{
				return this._LDAPGuid;
			}
			set
			{
				if ((this._LDAPGuid != value))
				{
					this.OnLDAPGuidChanging(value);
					this.SendPropertyChanging();
					this._LDAPGuid = value;
					this.SendPropertyChanged();
					this.OnLDAPGuidChanged();
				}
			}
		}
		/// Denotes the Contact's LocationID column with type link(field Location.Id) with labelkey='Location'
		static public string Contact_LocationID{ get{return WorkOrderLabelKdsMBLabel.K("Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_LocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged();
					this.OnLocationIDChanged();
				}
			}
		}
		/// Denotes the Contact's PreferredLanguage column with type integer(32) with labelkey='PreferredLanguage'
		static public string Contact_PreferredLanguage{ get{return WorkOrderLabelKdsMBLabel.K("PreferredLanguage").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Contact),Name="Contact_PreferredLanguage")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferredLanguage", DbType="INT")]
		public int? PreferredLanguage
		{
			get
			{
				return this._PreferredLanguage;
			}
			set
			{
				if ((this._PreferredLanguage != value))
				{
					this.OnPreferredLanguageChanging(value);
					this.SendPropertyChanging();
					this._PreferredLanguage = value;
					this.SendPropertyChanged();
					this.OnPreferredLanguageChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_WorkOrderAssignee", Storage="_WorkOrderAssigneeContact", ThisKey="Id", OtherKey="ContactID")]
		public EntitySet<WorkOrderAssignee> WorkOrderAssigneeContact
		{
			get
			{
				return this._WorkOrderAssigneeContact;
			}
			set
			{
				this._WorkOrderAssigneeContact.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_WorkOrderAssignmentByAssignee", Storage="_WorkOrderAssignmentByAssigneeContact", ThisKey="Id", OtherKey="ContactID")]
		public EntitySet<WorkOrderAssignmentByAssignee> WorkOrderAssignmentByAssigneeContact
		{
			get
			{
				return this._WorkOrderAssignmentByAssigneeContact;
			}
			set
			{
				this._WorkOrderAssignmentByAssigneeContact.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Requestor", Storage="_RequestorContact", ThisKey="Id", OtherKey="ContactID")]
		public EntitySet<Requestor> RequestorContact
		{
			get
			{
				return this._RequestorContact;
			}
			set
			{
				this._RequestorContact.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_User", Storage="_UserContact", ThisKey="Id", OtherKey="ContactID")]
		public EntitySet<User> UserContact
		{
			get
			{
				return this._UserContact;
			}
			set
			{
				this._UserContact.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Contact", Storage="_Location", ThisKey="LocationID", OtherKey="Id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value)
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.ContactLocation.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.ContactLocation.Add(this);
						this._LocationID = value.Id;
					}
					else
					{
						this._LocationID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderAssigneeContact(WorkOrderAssignee entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		private void detach_WorkOrderAssigneeContact(WorkOrderAssignee entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}

		private void attach_WorkOrderAssignmentByAssigneeContact(WorkOrderAssignmentByAssignee entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		private void detach_WorkOrderAssignmentByAssigneeContact(WorkOrderAssignmentByAssignee entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}

		private void attach_RequestorContact(Requestor entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		private void detach_RequestorContact(Requestor entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}

		private void attach_UserContact(User entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		private void detach_UserContact(User entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderAssignmentByAssignee")]
	public partial class WorkOrderAssignmentByAssignee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderAssignmentByAssignee with labelkey=''
		static public string WorkOrderAssignmentByAssigneeLabelKey { get{return WorkOrderLabelKdsMBLabel.K("").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid? _WorkOrderAssignmentID;
		private System.Guid? _WorkOrderID;
		private System.Guid? _ContactID;
		private EntityRef<WorkOrderAssignment> _WorkOrderAssignment;
		private EntityRef<WorkOrder> _WorkOrder;
		private EntityRef<Contact> _Contact;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnWorkOrderAssignmentIDChanging(System.Guid? value);
	partial void OnWorkOrderAssignmentIDChanged();
	partial void OnWorkOrderIDChanging(System.Guid? value);
	partial void OnWorkOrderIDChanged();
	partial void OnContactIDChanging(System.Guid? value);
	partial void OnContactIDChanged();
	#endregion

		public WorkOrderAssignmentByAssignee()
		{
			this._WorkOrderAssignment = default(EntityRef<WorkOrderAssignment>);
			this._WorkOrder = default(EntityRef<WorkOrder>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		/// Denotes the WorkOrderAssignmentByAssignee's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderAssignmentByAssignee_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignmentByAssignee),Name="WorkOrderAssignmentByAssignee_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrderAssignmentByAssignee's WorkOrderAssignmentID column with type link(field WorkOrderAssignment.Id) with labelkey='Assignment'
		static public string WorkOrderAssignmentByAssignee_WorkOrderAssignmentID{ get{return WorkOrderLabelKdsMBLabel.K("Assignment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignmentByAssignee),Name="WorkOrderAssignmentByAssignee_WorkOrderAssignmentID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderAssignmentID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? WorkOrderAssignmentID
		{
			get
			{
				return this._WorkOrderAssignmentID;
			}
			set
			{
				if ((this._WorkOrderAssignmentID != value))
				{
					if (this._WorkOrderAssignment.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderAssignmentID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderAssignmentIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderAssignmentByAssignee's WorkOrderID column with type link(field WorkOrder.Id) with labelkey='Work Order'
		static public string WorkOrderAssignmentByAssignee_WorkOrderID{ get{return WorkOrderLabelKdsMBLabel.K("Work Order").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignmentByAssignee),Name="WorkOrderAssignmentByAssignee_WorkOrderID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? WorkOrderID
		{
			get
			{
				return this._WorkOrderID;
			}
			set
			{
				if ((this._WorkOrderID != value))
				{
					if (this._WorkOrder.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderAssignmentByAssignee's ContactID column with type link(field Contact.Id) with labelkey='Contact'
		static public string WorkOrderAssignmentByAssignee_ContactID{ get{return WorkOrderLabelKdsMBLabel.K("Contact").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderAssignmentByAssignee),Name="WorkOrderAssignmentByAssignee_ContactID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged();
					this.OnContactIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderAssignment_WorkOrderAssignmentByAssignee", Storage="_WorkOrderAssignment", ThisKey="WorkOrderAssignmentID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderAssignment WorkOrderAssignment
		{
			get
			{
				return this._WorkOrderAssignment.Entity;
			}
			set
			{
				WorkOrderAssignment previousValue = this._WorkOrderAssignment.Entity;
				if (((previousValue != value)
							|| (this._WorkOrderAssignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrderAssignment.Entity = null;
						previousValue.WorkOrderAssignmentByAssigneeWorkOrderAssignment.Remove(this);
					}
					this._WorkOrderAssignment.Entity = value;
					if ((value != null))
					{
						value.WorkOrderAssignmentByAssigneeWorkOrderAssignment.Add(this);
						this._WorkOrderAssignmentID = value.Id;
					}
					else
					{
						this._WorkOrderAssignmentID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrderAssignmentByAssignee", Storage="_WorkOrder", ThisKey="WorkOrderID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrder WorkOrder
		{
			get
			{
				return this._WorkOrder.Entity;
			}
			set
			{
				WorkOrder previousValue = this._WorkOrder.Entity;
				if (((previousValue != value)
							|| (this._WorkOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrder.Entity = null;
						previousValue.WorkOrderAssignmentByAssigneeWorkOrder.Remove(this);
					}
					this._WorkOrder.Entity = value;
					if ((value != null))
					{
						value.WorkOrderAssignmentByAssigneeWorkOrder.Add(this);
						this._WorkOrderID = value.Id;
					}
					else
					{
						this._WorkOrderID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_WorkOrderAssignmentByAssignee", Storage="_Contact", ThisKey="ContactID", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value)
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.WorkOrderAssignmentByAssigneeContact.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.WorkOrderAssignmentByAssigneeContact.Add(this);
						this._ContactID = value.Id;
					}
					else
					{
						this._ContactID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderStateHistory")]
	public partial class WorkOrderStateHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderStateHistory with labelkey='Work Order State History'
		static public string WorkOrderStateHistoryLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Work Order State History").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _WorkOrderID;
		private System.DateTime _EffectiveDate;
		private System.DateTime _EntryDate;
		private System.Guid? _UserID;
		private bool _EffectiveDateReadonly;
		private System.Guid _WorkOrderStateID;
		private System.Guid? _WorkOrderStateHistoryStatusID;
		private string _Comment;
		private EntitySet<WorkOrder> _WorkOrderCurrentWorkOrderStateHistory;
		private EntityRef<User> _User;
		private EntityRef<WorkOrder> _WorkOrder;
		private EntityRef<WorkOrderState> _WorkOrderState;
		private EntityRef<WorkOrderStateHistoryStatus> _WorkOrderStateHistoryStatus;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnWorkOrderIDChanging(System.Guid value);
	partial void OnWorkOrderIDChanged();
	partial void OnEffectiveDateChanging(System.DateTime value);
	partial void OnEffectiveDateChanged();
	partial void OnEntryDateChanging(System.DateTime value);
	partial void OnEntryDateChanged();
	partial void OnUserIDChanging(System.Guid? value);
	partial void OnUserIDChanged();
	partial void OnEffectiveDateReadonlyChanging(bool value);
	partial void OnEffectiveDateReadonlyChanged();
	partial void OnWorkOrderStateIDChanging(System.Guid value);
	partial void OnWorkOrderStateIDChanged();
	partial void OnWorkOrderStateHistoryStatusIDChanging(System.Guid? value);
	partial void OnWorkOrderStateHistoryStatusIDChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	#endregion

		public WorkOrderStateHistory()
		{
			this._WorkOrderCurrentWorkOrderStateHistory = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrderCurrentWorkOrderStateHistory), new Action<WorkOrder>(this.detach_WorkOrderCurrentWorkOrderStateHistory));
			this._User = default(EntityRef<User>);
			this._WorkOrder = default(EntityRef<WorkOrder>);
			this._WorkOrderState = default(EntityRef<WorkOrderState>);
			this._WorkOrderStateHistoryStatus = default(EntityRef<WorkOrderStateHistoryStatus>);
			OnCreated();
		}
		/// Denotes the WorkOrderStateHistory's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderStateHistory_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistory),Name="WorkOrderStateHistory_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistory's WorkOrderID column with type link(nonnull, field WorkOrder.Id) with labelkey='Work Order'
		static public string WorkOrderStateHistory_WorkOrderID{ get{return WorkOrderLabelKdsMBLabel.K("Work Order").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistory),Name="WorkOrderStateHistory_WorkOrderID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid WorkOrderID
		{
			get
			{
				return this._WorkOrderID;
			}
			set
			{
				if ((this._WorkOrderID != value))
				{
					if (this._WorkOrder.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistory's EffectiveDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EffectiveDate'
		static public string WorkOrderStateHistory_EffectiveDate{ get{return WorkOrderLabelKdsMBLabel.K("EffectiveDate").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistory),Name="WorkOrderStateHistory_EffectiveDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged();
					this.OnEffectiveDateChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistory's EntryDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EntryDate'
		static public string WorkOrderStateHistory_EntryDate{ get{return WorkOrderLabelKdsMBLabel.K("EntryDate").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistory),Name="WorkOrderStateHistory_EntryDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged();
					this.OnEntryDateChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistory's UserID column with type link(field User.Id) with labelkey='User'
		static public string WorkOrderStateHistory_UserID{ get{return WorkOrderLabelKdsMBLabel.K("User").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistory),Name="WorkOrderStateHistory_UserID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged();
					this.OnUserIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistory's EffectiveDateReadonly column with type bool(nonnull) with labelkey='EffectiveDateReadonly'
		static public string WorkOrderStateHistory_EffectiveDateReadonly{ get{return WorkOrderLabelKdsMBLabel.K("EffectiveDateReadonly").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistory),Name="WorkOrderStateHistory_EffectiveDateReadonly")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDateReadonly", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool EffectiveDateReadonly
		{
			get
			{
				return this._EffectiveDateReadonly;
			}
			set
			{
				if ((this._EffectiveDateReadonly != value))
				{
					this.OnEffectiveDateReadonlyChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDateReadonly = value;
					this.SendPropertyChanged();
					this.OnEffectiveDateReadonlyChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistory's WorkOrderStateID column with type link(nonnull, field WorkOrderState.Id) with labelkey='State'
		static public string WorkOrderStateHistory_WorkOrderStateID{ get{return WorkOrderLabelKdsMBLabel.K("State").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistory),Name="WorkOrderStateHistory_WorkOrderStateID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderStateID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid WorkOrderStateID
		{
			get
			{
				return this._WorkOrderStateID;
			}
			set
			{
				if ((this._WorkOrderStateID != value))
				{
					if (this._WorkOrderState.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderStateIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderStateID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderStateIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistory's WorkOrderStateHistoryStatusID column with type link(field WorkOrderStateHistoryStatus.Id) with labelkey='Status'
		static public string WorkOrderStateHistory_WorkOrderStateHistoryStatusID{ get{return WorkOrderLabelKdsMBLabel.K("Status").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistory),Name="WorkOrderStateHistory_WorkOrderStateHistoryStatusID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderStateHistoryStatusID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? WorkOrderStateHistoryStatusID
		{
			get
			{
				return this._WorkOrderStateHistoryStatusID;
			}
			set
			{
				if ((this._WorkOrderStateHistoryStatusID != value))
				{
					if (this._WorkOrderStateHistoryStatus.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderStateHistoryStatusIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderStateHistoryStatusID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderStateHistoryStatusIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistory's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string WorkOrderStateHistory_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistory),Name="WorkOrderStateHistory_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderStateHistory_WorkOrder", Storage="_WorkOrderCurrentWorkOrderStateHistory", ThisKey="Id", OtherKey="CurrentWorkOrderStateHistoryID")]
		public EntitySet<WorkOrder> WorkOrderCurrentWorkOrderStateHistory
		{
			get
			{
				return this._WorkOrderCurrentWorkOrderStateHistory;
			}
			set
			{
				this._WorkOrderCurrentWorkOrderStateHistory.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WorkOrderStateHistory", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value)
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.WorkOrderStateHistoryUser.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.WorkOrderStateHistoryUser.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrderStateHistory", Storage="_WorkOrder", ThisKey="WorkOrderID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrder WorkOrder
		{
			get
			{
				return this._WorkOrder.Entity;
			}
			set
			{
				WorkOrder previousValue = this._WorkOrder.Entity;
				if (((previousValue != value)
							|| (this._WorkOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrder.Entity = null;
						previousValue.WorkOrderStateHistoryWorkOrder.Remove(this);
					}
					this._WorkOrder.Entity = value;
					if ((value != null))
					{
						value.WorkOrderStateHistoryWorkOrder.Add(this);
						this._WorkOrderID = value.Id;
					}
					else
					{
						this._WorkOrderID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderState_WorkOrderStateHistory", Storage="_WorkOrderState", ThisKey="WorkOrderStateID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderState WorkOrderState
		{
			get
			{
				return this._WorkOrderState.Entity;
			}
			set
			{
				WorkOrderState previousValue = this._WorkOrderState.Entity;
				if (((previousValue != value)
							|| (this._WorkOrderState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrderState.Entity = null;
						previousValue.WorkOrderStateHistoryWorkOrderState.Remove(this);
					}
					this._WorkOrderState.Entity = value;
					if ((value != null))
					{
						value.WorkOrderStateHistoryWorkOrderState.Add(this);
						this._WorkOrderStateID = value.Id;
					}
					else
					{
						this._WorkOrderStateID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderStateHistoryStatus_WorkOrderStateHistory", Storage="_WorkOrderStateHistoryStatus", ThisKey="WorkOrderStateHistoryStatusID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderStateHistoryStatus WorkOrderStateHistoryStatus
		{
			get
			{
				return this._WorkOrderStateHistoryStatus.Entity;
			}
			set
			{
				WorkOrderStateHistoryStatus previousValue = this._WorkOrderStateHistoryStatus.Entity;
				if (((previousValue != value)
							|| (this._WorkOrderStateHistoryStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrderStateHistoryStatus.Entity = null;
						previousValue.WorkOrderStateHistoryWorkOrderStateHistoryStatus.Remove(this);
					}
					this._WorkOrderStateHistoryStatus.Entity = value;
					if ((value != null))
					{
						value.WorkOrderStateHistoryWorkOrderStateHistoryStatus.Add(this);
						this._WorkOrderStateHistoryStatusID = value.Id;
					}
					else
					{
						this._WorkOrderStateHistoryStatusID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderCurrentWorkOrderStateHistory(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.CurrentWorkOrderStateHistory = this;
		}
		private void detach_WorkOrderCurrentWorkOrderStateHistory(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.CurrentWorkOrderStateHistory = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Location with labelkey='Location'
		static public string LocationLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Location").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private string _Desc;
		private string _Comment;
		private System.Data.Linq.Binary _GISLocation;
		private byte? _GISZoom;
		private EntitySet<WorkOrder> _WorkOrderUnitLocation;
		private EntitySet<Contact> _ContactLocation;
		private EntitySet<RelativeLocation> _RelativeLocationContainingLocation;
		private EntityRef<RelativeLocation> _DerivedRelativeLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnGISLocationChanging(System.Data.Linq.Binary value);
	partial void OnGISLocationChanged();
	partial void OnGISZoomChanging(byte? value);
	partial void OnGISZoomChanged();
	#endregion

		public Location()
		{
			this._WorkOrderUnitLocation = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrderUnitLocation), new Action<WorkOrder>(this.detach_WorkOrderUnitLocation));
			this._ContactLocation = new EntitySet<Contact>(new Action<Contact>(this.attach_ContactLocation), new Action<Contact>(this.detach_ContactLocation));
			this._RelativeLocationContainingLocation = new EntitySet<RelativeLocation>(new Action<RelativeLocation>(this.attach_RelativeLocationContainingLocation), new Action<RelativeLocation>(this.detach_RelativeLocationContainingLocation));
			this._DerivedRelativeLocation = default(EntityRef<RelativeLocation>);
			OnCreated();
		}
		/// Denotes the Location's Id column with type id(nonnull) with labelkey='Id'
		static public string Location_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Location),Name="Location_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Location's Code column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Path'
		static public string Location_Code{ get{return WorkOrderLabelKdsMBLabel.K("Path").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Location),Name="Location_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR(MAX)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the Location's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string Location_Desc{ get{return WorkOrderLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Location),Name="Location_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the Location's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string Location_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Location),Name="Location_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the Location's GISLocation column with type geography with labelkey='GISLocation'
		static public string Location_GISLocation{ get{return WorkOrderLabelKdsMBLabel.K("GISLocation").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Location),Name="Location_GISLocation")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GISLocation", DbType="VARBINARY(MAX)")]
		public System.Data.Linq.Binary GISLocation
		{
			get
			{
				return this._GISLocation;
			}
			set
			{
				if ((this._GISLocation != value))
				{
					this.OnGISLocationChanging(value);
					this.SendPropertyChanging();
					this._GISLocation = value;
					this.SendPropertyChanged();
					this.OnGISLocationChanged();
				}
			}
		}
		/// Denotes the Location's GISZoom column with type integer(min 0, max 20) with labelkey='GISZoom'
		static public string Location_GISZoom{ get{return WorkOrderLabelKdsMBLabel.K("GISZoom").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Location),Name="Location_GISZoom")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GISZoom", DbType="TINYINT")]
		public byte? GISZoom
		{
			get
			{
				return this._GISZoom;
			}
			set
			{
				if ((this._GISZoom != value))
				{
					this.OnGISZoomChanging(value);
					this.SendPropertyChanging();
					this._GISZoom = value;
					this.SendPropertyChanged();
					this.OnGISZoomChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_WorkOrder", Storage="_WorkOrderUnitLocation", ThisKey="Id", OtherKey="UnitLocationID")]
		public EntitySet<WorkOrder> WorkOrderUnitLocation
		{
			get
			{
				return this._WorkOrderUnitLocation;
			}
			set
			{
				this._WorkOrderUnitLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Contact", Storage="_ContactLocation", ThisKey="Id", OtherKey="LocationID")]
		public EntitySet<Contact> ContactLocation
		{
			get
			{
				return this._ContactLocation;
			}
			set
			{
				this._ContactLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_RelativeLocation", Storage="_RelativeLocationContainingLocation", ThisKey="Id", OtherKey="ContainingLocationID")]
		public EntitySet<RelativeLocation> RelativeLocationContainingLocation
		{
			get
			{
				return this._RelativeLocationContainingLocation;
			}
			set
			{
				this._RelativeLocationContainingLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_DerivedRelativeLocation", Storage="_DerivedRelativeLocation", ThisKey="Id", OtherKey="LocationID", IsUnique=true, IsForeignKey=false)]
		public RelativeLocation DerivedRelativeLocation
		{
			get
			{
				return this._DerivedRelativeLocation.Entity;
			}
			set
			{
				RelativeLocation previousValue = this._DerivedRelativeLocation.Entity;
				if (((previousValue != value)
							|| (this._DerivedRelativeLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedRelativeLocation.Entity = null;
						previousValue.BaseLocation = null;
					}
					this._DerivedRelativeLocation.Entity = value;
					if ((value != null))
					{
						value.BaseLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderUnitLocation(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.UnitLocation = this;
		}
		private void detach_WorkOrderUnitLocation(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.UnitLocation = null;
		}

		private void attach_ContactLocation(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		private void detach_ContactLocation(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}

		private void attach_RelativeLocationContainingLocation(RelativeLocation entity)
		{
			this.SendPropertyChanging();
			entity.ContainingLocation = this;
		}
		private void detach_RelativeLocationContainingLocation(RelativeLocation entity)
		{
			this.SendPropertyChanging();
			entity.ContainingLocation = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Requestor")]
	public partial class Requestor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Requestor with labelkey='Requestor'
		static public string RequestorLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Requestor").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.DateTime? _Hidden;
		private System.Guid _ContactID;
		private string _Comment;
		private bool _ReceiveAcknowledgement;
		private EntitySet<WorkOrder> _WorkOrderRequestor;
		private EntityRef<Contact> _Contact;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnContactIDChanging(System.Guid value);
	partial void OnContactIDChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnReceiveAcknowledgementChanging(bool value);
	partial void OnReceiveAcknowledgementChanged();
	#endregion

		public Requestor()
		{
			this._WorkOrderRequestor = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrderRequestor), new Action<WorkOrder>(this.detach_WorkOrderRequestor));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		/// Denotes the Requestor's Id column with type id(nonnull) with labelkey='Id'
		static public string Requestor_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Requestor),Name="Requestor_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Requestor's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string Requestor_Hidden{ get{return WorkOrderLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Requestor),Name="Requestor_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the Requestor's ContactID column with type link(nonnull, field Contact.Id) with labelkey='Contact'
		static public string Requestor_ContactID{ get{return WorkOrderLabelKdsMBLabel.K("Contact").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Requestor),Name="Requestor_ContactID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged();
					this.OnContactIDChanged();
				}
			}
		}
		/// Denotes the Requestor's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string Requestor_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Requestor),Name="Requestor_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the Requestor's ReceiveAcknowledgement column with type bool(nonnull) with labelkey='ReceiveAcknowledgement'
		static public string Requestor_ReceiveAcknowledgement{ get{return WorkOrderLabelKdsMBLabel.K("ReceiveAcknowledgement").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Requestor),Name="Requestor_ReceiveAcknowledgement")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiveAcknowledgement", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public bool ReceiveAcknowledgement
		{
			get
			{
				return this._ReceiveAcknowledgement;
			}
			set
			{
				if ((this._ReceiveAcknowledgement != value))
				{
					this.OnReceiveAcknowledgementChanging(value);
					this.SendPropertyChanging();
					this._ReceiveAcknowledgement = value;
					this.SendPropertyChanged();
					this.OnReceiveAcknowledgementChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Requestor_WorkOrder", Storage="_WorkOrderRequestor", ThisKey="Id", OtherKey="RequestorID")]
		public EntitySet<WorkOrder> WorkOrderRequestor
		{
			get
			{
				return this._WorkOrderRequestor;
			}
			set
			{
				this._WorkOrderRequestor.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Requestor", Storage="_Contact", ThisKey="ContactID", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value)
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.RequestorContact.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.RequestorContact.Add(this);
						this._ContactID = value.Id;
					}
					else
					{
						this._ContactID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderRequestor(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.Requestor = this;
		}
		private void detach_WorkOrderRequestor(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.Requestor = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkCategory")]
	public partial class WorkCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkCategory with labelkey='Work Category'
		static public string WorkCategoryLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Work Category").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private EntitySet<WorkOrder> _WorkOrderWorkCategory;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	#endregion

		public WorkCategory()
		{
			this._WorkOrderWorkCategory = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrderWorkCategory), new Action<WorkOrder>(this.detach_WorkOrderWorkCategory));
			OnCreated();
		}
		/// Denotes the WorkCategory's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkCategory_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkCategory),Name="WorkCategory_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkCategory's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string WorkCategory_Code{ get{return WorkOrderLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkCategory),Name="WorkCategory_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the WorkCategory's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string WorkCategory_Hidden{ get{return WorkOrderLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkCategory),Name="WorkCategory_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the WorkCategory's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string WorkCategory_Desc{ get{return WorkOrderLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkCategory),Name="WorkCategory_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the WorkCategory's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string WorkCategory_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkCategory),Name="WorkCategory_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkCategory_WorkOrder", Storage="_WorkOrderWorkCategory", ThisKey="Id", OtherKey="WorkCategoryID")]
		public EntitySet<WorkOrder> WorkOrderWorkCategory
		{
			get
			{
				return this._WorkOrderWorkCategory;
			}
			set
			{
				this._WorkOrderWorkCategory.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderWorkCategory(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.WorkCategory = this;
		}
		private void detach_WorkOrderWorkCategory(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.WorkCategory = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderExpenseModel")]
	public partial class WorkOrderExpenseModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderExpenseModel with labelkey='WorkOrderExpenseModel'
		static public string WorkOrderExpenseModelLabelKey { get{return WorkOrderLabelKdsMBLabel.K("WorkOrderExpenseModel").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<WorkOrder> _WorkOrderWorkOrderExpenseModel;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public WorkOrderExpenseModel()
		{
			this._WorkOrderWorkOrderExpenseModel = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrderWorkOrderExpenseModel), new Action<WorkOrder>(this.detach_WorkOrderWorkOrderExpenseModel));
			OnCreated();
		}
		/// Denotes the WorkOrderExpenseModel's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderExpenseModel_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderExpenseModel),Name="WorkOrderExpenseModel_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderExpenseModel_WorkOrder", Storage="_WorkOrderWorkOrderExpenseModel", ThisKey="Id", OtherKey="WorkOrderExpenseModelID")]
		public EntitySet<WorkOrder> WorkOrderWorkOrderExpenseModel
		{
			get
			{
				return this._WorkOrderWorkOrderExpenseModel;
			}
			set
			{
				this._WorkOrderWorkOrderExpenseModel.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderWorkOrderExpenseModel(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderExpenseModel = this;
		}
		private void detach_WorkOrderWorkOrderExpenseModel(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderExpenseModel = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessCode")]
	public partial class AccessCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table AccessCode with labelkey='Access Code'
		static public string AccessCodeLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Access Code").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private EntitySet<WorkOrder> _WorkOrderAccessCode;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	#endregion

		public AccessCode()
		{
			this._WorkOrderAccessCode = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrderAccessCode), new Action<WorkOrder>(this.detach_WorkOrderAccessCode));
			OnCreated();
		}
		/// Denotes the AccessCode's Id column with type id(nonnull) with labelkey='Id'
		static public string AccessCode_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.AccessCode),Name="AccessCode_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the AccessCode's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string AccessCode_Code{ get{return WorkOrderLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.AccessCode),Name="AccessCode_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the AccessCode's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string AccessCode_Hidden{ get{return WorkOrderLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.AccessCode),Name="AccessCode_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the AccessCode's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string AccessCode_Desc{ get{return WorkOrderLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.AccessCode),Name="AccessCode_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the AccessCode's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string AccessCode_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.AccessCode),Name="AccessCode_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessCode_WorkOrder", Storage="_WorkOrderAccessCode", ThisKey="Id", OtherKey="AccessCodeID")]
		public EntitySet<WorkOrder> WorkOrderAccessCode
		{
			get
			{
				return this._WorkOrderAccessCode;
			}
			set
			{
				this._WorkOrderAccessCode.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderAccessCode(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.AccessCode = this;
		}
		private void detach_WorkOrderAccessCode(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.AccessCode = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Project with labelkey='Project'
		static public string ProjectLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Project").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private EntitySet<WorkOrder> _WorkOrderProject;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	#endregion

		public Project()
		{
			this._WorkOrderProject = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrderProject), new Action<WorkOrder>(this.detach_WorkOrderProject));
			OnCreated();
		}
		/// Denotes the Project's Id column with type id(nonnull) with labelkey='Id'
		static public string Project_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Project),Name="Project_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Project's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string Project_Code{ get{return WorkOrderLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Project),Name="Project_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the Project's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string Project_Hidden{ get{return WorkOrderLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Project),Name="Project_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the Project's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string Project_Desc{ get{return WorkOrderLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Project),Name="Project_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the Project's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string Project_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Project),Name="Project_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_WorkOrder", Storage="_WorkOrderProject", ThisKey="Id", OtherKey="ProjectID")]
		public EntitySet<WorkOrder> WorkOrderProject
		{
			get
			{
				return this._WorkOrderProject;
			}
			set
			{
				this._WorkOrderProject.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderProject(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		private void detach_WorkOrderProject(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderPriority")]
	public partial class WorkOrderPriority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderPriority with labelkey='Work Order Priority'
		static public string WorkOrderPriorityLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Work Order Priority").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private short _Rank;
		private EntitySet<WorkOrder> _WorkOrderWorkOrderPriority;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnRankChanging(short value);
	partial void OnRankChanged();
	#endregion

		public WorkOrderPriority()
		{
			this._WorkOrderWorkOrderPriority = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrderWorkOrderPriority), new Action<WorkOrder>(this.detach_WorkOrderWorkOrderPriority));
			OnCreated();
		}
		/// Denotes the WorkOrderPriority's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderPriority_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderPriority),Name="WorkOrderPriority_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrderPriority's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string WorkOrderPriority_Code{ get{return WorkOrderLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderPriority),Name="WorkOrderPriority_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the WorkOrderPriority's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string WorkOrderPriority_Hidden{ get{return WorkOrderLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderPriority),Name="WorkOrderPriority_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the WorkOrderPriority's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string WorkOrderPriority_Desc{ get{return WorkOrderLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderPriority),Name="WorkOrderPriority_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the WorkOrderPriority's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string WorkOrderPriority_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderPriority),Name="WorkOrderPriority_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the WorkOrderPriority's Rank column with type integer(nonnull, 16) with labelkey='Rank'
		static public string WorkOrderPriority_Rank{ get{return WorkOrderLabelKdsMBLabel.K("Rank").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderPriority),Name="WorkOrderPriority_Rank")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="SMALLINT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public short Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged();
					this.OnRankChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderPriority_WorkOrder", Storage="_WorkOrderWorkOrderPriority", ThisKey="Id", OtherKey="WorkOrderPriorityID")]
		public EntitySet<WorkOrder> WorkOrderWorkOrderPriority
		{
			get
			{
				return this._WorkOrderWorkOrderPriority;
			}
			set
			{
				this._WorkOrderWorkOrderPriority.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderWorkOrderPriority(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderPriority = this;
		}
		private void detach_WorkOrderWorkOrderPriority(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderPriority = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CloseCode")]
	public partial class CloseCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table CloseCode with labelkey='Close Code'
		static public string CloseCodeLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Close Code").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private EntitySet<WorkOrder> _WorkOrderCloseCode;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	#endregion

		public CloseCode()
		{
			this._WorkOrderCloseCode = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrderCloseCode), new Action<WorkOrder>(this.detach_WorkOrderCloseCode));
			OnCreated();
		}
		/// Denotes the CloseCode's Id column with type id(nonnull) with labelkey='Id'
		static public string CloseCode_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.CloseCode),Name="CloseCode_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the CloseCode's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string CloseCode_Code{ get{return WorkOrderLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.CloseCode),Name="CloseCode_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the CloseCode's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string CloseCode_Hidden{ get{return WorkOrderLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.CloseCode),Name="CloseCode_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the CloseCode's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string CloseCode_Desc{ get{return WorkOrderLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.CloseCode),Name="CloseCode_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the CloseCode's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string CloseCode_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.CloseCode),Name="CloseCode_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CloseCode_WorkOrder", Storage="_WorkOrderCloseCode", ThisKey="Id", OtherKey="CloseCodeID")]
		public EntitySet<WorkOrder> WorkOrderCloseCode
		{
			get
			{
				return this._WorkOrderCloseCode;
			}
			set
			{
				this._WorkOrderCloseCode.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderCloseCode(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.CloseCode = this;
		}
		private void detach_WorkOrderCloseCode(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.CloseCode = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PMGenerationBatch")]
	public partial class PMGenerationBatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PMGenerationBatch with labelkey='PMGenerationBatch'
		static public string PMGenerationBatchLabelKey { get{return WorkOrderLabelKdsMBLabel.K("PMGenerationBatch").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<WorkOrder> _WorkOrderPMGenerationBatch;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public PMGenerationBatch()
		{
			this._WorkOrderPMGenerationBatch = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrderPMGenerationBatch), new Action<WorkOrder>(this.detach_WorkOrderPMGenerationBatch));
			OnCreated();
		}
		/// Denotes the PMGenerationBatch's Id column with type id(nonnull) with labelkey='Id'
		static public string PMGenerationBatch_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.PMGenerationBatch),Name="PMGenerationBatch_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PMGenerationBatch_WorkOrder", Storage="_WorkOrderPMGenerationBatch", ThisKey="Id", OtherKey="PMGenerationBatchID")]
		public EntitySet<WorkOrder> WorkOrderPMGenerationBatch
		{
			get
			{
				return this._WorkOrderPMGenerationBatch;
			}
			set
			{
				this._WorkOrderPMGenerationBatch.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderPMGenerationBatch(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.PMGenerationBatch = this;
		}
		private void detach_WorkOrderPMGenerationBatch(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.PMGenerationBatch = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActualItemLocation")]
	public partial class ActualItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ActualItemLocation with labelkey='ActualItemLocation'
		static public string ActualItemLocationLabelKey { get{return WorkOrderLabelKdsMBLabel.K("ActualItemLocation").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Object _TotalCost;
		private System.Object _OnHand;
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnTotalCostChanging(System.Object value);
	partial void OnTotalCostChanged();
	partial void OnOnHandChanging(System.Object value);
	partial void OnOnHandChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ActualItemLocation()
		{
			OnCreated();
		}
		/// Denotes the ActualItemLocation's TotalCost column with type null(nonnull) with labelkey='TotalCost'
		static public string ActualItemLocation_TotalCost{ get{return WorkOrderLabelKdsMBLabel.K("TotalCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.ActualItemLocation),Name="ActualItemLocation_TotalCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged();
					this.OnTotalCostChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's OnHand column with type null(nonnull) with labelkey='OnHand'
		static public string ActualItemLocation_OnHand{ get{return WorkOrderLabelKdsMBLabel.K("OnHand").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.ActualItemLocation),Name="ActualItemLocation_OnHand")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnHand", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object OnHand
		{
			get
			{
				return this._OnHand;
			}
			set
			{
				if ((this._OnHand != value))
				{
					this.OnOnHandChanging(value);
					this.SendPropertyChanging();
					this._OnHand = value;
					this.SendPropertyChanged();
					this.OnOnHandChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string ActualItemLocation_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.ActualItemLocation),Name="ActualItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemLocation")]
	public partial class ItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemLocation with labelkey='ItemLocation'
		static public string ItemLocationLabelKey { get{return WorkOrderLabelKdsMBLabel.K("ItemLocation").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemLocation()
		{
			OnCreated();
		}
		/// Denotes the ItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemLocation_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.ItemLocation),Name="ItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Demand")]
	public partial class Demand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Demand with labelkey='Demand'
		static public string DemandLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Demand").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public Demand()
		{
			OnCreated();
		}
		/// Denotes the Demand's Id column with type id(nonnull) with labelkey='Id'
		static public string Demand_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Demand),Name="Demand_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationContainment")]
	public partial class LocationContainment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table LocationContainment with labelkey='LocationContainment'
		static public string LocationContainmentLabelKey { get{return WorkOrderLabelKdsMBLabel.K("LocationContainment").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public LocationContainment()
		{
			OnCreated();
		}
		/// Denotes the LocationContainment's Id column with type id(nonnull) with labelkey='Id'
		static public string LocationContainment_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.LocationContainment),Name="LocationContainment_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelativeLocation")]
	public partial class RelativeLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table RelativeLocation with labelkey=''
		static public string RelativeLocationLabelKey { get{return WorkOrderLabelKdsMBLabel.K("").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _ContainingLocationID;
		private string _Code;
		private System.Guid _Id;
		private System.DateTime? _Hidden;
		private string _ExternalTag;
		private System.Guid _LocationID;
		private EntityRef<Location> _ContainingLocation;
		private EntityRef<Location> _BaseLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnContainingLocationIDChanging(System.Guid value);
	partial void OnContainingLocationIDChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnExternalTagChanging(string value);
	partial void OnExternalTagChanged();
	partial void OnLocationIDChanging(System.Guid value);
	partial void OnLocationIDChanged();
	#endregion

		public RelativeLocation()
		{
			this._ContainingLocation = default(EntityRef<Location>);
			this._BaseLocation = default(EntityRef<Location>);
			OnCreated();
		}
		/// Denotes the RelativeLocation's ContainingLocationID column with type link(nonnull, field Location.Id) with labelkey='Containing Location'
		static public string RelativeLocation_ContainingLocationID{ get{return WorkOrderLabelKdsMBLabel.K("Containing Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.RelativeLocation),Name="RelativeLocation_ContainingLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainingLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ContainingLocationID
		{
			get
			{
				return this._ContainingLocationID;
			}
			set
			{
				if ((this._ContainingLocationID != value))
				{
					if (this._ContainingLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContainingLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ContainingLocationID = value;
					this.SendPropertyChanged();
					this.OnContainingLocationIDChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string RelativeLocation_Code{ get{return WorkOrderLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.RelativeLocation),Name="RelativeLocation_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string RelativeLocation_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.RelativeLocation),Name="RelativeLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string RelativeLocation_Hidden{ get{return WorkOrderLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.RelativeLocation),Name="RelativeLocation_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's ExternalTag column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='External Tag'
		static public string RelativeLocation_ExternalTag{ get{return WorkOrderLabelKdsMBLabel.K("External Tag").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.RelativeLocation),Name="RelativeLocation_ExternalTag")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalTag", DbType="NVARCHAR (50)")]
		public string ExternalTag
		{
			get
			{
				return this._ExternalTag;
			}
			set
			{
				if ((this._ExternalTag != value))
				{
					this.OnExternalTagChanging(value);
					this.SendPropertyChanging();
					this._ExternalTag = value;
					this.SendPropertyChanged();
					this.OnExternalTagChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's LocationID column with type link(nonnull, field Location.Id) with labelkey='Location'
		static public string RelativeLocation_LocationID{ get{return WorkOrderLabelKdsMBLabel.K("Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.RelativeLocation),Name="RelativeLocation_LocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._BaseLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged();
					this.OnLocationIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContainingLocation_RelativeLocation", Storage="_ContainingLocation", ThisKey="ContainingLocationID", OtherKey="Id", IsForeignKey=true)]
		public Location ContainingLocation
		{
			get
			{
				return this._ContainingLocation.Entity;
			}
			set
			{
				Location previousValue = this._ContainingLocation.Entity;
				if (((previousValue != value)
							|| (this._ContainingLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContainingLocation.Entity = null;
						previousValue.RelativeLocationContainingLocation.Remove(this);
					}
					this._ContainingLocation.Entity = value;
					if ((value != null))
					{
						value.RelativeLocationContainingLocation.Add(this);
						this._ContainingLocationID = value.Id;
					}
					else
					{
						this._ContainingLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseLocation_RelativeLocation", Storage="_BaseLocation", ThisKey="LocationID", OtherKey="Id", IsForeignKey=true)]
		public Location BaseLocation
		{
			get
			{
				return this._BaseLocation.Entity;
			}
			set
			{
				Location previousValue = this._BaseLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseLocation.Entity = null;
					}
					this._BaseLocation.Entity = value;
					if ((value != null))
					{
						this._LocationID = value.Id;
					}
					else
					{
						this._LocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table User with labelkey='User'
		static public string UserLabelKey { get{return WorkOrderLabelKdsMBLabel.K("User").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _ContactID;
		private System.Guid _Id;
		private EntitySet<WorkOrderStateHistory> _WorkOrderStateHistoryUser;
		private EntityRef<Contact> _Contact;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnContactIDChanging(System.Guid value);
	partial void OnContactIDChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public User()
		{
			this._WorkOrderStateHistoryUser = new EntitySet<WorkOrderStateHistory>(new Action<WorkOrderStateHistory>(this.attach_WorkOrderStateHistoryUser), new Action<WorkOrderStateHistory>(this.detach_WorkOrderStateHistoryUser));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		/// Denotes the User's ContactID column with type link(nonnull, field Contact.Id) with labelkey='Contact'
		static public string User_ContactID{ get{return WorkOrderLabelKdsMBLabel.K("Contact").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.User),Name="User_ContactID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged();
					this.OnContactIDChanged();
				}
			}
		}
		/// Denotes the User's Id column with type id(nonnull) with labelkey='Id'
		static public string User_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.User),Name="User_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WorkOrderStateHistory", Storage="_WorkOrderStateHistoryUser", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<WorkOrderStateHistory> WorkOrderStateHistoryUser
		{
			get
			{
				return this._WorkOrderStateHistoryUser;
			}
			set
			{
				this._WorkOrderStateHistoryUser.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_User", Storage="_Contact", ThisKey="ContactID", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value)
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.UserContact.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.UserContact.Add(this);
						this._ContactID = value.Id;
					}
					else
					{
						this._ContactID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderStateHistoryUser(WorkOrderStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		private void detach_WorkOrderStateHistoryUser(WorkOrderStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderStateHistoryStatus")]
	public partial class WorkOrderStateHistoryStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderStateHistoryStatus with labelkey='Work Order State History Status'
		static public string WorkOrderStateHistoryStatusLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Work Order State History Status").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private EntitySet<WorkOrderStateHistory> _WorkOrderStateHistoryWorkOrderStateHistoryStatus;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	#endregion

		public WorkOrderStateHistoryStatus()
		{
			this._WorkOrderStateHistoryWorkOrderStateHistoryStatus = new EntitySet<WorkOrderStateHistory>(new Action<WorkOrderStateHistory>(this.attach_WorkOrderStateHistoryWorkOrderStateHistoryStatus), new Action<WorkOrderStateHistory>(this.detach_WorkOrderStateHistoryWorkOrderStateHistoryStatus));
			OnCreated();
		}
		/// Denotes the WorkOrderStateHistoryStatus's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderStateHistoryStatus_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistoryStatus),Name="WorkOrderStateHistoryStatus_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistoryStatus's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string WorkOrderStateHistoryStatus_Code{ get{return WorkOrderLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistoryStatus),Name="WorkOrderStateHistoryStatus_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistoryStatus's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string WorkOrderStateHistoryStatus_Hidden{ get{return WorkOrderLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistoryStatus),Name="WorkOrderStateHistoryStatus_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistoryStatus's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string WorkOrderStateHistoryStatus_Desc{ get{return WorkOrderLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistoryStatus),Name="WorkOrderStateHistoryStatus_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the WorkOrderStateHistoryStatus's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string WorkOrderStateHistoryStatus_Comment{ get{return WorkOrderLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.WorkOrderStateHistoryStatus),Name="WorkOrderStateHistoryStatus_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderStateHistoryStatus_WorkOrderStateHistory", Storage="_WorkOrderStateHistoryWorkOrderStateHistoryStatus", ThisKey="Id", OtherKey="WorkOrderStateHistoryStatusID")]
		public EntitySet<WorkOrderStateHistory> WorkOrderStateHistoryWorkOrderStateHistoryStatus
		{
			get
			{
				return this._WorkOrderStateHistoryWorkOrderStateHistoryStatus;
			}
			set
			{
				this._WorkOrderStateHistoryWorkOrderStateHistoryStatus.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderStateHistoryWorkOrderStateHistoryStatus(WorkOrderStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderStateHistoryStatus = this;
		}
		private void detach_WorkOrderStateHistoryWorkOrderStateHistoryStatus(WorkOrderStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderStateHistoryStatus = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Request")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Request with labelkey='Request'
		static public string RequestLabelKey { get{return WorkOrderLabelKdsMBLabel.K("Request").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public Request()
		{
			OnCreated();
		}
		/// Denotes the Request's Id column with type id(nonnull) with labelkey='Id'
		static public string Request_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.Request),Name="Request_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestedWorkOrder")]
	public partial class RequestedWorkOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table RequestedWorkOrder with labelkey='RequestedWorkOrder'
		static public string RequestedWorkOrderLabelKey { get{return WorkOrderLabelKdsMBLabel.K("RequestedWorkOrder").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public RequestedWorkOrder()
		{
			OnCreated();
		}
		/// Denotes the RequestedWorkOrder's Id column with type id(nonnull) with labelkey='Id'
		static public string RequestedWorkOrder_Id{ get{return WorkOrderLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WorkOrderEntities.RequestedWorkOrder),Name="RequestedWorkOrder_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	internal class WorkOrderLabelKdsMBLabel : Thinkage.Libraries.Translation.GeneralKeyBuilder {
		const string LabelContext = "dsMBLabel";

		static WorkOrderLabelKdsMBLabel Instance = new WorkOrderLabelKdsMBLabel();
		protected WorkOrderLabelKdsMBLabel() {
		}
		protected override Thinkage.Libraries.Translation.ContextReference GetContext() {
			return Thinkage.Libraries.Translation.ContextReference.New(LabelContext);
		}
		public static Thinkage.Libraries.Translation.Key K([Thinkage.Libraries.Translation.Context(LabelContext)]string s) {
			return Instance.BuildKey(s);
		}
	}
}
#pragma warning restore 1591

