


	
	
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//		Template file LINQGenerationTemplate.xml
//		Vault version 31
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Thinkage.MainBoss.WebAccess.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;

	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Master")]
	public partial class ItemCountValueDataContext : System.Data.Linq.DataContext
	{
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

	#region Extensibility Method Definitions
	partial void OnCreated();
	partial void InsertAccountingTransaction(ItemCountValueEntities.AccountingTransaction instance);
	partial void UpdateAccountingTransaction(ItemCountValueEntities.AccountingTransaction instance);
	partial void DeleteAccountingTransaction(ItemCountValueEntities.AccountingTransaction instance);
	partial void InsertCostCenter(ItemCountValueEntities.CostCenter instance);
	partial void UpdateCostCenter(ItemCountValueEntities.CostCenter instance);
	partial void DeleteCostCenter(ItemCountValueEntities.CostCenter instance);
	partial void InsertUser(ItemCountValueEntities.User instance);
	partial void UpdateUser(ItemCountValueEntities.User instance);
	partial void DeleteUser(ItemCountValueEntities.User instance);
	partial void InsertLocation(ItemCountValueEntities.Location instance);
	partial void UpdateLocation(ItemCountValueEntities.Location instance);
	partial void DeleteLocation(ItemCountValueEntities.Location instance);
	partial void InsertLocationContainment(ItemCountValueEntities.LocationContainment instance);
	partial void UpdateLocationContainment(ItemCountValueEntities.LocationContainment instance);
	partial void DeleteLocationContainment(ItemCountValueEntities.LocationContainment instance);
	partial void InsertPostalAddress(ItemCountValueEntities.PostalAddress instance);
	partial void UpdatePostalAddress(ItemCountValueEntities.PostalAddress instance);
	partial void DeletePostalAddress(ItemCountValueEntities.PostalAddress instance);
	partial void InsertRelativeLocation(ItemCountValueEntities.RelativeLocation instance);
	partial void UpdateRelativeLocation(ItemCountValueEntities.RelativeLocation instance);
	partial void DeleteRelativeLocation(ItemCountValueEntities.RelativeLocation instance);
	partial void InsertWorkOrder(ItemCountValueEntities.WorkOrder instance);
	partial void UpdateWorkOrder(ItemCountValueEntities.WorkOrder instance);
	partial void DeleteWorkOrder(ItemCountValueEntities.WorkOrder instance);
	partial void InsertTemporaryStorage(ItemCountValueEntities.TemporaryStorage instance);
	partial void UpdateTemporaryStorage(ItemCountValueEntities.TemporaryStorage instance);
	partial void DeleteTemporaryStorage(ItemCountValueEntities.TemporaryStorage instance);
	partial void InsertWorkOrderTemplate(ItemCountValueEntities.WorkOrderTemplate instance);
	partial void UpdateWorkOrderTemplate(ItemCountValueEntities.WorkOrderTemplate instance);
	partial void DeleteWorkOrderTemplate(ItemCountValueEntities.WorkOrderTemplate instance);
	partial void InsertTemplateTemporaryStorage(ItemCountValueEntities.TemplateTemporaryStorage instance);
	partial void UpdateTemplateTemporaryStorage(ItemCountValueEntities.TemplateTemporaryStorage instance);
	partial void DeleteTemplateTemporaryStorage(ItemCountValueEntities.TemplateTemporaryStorage instance);
	partial void InsertPermanentStorage(ItemCountValueEntities.PermanentStorage instance);
	partial void UpdatePermanentStorage(ItemCountValueEntities.PermanentStorage instance);
	partial void DeletePermanentStorage(ItemCountValueEntities.PermanentStorage instance);
	partial void InsertItemLocation(ItemCountValueEntities.ItemLocation instance);
	partial void UpdateItemLocation(ItemCountValueEntities.ItemLocation instance);
	partial void DeleteItemLocation(ItemCountValueEntities.ItemLocation instance);
	partial void InsertItem(ItemCountValueEntities.Item instance);
	partial void UpdateItem(ItemCountValueEntities.Item instance);
	partial void DeleteItem(ItemCountValueEntities.Item instance);
	partial void InsertItemPrice(ItemCountValueEntities.ItemPrice instance);
	partial void UpdateItemPrice(ItemCountValueEntities.ItemPrice instance);
	partial void DeleteItemPrice(ItemCountValueEntities.ItemPrice instance);
	partial void InsertActualItemLocation(ItemCountValueEntities.ActualItemLocation instance);
	partial void UpdateActualItemLocation(ItemCountValueEntities.ActualItemLocation instance);
	partial void DeleteActualItemLocation(ItemCountValueEntities.ActualItemLocation instance);
	partial void InsertItemCountValue(ItemCountValueEntities.ItemCountValue instance);
	partial void UpdateItemCountValue(ItemCountValueEntities.ItemCountValue instance);
	partial void DeleteItemCountValue(ItemCountValueEntities.ItemCountValue instance);
	partial void InsertItemAdjustment(ItemCountValueEntities.ItemAdjustment instance);
	partial void UpdateItemAdjustment(ItemCountValueEntities.ItemAdjustment instance);
	partial void DeleteItemAdjustment(ItemCountValueEntities.ItemAdjustment instance);
	partial void InsertItemIssue(ItemCountValueEntities.ItemIssue instance);
	partial void UpdateItemIssue(ItemCountValueEntities.ItemIssue instance);
	partial void DeleteItemIssue(ItemCountValueEntities.ItemIssue instance);
	partial void InsertActualItem(ItemCountValueEntities.ActualItem instance);
	partial void UpdateActualItem(ItemCountValueEntities.ActualItem instance);
	partial void DeleteActualItem(ItemCountValueEntities.ActualItem instance);
	partial void InsertReceiveItemPO(ItemCountValueEntities.ReceiveItemPO instance);
	partial void UpdateReceiveItemPO(ItemCountValueEntities.ReceiveItemPO instance);
	partial void DeleteReceiveItemPO(ItemCountValueEntities.ReceiveItemPO instance);
	partial void InsertReceiveItemNonPO(ItemCountValueEntities.ReceiveItemNonPO instance);
	partial void UpdateReceiveItemNonPO(ItemCountValueEntities.ReceiveItemNonPO instance);
	partial void DeleteReceiveItemNonPO(ItemCountValueEntities.ReceiveItemNonPO instance);
	partial void InsertItemCountValueVoid(ItemCountValueEntities.ItemCountValueVoid instance);
	partial void UpdateItemCountValueVoid(ItemCountValueEntities.ItemCountValueVoid instance);
	partial void DeleteItemCountValueVoid(ItemCountValueEntities.ItemCountValueVoid instance);
	partial void InsertWorkOrderStateHistory(ItemCountValueEntities.WorkOrderStateHistory instance);
	partial void UpdateWorkOrderStateHistory(ItemCountValueEntities.WorkOrderStateHistory instance);
	partial void DeleteWorkOrderStateHistory(ItemCountValueEntities.WorkOrderStateHistory instance);
	partial void InsertWorkOrderState(ItemCountValueEntities.WorkOrderState instance);
	partial void UpdateWorkOrderState(ItemCountValueEntities.WorkOrderState instance);
	partial void DeleteWorkOrderState(ItemCountValueEntities.WorkOrderState instance);
	partial void InsertDemand(ItemCountValueEntities.Demand instance);
	partial void UpdateDemand(ItemCountValueEntities.Demand instance);
	partial void DeleteDemand(ItemCountValueEntities.Demand instance);
	partial void InsertDemandItem(ItemCountValueEntities.DemandItem instance);
	partial void UpdateDemandItem(ItemCountValueEntities.DemandItem instance);
	partial void DeleteDemandItem(ItemCountValueEntities.DemandItem instance);
	partial void InsertPurchaseOrder(ItemCountValueEntities.PurchaseOrder instance);
	partial void UpdatePurchaseOrder(ItemCountValueEntities.PurchaseOrder instance);
	partial void DeletePurchaseOrder(ItemCountValueEntities.PurchaseOrder instance);
	partial void InsertPurchaseOrderStateHistory(ItemCountValueEntities.PurchaseOrderStateHistory instance);
	partial void UpdatePurchaseOrderStateHistory(ItemCountValueEntities.PurchaseOrderStateHistory instance);
	partial void DeletePurchaseOrderStateHistory(ItemCountValueEntities.PurchaseOrderStateHistory instance);
	partial void InsertPurchaseOrderState(ItemCountValueEntities.PurchaseOrderState instance);
	partial void UpdatePurchaseOrderState(ItemCountValueEntities.PurchaseOrderState instance);
	partial void DeletePurchaseOrderState(ItemCountValueEntities.PurchaseOrderState instance);
	partial void InsertPOLine(ItemCountValueEntities.POLine instance);
	partial void UpdatePOLine(ItemCountValueEntities.POLine instance);
	partial void DeletePOLine(ItemCountValueEntities.POLine instance);
	partial void InsertPOLineItem(ItemCountValueEntities.POLineItem instance);
	partial void UpdatePOLineItem(ItemCountValueEntities.POLineItem instance);
	partial void DeletePOLineItem(ItemCountValueEntities.POLineItem instance);
	partial void InsertItemTransfer(ItemCountValueEntities.ItemTransfer instance);
	partial void UpdateItemTransfer(ItemCountValueEntities.ItemTransfer instance);
	partial void DeleteItemTransfer(ItemCountValueEntities.ItemTransfer instance);
	partial void InsertPermanentItemLocation(ItemCountValueEntities.PermanentItemLocation instance);
	partial void UpdatePermanentItemLocation(ItemCountValueEntities.PermanentItemLocation instance);
	partial void DeletePermanentItemLocation(ItemCountValueEntities.PermanentItemLocation instance);
	partial void InsertTemporaryItemLocation(ItemCountValueEntities.TemporaryItemLocation instance);
	partial void UpdateTemporaryItemLocation(ItemCountValueEntities.TemporaryItemLocation instance);
	partial void DeleteTemporaryItemLocation(ItemCountValueEntities.TemporaryItemLocation instance);
	partial void InsertTemplateItemLocation(ItemCountValueEntities.TemplateItemLocation instance);
	partial void UpdateTemplateItemLocation(ItemCountValueEntities.TemplateItemLocation instance);
	partial void DeleteTemplateItemLocation(ItemCountValueEntities.TemplateItemLocation instance);
	partial void InsertRationalizedInventoryActivityDeltas(ItemCountValueEntities.RationalizedInventoryActivityDeltas instance);
	partial void UpdateRationalizedInventoryActivityDeltas(ItemCountValueEntities.RationalizedInventoryActivityDeltas instance);
	partial void DeleteRationalizedInventoryActivityDeltas(ItemCountValueEntities.RationalizedInventoryActivityDeltas instance);
	partial void InsertItemCategory(ItemCountValueEntities.ItemCategory instance);
	partial void UpdateItemCategory(ItemCountValueEntities.ItemCategory instance);
	partial void DeleteItemCategory(ItemCountValueEntities.ItemCategory instance);
	partial void InsertUnitOfMeasure(ItemCountValueEntities.UnitOfMeasure instance);
	partial void UpdateUnitOfMeasure(ItemCountValueEntities.UnitOfMeasure instance);
	partial void DeleteUnitOfMeasure(ItemCountValueEntities.UnitOfMeasure instance);
	partial void InsertItemAdjustmentCode(ItemCountValueEntities.ItemAdjustmentCode instance);
	partial void UpdateItemAdjustmentCode(ItemCountValueEntities.ItemAdjustmentCode instance);
	partial void DeleteItemAdjustmentCode(ItemCountValueEntities.ItemAdjustmentCode instance);
	partial void InsertVoidCode(ItemCountValueEntities.VoidCode instance);
	partial void UpdateVoidCode(ItemCountValueEntities.VoidCode instance);
	partial void DeleteVoidCode(ItemCountValueEntities.VoidCode instance);
	partial void InsertItemActivity(ItemCountValueEntities.ItemActivity instance);
	partial void UpdateItemActivity(ItemCountValueEntities.ItemActivity instance);
	partial void DeleteItemActivity(ItemCountValueEntities.ItemActivity instance);
	#endregion

		public ItemCountValueDataContext() :
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Master"].ConnectionString, mappingSource)
		{
			OnCreated();
		}

		public ItemCountValueDataContext(string connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public ItemCountValueDataContext(System.Data.IDbConnection connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public ItemCountValueDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public ItemCountValueDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}
		public System.Data.Linq.Table<ItemCountValueEntities.AccountingTransaction> AccountingTransaction
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.AccountingTransaction>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.CostCenter> CostCenter
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.CostCenter>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.User> User
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.User>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.Location> Location
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.Location>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.LocationContainment> LocationContainment
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.LocationContainment>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.PostalAddress> PostalAddress
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.PostalAddress>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.RelativeLocation> RelativeLocation
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.RelativeLocation>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.WorkOrder> WorkOrder
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.WorkOrder>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.TemporaryStorage> TemporaryStorage
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.TemporaryStorage>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.WorkOrderTemplate> WorkOrderTemplate
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.WorkOrderTemplate>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.TemplateTemporaryStorage> TemplateTemporaryStorage
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.TemplateTemporaryStorage>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.PermanentStorage> PermanentStorage
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.PermanentStorage>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ItemLocation> ItemLocation
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ItemLocation>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.Item> Item
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.Item>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ItemPrice> ItemPrice
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ItemPrice>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ActualItemLocation> ActualItemLocation
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ActualItemLocation>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ItemCountValue> ItemCountValue
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ItemCountValue>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ItemAdjustment> ItemAdjustment
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ItemAdjustment>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ItemIssue> ItemIssue
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ItemIssue>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ActualItem> ActualItem
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ActualItem>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ReceiveItemPO> ReceiveItemPO
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ReceiveItemPO>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ReceiveItemNonPO> ReceiveItemNonPO
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ReceiveItemNonPO>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ItemCountValueVoid> ItemCountValueVoid
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ItemCountValueVoid>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.WorkOrderStateHistory> WorkOrderStateHistory
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.WorkOrderStateHistory>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.WorkOrderState> WorkOrderState
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.WorkOrderState>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.Demand> Demand
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.Demand>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.DemandItem> DemandItem
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.DemandItem>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.PurchaseOrder> PurchaseOrder
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.PurchaseOrder>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.PurchaseOrderStateHistory> PurchaseOrderStateHistory
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.PurchaseOrderStateHistory>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.PurchaseOrderState> PurchaseOrderState
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.PurchaseOrderState>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.POLine> POLine
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.POLine>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.POLineItem> POLineItem
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.POLineItem>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ItemTransfer> ItemTransfer
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ItemTransfer>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.PermanentItemLocation> PermanentItemLocation
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.PermanentItemLocation>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.TemporaryItemLocation> TemporaryItemLocation
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.TemporaryItemLocation>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.TemplateItemLocation> TemplateItemLocation
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.TemplateItemLocation>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.RationalizedInventoryActivityDeltas> RationalizedInventoryActivityDeltas
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.RationalizedInventoryActivityDeltas>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ItemCategory> ItemCategory
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ItemCategory>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.UnitOfMeasure> UnitOfMeasure
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.UnitOfMeasure>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ItemAdjustmentCode> ItemAdjustmentCode
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ItemAdjustmentCode>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.VoidCode> VoidCode
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.VoidCode>();
			}
		}
		public System.Data.Linq.Table<ItemCountValueEntities.ItemActivity> ItemActivity
		{
			get
			{
				return this.GetTable<ItemCountValueEntities.ItemActivity>();
			}
		}
  
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.[_vgetDBVersion]", IsComposable=true)]
		public string _vgetDBVersion()
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
	}
}
namespace ItemCountValueEntities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	using System.Runtime.CompilerServices;
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountingTransaction")]
	public partial class AccountingTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table AccountingTransaction with labelkey='Accounting Transaction'
		static public string AccountingTransactionLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Accounting Transaction").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.DateTime _EntryDate;
		private System.DateTime _EffectiveDate;
		private System.Guid _UserID;
		private System.Decimal _Cost;
		private System.Guid _FromCostCenterID;
		private System.Guid _ToCostCenterID;
		private string _AccountingSystemTransactionID;
		private EntitySet<RationalizedInventoryActivityDeltas> _RationalizedInventoryActivityDeltasAccountingTransaction;
		private EntitySet<ItemActivity> _ItemActivityAccountingTransaction;
		private EntityRef<User> _User;
		private EntityRef<CostCenter> _FromCostCenter;
		private EntityRef<CostCenter> _ToCostCenter;
		private EntityRef<ItemCountValue> _DerivedItemCountValue;
		private EntityRef<ItemCountValueVoid> _DerivedItemCountValueVoid;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnEntryDateChanging(System.DateTime value);
	partial void OnEntryDateChanged();
	partial void OnEffectiveDateChanging(System.DateTime value);
	partial void OnEffectiveDateChanged();
	partial void OnUserIDChanging(System.Guid value);
	partial void OnUserIDChanged();
	partial void OnCostChanging(System.Decimal value);
	partial void OnCostChanged();
	partial void OnFromCostCenterIDChanging(System.Guid value);
	partial void OnFromCostCenterIDChanged();
	partial void OnToCostCenterIDChanging(System.Guid value);
	partial void OnToCostCenterIDChanged();
	partial void OnAccountingSystemTransactionIDChanging(string value);
	partial void OnAccountingSystemTransactionIDChanged();
	#endregion

		public AccountingTransaction()
		{
			this._RationalizedInventoryActivityDeltasAccountingTransaction = new EntitySet<RationalizedInventoryActivityDeltas>(new Action<RationalizedInventoryActivityDeltas>(this.attach_RationalizedInventoryActivityDeltasAccountingTransaction), new Action<RationalizedInventoryActivityDeltas>(this.detach_RationalizedInventoryActivityDeltasAccountingTransaction));
			this._ItemActivityAccountingTransaction = new EntitySet<ItemActivity>(new Action<ItemActivity>(this.attach_ItemActivityAccountingTransaction), new Action<ItemActivity>(this.detach_ItemActivityAccountingTransaction));
			this._User = default(EntityRef<User>);
			this._FromCostCenter = default(EntityRef<CostCenter>);
			this._ToCostCenter = default(EntityRef<CostCenter>);
			this._DerivedItemCountValue = default(EntityRef<ItemCountValue>);
			this._DerivedItemCountValueVoid = default(EntityRef<ItemCountValueVoid>);
			OnCreated();
		}
		/// Denotes the AccountingTransaction's Id column with type id(nonnull) with labelkey='Id'
		static public string AccountingTransaction_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.AccountingTransaction),Name="AccountingTransaction_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's EntryDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EntryDate'
		static public string AccountingTransaction_EntryDate{ get{return ItemCountValueLabelKdsMBLabel.K("EntryDate").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.AccountingTransaction),Name="AccountingTransaction_EntryDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged();
					this.OnEntryDateChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's EffectiveDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EffectiveDate'
		static public string AccountingTransaction_EffectiveDate{ get{return ItemCountValueLabelKdsMBLabel.K("EffectiveDate").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.AccountingTransaction),Name="AccountingTransaction_EffectiveDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged();
					this.OnEffectiveDateChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's UserID column with type link(nonnull, field User.Id) with labelkey='User'
		static public string AccountingTransaction_UserID{ get{return ItemCountValueLabelKdsMBLabel.K("User").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.AccountingTransaction),Name="AccountingTransaction_UserID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged();
					this.OnUserIDChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's Cost column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
		static public string AccountingTransaction_Cost{ get{return ItemCountValueLabelKdsMBLabel.K("Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.AccountingTransaction),Name="AccountingTransaction_Cost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged();
					this.OnCostChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's FromCostCenterID column with type link(nonnull, field CostCenter.Id) with labelkey='From Cost Center'
		static public string AccountingTransaction_FromCostCenterID{ get{return ItemCountValueLabelKdsMBLabel.K("From Cost Center").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.AccountingTransaction),Name="AccountingTransaction_FromCostCenterID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromCostCenterID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid FromCostCenterID
		{
			get
			{
				return this._FromCostCenterID;
			}
			set
			{
				if ((this._FromCostCenterID != value))
				{
					if (this._FromCostCenter.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromCostCenterIDChanging(value);
					this.SendPropertyChanging();
					this._FromCostCenterID = value;
					this.SendPropertyChanged();
					this.OnFromCostCenterIDChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's ToCostCenterID column with type link(nonnull, field CostCenter.Id) with labelkey='To Cost Center'
		static public string AccountingTransaction_ToCostCenterID{ get{return ItemCountValueLabelKdsMBLabel.K("To Cost Center").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.AccountingTransaction),Name="AccountingTransaction_ToCostCenterID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToCostCenterID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ToCostCenterID
		{
			get
			{
				return this._ToCostCenterID;
			}
			set
			{
				if ((this._ToCostCenterID != value))
				{
					if (this._ToCostCenter.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToCostCenterIDChanging(value);
					this.SendPropertyChanging();
					this._ToCostCenterID = value;
					this.SendPropertyChanged();
					this.OnToCostCenterIDChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's AccountingSystemTransactionID column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Accounting System Reference'
		static public string AccountingTransaction_AccountingSystemTransactionID{ get{return ItemCountValueLabelKdsMBLabel.K("Accounting System Reference").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.AccountingTransaction),Name="AccountingTransaction_AccountingSystemTransactionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingSystemTransactionID", DbType="NVARCHAR(MAX)")]
		public string AccountingSystemTransactionID
		{
			get
			{
				return this._AccountingSystemTransactionID;
			}
			set
			{
				if ((this._AccountingSystemTransactionID != value))
				{
					this.OnAccountingSystemTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountingSystemTransactionID = value;
					this.SendPropertyChanged();
					this.OnAccountingSystemTransactionIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_RationalizedInventoryActivityDeltas", Storage="_RationalizedInventoryActivityDeltasAccountingTransaction", ThisKey="Id", OtherKey="AccountingTransactionID")]
		public EntitySet<RationalizedInventoryActivityDeltas> RationalizedInventoryActivityDeltasAccountingTransaction
		{
			get
			{
				return this._RationalizedInventoryActivityDeltasAccountingTransaction;
			}
			set
			{
				this._RationalizedInventoryActivityDeltasAccountingTransaction.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_DerivedItemCountValue", Storage="_DerivedItemCountValue", ThisKey="Id", OtherKey="AccountingTransactionID", IsUnique=true, IsForeignKey=false)]
		public ItemCountValue DerivedItemCountValue
		{
			get
			{
				return this._DerivedItemCountValue.Entity;
			}
			set
			{
				ItemCountValue previousValue = this._DerivedItemCountValue.Entity;
				if (((previousValue != value)
							|| (this._DerivedItemCountValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedItemCountValue.Entity = null;
						previousValue.BaseAccountingTransaction = null;
					}
					this._DerivedItemCountValue.Entity = value;
					if ((value != null))
					{
						value.BaseAccountingTransaction = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_DerivedItemCountValueVoid", Storage="_DerivedItemCountValueVoid", ThisKey="Id", OtherKey="AccountingTransactionID", IsUnique=true, IsForeignKey=false)]
		public ItemCountValueVoid DerivedItemCountValueVoid
		{
			get
			{
				return this._DerivedItemCountValueVoid.Entity;
			}
			set
			{
				ItemCountValueVoid previousValue = this._DerivedItemCountValueVoid.Entity;
				if (((previousValue != value)
							|| (this._DerivedItemCountValueVoid.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedItemCountValueVoid.Entity = null;
						previousValue.BaseAccountingTransaction = null;
					}
					this._DerivedItemCountValueVoid.Entity = value;
					if ((value != null))
					{
						value.BaseAccountingTransaction = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_ItemActivity", Storage="_ItemActivityAccountingTransaction", ThisKey="Id", OtherKey="AccountingTransactionID")]
		public EntitySet<ItemActivity> ItemActivityAccountingTransaction
		{
			get
			{
				return this._ItemActivityAccountingTransaction;
			}
			set
			{
				this._ItemActivityAccountingTransaction.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccountingTransaction", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value)
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AccountingTransactionUser.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AccountingTransactionUser.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FromCostCenter_AccountingTransaction", Storage="_FromCostCenter", ThisKey="FromCostCenterID", OtherKey="Id", IsForeignKey=true)]
		public CostCenter FromCostCenter
		{
			get
			{
				return this._FromCostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._FromCostCenter.Entity;
				if (((previousValue != value)
							|| (this._FromCostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FromCostCenter.Entity = null;
						previousValue.AccountingTransactionFromCostCenter.Remove(this);
					}
					this._FromCostCenter.Entity = value;
					if ((value != null))
					{
						value.AccountingTransactionFromCostCenter.Add(this);
						this._FromCostCenterID = value.Id;
					}
					else
					{
						this._FromCostCenterID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToCostCenter_AccountingTransaction", Storage="_ToCostCenter", ThisKey="ToCostCenterID", OtherKey="Id", IsForeignKey=true)]
		public CostCenter ToCostCenter
		{
			get
			{
				return this._ToCostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._ToCostCenter.Entity;
				if (((previousValue != value)
							|| (this._ToCostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToCostCenter.Entity = null;
						previousValue.AccountingTransactionToCostCenter.Remove(this);
					}
					this._ToCostCenter.Entity = value;
					if ((value != null))
					{
						value.AccountingTransactionToCostCenter.Add(this);
						this._ToCostCenterID = value.Id;
					}
					else
					{
						this._ToCostCenterID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_RationalizedInventoryActivityDeltasAccountingTransaction(RationalizedInventoryActivityDeltas entity)
		{
			this.SendPropertyChanging();
			entity.AccountingTransaction = this;
		}
		private void detach_RationalizedInventoryActivityDeltasAccountingTransaction(RationalizedInventoryActivityDeltas entity)
		{
			this.SendPropertyChanging();
			entity.AccountingTransaction = null;
		}

		private void attach_ItemActivityAccountingTransaction(ItemActivity entity)
		{
			this.SendPropertyChanging();
			entity.AccountingTransaction = this;
		}
		private void detach_ItemActivityAccountingTransaction(ItemActivity entity)
		{
			this.SendPropertyChanging();
			entity.AccountingTransaction = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostCenter")]
	public partial class CostCenter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table CostCenter with labelkey='Cost Center'
		static public string CostCenterLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Cost Center").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private string _GeneralLedgerAccount;
		private EntitySet<AccountingTransaction> _AccountingTransactionFromCostCenter;
		private EntitySet<AccountingTransaction> _AccountingTransactionToCostCenter;
		private EntitySet<ActualItemLocation> _ActualItemLocationCostCenter;
		private EntitySet<ItemAdjustmentCode> _ItemAdjustmentCodeCostCenter;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnGeneralLedgerAccountChanging(string value);
	partial void OnGeneralLedgerAccountChanged();
	#endregion

		public CostCenter()
		{
			this._AccountingTransactionFromCostCenter = new EntitySet<AccountingTransaction>(new Action<AccountingTransaction>(this.attach_AccountingTransactionFromCostCenter), new Action<AccountingTransaction>(this.detach_AccountingTransactionFromCostCenter));
			this._AccountingTransactionToCostCenter = new EntitySet<AccountingTransaction>(new Action<AccountingTransaction>(this.attach_AccountingTransactionToCostCenter), new Action<AccountingTransaction>(this.detach_AccountingTransactionToCostCenter));
			this._ActualItemLocationCostCenter = new EntitySet<ActualItemLocation>(new Action<ActualItemLocation>(this.attach_ActualItemLocationCostCenter), new Action<ActualItemLocation>(this.detach_ActualItemLocationCostCenter));
			this._ItemAdjustmentCodeCostCenter = new EntitySet<ItemAdjustmentCode>(new Action<ItemAdjustmentCode>(this.attach_ItemAdjustmentCodeCostCenter), new Action<ItemAdjustmentCode>(this.detach_ItemAdjustmentCodeCostCenter));
			OnCreated();
		}
		/// Denotes the CostCenter's Id column with type id(nonnull) with labelkey='Id'
		static public string CostCenter_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.CostCenter),Name="CostCenter_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the CostCenter's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string CostCenter_Code{ get{return ItemCountValueLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.CostCenter),Name="CostCenter_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the CostCenter's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string CostCenter_Hidden{ get{return ItemCountValueLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.CostCenter),Name="CostCenter_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the CostCenter's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string CostCenter_Desc{ get{return ItemCountValueLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.CostCenter),Name="CostCenter_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the CostCenter's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string CostCenter_Comment{ get{return ItemCountValueLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.CostCenter),Name="CostCenter_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the CostCenter's GeneralLedgerAccount column with type string(minlength 1, maxlength 160, maxlines 0, trim) with labelkey='GeneralLedgerAccount'
		static public string CostCenter_GeneralLedgerAccount{ get{return ItemCountValueLabelKdsMBLabel.K("GeneralLedgerAccount").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.CostCenter),Name="CostCenter_GeneralLedgerAccount")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneralLedgerAccount", DbType="NVARCHAR (160)")]
		public string GeneralLedgerAccount
		{
			get
			{
				return this._GeneralLedgerAccount;
			}
			set
			{
				if ((this._GeneralLedgerAccount != value))
				{
					this.OnGeneralLedgerAccountChanging(value);
					this.SendPropertyChanging();
					this._GeneralLedgerAccount = value;
					this.SendPropertyChanged();
					this.OnGeneralLedgerAccountChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_AccountingTransaction", Storage="_AccountingTransactionFromCostCenter", ThisKey="Id", OtherKey="FromCostCenterID")]
		public EntitySet<AccountingTransaction> AccountingTransactionFromCostCenter
		{
			get
			{
				return this._AccountingTransactionFromCostCenter;
			}
			set
			{
				this._AccountingTransactionFromCostCenter.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_AccountingTransaction", Storage="_AccountingTransactionToCostCenter", ThisKey="Id", OtherKey="ToCostCenterID")]
		public EntitySet<AccountingTransaction> AccountingTransactionToCostCenter
		{
			get
			{
				return this._AccountingTransactionToCostCenter;
			}
			set
			{
				this._AccountingTransactionToCostCenter.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_ActualItemLocation", Storage="_ActualItemLocationCostCenter", ThisKey="Id", OtherKey="CostCenterID")]
		public EntitySet<ActualItemLocation> ActualItemLocationCostCenter
		{
			get
			{
				return this._ActualItemLocationCostCenter;
			}
			set
			{
				this._ActualItemLocationCostCenter.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_ItemAdjustmentCode", Storage="_ItemAdjustmentCodeCostCenter", ThisKey="Id", OtherKey="CostCenterID")]
		public EntitySet<ItemAdjustmentCode> ItemAdjustmentCodeCostCenter
		{
			get
			{
				return this._ItemAdjustmentCodeCostCenter;
			}
			set
			{
				this._ItemAdjustmentCodeCostCenter.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_AccountingTransactionFromCostCenter(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.FromCostCenter = this;
		}
		private void detach_AccountingTransactionFromCostCenter(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.FromCostCenter = null;
		}

		private void attach_AccountingTransactionToCostCenter(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.ToCostCenter = this;
		}
		private void detach_AccountingTransactionToCostCenter(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.ToCostCenter = null;
		}

		private void attach_ActualItemLocationCostCenter(ActualItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = this;
		}
		private void detach_ActualItemLocationCostCenter(ActualItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = null;
		}

		private void attach_ItemAdjustmentCodeCostCenter(ItemAdjustmentCode entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = this;
		}
		private void detach_ItemAdjustmentCodeCostCenter(ItemAdjustmentCode entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table User with labelkey='User'
		static public string UserLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("User").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<AccountingTransaction> _AccountingTransactionUser;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public User()
		{
			this._AccountingTransactionUser = new EntitySet<AccountingTransaction>(new Action<AccountingTransaction>(this.attach_AccountingTransactionUser), new Action<AccountingTransaction>(this.detach_AccountingTransactionUser));
			OnCreated();
		}
		/// Denotes the User's Id column with type id(nonnull) with labelkey='Id'
		static public string User_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.User),Name="User_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccountingTransaction", Storage="_AccountingTransactionUser", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<AccountingTransaction> AccountingTransactionUser
		{
			get
			{
				return this._AccountingTransactionUser;
			}
			set
			{
				this._AccountingTransactionUser.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_AccountingTransactionUser(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		private void detach_AccountingTransactionUser(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Location with labelkey='Location'
		static public string LocationLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Location").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private string _Desc;
		private string _Comment;
		private System.Data.Linq.Binary _GISLocation;
		private byte? _GISZoom;
		private EntitySet<RelativeLocation> _RelativeLocationContainingLocation;
		private EntitySet<ItemLocation> _ItemLocationLocation;
		private EntityRef<RelativeLocation> _DerivedRelativeLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnGISLocationChanging(System.Data.Linq.Binary value);
	partial void OnGISLocationChanged();
	partial void OnGISZoomChanging(byte? value);
	partial void OnGISZoomChanged();
	#endregion

		public Location()
		{
			this._RelativeLocationContainingLocation = new EntitySet<RelativeLocation>(new Action<RelativeLocation>(this.attach_RelativeLocationContainingLocation), new Action<RelativeLocation>(this.detach_RelativeLocationContainingLocation));
			this._ItemLocationLocation = new EntitySet<ItemLocation>(new Action<ItemLocation>(this.attach_ItemLocationLocation), new Action<ItemLocation>(this.detach_ItemLocationLocation));
			this._DerivedRelativeLocation = default(EntityRef<RelativeLocation>);
			OnCreated();
		}
		/// Denotes the Location's Id column with type id(nonnull) with labelkey='Id'
		static public string Location_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Location),Name="Location_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Location's Code column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Path'
		static public string Location_Code{ get{return ItemCountValueLabelKdsMBLabel.K("Path").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Location),Name="Location_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR(MAX)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the Location's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string Location_Desc{ get{return ItemCountValueLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Location),Name="Location_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the Location's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string Location_Comment{ get{return ItemCountValueLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Location),Name="Location_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the Location's GISLocation column with type geography with labelkey='GISLocation'
		static public string Location_GISLocation{ get{return ItemCountValueLabelKdsMBLabel.K("GISLocation").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Location),Name="Location_GISLocation")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GISLocation", DbType="VARBINARY(MAX)")]
		public System.Data.Linq.Binary GISLocation
		{
			get
			{
				return this._GISLocation;
			}
			set
			{
				if ((this._GISLocation != value))
				{
					this.OnGISLocationChanging(value);
					this.SendPropertyChanging();
					this._GISLocation = value;
					this.SendPropertyChanged();
					this.OnGISLocationChanged();
				}
			}
		}
		/// Denotes the Location's GISZoom column with type integer(min 0, max 20) with labelkey='GISZoom'
		static public string Location_GISZoom{ get{return ItemCountValueLabelKdsMBLabel.K("GISZoom").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Location),Name="Location_GISZoom")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GISZoom", DbType="TINYINT")]
		public byte? GISZoom
		{
			get
			{
				return this._GISZoom;
			}
			set
			{
				if ((this._GISZoom != value))
				{
					this.OnGISZoomChanging(value);
					this.SendPropertyChanging();
					this._GISZoom = value;
					this.SendPropertyChanged();
					this.OnGISZoomChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_RelativeLocation", Storage="_RelativeLocationContainingLocation", ThisKey="Id", OtherKey="ContainingLocationID")]
		public EntitySet<RelativeLocation> RelativeLocationContainingLocation
		{
			get
			{
				return this._RelativeLocationContainingLocation;
			}
			set
			{
				this._RelativeLocationContainingLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_DerivedRelativeLocation", Storage="_DerivedRelativeLocation", ThisKey="Id", OtherKey="LocationID", IsUnique=true, IsForeignKey=false)]
		public RelativeLocation DerivedRelativeLocation
		{
			get
			{
				return this._DerivedRelativeLocation.Entity;
			}
			set
			{
				RelativeLocation previousValue = this._DerivedRelativeLocation.Entity;
				if (((previousValue != value)
							|| (this._DerivedRelativeLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedRelativeLocation.Entity = null;
						previousValue.BaseLocation = null;
					}
					this._DerivedRelativeLocation.Entity = value;
					if ((value != null))
					{
						value.BaseLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ItemLocation", Storage="_ItemLocationLocation", ThisKey="Id", OtherKey="LocationID")]
		public EntitySet<ItemLocation> ItemLocationLocation
		{
			get
			{
				return this._ItemLocationLocation;
			}
			set
			{
				this._ItemLocationLocation.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_RelativeLocationContainingLocation(RelativeLocation entity)
		{
			this.SendPropertyChanging();
			entity.ContainingLocation = this;
		}
		private void detach_RelativeLocationContainingLocation(RelativeLocation entity)
		{
			this.SendPropertyChanging();
			entity.ContainingLocation = null;
		}

		private void attach_ItemLocationLocation(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		private void detach_ItemLocationLocation(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationContainment")]
	public partial class LocationContainment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table LocationContainment with labelkey='LocationContainment'
		static public string LocationContainmentLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("LocationContainment").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public LocationContainment()
		{
			OnCreated();
		}
		/// Denotes the LocationContainment's Id column with type id(nonnull) with labelkey='Id'
		static public string LocationContainment_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.LocationContainment),Name="LocationContainment_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PostalAddress")]
	public partial class PostalAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PostalAddress with labelkey='PostalAddress'
		static public string PostalAddressLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("PostalAddress").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Object _Code;
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnCodeChanging(System.Object value);
	partial void OnCodeChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public PostalAddress()
		{
			OnCreated();
		}
		/// Denotes the PostalAddress's Code column with type null(nonnull) with labelkey='Code'
		static public string PostalAddress_Code{ get{return ItemCountValueLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PostalAddress),Name="PostalAddress_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the PostalAddress's Id column with type id(nonnull) with labelkey='Id'
		static public string PostalAddress_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PostalAddress),Name="PostalAddress_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelativeLocation")]
	public partial class RelativeLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table RelativeLocation with labelkey=''
		static public string RelativeLocationLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _ContainingLocationID;
		private string _Code;
		private System.Guid _Id;
		private System.DateTime? _Hidden;
		private string _ExternalTag;
		private System.Guid _LocationID;
		private EntityRef<Location> _ContainingLocation;
		private EntityRef<Location> _BaseLocation;
		private EntityRef<PermanentStorage> _DerivedPermanentStorage;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnContainingLocationIDChanging(System.Guid value);
	partial void OnContainingLocationIDChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnExternalTagChanging(string value);
	partial void OnExternalTagChanged();
	partial void OnLocationIDChanging(System.Guid value);
	partial void OnLocationIDChanged();
	#endregion

		public RelativeLocation()
		{
			this._ContainingLocation = default(EntityRef<Location>);
			this._BaseLocation = default(EntityRef<Location>);
			this._DerivedPermanentStorage = default(EntityRef<PermanentStorage>);
			OnCreated();
		}
		/// Denotes the RelativeLocation's ContainingLocationID column with type link(nonnull, field Location.Id) with labelkey='Containing Location'
		static public string RelativeLocation_ContainingLocationID{ get{return ItemCountValueLabelKdsMBLabel.K("Containing Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RelativeLocation),Name="RelativeLocation_ContainingLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainingLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ContainingLocationID
		{
			get
			{
				return this._ContainingLocationID;
			}
			set
			{
				if ((this._ContainingLocationID != value))
				{
					if (this._ContainingLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContainingLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ContainingLocationID = value;
					this.SendPropertyChanged();
					this.OnContainingLocationIDChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string RelativeLocation_Code{ get{return ItemCountValueLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RelativeLocation),Name="RelativeLocation_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string RelativeLocation_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RelativeLocation),Name="RelativeLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string RelativeLocation_Hidden{ get{return ItemCountValueLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RelativeLocation),Name="RelativeLocation_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's ExternalTag column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='External Tag'
		static public string RelativeLocation_ExternalTag{ get{return ItemCountValueLabelKdsMBLabel.K("External Tag").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RelativeLocation),Name="RelativeLocation_ExternalTag")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalTag", DbType="NVARCHAR (50)")]
		public string ExternalTag
		{
			get
			{
				return this._ExternalTag;
			}
			set
			{
				if ((this._ExternalTag != value))
				{
					this.OnExternalTagChanging(value);
					this.SendPropertyChanging();
					this._ExternalTag = value;
					this.SendPropertyChanged();
					this.OnExternalTagChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's LocationID column with type link(nonnull, field Location.Id) with labelkey='Location'
		static public string RelativeLocation_LocationID{ get{return ItemCountValueLabelKdsMBLabel.K("Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RelativeLocation),Name="RelativeLocation_LocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._BaseLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged();
					this.OnLocationIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelativeLocation_DerivedPermanentStorage", Storage="_DerivedPermanentStorage", ThisKey="Id", OtherKey="RelativeLocationID", IsUnique=true, IsForeignKey=false)]
		public PermanentStorage DerivedPermanentStorage
		{
			get
			{
				return this._DerivedPermanentStorage.Entity;
			}
			set
			{
				PermanentStorage previousValue = this._DerivedPermanentStorage.Entity;
				if (((previousValue != value)
							|| (this._DerivedPermanentStorage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedPermanentStorage.Entity = null;
						previousValue.BaseRelativeLocation = null;
					}
					this._DerivedPermanentStorage.Entity = value;
					if ((value != null))
					{
						value.BaseRelativeLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContainingLocation_RelativeLocation", Storage="_ContainingLocation", ThisKey="ContainingLocationID", OtherKey="Id", IsForeignKey=true)]
		public Location ContainingLocation
		{
			get
			{
				return this._ContainingLocation.Entity;
			}
			set
			{
				Location previousValue = this._ContainingLocation.Entity;
				if (((previousValue != value)
							|| (this._ContainingLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContainingLocation.Entity = null;
						previousValue.RelativeLocationContainingLocation.Remove(this);
					}
					this._ContainingLocation.Entity = value;
					if ((value != null))
					{
						value.RelativeLocationContainingLocation.Add(this);
						this._ContainingLocationID = value.Id;
					}
					else
					{
						this._ContainingLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseLocation_RelativeLocation", Storage="_BaseLocation", ThisKey="LocationID", OtherKey="Id", IsForeignKey=true)]
		public Location BaseLocation
		{
			get
			{
				return this._BaseLocation.Entity;
			}
			set
			{
				Location previousValue = this._BaseLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseLocation.Entity = null;
					}
					this._BaseLocation.Entity = value;
					if ((value != null))
					{
						this._LocationID = value.Id;
					}
					else
					{
						this._LocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrder")]
	public partial class WorkOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrder with labelkey='WorkOrder'
		static public string WorkOrderLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("WorkOrder").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Object _Number;
		private System.Guid _Id;
		private System.Object _CurrentWorkOrderStateHistoryID;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnNumberChanging(System.Object value);
	partial void OnNumberChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCurrentWorkOrderStateHistoryIDChanging(System.Object value);
	partial void OnCurrentWorkOrderStateHistoryIDChanged();
	#endregion

		public WorkOrder()
		{
			OnCreated();
		}
		/// Denotes the WorkOrder's Number column with type null(nonnull) with labelkey='Number'
		static public string WorkOrder_Number{ get{return ItemCountValueLabelKdsMBLabel.K("Number").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.WorkOrder),Name="WorkOrder_Number")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged();
					this.OnNumberChanged();
				}
			}
		}
		/// Denotes the WorkOrder's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrder_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.WorkOrder),Name="WorkOrder_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrder's CurrentWorkOrderStateHistoryID column with type null(nonnull) with labelkey='CurrentWorkOrderStateHistoryID'
		static public string WorkOrder_CurrentWorkOrderStateHistoryID{ get{return ItemCountValueLabelKdsMBLabel.K("CurrentWorkOrderStateHistoryID").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.WorkOrder),Name="WorkOrder_CurrentWorkOrderStateHistoryID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentWorkOrderStateHistoryID", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object CurrentWorkOrderStateHistoryID
		{
			get
			{
				return this._CurrentWorkOrderStateHistoryID;
			}
			set
			{
				if ((this._CurrentWorkOrderStateHistoryID != value))
				{
					this.OnCurrentWorkOrderStateHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentWorkOrderStateHistoryID = value;
					this.SendPropertyChanged();
					this.OnCurrentWorkOrderStateHistoryIDChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemporaryStorage")]
	public partial class TemporaryStorage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table TemporaryStorage with labelkey='TemporaryStorage'
		static public string TemporaryStorageLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("TemporaryStorage").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Object _ContainingLocationID;
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnContainingLocationIDChanging(System.Object value);
	partial void OnContainingLocationIDChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public TemporaryStorage()
		{
			OnCreated();
		}
		/// Denotes the TemporaryStorage's ContainingLocationID column with type null(nonnull) with labelkey='ContainingLocationID'
		static public string TemporaryStorage_ContainingLocationID{ get{return ItemCountValueLabelKdsMBLabel.K("ContainingLocationID").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.TemporaryStorage),Name="TemporaryStorage_ContainingLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainingLocationID", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object ContainingLocationID
		{
			get
			{
				return this._ContainingLocationID;
			}
			set
			{
				if ((this._ContainingLocationID != value))
				{
					this.OnContainingLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ContainingLocationID = value;
					this.SendPropertyChanged();
					this.OnContainingLocationIDChanged();
				}
			}
		}
		/// Denotes the TemporaryStorage's Id column with type id(nonnull) with labelkey='Id'
		static public string TemporaryStorage_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.TemporaryStorage),Name="TemporaryStorage_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderTemplate")]
	public partial class WorkOrderTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderTemplate with labelkey='WorkOrderTemplate'
		static public string WorkOrderTemplateLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("WorkOrderTemplate").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Object _Code;
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnCodeChanging(System.Object value);
	partial void OnCodeChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public WorkOrderTemplate()
		{
			OnCreated();
		}
		/// Denotes the WorkOrderTemplate's Code column with type null(nonnull) with labelkey='Code'
		static public string WorkOrderTemplate_Code{ get{return ItemCountValueLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.WorkOrderTemplate),Name="WorkOrderTemplate_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the WorkOrderTemplate's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderTemplate_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.WorkOrderTemplate),Name="WorkOrderTemplate_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateTemporaryStorage")]
	public partial class TemplateTemporaryStorage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table TemplateTemporaryStorage with labelkey='TemplateTemporaryStorage'
		static public string TemplateTemporaryStorageLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("TemplateTemporaryStorage").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Object _ContainingLocationID;
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnContainingLocationIDChanging(System.Object value);
	partial void OnContainingLocationIDChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public TemplateTemporaryStorage()
		{
			OnCreated();
		}
		/// Denotes the TemplateTemporaryStorage's ContainingLocationID column with type null(nonnull) with labelkey='ContainingLocationID'
		static public string TemplateTemporaryStorage_ContainingLocationID{ get{return ItemCountValueLabelKdsMBLabel.K("ContainingLocationID").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.TemplateTemporaryStorage),Name="TemplateTemporaryStorage_ContainingLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainingLocationID", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object ContainingLocationID
		{
			get
			{
				return this._ContainingLocationID;
			}
			set
			{
				if ((this._ContainingLocationID != value))
				{
					this.OnContainingLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ContainingLocationID = value;
					this.SendPropertyChanged();
					this.OnContainingLocationIDChanged();
				}
			}
		}
		/// Denotes the TemplateTemporaryStorage's Id column with type id(nonnull) with labelkey='Id'
		static public string TemplateTemporaryStorage_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.TemplateTemporaryStorage),Name="TemplateTemporaryStorage_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermanentStorage")]
	public partial class PermanentStorage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PermanentStorage with labelkey='Storeroom'
		static public string PermanentStorageLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Storeroom").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _RelativeLocationID;
		private short? _Rank;
		private EntityRef<RelativeLocation> _BaseRelativeLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnRelativeLocationIDChanging(System.Guid value);
	partial void OnRelativeLocationIDChanged();
	partial void OnRankChanging(short? value);
	partial void OnRankChanged();
	#endregion

		public PermanentStorage()
		{
			this._BaseRelativeLocation = default(EntityRef<RelativeLocation>);
			OnCreated();
		}
		/// Denotes the PermanentStorage's Id column with type id(nonnull) with labelkey='Id'
		static public string PermanentStorage_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PermanentStorage),Name="PermanentStorage_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the PermanentStorage's RelativeLocationID column with type link(nonnull, field RelativeLocation.Id) with labelkey=''
		static public string PermanentStorage_RelativeLocationID{ get{return ItemCountValueLabelKdsMBLabel.K("").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PermanentStorage),Name="PermanentStorage_RelativeLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelativeLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid RelativeLocationID
		{
			get
			{
				return this._RelativeLocationID;
			}
			set
			{
				if ((this._RelativeLocationID != value))
				{
					if (this._BaseRelativeLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelativeLocationIDChanging(value);
					this.SendPropertyChanging();
					this._RelativeLocationID = value;
					this.SendPropertyChanged();
					this.OnRelativeLocationIDChanged();
				}
			}
		}
		/// Denotes the PermanentStorage's Rank column with type integer(16) with labelkey='Physical Count Sheet Rank'
		static public string PermanentStorage_Rank{ get{return ItemCountValueLabelKdsMBLabel.K("Physical Count Sheet Rank").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PermanentStorage),Name="PermanentStorage_Rank")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="SMALLINT")]
		public short? Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged();
					this.OnRankChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseRelativeLocation_PermanentStorage", Storage="_BaseRelativeLocation", ThisKey="RelativeLocationID", OtherKey="Id", IsForeignKey=true)]
		public RelativeLocation BaseRelativeLocation
		{
			get
			{
				return this._BaseRelativeLocation.Entity;
			}
			set
			{
				RelativeLocation previousValue = this._BaseRelativeLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseRelativeLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseRelativeLocation.Entity = null;
					}
					this._BaseRelativeLocation.Entity = value;
					if ((value != null))
					{
						this._RelativeLocationID = value.Id;
					}
					else
					{
						this._RelativeLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemLocation")]
	public partial class ItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemLocation with labelkey='Storage Assignment'
		static public string ItemLocationLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Storage Assignment").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private System.Guid _ItemID;
		private System.Guid _LocationID;
		private System.Guid? _ItemPriceID;
		private EntitySet<RationalizedInventoryActivityDeltas> _RationalizedInventoryActivityDeltasItemLocation;
		private EntitySet<ItemCountValue> _ItemCountValueItemLocation;
		private EntitySet<ItemActivity> _ItemActivityItemLocation;
		private EntityRef<Item> _Item;
		private EntityRef<Location> _Location;
		private EntityRef<ItemPrice> _ItemPrice;
		private EntityRef<ActualItemLocation> _DerivedActualItemLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnItemIDChanging(System.Guid value);
	partial void OnItemIDChanged();
	partial void OnLocationIDChanging(System.Guid value);
	partial void OnLocationIDChanged();
	partial void OnItemPriceIDChanging(System.Guid? value);
	partial void OnItemPriceIDChanged();
	#endregion

		public ItemLocation()
		{
			this._RationalizedInventoryActivityDeltasItemLocation = new EntitySet<RationalizedInventoryActivityDeltas>(new Action<RationalizedInventoryActivityDeltas>(this.attach_RationalizedInventoryActivityDeltasItemLocation), new Action<RationalizedInventoryActivityDeltas>(this.detach_RationalizedInventoryActivityDeltasItemLocation));
			this._ItemCountValueItemLocation = new EntitySet<ItemCountValue>(new Action<ItemCountValue>(this.attach_ItemCountValueItemLocation), new Action<ItemCountValue>(this.detach_ItemCountValueItemLocation));
			this._ItemActivityItemLocation = new EntitySet<ItemActivity>(new Action<ItemActivity>(this.attach_ItemActivityItemLocation), new Action<ItemActivity>(this.detach_ItemActivityItemLocation));
			this._Item = default(EntityRef<Item>);
			this._Location = default(EntityRef<Location>);
			this._ItemPrice = default(EntityRef<ItemPrice>);
			this._DerivedActualItemLocation = default(EntityRef<ActualItemLocation>);
			OnCreated();
		}
		/// Denotes the ItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemLocation_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemLocation),Name="ItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ItemLocation's Code column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Code'
		static public string ItemLocation_Code{ get{return ItemCountValueLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemLocation),Name="ItemLocation_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR(MAX)", IsDbGenerated=true, AutoSync=AutoSync.Always, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the ItemLocation's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string ItemLocation_Hidden{ get{return ItemCountValueLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemLocation),Name="ItemLocation_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the ItemLocation's ItemID column with type link(nonnull, field Item.Id) with labelkey='Item'
		static public string ItemLocation_ItemID{ get{return ItemCountValueLabelKdsMBLabel.K("Item").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemLocation),Name="ItemLocation_ItemID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged();
					this.OnItemIDChanged();
				}
			}
		}
		/// Denotes the ItemLocation's LocationID column with type link(nonnull, field Location.Id) with labelkey='Location'
		static public string ItemLocation_LocationID{ get{return ItemCountValueLabelKdsMBLabel.K("Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemLocation),Name="ItemLocation_LocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged();
					this.OnLocationIDChanged();
				}
			}
		}
		/// Denotes the ItemLocation's ItemPriceID column with type link(field ItemPrice.Id) with labelkey='Preferred Price'
		static public string ItemLocation_ItemPriceID{ get{return ItemCountValueLabelKdsMBLabel.K("Preferred Price").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemLocation),Name="ItemLocation_ItemPriceID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemPriceID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? ItemPriceID
		{
			get
			{
				return this._ItemPriceID;
			}
			set
			{
				if ((this._ItemPriceID != value))
				{
					if (this._ItemPrice.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemPriceIDChanging(value);
					this.SendPropertyChanging();
					this._ItemPriceID = value;
					this.SendPropertyChanged();
					this.OnItemPriceIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_DerivedActualItemLocation", Storage="_DerivedActualItemLocation", ThisKey="Id", OtherKey="ItemLocationID", IsUnique=true, IsForeignKey=false)]
		public ActualItemLocation DerivedActualItemLocation
		{
			get
			{
				return this._DerivedActualItemLocation.Entity;
			}
			set
			{
				ActualItemLocation previousValue = this._DerivedActualItemLocation.Entity;
				if (((previousValue != value)
							|| (this._DerivedActualItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedActualItemLocation.Entity = null;
						previousValue.BaseItemLocation = null;
					}
					this._DerivedActualItemLocation.Entity = value;
					if ((value != null))
					{
						value.BaseItemLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_RationalizedInventoryActivityDeltas", Storage="_RationalizedInventoryActivityDeltasItemLocation", ThisKey="Id", OtherKey="ItemLocationID")]
		public EntitySet<RationalizedInventoryActivityDeltas> RationalizedInventoryActivityDeltasItemLocation
		{
			get
			{
				return this._RationalizedInventoryActivityDeltasItemLocation;
			}
			set
			{
				this._RationalizedInventoryActivityDeltasItemLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_ItemCountValue", Storage="_ItemCountValueItemLocation", ThisKey="Id", OtherKey="ItemLocationID")]
		public EntitySet<ItemCountValue> ItemCountValueItemLocation
		{
			get
			{
				return this._ItemCountValueItemLocation;
			}
			set
			{
				this._ItemCountValueItemLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_ItemActivity", Storage="_ItemActivityItemLocation", ThisKey="Id", OtherKey="ItemLocationID")]
		public EntitySet<ItemActivity> ItemActivityItemLocation
		{
			get
			{
				return this._ItemActivityItemLocation;
			}
			set
			{
				this._ItemActivityItemLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemLocation", Storage="_Item", ThisKey="ItemID", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value)
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ItemLocationItem.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ItemLocationItem.Add(this);
						this._ItemID = value.Id;
					}
					else
					{
						this._ItemID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ItemLocation", Storage="_Location", ThisKey="LocationID", OtherKey="Id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value)
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.ItemLocationLocation.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.ItemLocationLocation.Add(this);
						this._LocationID = value.Id;
					}
					else
					{
						this._LocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemPrice_ItemLocation", Storage="_ItemPrice", ThisKey="ItemPriceID", OtherKey="Id", IsForeignKey=true)]
		public ItemPrice ItemPrice
		{
			get
			{
				return this._ItemPrice.Entity;
			}
			set
			{
				ItemPrice previousValue = this._ItemPrice.Entity;
				if (((previousValue != value)
							|| (this._ItemPrice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemPrice.Entity = null;
						previousValue.ItemLocationItemPrice.Remove(this);
					}
					this._ItemPrice.Entity = value;
					if ((value != null))
					{
						value.ItemLocationItemPrice.Add(this);
						this._ItemPriceID = value.Id;
					}
					else
					{
						this._ItemPriceID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_RationalizedInventoryActivityDeltasItemLocation(RationalizedInventoryActivityDeltas entity)
		{
			this.SendPropertyChanging();
			entity.ItemLocation = this;
		}
		private void detach_RationalizedInventoryActivityDeltasItemLocation(RationalizedInventoryActivityDeltas entity)
		{
			this.SendPropertyChanging();
			entity.ItemLocation = null;
		}

		private void attach_ItemCountValueItemLocation(ItemCountValue entity)
		{
			this.SendPropertyChanging();
			entity.ItemLocation = this;
		}
		private void detach_ItemCountValueItemLocation(ItemCountValue entity)
		{
			this.SendPropertyChanging();
			entity.ItemLocation = null;
		}

		private void attach_ItemActivityItemLocation(ItemActivity entity)
		{
			this.SendPropertyChanging();
			entity.ItemLocation = this;
		}
		private void detach_ItemActivityItemLocation(ItemActivity entity)
		{
			this.SendPropertyChanging();
			entity.ItemLocation = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Item with labelkey='Item'
		static public string ItemLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Item").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private string _Code;
		private System.Guid _Id;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private System.Guid? _ItemCategoryID;
		private System.Guid? _UnitOfMeasureID;
		private int _OnHand;
		private int _OnReserve;
		private int _OnOrder;
		private int _Available;
		private System.Decimal _TotalCost;
		private System.Decimal? _UnitCost;
		private EntitySet<ItemLocation> _ItemLocationItem;
		private EntityRef<ItemCategory> _ItemCategory;
		private EntityRef<UnitOfMeasure> _UnitOfMeasure;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnItemCategoryIDChanging(System.Guid? value);
	partial void OnItemCategoryIDChanged();
	partial void OnUnitOfMeasureIDChanging(System.Guid? value);
	partial void OnUnitOfMeasureIDChanged();
	partial void OnOnHandChanging(int value);
	partial void OnOnHandChanged();
	partial void OnOnReserveChanging(int value);
	partial void OnOnReserveChanged();
	partial void OnOnOrderChanging(int value);
	partial void OnOnOrderChanged();
	partial void OnAvailableChanging(int value);
	partial void OnAvailableChanged();
	partial void OnTotalCostChanging(System.Decimal value);
	partial void OnTotalCostChanged();
	partial void OnUnitCostChanging(System.Decimal? value);
	partial void OnUnitCostChanged();
	#endregion

		public Item()
		{
			this._ItemLocationItem = new EntitySet<ItemLocation>(new Action<ItemLocation>(this.attach_ItemLocationItem), new Action<ItemLocation>(this.detach_ItemLocationItem));
			this._ItemCategory = default(EntityRef<ItemCategory>);
			this._UnitOfMeasure = default(EntityRef<UnitOfMeasure>);
			OnCreated();
		}
		/// Denotes the Item's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string Item_Code{ get{return ItemCountValueLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the Item's Id column with type id(nonnull) with labelkey='Id'
		static public string Item_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Item's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string Item_Hidden{ get{return ItemCountValueLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the Item's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string Item_Desc{ get{return ItemCountValueLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the Item's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string Item_Comment{ get{return ItemCountValueLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the Item's ItemCategoryID column with type link(field ItemCategory.Id) with labelkey='Category'
		static public string Item_ItemCategoryID{ get{return ItemCountValueLabelKdsMBLabel.K("Category").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_ItemCategoryID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCategoryID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? ItemCategoryID
		{
			get
			{
				return this._ItemCategoryID;
			}
			set
			{
				if ((this._ItemCategoryID != value))
				{
					if (this._ItemCategory.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ItemCategoryID = value;
					this.SendPropertyChanged();
					this.OnItemCategoryIDChanged();
				}
			}
		}
		/// Denotes the Item's UnitOfMeasureID column with type link(field UnitOfMeasure.Id) with labelkey='UOM'
		static public string Item_UnitOfMeasureID{ get{return ItemCountValueLabelKdsMBLabel.K("UOM").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_UnitOfMeasureID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitOfMeasureID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? UnitOfMeasureID
		{
			get
			{
				return this._UnitOfMeasureID;
			}
			set
			{
				if ((this._UnitOfMeasureID != value))
				{
					if (this._UnitOfMeasure.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitOfMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._UnitOfMeasureID = value;
					this.SendPropertyChanged();
					this.OnUnitOfMeasureIDChanged();
				}
			}
		}
		/// Denotes the Item's OnHand column with type integer(nonnull, 32) with labelkey='OnHand'
		static public string Item_OnHand{ get{return ItemCountValueLabelKdsMBLabel.K("OnHand").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_OnHand")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnHand", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnHand
		{
			get
			{
				return this._OnHand;
			}
			set
			{
				if ((this._OnHand != value))
				{
					this.OnOnHandChanging(value);
					this.SendPropertyChanging();
					this._OnHand = value;
					this.SendPropertyChanged();
					this.OnOnHandChanged();
				}
			}
		}
		/// Denotes the Item's OnReserve column with type integer(nonnull, 32) with labelkey='OnReserve'
		static public string Item_OnReserve{ get{return ItemCountValueLabelKdsMBLabel.K("OnReserve").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_OnReserve")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnReserve", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnReserve
		{
			get
			{
				return this._OnReserve;
			}
			set
			{
				if ((this._OnReserve != value))
				{
					this.OnOnReserveChanging(value);
					this.SendPropertyChanging();
					this._OnReserve = value;
					this.SendPropertyChanged();
					this.OnOnReserveChanged();
				}
			}
		}
		/// Denotes the Item's OnOrder column with type integer(nonnull, 32) with labelkey='OnOrder'
		static public string Item_OnOrder{ get{return ItemCountValueLabelKdsMBLabel.K("OnOrder").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_OnOrder")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnOrder", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnOrder
		{
			get
			{
				return this._OnOrder;
			}
			set
			{
				if ((this._OnOrder != value))
				{
					this.OnOnOrderChanging(value);
					this.SendPropertyChanging();
					this._OnOrder = value;
					this.SendPropertyChanged();
					this.OnOnOrderChanged();
				}
			}
		}
		/// Denotes the Item's Available column with type integer(nonnull, 32) with labelkey='Available'
		static public string Item_Available{ get{return ItemCountValueLabelKdsMBLabel.K("Available").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_Available")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged();
					this.OnAvailableChanged();
				}
			}
		}
		/// Denotes the Item's TotalCost column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='TotalCost'
		static public string Item_TotalCost{ get{return ItemCountValueLabelKdsMBLabel.K("TotalCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_TotalCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged();
					this.OnTotalCostChanged();
				}
			}
		}
		/// Denotes the Item's UnitCost column with type currency((min (¤922,337,203,685,477.5808)), (max ¤922,337,203,685,477.5807), by ¤0.0001) with labelkey='UnitCost'
		static public string Item_UnitCost{ get{return ItemCountValueLabelKdsMBLabel.K("UnitCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Item),Name="Item_UnitCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCost", DbType="MONEY", IsDbGenerated=true, AutoSync=AutoSync.Always, UpdateCheck=UpdateCheck.Never)]
		public System.Decimal? UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged();
					this.OnUnitCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemLocation", Storage="_ItemLocationItem", ThisKey="Id", OtherKey="ItemID")]
		public EntitySet<ItemLocation> ItemLocationItem
		{
			get
			{
				return this._ItemLocationItem;
			}
			set
			{
				this._ItemLocationItem.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCategory_Item", Storage="_ItemCategory", ThisKey="ItemCategoryID", OtherKey="Id", IsForeignKey=true)]
		public ItemCategory ItemCategory
		{
			get
			{
				return this._ItemCategory.Entity;
			}
			set
			{
				ItemCategory previousValue = this._ItemCategory.Entity;
				if (((previousValue != value)
							|| (this._ItemCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemCategory.Entity = null;
						previousValue.ItemItemCategory.Remove(this);
					}
					this._ItemCategory.Entity = value;
					if ((value != null))
					{
						value.ItemItemCategory.Add(this);
						this._ItemCategoryID = value.Id;
					}
					else
					{
						this._ItemCategoryID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitOfMeasure_Item", Storage="_UnitOfMeasure", ThisKey="UnitOfMeasureID", OtherKey="Id", IsForeignKey=true)]
		public UnitOfMeasure UnitOfMeasure
		{
			get
			{
				return this._UnitOfMeasure.Entity;
			}
			set
			{
				UnitOfMeasure previousValue = this._UnitOfMeasure.Entity;
				if (((previousValue != value)
							|| (this._UnitOfMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitOfMeasure.Entity = null;
						previousValue.ItemUnitOfMeasure.Remove(this);
					}
					this._UnitOfMeasure.Entity = value;
					if ((value != null))
					{
						value.ItemUnitOfMeasure.Add(this);
						this._UnitOfMeasureID = value.Id;
					}
					else
					{
						this._UnitOfMeasureID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemLocationItem(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		private void detach_ItemLocationItem(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemPrice")]
	public partial class ItemPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemPrice with labelkey='ItemPrice'
		static public string ItemPriceLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("ItemPrice").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<ItemLocation> _ItemLocationItemPrice;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemPrice()
		{
			this._ItemLocationItemPrice = new EntitySet<ItemLocation>(new Action<ItemLocation>(this.attach_ItemLocationItemPrice), new Action<ItemLocation>(this.detach_ItemLocationItemPrice));
			OnCreated();
		}
		/// Denotes the ItemPrice's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemPrice_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemPrice),Name="ItemPrice_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemPrice_ItemLocation", Storage="_ItemLocationItemPrice", ThisKey="Id", OtherKey="ItemPriceID")]
		public EntitySet<ItemLocation> ItemLocationItemPrice
		{
			get
			{
				return this._ItemLocationItemPrice;
			}
			set
			{
				this._ItemLocationItemPrice.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemLocationItemPrice(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.ItemPrice = this;
		}
		private void detach_ItemLocationItemPrice(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.ItemPrice = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActualItemLocation")]
	public partial class ActualItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ActualItemLocation with labelkey='Actual Item Location'
		static public string ActualItemLocationLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Actual Item Location").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _ItemLocationID;
		private System.Guid _CostCenterID;
		private int _EffectiveMinimum;
		private int _EffectiveMaximum;
		private int _OnHand;
		private int _OnOrder;
		private int _OnReserve;
		private int _Available;
		private int _Shortage;
		private System.Decimal? _UnitCost;
		private System.Decimal _TotalCost;
		private EntityRef<ItemLocation> _BaseItemLocation;
		private EntityRef<CostCenter> _CostCenter;
		private EntityRef<PermanentItemLocation> _DerivedPermanentItemLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnItemLocationIDChanging(System.Guid value);
	partial void OnItemLocationIDChanged();
	partial void OnCostCenterIDChanging(System.Guid value);
	partial void OnCostCenterIDChanged();
	partial void OnEffectiveMinimumChanging(int value);
	partial void OnEffectiveMinimumChanged();
	partial void OnEffectiveMaximumChanging(int value);
	partial void OnEffectiveMaximumChanged();
	partial void OnOnHandChanging(int value);
	partial void OnOnHandChanged();
	partial void OnOnOrderChanging(int value);
	partial void OnOnOrderChanged();
	partial void OnOnReserveChanging(int value);
	partial void OnOnReserveChanged();
	partial void OnAvailableChanging(int value);
	partial void OnAvailableChanged();
	partial void OnShortageChanging(int value);
	partial void OnShortageChanged();
	partial void OnUnitCostChanging(System.Decimal? value);
	partial void OnUnitCostChanged();
	partial void OnTotalCostChanging(System.Decimal value);
	partial void OnTotalCostChanged();
	#endregion

		public ActualItemLocation()
		{
			this._BaseItemLocation = default(EntityRef<ItemLocation>);
			this._CostCenter = default(EntityRef<CostCenter>);
			this._DerivedPermanentItemLocation = default(EntityRef<PermanentItemLocation>);
			OnCreated();
		}
		/// Denotes the ActualItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string ActualItemLocation_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's ItemLocationID column with type link(nonnull, field ItemLocation.Id) with labelkey='Storage Assignment'
		static public string ActualItemLocation_ItemLocationID{ get{return ItemCountValueLabelKdsMBLabel.K("Storage Assignment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_ItemLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ItemLocationID
		{
			get
			{
				return this._ItemLocationID;
			}
			set
			{
				if ((this._ItemLocationID != value))
				{
					if (this._BaseItemLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ItemLocationID = value;
					this.SendPropertyChanged();
					this.OnItemLocationIDChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's CostCenterID column with type link(nonnull, field CostCenter.Id) with labelkey='Cost Center'
		static public string ActualItemLocation_CostCenterID{ get{return ItemCountValueLabelKdsMBLabel.K("Cost Center").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_CostCenterID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCenterID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CostCenterID
		{
			get
			{
				return this._CostCenterID;
			}
			set
			{
				if ((this._CostCenterID != value))
				{
					if (this._CostCenter.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CostCenterID = value;
					this.SendPropertyChanged();
					this.OnCostCenterIDChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's EffectiveMinimum column with type integer(nonnull, 32) with labelkey='EffectiveMinimum'
		static public string ActualItemLocation_EffectiveMinimum{ get{return ItemCountValueLabelKdsMBLabel.K("EffectiveMinimum").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_EffectiveMinimum")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveMinimum", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int EffectiveMinimum
		{
			get
			{
				return this._EffectiveMinimum;
			}
			set
			{
				if ((this._EffectiveMinimum != value))
				{
					this.OnEffectiveMinimumChanging(value);
					this.SendPropertyChanging();
					this._EffectiveMinimum = value;
					this.SendPropertyChanged();
					this.OnEffectiveMinimumChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's EffectiveMaximum column with type integer(nonnull, 32) with labelkey='EffectiveMaximum'
		static public string ActualItemLocation_EffectiveMaximum{ get{return ItemCountValueLabelKdsMBLabel.K("EffectiveMaximum").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_EffectiveMaximum")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveMaximum", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int EffectiveMaximum
		{
			get
			{
				return this._EffectiveMaximum;
			}
			set
			{
				if ((this._EffectiveMaximum != value))
				{
					this.OnEffectiveMaximumChanging(value);
					this.SendPropertyChanging();
					this._EffectiveMaximum = value;
					this.SendPropertyChanged();
					this.OnEffectiveMaximumChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's OnHand column with type integer(nonnull, 32) with labelkey='OnHand'
		static public string ActualItemLocation_OnHand{ get{return ItemCountValueLabelKdsMBLabel.K("OnHand").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_OnHand")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnHand", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnHand
		{
			get
			{
				return this._OnHand;
			}
			set
			{
				if ((this._OnHand != value))
				{
					this.OnOnHandChanging(value);
					this.SendPropertyChanging();
					this._OnHand = value;
					this.SendPropertyChanged();
					this.OnOnHandChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's OnOrder column with type integer(nonnull, 32) with labelkey='OnOrder'
		static public string ActualItemLocation_OnOrder{ get{return ItemCountValueLabelKdsMBLabel.K("OnOrder").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_OnOrder")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnOrder", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnOrder
		{
			get
			{
				return this._OnOrder;
			}
			set
			{
				if ((this._OnOrder != value))
				{
					this.OnOnOrderChanging(value);
					this.SendPropertyChanging();
					this._OnOrder = value;
					this.SendPropertyChanged();
					this.OnOnOrderChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's OnReserve column with type integer(nonnull, 32) with labelkey='OnReserve'
		static public string ActualItemLocation_OnReserve{ get{return ItemCountValueLabelKdsMBLabel.K("OnReserve").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_OnReserve")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnReserve", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnReserve
		{
			get
			{
				return this._OnReserve;
			}
			set
			{
				if ((this._OnReserve != value))
				{
					this.OnOnReserveChanging(value);
					this.SendPropertyChanging();
					this._OnReserve = value;
					this.SendPropertyChanged();
					this.OnOnReserveChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's Available column with type integer(nonnull, 32) with labelkey='Available'
		static public string ActualItemLocation_Available{ get{return ItemCountValueLabelKdsMBLabel.K("Available").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_Available")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="INT", CanBeNull=false, IsDbGenerated=true, AutoSync=AutoSync.Always, UpdateCheck=UpdateCheck.Never)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged();
					this.OnAvailableChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's Shortage column with type integer(nonnull, 32) with labelkey='Shortage'
		static public string ActualItemLocation_Shortage{ get{return ItemCountValueLabelKdsMBLabel.K("Shortage").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_Shortage")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shortage", DbType="INT", CanBeNull=false, IsDbGenerated=true, AutoSync=AutoSync.Always, UpdateCheck=UpdateCheck.Never)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Shortage
		{
			get
			{
				return this._Shortage;
			}
			set
			{
				if ((this._Shortage != value))
				{
					this.OnShortageChanging(value);
					this.SendPropertyChanging();
					this._Shortage = value;
					this.SendPropertyChanged();
					this.OnShortageChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's UnitCost column with type currency((min (¤922,337,203,685,477.5808)), (max ¤922,337,203,685,477.5807), by ¤0.0001) with labelkey='UnitCost'
		static public string ActualItemLocation_UnitCost{ get{return ItemCountValueLabelKdsMBLabel.K("UnitCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_UnitCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCost", DbType="MONEY", IsDbGenerated=true, AutoSync=AutoSync.Always, UpdateCheck=UpdateCheck.Never)]
		public System.Decimal? UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged();
					this.OnUnitCostChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's TotalCost column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='TotalCost'
		static public string ActualItemLocation_TotalCost{ get{return ItemCountValueLabelKdsMBLabel.K("TotalCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItemLocation),Name="ActualItemLocation_TotalCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged();
					this.OnTotalCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActualItemLocation_DerivedPermanentItemLocation", Storage="_DerivedPermanentItemLocation", ThisKey="Id", OtherKey="ActualItemLocationID", IsUnique=true, IsForeignKey=false)]
		public PermanentItemLocation DerivedPermanentItemLocation
		{
			get
			{
				return this._DerivedPermanentItemLocation.Entity;
			}
			set
			{
				PermanentItemLocation previousValue = this._DerivedPermanentItemLocation.Entity;
				if (((previousValue != value)
							|| (this._DerivedPermanentItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedPermanentItemLocation.Entity = null;
						previousValue.BaseActualItemLocation = null;
					}
					this._DerivedPermanentItemLocation.Entity = value;
					if ((value != null))
					{
						value.BaseActualItemLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseItemLocation_ActualItemLocation", Storage="_BaseItemLocation", ThisKey="ItemLocationID", OtherKey="Id", IsForeignKey=true)]
		public ItemLocation BaseItemLocation
		{
			get
			{
				return this._BaseItemLocation.Entity;
			}
			set
			{
				ItemLocation previousValue = this._BaseItemLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseItemLocation.Entity = null;
					}
					this._BaseItemLocation.Entity = value;
					if ((value != null))
					{
						this._ItemLocationID = value.Id;
					}
					else
					{
						this._ItemLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_ActualItemLocation", Storage="_CostCenter", ThisKey="CostCenterID", OtherKey="Id", IsForeignKey=true)]
		public CostCenter CostCenter
		{
			get
			{
				return this._CostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._CostCenter.Entity;
				if (((previousValue != value)
							|| (this._CostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCenter.Entity = null;
						previousValue.ActualItemLocationCostCenter.Remove(this);
					}
					this._CostCenter.Entity = value;
					if ((value != null))
					{
						value.ActualItemLocationCostCenter.Add(this);
						this._CostCenterID = value.Id;
					}
					else
					{
						this._CostCenterID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemCountValue")]
	public partial class ItemCountValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemCountValue with labelkey='Physical Count'
		static public string ItemCountValueLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Physical Count").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid? _VoidingItemCountValueVoidID;
		private System.Guid _AccountingTransactionID;
		private System.Guid _ItemLocationID;
		private int _Quantity;
		private System.Decimal _Cost;
		private System.Guid _ItemAdjustmentCodeID;
		private EntitySet<PermanentItemLocation> _PermanentItemLocationCurrentItemCountValue;
		private EntitySet<ItemCountValueVoid> _ItemCountValueVoidVoidedItemCountValue;
		private EntityRef<AccountingTransaction> _BaseAccountingTransaction;
		private EntityRef<ItemLocation> _ItemLocation;
		private EntityRef<ItemAdjustmentCode> _ItemAdjustmentCode;
		private EntityRef<ItemCountValueVoid> _VoidingItemCountValueVoid;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnVoidingItemCountValueVoidIDChanging(System.Guid? value);
	partial void OnVoidingItemCountValueVoidIDChanged();
	partial void OnAccountingTransactionIDChanging(System.Guid value);
	partial void OnAccountingTransactionIDChanged();
	partial void OnItemLocationIDChanging(System.Guid value);
	partial void OnItemLocationIDChanged();
	partial void OnQuantityChanging(int value);
	partial void OnQuantityChanged();
	partial void OnCostChanging(System.Decimal value);
	partial void OnCostChanged();
	partial void OnItemAdjustmentCodeIDChanging(System.Guid value);
	partial void OnItemAdjustmentCodeIDChanged();
	#endregion

		public ItemCountValue()
		{
			this._PermanentItemLocationCurrentItemCountValue = new EntitySet<PermanentItemLocation>(new Action<PermanentItemLocation>(this.attach_PermanentItemLocationCurrentItemCountValue), new Action<PermanentItemLocation>(this.detach_PermanentItemLocationCurrentItemCountValue));
			this._ItemCountValueVoidVoidedItemCountValue = new EntitySet<ItemCountValueVoid>(new Action<ItemCountValueVoid>(this.attach_ItemCountValueVoidVoidedItemCountValue), new Action<ItemCountValueVoid>(this.detach_ItemCountValueVoidVoidedItemCountValue));
			this._BaseAccountingTransaction = default(EntityRef<AccountingTransaction>);
			this._ItemLocation = default(EntityRef<ItemLocation>);
			this._ItemAdjustmentCode = default(EntityRef<ItemAdjustmentCode>);
			this._VoidingItemCountValueVoid = default(EntityRef<ItemCountValueVoid>);
			OnCreated();
		}
		/// Denotes the ItemCountValue's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemCountValue_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCountValue),Name="ItemCountValue_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ItemCountValue's VoidingItemCountValueVoidID column with type link(field ItemCountValueVoid.Id) with labelkey='Voiding Physical Count Void'
		static public string ItemCountValue_VoidingItemCountValueVoidID{ get{return ItemCountValueLabelKdsMBLabel.K("Voiding Physical Count Void").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCountValue),Name="ItemCountValue_VoidingItemCountValueVoidID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoidingItemCountValueVoidID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? VoidingItemCountValueVoidID
		{
			get
			{
				return this._VoidingItemCountValueVoidID;
			}
			set
			{
				if ((this._VoidingItemCountValueVoidID != value))
				{
					if (this._VoidingItemCountValueVoid.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoidingItemCountValueVoidIDChanging(value);
					this.SendPropertyChanging();
					this._VoidingItemCountValueVoidID = value;
					this.SendPropertyChanged();
					this.OnVoidingItemCountValueVoidIDChanged();
				}
			}
		}
		/// Denotes the ItemCountValue's AccountingTransactionID column with type link(nonnull, field AccountingTransaction.Id) with labelkey='Accounting Transaction'
		static public string ItemCountValue_AccountingTransactionID{ get{return ItemCountValueLabelKdsMBLabel.K("Accounting Transaction").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCountValue),Name="ItemCountValue_AccountingTransactionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingTransactionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid AccountingTransactionID
		{
			get
			{
				return this._AccountingTransactionID;
			}
			set
			{
				if ((this._AccountingTransactionID != value))
				{
					if (this._BaseAccountingTransaction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountingTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountingTransactionID = value;
					this.SendPropertyChanged();
					this.OnAccountingTransactionIDChanged();
				}
			}
		}
		/// Denotes the ItemCountValue's ItemLocationID column with type link(nonnull, field ItemLocation.Id) with labelkey='Storage Assignment'
		static public string ItemCountValue_ItemLocationID{ get{return ItemCountValueLabelKdsMBLabel.K("Storage Assignment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCountValue),Name="ItemCountValue_ItemLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ItemLocationID
		{
			get
			{
				return this._ItemLocationID;
			}
			set
			{
				if ((this._ItemLocationID != value))
				{
					if (this._ItemLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ItemLocationID = value;
					this.SendPropertyChanged();
					this.OnItemLocationIDChanged();
				}
			}
		}
		/// Denotes the ItemCountValue's Quantity column with type integer(nonnull, 32) with labelkey='Quantity'
		static public string ItemCountValue_Quantity{ get{return ItemCountValueLabelKdsMBLabel.K("Quantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCountValue),Name="ItemCountValue_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the ItemCountValue's Cost column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
		static public string ItemCountValue_Cost{ get{return ItemCountValueLabelKdsMBLabel.K("Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCountValue),Name="ItemCountValue_Cost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged();
					this.OnCostChanged();
				}
			}
		}
		/// Denotes the ItemCountValue's ItemAdjustmentCodeID column with type link(nonnull, field ItemAdjustmentCode.Id) with labelkey='Adjustment Code'
		static public string ItemCountValue_ItemAdjustmentCodeID{ get{return ItemCountValueLabelKdsMBLabel.K("Adjustment Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCountValue),Name="ItemCountValue_ItemAdjustmentCodeID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemAdjustmentCodeID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ItemAdjustmentCodeID
		{
			get
			{
				return this._ItemAdjustmentCodeID;
			}
			set
			{
				if ((this._ItemAdjustmentCodeID != value))
				{
					if (this._ItemAdjustmentCode.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemAdjustmentCodeIDChanging(value);
					this.SendPropertyChanging();
					this._ItemAdjustmentCodeID = value;
					this.SendPropertyChanged();
					this.OnItemAdjustmentCodeIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCountValue_PermanentItemLocation", Storage="_PermanentItemLocationCurrentItemCountValue", ThisKey="Id", OtherKey="CurrentItemCountValueID")]
		public EntitySet<PermanentItemLocation> PermanentItemLocationCurrentItemCountValue
		{
			get
			{
				return this._PermanentItemLocationCurrentItemCountValue;
			}
			set
			{
				this._PermanentItemLocationCurrentItemCountValue.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCountValue_ItemCountValueVoid", Storage="_ItemCountValueVoidVoidedItemCountValue", ThisKey="Id", OtherKey="VoidedItemCountValueID")]
		public EntitySet<ItemCountValueVoid> ItemCountValueVoidVoidedItemCountValue
		{
			get
			{
				return this._ItemCountValueVoidVoidedItemCountValue;
			}
			set
			{
				this._ItemCountValueVoidVoidedItemCountValue.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseAccountingTransaction_ItemCountValue", Storage="_BaseAccountingTransaction", ThisKey="AccountingTransactionID", OtherKey="Id", IsForeignKey=true)]
		public AccountingTransaction BaseAccountingTransaction
		{
			get
			{
				return this._BaseAccountingTransaction.Entity;
			}
			set
			{
				AccountingTransaction previousValue = this._BaseAccountingTransaction.Entity;
				if (((previousValue != value)
							|| (this._BaseAccountingTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseAccountingTransaction.Entity = null;
					}
					this._BaseAccountingTransaction.Entity = value;
					if ((value != null))
					{
						this._AccountingTransactionID = value.Id;
					}
					else
					{
						this._AccountingTransactionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_ItemCountValue", Storage="_ItemLocation", ThisKey="ItemLocationID", OtherKey="Id", IsForeignKey=true)]
		public ItemLocation ItemLocation
		{
			get
			{
				return this._ItemLocation.Entity;
			}
			set
			{
				ItemLocation previousValue = this._ItemLocation.Entity;
				if (((previousValue != value)
							|| (this._ItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemLocation.Entity = null;
						previousValue.ItemCountValueItemLocation.Remove(this);
					}
					this._ItemLocation.Entity = value;
					if ((value != null))
					{
						value.ItemCountValueItemLocation.Add(this);
						this._ItemLocationID = value.Id;
					}
					else
					{
						this._ItemLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemAdjustmentCode_ItemCountValue", Storage="_ItemAdjustmentCode", ThisKey="ItemAdjustmentCodeID", OtherKey="Id", IsForeignKey=true)]
		public ItemAdjustmentCode ItemAdjustmentCode
		{
			get
			{
				return this._ItemAdjustmentCode.Entity;
			}
			set
			{
				ItemAdjustmentCode previousValue = this._ItemAdjustmentCode.Entity;
				if (((previousValue != value)
							|| (this._ItemAdjustmentCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemAdjustmentCode.Entity = null;
						previousValue.ItemCountValueItemAdjustmentCode.Remove(this);
					}
					this._ItemAdjustmentCode.Entity = value;
					if ((value != null))
					{
						value.ItemCountValueItemAdjustmentCode.Add(this);
						this._ItemAdjustmentCodeID = value.Id;
					}
					else
					{
						this._ItemAdjustmentCodeID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoidingItemCountValueVoid_ItemCountValue", Storage="_VoidingItemCountValueVoid", ThisKey="VoidingItemCountValueVoidID", OtherKey="Id", IsForeignKey=true)]
		public ItemCountValueVoid VoidingItemCountValueVoid
		{
			get
			{
				return this._VoidingItemCountValueVoid.Entity;
			}
			set
			{
				ItemCountValueVoid previousValue = this._VoidingItemCountValueVoid.Entity;
				if (((previousValue != value)
							|| (this._VoidingItemCountValueVoid.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoidingItemCountValueVoid.Entity = null;
						previousValue.ItemCountValueVoidingItemCountValueVoid.Remove(this);
					}
					this._VoidingItemCountValueVoid.Entity = value;
					if ((value != null))
					{
						value.ItemCountValueVoidingItemCountValueVoid.Add(this);
						this._VoidingItemCountValueVoidID = value.Id;
					}
					else
					{
						this._VoidingItemCountValueVoidID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_PermanentItemLocationCurrentItemCountValue(PermanentItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.CurrentItemCountValue = this;
		}
		private void detach_PermanentItemLocationCurrentItemCountValue(PermanentItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.CurrentItemCountValue = null;
		}

		private void attach_ItemCountValueVoidVoidedItemCountValue(ItemCountValueVoid entity)
		{
			this.SendPropertyChanging();
			entity.VoidedItemCountValue = this;
		}
		private void detach_ItemCountValueVoidVoidedItemCountValue(ItemCountValueVoid entity)
		{
			this.SendPropertyChanging();
			entity.VoidedItemCountValue = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemAdjustment")]
	public partial class ItemAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemAdjustment with labelkey='ItemAdjustment'
		static public string ItemAdjustmentLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("ItemAdjustment").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemAdjustment()
		{
			OnCreated();
		}
		/// Denotes the ItemAdjustment's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemAdjustment_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemAdjustment),Name="ItemAdjustment_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemIssue")]
	public partial class ItemIssue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemIssue with labelkey='ItemIssue'
		static public string ItemIssueLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("ItemIssue").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemIssue()
		{
			OnCreated();
		}
		/// Denotes the ItemIssue's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemIssue_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemIssue),Name="ItemIssue_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActualItem")]
	public partial class ActualItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ActualItem with labelkey='ActualItem'
		static public string ActualItemLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("ActualItem").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ActualItem()
		{
			OnCreated();
		}
		/// Denotes the ActualItem's Id column with type id(nonnull) with labelkey='Id'
		static public string ActualItem_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ActualItem),Name="ActualItem_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReceiveItemPO")]
	public partial class ReceiveItemPO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ReceiveItemPO with labelkey='ReceiveItemPO'
		static public string ReceiveItemPOLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("ReceiveItemPO").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ReceiveItemPO()
		{
			OnCreated();
		}
		/// Denotes the ReceiveItemPO's Id column with type id(nonnull) with labelkey='Id'
		static public string ReceiveItemPO_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ReceiveItemPO),Name="ReceiveItemPO_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReceiveItemNonPO")]
	public partial class ReceiveItemNonPO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ReceiveItemNonPO with labelkey='ReceiveItemNonPO'
		static public string ReceiveItemNonPOLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("ReceiveItemNonPO").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ReceiveItemNonPO()
		{
			OnCreated();
		}
		/// Denotes the ReceiveItemNonPO's Id column with type id(nonnull) with labelkey='Id'
		static public string ReceiveItemNonPO_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ReceiveItemNonPO),Name="ReceiveItemNonPO_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemCountValueVoid")]
	public partial class ItemCountValueVoid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemCountValueVoid with labelkey='Physical Count Void'
		static public string ItemCountValueVoidLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Physical Count Void").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _AccountingTransactionID;
		private System.Guid _VoidCodeID;
		private System.Guid _VoidedItemCountValueID;
		private EntitySet<ItemCountValue> _ItemCountValueVoidingItemCountValueVoid;
		private EntityRef<AccountingTransaction> _BaseAccountingTransaction;
		private EntityRef<VoidCode> _VoidCode;
		private EntityRef<ItemCountValue> _VoidedItemCountValue;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnAccountingTransactionIDChanging(System.Guid value);
	partial void OnAccountingTransactionIDChanged();
	partial void OnVoidCodeIDChanging(System.Guid value);
	partial void OnVoidCodeIDChanged();
	partial void OnVoidedItemCountValueIDChanging(System.Guid value);
	partial void OnVoidedItemCountValueIDChanged();
	#endregion

		public ItemCountValueVoid()
		{
			this._ItemCountValueVoidingItemCountValueVoid = new EntitySet<ItemCountValue>(new Action<ItemCountValue>(this.attach_ItemCountValueVoidingItemCountValueVoid), new Action<ItemCountValue>(this.detach_ItemCountValueVoidingItemCountValueVoid));
			this._BaseAccountingTransaction = default(EntityRef<AccountingTransaction>);
			this._VoidCode = default(EntityRef<VoidCode>);
			this._VoidedItemCountValue = default(EntityRef<ItemCountValue>);
			OnCreated();
		}
		/// Denotes the ItemCountValueVoid's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemCountValueVoid_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCountValueVoid),Name="ItemCountValueVoid_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ItemCountValueVoid's AccountingTransactionID column with type link(nonnull, field AccountingTransaction.Id) with labelkey='Accounting Transaction'
		static public string ItemCountValueVoid_AccountingTransactionID{ get{return ItemCountValueLabelKdsMBLabel.K("Accounting Transaction").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCountValueVoid),Name="ItemCountValueVoid_AccountingTransactionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingTransactionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid AccountingTransactionID
		{
			get
			{
				return this._AccountingTransactionID;
			}
			set
			{
				if ((this._AccountingTransactionID != value))
				{
					if (this._BaseAccountingTransaction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountingTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountingTransactionID = value;
					this.SendPropertyChanged();
					this.OnAccountingTransactionIDChanged();
				}
			}
		}
		/// Denotes the ItemCountValueVoid's VoidCodeID column with type link(nonnull, field VoidCode.Id) with labelkey='VoidCode'
		static public string ItemCountValueVoid_VoidCodeID{ get{return ItemCountValueLabelKdsMBLabel.K("VoidCode").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCountValueVoid),Name="ItemCountValueVoid_VoidCodeID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoidCodeID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid VoidCodeID
		{
			get
			{
				return this._VoidCodeID;
			}
			set
			{
				if ((this._VoidCodeID != value))
				{
					if (this._VoidCode.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoidCodeIDChanging(value);
					this.SendPropertyChanging();
					this._VoidCodeID = value;
					this.SendPropertyChanged();
					this.OnVoidCodeIDChanged();
				}
			}
		}
		/// Denotes the ItemCountValueVoid's VoidedItemCountValueID column with type link(nonnull, field ItemCountValue.Id) with labelkey='Voided Physical Count'
		static public string ItemCountValueVoid_VoidedItemCountValueID{ get{return ItemCountValueLabelKdsMBLabel.K("Voided Physical Count").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCountValueVoid),Name="ItemCountValueVoid_VoidedItemCountValueID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoidedItemCountValueID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid VoidedItemCountValueID
		{
			get
			{
				return this._VoidedItemCountValueID;
			}
			set
			{
				if ((this._VoidedItemCountValueID != value))
				{
					if (this._VoidedItemCountValue.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoidedItemCountValueIDChanging(value);
					this.SendPropertyChanging();
					this._VoidedItemCountValueID = value;
					this.SendPropertyChanged();
					this.OnVoidedItemCountValueIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCountValueVoid_ItemCountValue", Storage="_ItemCountValueVoidingItemCountValueVoid", ThisKey="Id", OtherKey="VoidingItemCountValueVoidID")]
		public EntitySet<ItemCountValue> ItemCountValueVoidingItemCountValueVoid
		{
			get
			{
				return this._ItemCountValueVoidingItemCountValueVoid;
			}
			set
			{
				this._ItemCountValueVoidingItemCountValueVoid.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseAccountingTransaction_ItemCountValueVoid", Storage="_BaseAccountingTransaction", ThisKey="AccountingTransactionID", OtherKey="Id", IsForeignKey=true)]
		public AccountingTransaction BaseAccountingTransaction
		{
			get
			{
				return this._BaseAccountingTransaction.Entity;
			}
			set
			{
				AccountingTransaction previousValue = this._BaseAccountingTransaction.Entity;
				if (((previousValue != value)
							|| (this._BaseAccountingTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseAccountingTransaction.Entity = null;
					}
					this._BaseAccountingTransaction.Entity = value;
					if ((value != null))
					{
						this._AccountingTransactionID = value.Id;
					}
					else
					{
						this._AccountingTransactionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoidCode_ItemCountValueVoid", Storage="_VoidCode", ThisKey="VoidCodeID", OtherKey="Id", IsForeignKey=true)]
		public VoidCode VoidCode
		{
			get
			{
				return this._VoidCode.Entity;
			}
			set
			{
				VoidCode previousValue = this._VoidCode.Entity;
				if (((previousValue != value)
							|| (this._VoidCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoidCode.Entity = null;
						previousValue.ItemCountValueVoidVoidCode.Remove(this);
					}
					this._VoidCode.Entity = value;
					if ((value != null))
					{
						value.ItemCountValueVoidVoidCode.Add(this);
						this._VoidCodeID = value.Id;
					}
					else
					{
						this._VoidCodeID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoidedItemCountValue_ItemCountValueVoid", Storage="_VoidedItemCountValue", ThisKey="VoidedItemCountValueID", OtherKey="Id", IsForeignKey=true)]
		public ItemCountValue VoidedItemCountValue
		{
			get
			{
				return this._VoidedItemCountValue.Entity;
			}
			set
			{
				ItemCountValue previousValue = this._VoidedItemCountValue.Entity;
				if (((previousValue != value)
							|| (this._VoidedItemCountValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoidedItemCountValue.Entity = null;
						previousValue.ItemCountValueVoidVoidedItemCountValue.Remove(this);
					}
					this._VoidedItemCountValue.Entity = value;
					if ((value != null))
					{
						value.ItemCountValueVoidVoidedItemCountValue.Add(this);
						this._VoidedItemCountValueID = value.Id;
					}
					else
					{
						this._VoidedItemCountValueID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemCountValueVoidingItemCountValueVoid(ItemCountValue entity)
		{
			this.SendPropertyChanging();
			entity.VoidingItemCountValueVoid = this;
		}
		private void detach_ItemCountValueVoidingItemCountValueVoid(ItemCountValue entity)
		{
			this.SendPropertyChanging();
			entity.VoidingItemCountValueVoid = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderStateHistory")]
	public partial class WorkOrderStateHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderStateHistory with labelkey='WorkOrderStateHistory'
		static public string WorkOrderStateHistoryLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("WorkOrderStateHistory").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public WorkOrderStateHistory()
		{
			OnCreated();
		}
		/// Denotes the WorkOrderStateHistory's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderStateHistory_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.WorkOrderStateHistory),Name="WorkOrderStateHistory_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderState")]
	public partial class WorkOrderState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderState with labelkey='WorkOrderState'
		static public string WorkOrderStateLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("WorkOrderState").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public WorkOrderState()
		{
			OnCreated();
		}
		/// Denotes the WorkOrderState's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderState_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.WorkOrderState),Name="WorkOrderState_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Demand")]
	public partial class Demand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Demand with labelkey='Demand'
		static public string DemandLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Demand").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public Demand()
		{
			OnCreated();
		}
		/// Denotes the Demand's Id column with type id(nonnull) with labelkey='Id'
		static public string Demand_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.Demand),Name="Demand_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemandItem")]
	public partial class DemandItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table DemandItem with labelkey='DemandItem'
		static public string DemandItemLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("DemandItem").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Object _Quantity;
		private System.Object _ActualQuantity;
		private System.Object _ItemLocationID;
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnQuantityChanging(System.Object value);
	partial void OnQuantityChanged();
	partial void OnActualQuantityChanging(System.Object value);
	partial void OnActualQuantityChanged();
	partial void OnItemLocationIDChanging(System.Object value);
	partial void OnItemLocationIDChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public DemandItem()
		{
			OnCreated();
		}
		/// Denotes the DemandItem's Quantity column with type null(nonnull) with labelkey='Quantity'
		static public string DemandItem_Quantity{ get{return ItemCountValueLabelKdsMBLabel.K("Quantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.DemandItem),Name="DemandItem_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the DemandItem's ActualQuantity column with type null(nonnull) with labelkey='ActualQuantity'
		static public string DemandItem_ActualQuantity{ get{return ItemCountValueLabelKdsMBLabel.K("ActualQuantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.DemandItem),Name="DemandItem_ActualQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualQuantity", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object ActualQuantity
		{
			get
			{
				return this._ActualQuantity;
			}
			set
			{
				if ((this._ActualQuantity != value))
				{
					this.OnActualQuantityChanging(value);
					this.SendPropertyChanging();
					this._ActualQuantity = value;
					this.SendPropertyChanged();
					this.OnActualQuantityChanged();
				}
			}
		}
		/// Denotes the DemandItem's ItemLocationID column with type null(nonnull) with labelkey='ItemLocationID'
		static public string DemandItem_ItemLocationID{ get{return ItemCountValueLabelKdsMBLabel.K("ItemLocationID").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.DemandItem),Name="DemandItem_ItemLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemLocationID", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object ItemLocationID
		{
			get
			{
				return this._ItemLocationID;
			}
			set
			{
				if ((this._ItemLocationID != value))
				{
					this.OnItemLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ItemLocationID = value;
					this.SendPropertyChanged();
					this.OnItemLocationIDChanged();
				}
			}
		}
		/// Denotes the DemandItem's Id column with type id(nonnull) with labelkey='Id'
		static public string DemandItem_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.DemandItem),Name="DemandItem_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseOrder")]
	public partial class PurchaseOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PurchaseOrder with labelkey='PurchaseOrder'
		static public string PurchaseOrderLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("PurchaseOrder").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Object _CurrentPurchaseOrderStateHistoryID;
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnCurrentPurchaseOrderStateHistoryIDChanging(System.Object value);
	partial void OnCurrentPurchaseOrderStateHistoryIDChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public PurchaseOrder()
		{
			OnCreated();
		}
		/// Denotes the PurchaseOrder's CurrentPurchaseOrderStateHistoryID column with type null(nonnull) with labelkey='CurrentPurchaseOrderStateHistoryID'
		static public string PurchaseOrder_CurrentPurchaseOrderStateHistoryID{ get{return ItemCountValueLabelKdsMBLabel.K("CurrentPurchaseOrderStateHistoryID").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PurchaseOrder),Name="PurchaseOrder_CurrentPurchaseOrderStateHistoryID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentPurchaseOrderStateHistoryID", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object CurrentPurchaseOrderStateHistoryID
		{
			get
			{
				return this._CurrentPurchaseOrderStateHistoryID;
			}
			set
			{
				if ((this._CurrentPurchaseOrderStateHistoryID != value))
				{
					this.OnCurrentPurchaseOrderStateHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentPurchaseOrderStateHistoryID = value;
					this.SendPropertyChanged();
					this.OnCurrentPurchaseOrderStateHistoryIDChanged();
				}
			}
		}
		/// Denotes the PurchaseOrder's Id column with type id(nonnull) with labelkey='Id'
		static public string PurchaseOrder_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PurchaseOrder),Name="PurchaseOrder_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseOrderStateHistory")]
	public partial class PurchaseOrderStateHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PurchaseOrderStateHistory with labelkey='PurchaseOrderStateHistory'
		static public string PurchaseOrderStateHistoryLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("PurchaseOrderStateHistory").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public PurchaseOrderStateHistory()
		{
			OnCreated();
		}
		/// Denotes the PurchaseOrderStateHistory's Id column with type id(nonnull) with labelkey='Id'
		static public string PurchaseOrderStateHistory_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PurchaseOrderStateHistory),Name="PurchaseOrderStateHistory_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseOrderState")]
	public partial class PurchaseOrderState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PurchaseOrderState with labelkey='PurchaseOrderState'
		static public string PurchaseOrderStateLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("PurchaseOrderState").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public PurchaseOrderState()
		{
			OnCreated();
		}
		/// Denotes the PurchaseOrderState's Id column with type id(nonnull) with labelkey='Id'
		static public string PurchaseOrderState_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PurchaseOrderState),Name="PurchaseOrderState_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.POLine")]
	public partial class POLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table POLine with labelkey='POLine'
		static public string POLineLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("POLine").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public POLine()
		{
			OnCreated();
		}
		/// Denotes the POLine's Id column with type id(nonnull) with labelkey='Id'
		static public string POLine_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.POLine),Name="POLine_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.POLineItem")]
	public partial class POLineItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table POLineItem with labelkey='POLineItem'
		static public string POLineItemLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("POLineItem").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Object _Quantity;
		private System.Object _ReceiveQuantity;
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnQuantityChanging(System.Object value);
	partial void OnQuantityChanged();
	partial void OnReceiveQuantityChanging(System.Object value);
	partial void OnReceiveQuantityChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public POLineItem()
		{
			OnCreated();
		}
		/// Denotes the POLineItem's Quantity column with type null(nonnull) with labelkey='Quantity'
		static public string POLineItem_Quantity{ get{return ItemCountValueLabelKdsMBLabel.K("Quantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.POLineItem),Name="POLineItem_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the POLineItem's ReceiveQuantity column with type null(nonnull) with labelkey='ReceiveQuantity'
		static public string POLineItem_ReceiveQuantity{ get{return ItemCountValueLabelKdsMBLabel.K("ReceiveQuantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.POLineItem),Name="POLineItem_ReceiveQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiveQuantity", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object ReceiveQuantity
		{
			get
			{
				return this._ReceiveQuantity;
			}
			set
			{
				if ((this._ReceiveQuantity != value))
				{
					this.OnReceiveQuantityChanging(value);
					this.SendPropertyChanging();
					this._ReceiveQuantity = value;
					this.SendPropertyChanged();
					this.OnReceiveQuantityChanged();
				}
			}
		}
		/// Denotes the POLineItem's Id column with type id(nonnull) with labelkey='Id'
		static public string POLineItem_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.POLineItem),Name="POLineItem_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemTransfer")]
	public partial class ItemTransfer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemTransfer with labelkey='ItemTransfer'
		static public string ItemTransferLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("ItemTransfer").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemTransfer()
		{
			OnCreated();
		}
		/// Denotes the ItemTransfer's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemTransfer_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemTransfer),Name="ItemTransfer_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermanentItemLocation")]
	public partial class PermanentItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PermanentItemLocation with labelkey='Permanent Item Location'
		static public string PermanentItemLocationLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Permanent Item Location").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private int _Maximum;
		private int _Minimum;
		private System.Guid _Id;
		private System.Guid _ActualItemLocationID;
		private string _ExternalTag;
		private System.Guid? _CurrentItemCountValueID;
		private EntityRef<ActualItemLocation> _BaseActualItemLocation;
		private EntityRef<ItemCountValue> _CurrentItemCountValue;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnMaximumChanging(int value);
	partial void OnMaximumChanged();
	partial void OnMinimumChanging(int value);
	partial void OnMinimumChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnActualItemLocationIDChanging(System.Guid value);
	partial void OnActualItemLocationIDChanged();
	partial void OnExternalTagChanging(string value);
	partial void OnExternalTagChanged();
	partial void OnCurrentItemCountValueIDChanging(System.Guid? value);
	partial void OnCurrentItemCountValueIDChanged();
	#endregion

		public PermanentItemLocation()
		{
			this._BaseActualItemLocation = default(EntityRef<ActualItemLocation>);
			this._CurrentItemCountValue = default(EntityRef<ItemCountValue>);
			OnCreated();
		}
		/// Denotes the PermanentItemLocation's Maximum column with type integer(nonnull, 32) with labelkey='Maximum'
		static public string PermanentItemLocation_Maximum{ get{return ItemCountValueLabelKdsMBLabel.K("Maximum").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PermanentItemLocation),Name="PermanentItemLocation_Maximum")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Maximum", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				if ((this._Maximum != value))
				{
					this.OnMaximumChanging(value);
					this.SendPropertyChanging();
					this._Maximum = value;
					this.SendPropertyChanged();
					this.OnMaximumChanged();
				}
			}
		}
		/// Denotes the PermanentItemLocation's Minimum column with type integer(nonnull, 32) with labelkey='Minimum'
		static public string PermanentItemLocation_Minimum{ get{return ItemCountValueLabelKdsMBLabel.K("Minimum").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PermanentItemLocation),Name="PermanentItemLocation_Minimum")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Minimum", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Minimum
		{
			get
			{
				return this._Minimum;
			}
			set
			{
				if ((this._Minimum != value))
				{
					this.OnMinimumChanging(value);
					this.SendPropertyChanging();
					this._Minimum = value;
					this.SendPropertyChanged();
					this.OnMinimumChanged();
				}
			}
		}
		/// Denotes the PermanentItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string PermanentItemLocation_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PermanentItemLocation),Name="PermanentItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the PermanentItemLocation's ActualItemLocationID column with type link(nonnull, field ActualItemLocation.Id) with labelkey='Actual Item Location'
		static public string PermanentItemLocation_ActualItemLocationID{ get{return ItemCountValueLabelKdsMBLabel.K("Actual Item Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PermanentItemLocation),Name="PermanentItemLocation_ActualItemLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualItemLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ActualItemLocationID
		{
			get
			{
				return this._ActualItemLocationID;
			}
			set
			{
				if ((this._ActualItemLocationID != value))
				{
					if (this._BaseActualItemLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActualItemLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ActualItemLocationID = value;
					this.SendPropertyChanged();
					this.OnActualItemLocationIDChanged();
				}
			}
		}
		/// Denotes the PermanentItemLocation's ExternalTag column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='External Tag'
		static public string PermanentItemLocation_ExternalTag{ get{return ItemCountValueLabelKdsMBLabel.K("External Tag").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PermanentItemLocation),Name="PermanentItemLocation_ExternalTag")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalTag", DbType="NVARCHAR (50)")]
		public string ExternalTag
		{
			get
			{
				return this._ExternalTag;
			}
			set
			{
				if ((this._ExternalTag != value))
				{
					this.OnExternalTagChanging(value);
					this.SendPropertyChanging();
					this._ExternalTag = value;
					this.SendPropertyChanged();
					this.OnExternalTagChanged();
				}
			}
		}
		/// Denotes the PermanentItemLocation's CurrentItemCountValueID column with type link(field ItemCountValue.Id) with labelkey='Current Physical Count'
		static public string PermanentItemLocation_CurrentItemCountValueID{ get{return ItemCountValueLabelKdsMBLabel.K("Current Physical Count").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.PermanentItemLocation),Name="PermanentItemLocation_CurrentItemCountValueID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentItemCountValueID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? CurrentItemCountValueID
		{
			get
			{
				return this._CurrentItemCountValueID;
			}
			set
			{
				if ((this._CurrentItemCountValueID != value))
				{
					if (this._CurrentItemCountValue.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentItemCountValueIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentItemCountValueID = value;
					this.SendPropertyChanged();
					this.OnCurrentItemCountValueIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseActualItemLocation_PermanentItemLocation", Storage="_BaseActualItemLocation", ThisKey="ActualItemLocationID", OtherKey="Id", IsForeignKey=true)]
		public ActualItemLocation BaseActualItemLocation
		{
			get
			{
				return this._BaseActualItemLocation.Entity;
			}
			set
			{
				ActualItemLocation previousValue = this._BaseActualItemLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseActualItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseActualItemLocation.Entity = null;
					}
					this._BaseActualItemLocation.Entity = value;
					if ((value != null))
					{
						this._ActualItemLocationID = value.Id;
					}
					else
					{
						this._ActualItemLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentItemCountValue_PermanentItemLocation", Storage="_CurrentItemCountValue", ThisKey="CurrentItemCountValueID", OtherKey="Id", IsForeignKey=true)]
		public ItemCountValue CurrentItemCountValue
		{
			get
			{
				return this._CurrentItemCountValue.Entity;
			}
			set
			{
				ItemCountValue previousValue = this._CurrentItemCountValue.Entity;
				if (((previousValue != value)
							|| (this._CurrentItemCountValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentItemCountValue.Entity = null;
						previousValue.PermanentItemLocationCurrentItemCountValue.Remove(this);
					}
					this._CurrentItemCountValue.Entity = value;
					if ((value != null))
					{
						value.PermanentItemLocationCurrentItemCountValue.Add(this);
						this._CurrentItemCountValueID = value.Id;
					}
					else
					{
						this._CurrentItemCountValueID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemporaryItemLocation")]
	public partial class TemporaryItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table TemporaryItemLocation with labelkey='TemporaryItemLocation'
		static public string TemporaryItemLocationLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("TemporaryItemLocation").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public TemporaryItemLocation()
		{
			OnCreated();
		}
		/// Denotes the TemporaryItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string TemporaryItemLocation_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.TemporaryItemLocation),Name="TemporaryItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateItemLocation")]
	public partial class TemplateItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table TemplateItemLocation with labelkey='TemplateItemLocation'
		static public string TemplateItemLocationLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("TemplateItemLocation").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public TemplateItemLocation()
		{
			OnCreated();
		}
		/// Denotes the TemplateItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string TemplateItemLocation_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.TemplateItemLocation),Name="TemplateItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RationalizedInventoryActivityDeltas")]
	public partial class RationalizedInventoryActivityDeltas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table RationalizedInventoryActivityDeltas with labelkey=''
		static public string RationalizedInventoryActivityDeltasLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _AccountingTransactionID;
		private System.Guid _ItemLocationID;
		private System.DateTime _EffectiveDate;
		private System.DateTime _EntryDate;
		private int? _Quantity;
		private System.Decimal? _Cost;
		private int _TotalQuantity;
		private System.Decimal _TotalCost;
		private EntityRef<AccountingTransaction> _AccountingTransaction;
		private EntityRef<ItemLocation> _ItemLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnAccountingTransactionIDChanging(System.Guid value);
	partial void OnAccountingTransactionIDChanged();
	partial void OnItemLocationIDChanging(System.Guid value);
	partial void OnItemLocationIDChanged();
	partial void OnEffectiveDateChanging(System.DateTime value);
	partial void OnEffectiveDateChanged();
	partial void OnEntryDateChanging(System.DateTime value);
	partial void OnEntryDateChanged();
	partial void OnQuantityChanging(int? value);
	partial void OnQuantityChanged();
	partial void OnCostChanging(System.Decimal? value);
	partial void OnCostChanged();
	partial void OnTotalQuantityChanging(int value);
	partial void OnTotalQuantityChanged();
	partial void OnTotalCostChanging(System.Decimal value);
	partial void OnTotalCostChanged();
	#endregion

		public RationalizedInventoryActivityDeltas()
		{
			this._AccountingTransaction = default(EntityRef<AccountingTransaction>);
			this._ItemLocation = default(EntityRef<ItemLocation>);
			OnCreated();
		}
		/// Denotes the RationalizedInventoryActivityDeltas's Id column with type id(nonnull) with labelkey='Id'
		static public string RationalizedInventoryActivityDeltas_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's AccountingTransactionID column with type link(nonnull, field AccountingTransaction.Id) with labelkey=''
		static public string RationalizedInventoryActivityDeltas_AccountingTransactionID{ get{return ItemCountValueLabelKdsMBLabel.K("").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_AccountingTransactionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingTransactionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid AccountingTransactionID
		{
			get
			{
				return this._AccountingTransactionID;
			}
			set
			{
				if ((this._AccountingTransactionID != value))
				{
					if (this._AccountingTransaction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountingTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountingTransactionID = value;
					this.SendPropertyChanged();
					this.OnAccountingTransactionIDChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's ItemLocationID column with type link(nonnull, field ItemLocation.Id) with labelkey='Storage Assignment'
		static public string RationalizedInventoryActivityDeltas_ItemLocationID{ get{return ItemCountValueLabelKdsMBLabel.K("Storage Assignment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_ItemLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ItemLocationID
		{
			get
			{
				return this._ItemLocationID;
			}
			set
			{
				if ((this._ItemLocationID != value))
				{
					if (this._ItemLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ItemLocationID = value;
					this.SendPropertyChanged();
					this.OnItemLocationIDChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's EffectiveDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EffectiveDate'
		static public string RationalizedInventoryActivityDeltas_EffectiveDate{ get{return ItemCountValueLabelKdsMBLabel.K("EffectiveDate").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_EffectiveDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged();
					this.OnEffectiveDateChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's EntryDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EntryDate'
		static public string RationalizedInventoryActivityDeltas_EntryDate{ get{return ItemCountValueLabelKdsMBLabel.K("EntryDate").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_EntryDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged();
					this.OnEntryDateChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's Quantity column with type integer(32) with labelkey='Quantity'
		static public string RationalizedInventoryActivityDeltas_Quantity{ get{return ItemCountValueLabelKdsMBLabel.K("Quantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="INT")]
		public int? Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's Cost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
		static public string RationalizedInventoryActivityDeltas_Cost{ get{return ItemCountValueLabelKdsMBLabel.K("Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_Cost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="MONEY")]
		public System.Decimal? Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged();
					this.OnCostChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's TotalQuantity column with type integer(nonnull, 32) with labelkey='TotalQuantity'
		static public string RationalizedInventoryActivityDeltas_TotalQuantity{ get{return ItemCountValueLabelKdsMBLabel.K("TotalQuantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_TotalQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalQuantity", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int TotalQuantity
		{
			get
			{
				return this._TotalQuantity;
			}
			set
			{
				if ((this._TotalQuantity != value))
				{
					this.OnTotalQuantityChanging(value);
					this.SendPropertyChanging();
					this._TotalQuantity = value;
					this.SendPropertyChanged();
					this.OnTotalQuantityChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's TotalCost column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='TotalCost'
		static public string RationalizedInventoryActivityDeltas_TotalCost{ get{return ItemCountValueLabelKdsMBLabel.K("TotalCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_TotalCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged();
					this.OnTotalCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_RationalizedInventoryActivityDeltas", Storage="_AccountingTransaction", ThisKey="AccountingTransactionID", OtherKey="Id", IsForeignKey=true)]
		public AccountingTransaction AccountingTransaction
		{
			get
			{
				return this._AccountingTransaction.Entity;
			}
			set
			{
				AccountingTransaction previousValue = this._AccountingTransaction.Entity;
				if (((previousValue != value)
							|| (this._AccountingTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountingTransaction.Entity = null;
						previousValue.RationalizedInventoryActivityDeltasAccountingTransaction.Remove(this);
					}
					this._AccountingTransaction.Entity = value;
					if ((value != null))
					{
						value.RationalizedInventoryActivityDeltasAccountingTransaction.Add(this);
						this._AccountingTransactionID = value.Id;
					}
					else
					{
						this._AccountingTransactionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_RationalizedInventoryActivityDeltas", Storage="_ItemLocation", ThisKey="ItemLocationID", OtherKey="Id", IsForeignKey=true)]
		public ItemLocation ItemLocation
		{
			get
			{
				return this._ItemLocation.Entity;
			}
			set
			{
				ItemLocation previousValue = this._ItemLocation.Entity;
				if (((previousValue != value)
							|| (this._ItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemLocation.Entity = null;
						previousValue.RationalizedInventoryActivityDeltasItemLocation.Remove(this);
					}
					this._ItemLocation.Entity = value;
					if ((value != null))
					{
						value.RationalizedInventoryActivityDeltasItemLocation.Add(this);
						this._ItemLocationID = value.Id;
					}
					else
					{
						this._ItemLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemCategory")]
	public partial class ItemCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemCategory with labelkey='ItemCategory'
		static public string ItemCategoryLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("ItemCategory").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<Item> _ItemItemCategory;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemCategory()
		{
			this._ItemItemCategory = new EntitySet<Item>(new Action<Item>(this.attach_ItemItemCategory), new Action<Item>(this.detach_ItemItemCategory));
			OnCreated();
		}
		/// Denotes the ItemCategory's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemCategory_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemCategory),Name="ItemCategory_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCategory_Item", Storage="_ItemItemCategory", ThisKey="Id", OtherKey="ItemCategoryID")]
		public EntitySet<Item> ItemItemCategory
		{
			get
			{
				return this._ItemItemCategory;
			}
			set
			{
				this._ItemItemCategory.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemItemCategory(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemCategory = this;
		}
		private void detach_ItemItemCategory(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemCategory = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitOfMeasure")]
	public partial class UnitOfMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table UnitOfMeasure with labelkey='UOM'
		static public string UnitOfMeasureLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("UOM").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private EntitySet<Item> _ItemUnitOfMeasure;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	#endregion

		public UnitOfMeasure()
		{
			this._ItemUnitOfMeasure = new EntitySet<Item>(new Action<Item>(this.attach_ItemUnitOfMeasure), new Action<Item>(this.detach_ItemUnitOfMeasure));
			OnCreated();
		}
		/// Denotes the UnitOfMeasure's Id column with type id(nonnull) with labelkey='Id'
		static public string UnitOfMeasure_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.UnitOfMeasure),Name="UnitOfMeasure_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the UnitOfMeasure's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string UnitOfMeasure_Code{ get{return ItemCountValueLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.UnitOfMeasure),Name="UnitOfMeasure_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the UnitOfMeasure's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string UnitOfMeasure_Hidden{ get{return ItemCountValueLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.UnitOfMeasure),Name="UnitOfMeasure_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the UnitOfMeasure's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string UnitOfMeasure_Desc{ get{return ItemCountValueLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.UnitOfMeasure),Name="UnitOfMeasure_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the UnitOfMeasure's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string UnitOfMeasure_Comment{ get{return ItemCountValueLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.UnitOfMeasure),Name="UnitOfMeasure_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitOfMeasure_Item", Storage="_ItemUnitOfMeasure", ThisKey="Id", OtherKey="UnitOfMeasureID")]
		public EntitySet<Item> ItemUnitOfMeasure
		{
			get
			{
				return this._ItemUnitOfMeasure;
			}
			set
			{
				this._ItemUnitOfMeasure.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemUnitOfMeasure(Item entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasure = this;
		}
		private void detach_ItemUnitOfMeasure(Item entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasure = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemAdjustmentCode")]
	public partial class ItemAdjustmentCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemAdjustmentCode with labelkey='Item Adjustment Code'
		static public string ItemAdjustmentCodeLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Item Adjustment Code").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private System.Guid _CostCenterID;
		private EntitySet<ItemCountValue> _ItemCountValueItemAdjustmentCode;
		private EntityRef<CostCenter> _CostCenter;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnCostCenterIDChanging(System.Guid value);
	partial void OnCostCenterIDChanged();
	#endregion

		public ItemAdjustmentCode()
		{
			this._ItemCountValueItemAdjustmentCode = new EntitySet<ItemCountValue>(new Action<ItemCountValue>(this.attach_ItemCountValueItemAdjustmentCode), new Action<ItemCountValue>(this.detach_ItemCountValueItemAdjustmentCode));
			this._CostCenter = default(EntityRef<CostCenter>);
			OnCreated();
		}
		/// Denotes the ItemAdjustmentCode's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemAdjustmentCode_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemAdjustmentCode),Name="ItemAdjustmentCode_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ItemAdjustmentCode's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string ItemAdjustmentCode_Code{ get{return ItemCountValueLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemAdjustmentCode),Name="ItemAdjustmentCode_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the ItemAdjustmentCode's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string ItemAdjustmentCode_Hidden{ get{return ItemCountValueLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemAdjustmentCode),Name="ItemAdjustmentCode_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the ItemAdjustmentCode's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string ItemAdjustmentCode_Desc{ get{return ItemCountValueLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemAdjustmentCode),Name="ItemAdjustmentCode_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the ItemAdjustmentCode's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string ItemAdjustmentCode_Comment{ get{return ItemCountValueLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemAdjustmentCode),Name="ItemAdjustmentCode_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the ItemAdjustmentCode's CostCenterID column with type link(nonnull, field CostCenter.Id) with labelkey='Cost Center'
		static public string ItemAdjustmentCode_CostCenterID{ get{return ItemCountValueLabelKdsMBLabel.K("Cost Center").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemAdjustmentCode),Name="ItemAdjustmentCode_CostCenterID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCenterID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CostCenterID
		{
			get
			{
				return this._CostCenterID;
			}
			set
			{
				if ((this._CostCenterID != value))
				{
					if (this._CostCenter.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CostCenterID = value;
					this.SendPropertyChanged();
					this.OnCostCenterIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemAdjustmentCode_ItemCountValue", Storage="_ItemCountValueItemAdjustmentCode", ThisKey="Id", OtherKey="ItemAdjustmentCodeID")]
		public EntitySet<ItemCountValue> ItemCountValueItemAdjustmentCode
		{
			get
			{
				return this._ItemCountValueItemAdjustmentCode;
			}
			set
			{
				this._ItemCountValueItemAdjustmentCode.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_ItemAdjustmentCode", Storage="_CostCenter", ThisKey="CostCenterID", OtherKey="Id", IsForeignKey=true)]
		public CostCenter CostCenter
		{
			get
			{
				return this._CostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._CostCenter.Entity;
				if (((previousValue != value)
							|| (this._CostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCenter.Entity = null;
						previousValue.ItemAdjustmentCodeCostCenter.Remove(this);
					}
					this._CostCenter.Entity = value;
					if ((value != null))
					{
						value.ItemAdjustmentCodeCostCenter.Add(this);
						this._CostCenterID = value.Id;
					}
					else
					{
						this._CostCenterID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemCountValueItemAdjustmentCode(ItemCountValue entity)
		{
			this.SendPropertyChanging();
			entity.ItemAdjustmentCode = this;
		}
		private void detach_ItemCountValueItemAdjustmentCode(ItemCountValue entity)
		{
			this.SendPropertyChanging();
			entity.ItemAdjustmentCode = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VoidCode")]
	public partial class VoidCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table VoidCode with labelkey='VoidCode'
		static public string VoidCodeLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("VoidCode").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<ItemCountValueVoid> _ItemCountValueVoidVoidCode;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public VoidCode()
		{
			this._ItemCountValueVoidVoidCode = new EntitySet<ItemCountValueVoid>(new Action<ItemCountValueVoid>(this.attach_ItemCountValueVoidVoidCode), new Action<ItemCountValueVoid>(this.detach_ItemCountValueVoidVoidCode));
			OnCreated();
		}
		/// Denotes the VoidCode's Id column with type id(nonnull) with labelkey='Id'
		static public string VoidCode_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.VoidCode),Name="VoidCode_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoidCode_ItemCountValueVoid", Storage="_ItemCountValueVoidVoidCode", ThisKey="Id", OtherKey="VoidCodeID")]
		public EntitySet<ItemCountValueVoid> ItemCountValueVoidVoidCode
		{
			get
			{
				return this._ItemCountValueVoidVoidCode;
			}
			set
			{
				this._ItemCountValueVoidVoidCode.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemCountValueVoidVoidCode(ItemCountValueVoid entity)
		{
			this.SendPropertyChanging();
			entity.VoidCode = this;
		}
		private void detach_ItemCountValueVoidVoidCode(ItemCountValueVoid entity)
		{
			this.SendPropertyChanging();
			entity.VoidCode = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemActivity")]
	public partial class ItemActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemActivity with labelkey='Item Activity'
		static public string ItemActivityLabelKey { get{return ItemCountValueLabelKdsMBLabel.K("Item Activity").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private byte _TableEnum;
		private System.Guid? _ParentID;
		private int? _Quantity;
		private System.Decimal? _Cost;
		private System.Decimal? _UnitCost;
		private System.Guid _ItemLocationID;
		private System.Guid _AccountingTransactionID;
		private EntitySet<ItemActivity> _ItemActivityParent;
		private EntityRef<ItemActivity> _Parent;
		private EntityRef<ItemLocation> _ItemLocation;
		private EntityRef<AccountingTransaction> _AccountingTransaction;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnTableEnumChanging(byte value);
	partial void OnTableEnumChanged();
	partial void OnParentIDChanging(System.Guid? value);
	partial void OnParentIDChanged();
	partial void OnQuantityChanging(int? value);
	partial void OnQuantityChanged();
	partial void OnCostChanging(System.Decimal? value);
	partial void OnCostChanged();
	partial void OnUnitCostChanging(System.Decimal? value);
	partial void OnUnitCostChanged();
	partial void OnItemLocationIDChanging(System.Guid value);
	partial void OnItemLocationIDChanged();
	partial void OnAccountingTransactionIDChanging(System.Guid value);
	partial void OnAccountingTransactionIDChanged();
	#endregion

		public ItemActivity()
		{
			this._ItemActivityParent = new EntitySet<ItemActivity>(new Action<ItemActivity>(this.attach_ItemActivityParent), new Action<ItemActivity>(this.detach_ItemActivityParent));
			this._Parent = default(EntityRef<ItemActivity>);
			this._ItemLocation = default(EntityRef<ItemLocation>);
			this._AccountingTransaction = default(EntityRef<AccountingTransaction>);
			OnCreated();
		}
		/// Denotes the ItemActivity's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemActivity_Id{ get{return ItemCountValueLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemActivity),Name="ItemActivity_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ItemActivity's TableEnum column with type integer(nonnull, unsigned 4) with labelkey='Item Activity'
		static public string ItemActivity_TableEnum{ get{return ItemCountValueLabelKdsMBLabel.K("Item Activity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemActivity),Name="ItemActivity_TableEnum")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableEnum", DbType="TINYINT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public byte TableEnum
		{
			get
			{
				return this._TableEnum;
			}
			set
			{
				if ((this._TableEnum != value))
				{
					this.OnTableEnumChanging(value);
					this.SendPropertyChanging();
					this._TableEnum = value;
					this.SendPropertyChanged();
					this.OnTableEnumChanged();
				}
			}
		}
		/// Denotes the ItemActivity's ParentID column with type link(field ItemActivity.Id) with labelkey='Item Activity'
		static public string ItemActivity_ParentID{ get{return ItemCountValueLabelKdsMBLabel.K("Item Activity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemActivity),Name="ItemActivity_ParentID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged();
					this.OnParentIDChanged();
				}
			}
		}
		/// Denotes the ItemActivity's Quantity column with type integer(32) with labelkey='Quantity'
		static public string ItemActivity_Quantity{ get{return ItemCountValueLabelKdsMBLabel.K("Quantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemActivity),Name="ItemActivity_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="INT")]
		public int? Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the ItemActivity's Cost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
		static public string ItemActivity_Cost{ get{return ItemCountValueLabelKdsMBLabel.K("Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemActivity),Name="ItemActivity_Cost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="MONEY")]
		public System.Decimal? Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged();
					this.OnCostChanged();
				}
			}
		}
		/// Denotes the ItemActivity's UnitCost column with type currency((min (¤922,337,203,685,477.5808)), (max ¤922,337,203,685,477.5807), by ¤0.0001) with labelkey='UnitCost'
		static public string ItemActivity_UnitCost{ get{return ItemCountValueLabelKdsMBLabel.K("UnitCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemActivity),Name="ItemActivity_UnitCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCost", DbType="MONEY")]
		public System.Decimal? UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged();
					this.OnUnitCostChanged();
				}
			}
		}
		/// Denotes the ItemActivity's ItemLocationID column with type link(nonnull, field ItemLocation.Id) with labelkey='Storage Assignment'
		static public string ItemActivity_ItemLocationID{ get{return ItemCountValueLabelKdsMBLabel.K("Storage Assignment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemActivity),Name="ItemActivity_ItemLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ItemLocationID
		{
			get
			{
				return this._ItemLocationID;
			}
			set
			{
				if ((this._ItemLocationID != value))
				{
					if (this._ItemLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ItemLocationID = value;
					this.SendPropertyChanged();
					this.OnItemLocationIDChanged();
				}
			}
		}
		/// Denotes the ItemActivity's AccountingTransactionID column with type link(nonnull, field AccountingTransaction.Id) with labelkey=''
		static public string ItemActivity_AccountingTransactionID{ get{return ItemCountValueLabelKdsMBLabel.K("").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(ItemCountValueEntities.ItemActivity),Name="ItemActivity_AccountingTransactionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingTransactionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid AccountingTransactionID
		{
			get
			{
				return this._AccountingTransactionID;
			}
			set
			{
				if ((this._AccountingTransactionID != value))
				{
					if (this._AccountingTransaction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountingTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountingTransactionID = value;
					this.SendPropertyChanged();
					this.OnAccountingTransactionIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemActivity_ItemActivity", Storage="_ItemActivityParent", ThisKey="Id", OtherKey="ParentID")]
		public EntitySet<ItemActivity> ItemActivityParent
		{
			get
			{
				return this._ItemActivityParent;
			}
			set
			{
				this._ItemActivityParent.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parent_ItemActivity", Storage="_Parent", ThisKey="ParentID", OtherKey="Id", IsForeignKey=true)]
		public ItemActivity Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				ItemActivity previousValue = this._Parent.Entity;
				if (((previousValue != value)
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.ItemActivityParent.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.ItemActivityParent.Add(this);
						this._ParentID = value.Id;
					}
					else
					{
						this._ParentID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_ItemActivity", Storage="_ItemLocation", ThisKey="ItemLocationID", OtherKey="Id", IsForeignKey=true)]
		public ItemLocation ItemLocation
		{
			get
			{
				return this._ItemLocation.Entity;
			}
			set
			{
				ItemLocation previousValue = this._ItemLocation.Entity;
				if (((previousValue != value)
							|| (this._ItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemLocation.Entity = null;
						previousValue.ItemActivityItemLocation.Remove(this);
					}
					this._ItemLocation.Entity = value;
					if ((value != null))
					{
						value.ItemActivityItemLocation.Add(this);
						this._ItemLocationID = value.Id;
					}
					else
					{
						this._ItemLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_ItemActivity", Storage="_AccountingTransaction", ThisKey="AccountingTransactionID", OtherKey="Id", IsForeignKey=true)]
		public AccountingTransaction AccountingTransaction
		{
			get
			{
				return this._AccountingTransaction.Entity;
			}
			set
			{
				AccountingTransaction previousValue = this._AccountingTransaction.Entity;
				if (((previousValue != value)
							|| (this._AccountingTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountingTransaction.Entity = null;
						previousValue.ItemActivityAccountingTransaction.Remove(this);
					}
					this._AccountingTransaction.Entity = value;
					if ((value != null))
					{
						value.ItemActivityAccountingTransaction.Add(this);
						this._AccountingTransactionID = value.Id;
					}
					else
					{
						this._AccountingTransactionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemActivityParent(ItemActivity entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		private void detach_ItemActivityParent(ItemActivity entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}
	internal class ItemCountValueLabelKdsMBLabel : Thinkage.Libraries.Translation.GeneralKeyBuilder {
		const string LabelContext = "dsMBLabel";

		static ItemCountValueLabelKdsMBLabel Instance = new ItemCountValueLabelKdsMBLabel();
		protected ItemCountValueLabelKdsMBLabel() {
		}
		protected override Thinkage.Libraries.Translation.ContextReference GetContext() {
			return Thinkage.Libraries.Translation.ContextReference.New(LabelContext);
		}
		public static Thinkage.Libraries.Translation.Key K([Thinkage.Libraries.Translation.Context(LabelContext)]string s) {
			return Instance.BuildKey(s);
		}
	}
}
#pragma warning restore 1591

