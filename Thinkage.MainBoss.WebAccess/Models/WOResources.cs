


	
	
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//		Template file LINQGenerationTemplate.xml
//		Vault version 31
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Thinkage.MainBoss.WebAccess.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;

	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Master")]
	public partial class WOResourceDataContext : System.Data.Linq.DataContext
	{
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

	#region Extensibility Method Definitions
	partial void OnCreated();
	partial void InsertCostCenter(WOResourceEntities.CostCenter instance);
	partial void UpdateCostCenter(WOResourceEntities.CostCenter instance);
	partial void DeleteCostCenter(WOResourceEntities.CostCenter instance);
	partial void InsertWorkOrderExpenseCategory(WOResourceEntities.WorkOrderExpenseCategory instance);
	partial void UpdateWorkOrderExpenseCategory(WOResourceEntities.WorkOrderExpenseCategory instance);
	partial void DeleteWorkOrderExpenseCategory(WOResourceEntities.WorkOrderExpenseCategory instance);
	partial void InsertWorkOrderExpenseModel(WOResourceEntities.WorkOrderExpenseModel instance);
	partial void UpdateWorkOrderExpenseModel(WOResourceEntities.WorkOrderExpenseModel instance);
	partial void DeleteWorkOrderExpenseModel(WOResourceEntities.WorkOrderExpenseModel instance);
	partial void InsertAccessCode(WOResourceEntities.AccessCode instance);
	partial void UpdateAccessCode(WOResourceEntities.AccessCode instance);
	partial void DeleteAccessCode(WOResourceEntities.AccessCode instance);
	partial void InsertWorkOrder(WOResourceEntities.WorkOrder instance);
	partial void UpdateWorkOrder(WOResourceEntities.WorkOrder instance);
	partial void DeleteWorkOrder(WOResourceEntities.WorkOrder instance);
	partial void InsertWorkOrderState(WOResourceEntities.WorkOrderState instance);
	partial void UpdateWorkOrderState(WOResourceEntities.WorkOrderState instance);
	partial void DeleteWorkOrderState(WOResourceEntities.WorkOrderState instance);
	partial void InsertWorkOrderStateHistory(WOResourceEntities.WorkOrderStateHistory instance);
	partial void UpdateWorkOrderStateHistory(WOResourceEntities.WorkOrderStateHistory instance);
	partial void DeleteWorkOrderStateHistory(WOResourceEntities.WorkOrderStateHistory instance);
	partial void InsertPurchaseOrder(WOResourceEntities.PurchaseOrder instance);
	partial void UpdatePurchaseOrder(WOResourceEntities.PurchaseOrder instance);
	partial void DeletePurchaseOrder(WOResourceEntities.PurchaseOrder instance);
	partial void InsertPurchaseOrderState(WOResourceEntities.PurchaseOrderState instance);
	partial void UpdatePurchaseOrderState(WOResourceEntities.PurchaseOrderState instance);
	partial void DeletePurchaseOrderState(WOResourceEntities.PurchaseOrderState instance);
	partial void InsertPurchaseOrderStateHistory(WOResourceEntities.PurchaseOrderStateHistory instance);
	partial void UpdatePurchaseOrderStateHistory(WOResourceEntities.PurchaseOrderStateHistory instance);
	partial void DeletePurchaseOrderStateHistory(WOResourceEntities.PurchaseOrderStateHistory instance);
	partial void InsertWorkOrderTemplate(WOResourceEntities.WorkOrderTemplate instance);
	partial void UpdateWorkOrderTemplate(WOResourceEntities.WorkOrderTemplate instance);
	partial void DeleteWorkOrderTemplate(WOResourceEntities.WorkOrderTemplate instance);
	partial void InsertTemporaryStorage(WOResourceEntities.TemporaryStorage instance);
	partial void UpdateTemporaryStorage(WOResourceEntities.TemporaryStorage instance);
	partial void DeleteTemporaryStorage(WOResourceEntities.TemporaryStorage instance);
	partial void InsertTemplateTemporaryStorage(WOResourceEntities.TemplateTemporaryStorage instance);
	partial void UpdateTemplateTemporaryStorage(WOResourceEntities.TemplateTemporaryStorage instance);
	partial void DeleteTemplateTemporaryStorage(WOResourceEntities.TemplateTemporaryStorage instance);
	partial void InsertItemCountValue(WOResourceEntities.ItemCountValue instance);
	partial void UpdateItemCountValue(WOResourceEntities.ItemCountValue instance);
	partial void DeleteItemCountValue(WOResourceEntities.ItemCountValue instance);
	partial void InsertItemCountValueVoid(WOResourceEntities.ItemCountValueVoid instance);
	partial void UpdateItemCountValueVoid(WOResourceEntities.ItemCountValueVoid instance);
	partial void DeleteItemCountValueVoid(WOResourceEntities.ItemCountValueVoid instance);
	partial void InsertUnitOfMeasure(WOResourceEntities.UnitOfMeasure instance);
	partial void UpdateUnitOfMeasure(WOResourceEntities.UnitOfMeasure instance);
	partial void DeleteUnitOfMeasure(WOResourceEntities.UnitOfMeasure instance);
	partial void InsertItemCategory(WOResourceEntities.ItemCategory instance);
	partial void UpdateItemCategory(WOResourceEntities.ItemCategory instance);
	partial void DeleteItemCategory(WOResourceEntities.ItemCategory instance);
	partial void InsertPostalAddress(WOResourceEntities.PostalAddress instance);
	partial void UpdatePostalAddress(WOResourceEntities.PostalAddress instance);
	partial void DeletePostalAddress(WOResourceEntities.PostalAddress instance);
	partial void InsertAccountingTransaction(WOResourceEntities.AccountingTransaction instance);
	partial void UpdateAccountingTransaction(WOResourceEntities.AccountingTransaction instance);
	partial void DeleteAccountingTransaction(WOResourceEntities.AccountingTransaction instance);
	partial void InsertUser(WOResourceEntities.User instance);
	partial void UpdateUser(WOResourceEntities.User instance);
	partial void DeleteUser(WOResourceEntities.User instance);
	partial void InsertDemand(WOResourceEntities.Demand instance);
	partial void UpdateDemand(WOResourceEntities.Demand instance);
	partial void DeleteDemand(WOResourceEntities.Demand instance);
	partial void InsertDemandWorkOrderExpenseModelEntry(WOResourceEntities.DemandWorkOrderExpenseModelEntry instance);
	partial void UpdateDemandWorkOrderExpenseModelEntry(WOResourceEntities.DemandWorkOrderExpenseModelEntry instance);
	partial void DeleteDemandWorkOrderExpenseModelEntry(WOResourceEntities.DemandWorkOrderExpenseModelEntry instance);
	partial void InsertWorkOrderExpenseModelEntry(WOResourceEntities.WorkOrderExpenseModelEntry instance);
	partial void UpdateWorkOrderExpenseModelEntry(WOResourceEntities.WorkOrderExpenseModelEntry instance);
	partial void DeleteWorkOrderExpenseModelEntry(WOResourceEntities.WorkOrderExpenseModelEntry instance);
	partial void InsertDemandItem(WOResourceEntities.DemandItem instance);
	partial void UpdateDemandItem(WOResourceEntities.DemandItem instance);
	partial void DeleteDemandItem(WOResourceEntities.DemandItem instance);
	partial void InsertDemandLaborInside(WOResourceEntities.DemandLaborInside instance);
	partial void UpdateDemandLaborInside(WOResourceEntities.DemandLaborInside instance);
	partial void DeleteDemandLaborInside(WOResourceEntities.DemandLaborInside instance);
	partial void InsertDemandOtherWorkInside(WOResourceEntities.DemandOtherWorkInside instance);
	partial void UpdateDemandOtherWorkInside(WOResourceEntities.DemandOtherWorkInside instance);
	partial void DeleteDemandOtherWorkInside(WOResourceEntities.DemandOtherWorkInside instance);
	partial void InsertDemandLaborOutside(WOResourceEntities.DemandLaborOutside instance);
	partial void UpdateDemandLaborOutside(WOResourceEntities.DemandLaborOutside instance);
	partial void DeleteDemandLaborOutside(WOResourceEntities.DemandLaborOutside instance);
	partial void InsertDemandOtherWorkOutside(WOResourceEntities.DemandOtherWorkOutside instance);
	partial void UpdateDemandOtherWorkOutside(WOResourceEntities.DemandOtherWorkOutside instance);
	partial void DeleteDemandOtherWorkOutside(WOResourceEntities.DemandOtherWorkOutside instance);
	partial void InsertDemandMiscellaneousWorkOrderCost(WOResourceEntities.DemandMiscellaneousWorkOrderCost instance);
	partial void UpdateDemandMiscellaneousWorkOrderCost(WOResourceEntities.DemandMiscellaneousWorkOrderCost instance);
	partial void DeleteDemandMiscellaneousWorkOrderCost(WOResourceEntities.DemandMiscellaneousWorkOrderCost instance);
	partial void InsertItemLocation(WOResourceEntities.ItemLocation instance);
	partial void UpdateItemLocation(WOResourceEntities.ItemLocation instance);
	partial void DeleteItemLocation(WOResourceEntities.ItemLocation instance);
	partial void InsertActualItemLocation(WOResourceEntities.ActualItemLocation instance);
	partial void UpdateActualItemLocation(WOResourceEntities.ActualItemLocation instance);
	partial void DeleteActualItemLocation(WOResourceEntities.ActualItemLocation instance);
	partial void InsertActualItem(WOResourceEntities.ActualItem instance);
	partial void UpdateActualItem(WOResourceEntities.ActualItem instance);
	partial void DeleteActualItem(WOResourceEntities.ActualItem instance);
	partial void InsertLaborInside(WOResourceEntities.LaborInside instance);
	partial void UpdateLaborInside(WOResourceEntities.LaborInside instance);
	partial void DeleteLaborInside(WOResourceEntities.LaborInside instance);
	partial void InsertActualLaborInside(WOResourceEntities.ActualLaborInside instance);
	partial void UpdateActualLaborInside(WOResourceEntities.ActualLaborInside instance);
	partial void DeleteActualLaborInside(WOResourceEntities.ActualLaborInside instance);
	partial void InsertOtherWorkInside(WOResourceEntities.OtherWorkInside instance);
	partial void UpdateOtherWorkInside(WOResourceEntities.OtherWorkInside instance);
	partial void DeleteOtherWorkInside(WOResourceEntities.OtherWorkInside instance);
	partial void InsertActualOtherWorkInside(WOResourceEntities.ActualOtherWorkInside instance);
	partial void UpdateActualOtherWorkInside(WOResourceEntities.ActualOtherWorkInside instance);
	partial void DeleteActualOtherWorkInside(WOResourceEntities.ActualOtherWorkInside instance);
	partial void InsertMiscellaneousWorkOrderCost(WOResourceEntities.MiscellaneousWorkOrderCost instance);
	partial void UpdateMiscellaneousWorkOrderCost(WOResourceEntities.MiscellaneousWorkOrderCost instance);
	partial void DeleteMiscellaneousWorkOrderCost(WOResourceEntities.MiscellaneousWorkOrderCost instance);
	partial void InsertActualMiscellaneousWorkOrderCost(WOResourceEntities.ActualMiscellaneousWorkOrderCost instance);
	partial void UpdateActualMiscellaneousWorkOrderCost(WOResourceEntities.ActualMiscellaneousWorkOrderCost instance);
	partial void DeleteActualMiscellaneousWorkOrderCost(WOResourceEntities.ActualMiscellaneousWorkOrderCost instance);
	partial void InsertPermanentItemLocation(WOResourceEntities.PermanentItemLocation instance);
	partial void UpdatePermanentItemLocation(WOResourceEntities.PermanentItemLocation instance);
	partial void DeletePermanentItemLocation(WOResourceEntities.PermanentItemLocation instance);
	partial void InsertItemAdjustment(WOResourceEntities.ItemAdjustment instance);
	partial void UpdateItemAdjustment(WOResourceEntities.ItemAdjustment instance);
	partial void DeleteItemAdjustment(WOResourceEntities.ItemAdjustment instance);
	partial void InsertItemIssue(WOResourceEntities.ItemIssue instance);
	partial void UpdateItemIssue(WOResourceEntities.ItemIssue instance);
	partial void DeleteItemIssue(WOResourceEntities.ItemIssue instance);
	partial void InsertItemTransfer(WOResourceEntities.ItemTransfer instance);
	partial void UpdateItemTransfer(WOResourceEntities.ItemTransfer instance);
	partial void DeleteItemTransfer(WOResourceEntities.ItemTransfer instance);
	partial void InsertReceiveItemPO(WOResourceEntities.ReceiveItemPO instance);
	partial void UpdateReceiveItemPO(WOResourceEntities.ReceiveItemPO instance);
	partial void DeleteReceiveItemPO(WOResourceEntities.ReceiveItemPO instance);
	partial void InsertReceiveItemNonPO(WOResourceEntities.ReceiveItemNonPO instance);
	partial void UpdateReceiveItemNonPO(WOResourceEntities.ReceiveItemNonPO instance);
	partial void DeleteReceiveItemNonPO(WOResourceEntities.ReceiveItemNonPO instance);
	partial void InsertRationalizedInventoryActivityDeltas(WOResourceEntities.RationalizedInventoryActivityDeltas instance);
	partial void UpdateRationalizedInventoryActivityDeltas(WOResourceEntities.RationalizedInventoryActivityDeltas instance);
	partial void DeleteRationalizedInventoryActivityDeltas(WOResourceEntities.RationalizedInventoryActivityDeltas instance);
	partial void InsertEmployee(WOResourceEntities.Employee instance);
	partial void UpdateEmployee(WOResourceEntities.Employee instance);
	partial void DeleteEmployee(WOResourceEntities.Employee instance);
	partial void InsertTrade(WOResourceEntities.Trade instance);
	partial void UpdateTrade(WOResourceEntities.Trade instance);
	partial void DeleteTrade(WOResourceEntities.Trade instance);
	partial void InsertContact(WOResourceEntities.Contact instance);
	partial void UpdateContact(WOResourceEntities.Contact instance);
	partial void DeleteContact(WOResourceEntities.Contact instance);
	partial void InsertLocation(WOResourceEntities.Location instance);
	partial void UpdateLocation(WOResourceEntities.Location instance);
	partial void DeleteLocation(WOResourceEntities.Location instance);
	partial void InsertLocationContainment(WOResourceEntities.LocationContainment instance);
	partial void UpdateLocationContainment(WOResourceEntities.LocationContainment instance);
	partial void DeleteLocationContainment(WOResourceEntities.LocationContainment instance);
	partial void InsertRelativeLocation(WOResourceEntities.RelativeLocation instance);
	partial void UpdateRelativeLocation(WOResourceEntities.RelativeLocation instance);
	partial void DeleteRelativeLocation(WOResourceEntities.RelativeLocation instance);
	partial void InsertPlainRelativeLocation(WOResourceEntities.PlainRelativeLocation instance);
	partial void UpdatePlainRelativeLocation(WOResourceEntities.PlainRelativeLocation instance);
	partial void DeletePlainRelativeLocation(WOResourceEntities.PlainRelativeLocation instance);
	partial void InsertPermanentStorage(WOResourceEntities.PermanentStorage instance);
	partial void UpdatePermanentStorage(WOResourceEntities.PermanentStorage instance);
	partial void DeletePermanentStorage(WOResourceEntities.PermanentStorage instance);
	partial void InsertItem(WOResourceEntities.Item instance);
	partial void UpdateItem(WOResourceEntities.Item instance);
	partial void DeleteItem(WOResourceEntities.Item instance);
	partial void InsertItemPrice(WOResourceEntities.ItemPrice instance);
	partial void UpdateItemPrice(WOResourceEntities.ItemPrice instance);
	partial void DeleteItemPrice(WOResourceEntities.ItemPrice instance);
	partial void InsertPOLine(WOResourceEntities.POLine instance);
	partial void UpdatePOLine(WOResourceEntities.POLine instance);
	partial void DeletePOLine(WOResourceEntities.POLine instance);
	partial void InsertPOLineItem(WOResourceEntities.POLineItem instance);
	partial void UpdatePOLineItem(WOResourceEntities.POLineItem instance);
	partial void DeletePOLineItem(WOResourceEntities.POLineItem instance);
	partial void InsertTemporaryItemLocation(WOResourceEntities.TemporaryItemLocation instance);
	partial void UpdateTemporaryItemLocation(WOResourceEntities.TemporaryItemLocation instance);
	partial void DeleteTemporaryItemLocation(WOResourceEntities.TemporaryItemLocation instance);
	partial void InsertTemplateItemLocation(WOResourceEntities.TemplateItemLocation instance);
	partial void UpdateTemplateItemLocation(WOResourceEntities.TemplateItemLocation instance);
	partial void DeleteTemplateItemLocation(WOResourceEntities.TemplateItemLocation instance);
	#endregion

		public WOResourceDataContext() :
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Master"].ConnectionString, mappingSource)
		{
			OnCreated();
		}

		public WOResourceDataContext(string connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public WOResourceDataContext(System.Data.IDbConnection connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public WOResourceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public WOResourceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}
		public System.Data.Linq.Table<WOResourceEntities.CostCenter> CostCenter
		{
			get
			{
				return this.GetTable<WOResourceEntities.CostCenter>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.WorkOrderExpenseCategory> WorkOrderExpenseCategory
		{
			get
			{
				return this.GetTable<WOResourceEntities.WorkOrderExpenseCategory>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.WorkOrderExpenseModel> WorkOrderExpenseModel
		{
			get
			{
				return this.GetTable<WOResourceEntities.WorkOrderExpenseModel>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.AccessCode> AccessCode
		{
			get
			{
				return this.GetTable<WOResourceEntities.AccessCode>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.WorkOrder> WorkOrder
		{
			get
			{
				return this.GetTable<WOResourceEntities.WorkOrder>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.WorkOrderState> WorkOrderState
		{
			get
			{
				return this.GetTable<WOResourceEntities.WorkOrderState>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.WorkOrderStateHistory> WorkOrderStateHistory
		{
			get
			{
				return this.GetTable<WOResourceEntities.WorkOrderStateHistory>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.PurchaseOrder> PurchaseOrder
		{
			get
			{
				return this.GetTable<WOResourceEntities.PurchaseOrder>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.PurchaseOrderState> PurchaseOrderState
		{
			get
			{
				return this.GetTable<WOResourceEntities.PurchaseOrderState>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.PurchaseOrderStateHistory> PurchaseOrderStateHistory
		{
			get
			{
				return this.GetTable<WOResourceEntities.PurchaseOrderStateHistory>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.WorkOrderTemplate> WorkOrderTemplate
		{
			get
			{
				return this.GetTable<WOResourceEntities.WorkOrderTemplate>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.TemporaryStorage> TemporaryStorage
		{
			get
			{
				return this.GetTable<WOResourceEntities.TemporaryStorage>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.TemplateTemporaryStorage> TemplateTemporaryStorage
		{
			get
			{
				return this.GetTable<WOResourceEntities.TemplateTemporaryStorage>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ItemCountValue> ItemCountValue
		{
			get
			{
				return this.GetTable<WOResourceEntities.ItemCountValue>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ItemCountValueVoid> ItemCountValueVoid
		{
			get
			{
				return this.GetTable<WOResourceEntities.ItemCountValueVoid>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.UnitOfMeasure> UnitOfMeasure
		{
			get
			{
				return this.GetTable<WOResourceEntities.UnitOfMeasure>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ItemCategory> ItemCategory
		{
			get
			{
				return this.GetTable<WOResourceEntities.ItemCategory>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.PostalAddress> PostalAddress
		{
			get
			{
				return this.GetTable<WOResourceEntities.PostalAddress>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.AccountingTransaction> AccountingTransaction
		{
			get
			{
				return this.GetTable<WOResourceEntities.AccountingTransaction>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.User> User
		{
			get
			{
				return this.GetTable<WOResourceEntities.User>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.Demand> Demand
		{
			get
			{
				return this.GetTable<WOResourceEntities.Demand>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.DemandWorkOrderExpenseModelEntry> DemandWorkOrderExpenseModelEntry
		{
			get
			{
				return this.GetTable<WOResourceEntities.DemandWorkOrderExpenseModelEntry>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.WorkOrderExpenseModelEntry> WorkOrderExpenseModelEntry
		{
			get
			{
				return this.GetTable<WOResourceEntities.WorkOrderExpenseModelEntry>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.DemandItem> DemandItem
		{
			get
			{
				return this.GetTable<WOResourceEntities.DemandItem>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.DemandLaborInside> DemandLaborInside
		{
			get
			{
				return this.GetTable<WOResourceEntities.DemandLaborInside>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.DemandOtherWorkInside> DemandOtherWorkInside
		{
			get
			{
				return this.GetTable<WOResourceEntities.DemandOtherWorkInside>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.DemandLaborOutside> DemandLaborOutside
		{
			get
			{
				return this.GetTable<WOResourceEntities.DemandLaborOutside>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.DemandOtherWorkOutside> DemandOtherWorkOutside
		{
			get
			{
				return this.GetTable<WOResourceEntities.DemandOtherWorkOutside>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.DemandMiscellaneousWorkOrderCost> DemandMiscellaneousWorkOrderCost
		{
			get
			{
				return this.GetTable<WOResourceEntities.DemandMiscellaneousWorkOrderCost>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ItemLocation> ItemLocation
		{
			get
			{
				return this.GetTable<WOResourceEntities.ItemLocation>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ActualItemLocation> ActualItemLocation
		{
			get
			{
				return this.GetTable<WOResourceEntities.ActualItemLocation>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ActualItem> ActualItem
		{
			get
			{
				return this.GetTable<WOResourceEntities.ActualItem>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.LaborInside> LaborInside
		{
			get
			{
				return this.GetTable<WOResourceEntities.LaborInside>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ActualLaborInside> ActualLaborInside
		{
			get
			{
				return this.GetTable<WOResourceEntities.ActualLaborInside>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.OtherWorkInside> OtherWorkInside
		{
			get
			{
				return this.GetTable<WOResourceEntities.OtherWorkInside>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ActualOtherWorkInside> ActualOtherWorkInside
		{
			get
			{
				return this.GetTable<WOResourceEntities.ActualOtherWorkInside>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.MiscellaneousWorkOrderCost> MiscellaneousWorkOrderCost
		{
			get
			{
				return this.GetTable<WOResourceEntities.MiscellaneousWorkOrderCost>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ActualMiscellaneousWorkOrderCost> ActualMiscellaneousWorkOrderCost
		{
			get
			{
				return this.GetTable<WOResourceEntities.ActualMiscellaneousWorkOrderCost>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.PermanentItemLocation> PermanentItemLocation
		{
			get
			{
				return this.GetTable<WOResourceEntities.PermanentItemLocation>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ItemAdjustment> ItemAdjustment
		{
			get
			{
				return this.GetTable<WOResourceEntities.ItemAdjustment>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ItemIssue> ItemIssue
		{
			get
			{
				return this.GetTable<WOResourceEntities.ItemIssue>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ItemTransfer> ItemTransfer
		{
			get
			{
				return this.GetTable<WOResourceEntities.ItemTransfer>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ReceiveItemPO> ReceiveItemPO
		{
			get
			{
				return this.GetTable<WOResourceEntities.ReceiveItemPO>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ReceiveItemNonPO> ReceiveItemNonPO
		{
			get
			{
				return this.GetTable<WOResourceEntities.ReceiveItemNonPO>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.RationalizedInventoryActivityDeltas> RationalizedInventoryActivityDeltas
		{
			get
			{
				return this.GetTable<WOResourceEntities.RationalizedInventoryActivityDeltas>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.Employee> Employee
		{
			get
			{
				return this.GetTable<WOResourceEntities.Employee>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.Trade> Trade
		{
			get
			{
				return this.GetTable<WOResourceEntities.Trade>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.Contact> Contact
		{
			get
			{
				return this.GetTable<WOResourceEntities.Contact>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.Location> Location
		{
			get
			{
				return this.GetTable<WOResourceEntities.Location>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.LocationContainment> LocationContainment
		{
			get
			{
				return this.GetTable<WOResourceEntities.LocationContainment>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.RelativeLocation> RelativeLocation
		{
			get
			{
				return this.GetTable<WOResourceEntities.RelativeLocation>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.PlainRelativeLocation> PlainRelativeLocation
		{
			get
			{
				return this.GetTable<WOResourceEntities.PlainRelativeLocation>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.PermanentStorage> PermanentStorage
		{
			get
			{
				return this.GetTable<WOResourceEntities.PermanentStorage>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.Item> Item
		{
			get
			{
				return this.GetTable<WOResourceEntities.Item>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.ItemPrice> ItemPrice
		{
			get
			{
				return this.GetTable<WOResourceEntities.ItemPrice>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.POLine> POLine
		{
			get
			{
				return this.GetTable<WOResourceEntities.POLine>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.POLineItem> POLineItem
		{
			get
			{
				return this.GetTable<WOResourceEntities.POLineItem>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.TemporaryItemLocation> TemporaryItemLocation
		{
			get
			{
				return this.GetTable<WOResourceEntities.TemporaryItemLocation>();
			}
		}
		public System.Data.Linq.Table<WOResourceEntities.TemplateItemLocation> TemplateItemLocation
		{
			get
			{
				return this.GetTable<WOResourceEntities.TemplateItemLocation>();
			}
		}
  
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.[_vgetPhonePrefix]", IsComposable=true)]
		public string _vgetPhonePrefix()
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
	}
}
namespace WOResourceEntities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	using System.Runtime.CompilerServices;
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostCenter")]
	public partial class CostCenter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table CostCenter with labelkey='Cost Center'
		static public string CostCenterLabelKey { get{return WOResourceLabelKdsMBLabel.K("Cost Center").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<AccountingTransaction> _AccountingTransactionFromCostCenter;
		private EntitySet<AccountingTransaction> _AccountingTransactionToCostCenter;
		private EntitySet<MiscellaneousWorkOrderCost> _MiscellaneousWorkOrderCostCostCenter;
		private EntitySet<WorkOrderExpenseModelEntry> _WorkOrderExpenseModelEntryCostCenter;
		private EntitySet<LaborInside> _LaborInsideCostCenter;
		private EntitySet<OtherWorkInside> _OtherWorkInsideCostCenter;
		private EntitySet<ActualItemLocation> _ActualItemLocationCostCenter;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public CostCenter()
		{
			this._AccountingTransactionFromCostCenter = new EntitySet<AccountingTransaction>(new Action<AccountingTransaction>(this.attach_AccountingTransactionFromCostCenter), new Action<AccountingTransaction>(this.detach_AccountingTransactionFromCostCenter));
			this._AccountingTransactionToCostCenter = new EntitySet<AccountingTransaction>(new Action<AccountingTransaction>(this.attach_AccountingTransactionToCostCenter), new Action<AccountingTransaction>(this.detach_AccountingTransactionToCostCenter));
			this._MiscellaneousWorkOrderCostCostCenter = new EntitySet<MiscellaneousWorkOrderCost>(new Action<MiscellaneousWorkOrderCost>(this.attach_MiscellaneousWorkOrderCostCostCenter), new Action<MiscellaneousWorkOrderCost>(this.detach_MiscellaneousWorkOrderCostCostCenter));
			this._WorkOrderExpenseModelEntryCostCenter = new EntitySet<WorkOrderExpenseModelEntry>(new Action<WorkOrderExpenseModelEntry>(this.attach_WorkOrderExpenseModelEntryCostCenter), new Action<WorkOrderExpenseModelEntry>(this.detach_WorkOrderExpenseModelEntryCostCenter));
			this._LaborInsideCostCenter = new EntitySet<LaborInside>(new Action<LaborInside>(this.attach_LaborInsideCostCenter), new Action<LaborInside>(this.detach_LaborInsideCostCenter));
			this._OtherWorkInsideCostCenter = new EntitySet<OtherWorkInside>(new Action<OtherWorkInside>(this.attach_OtherWorkInsideCostCenter), new Action<OtherWorkInside>(this.detach_OtherWorkInsideCostCenter));
			this._ActualItemLocationCostCenter = new EntitySet<ActualItemLocation>(new Action<ActualItemLocation>(this.attach_ActualItemLocationCostCenter), new Action<ActualItemLocation>(this.detach_ActualItemLocationCostCenter));
			OnCreated();
		}
		/// Denotes the CostCenter's Id column with type id(nonnull) with labelkey='Id'
		static public string CostCenter_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.CostCenter),Name="CostCenter_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_AccountingTransaction", Storage="_AccountingTransactionFromCostCenter", ThisKey="Id", OtherKey="FromCostCenterID")]
		public EntitySet<AccountingTransaction> AccountingTransactionFromCostCenter
		{
			get
			{
				return this._AccountingTransactionFromCostCenter;
			}
			set
			{
				this._AccountingTransactionFromCostCenter.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_AccountingTransaction", Storage="_AccountingTransactionToCostCenter", ThisKey="Id", OtherKey="ToCostCenterID")]
		public EntitySet<AccountingTransaction> AccountingTransactionToCostCenter
		{
			get
			{
				return this._AccountingTransactionToCostCenter;
			}
			set
			{
				this._AccountingTransactionToCostCenter.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_MiscellaneousWorkOrderCost", Storage="_MiscellaneousWorkOrderCostCostCenter", ThisKey="Id", OtherKey="CostCenterID")]
		public EntitySet<MiscellaneousWorkOrderCost> MiscellaneousWorkOrderCostCostCenter
		{
			get
			{
				return this._MiscellaneousWorkOrderCostCostCenter;
			}
			set
			{
				this._MiscellaneousWorkOrderCostCostCenter.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_WorkOrderExpenseModelEntry", Storage="_WorkOrderExpenseModelEntryCostCenter", ThisKey="Id", OtherKey="CostCenterID")]
		public EntitySet<WorkOrderExpenseModelEntry> WorkOrderExpenseModelEntryCostCenter
		{
			get
			{
				return this._WorkOrderExpenseModelEntryCostCenter;
			}
			set
			{
				this._WorkOrderExpenseModelEntryCostCenter.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_LaborInside", Storage="_LaborInsideCostCenter", ThisKey="Id", OtherKey="CostCenterID")]
		public EntitySet<LaborInside> LaborInsideCostCenter
		{
			get
			{
				return this._LaborInsideCostCenter;
			}
			set
			{
				this._LaborInsideCostCenter.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_OtherWorkInside", Storage="_OtherWorkInsideCostCenter", ThisKey="Id", OtherKey="CostCenterID")]
		public EntitySet<OtherWorkInside> OtherWorkInsideCostCenter
		{
			get
			{
				return this._OtherWorkInsideCostCenter;
			}
			set
			{
				this._OtherWorkInsideCostCenter.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_ActualItemLocation", Storage="_ActualItemLocationCostCenter", ThisKey="Id", OtherKey="CostCenterID")]
		public EntitySet<ActualItemLocation> ActualItemLocationCostCenter
		{
			get
			{
				return this._ActualItemLocationCostCenter;
			}
			set
			{
				this._ActualItemLocationCostCenter.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_AccountingTransactionFromCostCenter(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.FromCostCenter = this;
		}
		private void detach_AccountingTransactionFromCostCenter(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.FromCostCenter = null;
		}

		private void attach_AccountingTransactionToCostCenter(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.ToCostCenter = this;
		}
		private void detach_AccountingTransactionToCostCenter(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.ToCostCenter = null;
		}

		private void attach_MiscellaneousWorkOrderCostCostCenter(MiscellaneousWorkOrderCost entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = this;
		}
		private void detach_MiscellaneousWorkOrderCostCostCenter(MiscellaneousWorkOrderCost entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = null;
		}

		private void attach_WorkOrderExpenseModelEntryCostCenter(WorkOrderExpenseModelEntry entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = this;
		}
		private void detach_WorkOrderExpenseModelEntryCostCenter(WorkOrderExpenseModelEntry entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = null;
		}

		private void attach_LaborInsideCostCenter(LaborInside entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = this;
		}
		private void detach_LaborInsideCostCenter(LaborInside entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = null;
		}

		private void attach_OtherWorkInsideCostCenter(OtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = this;
		}
		private void detach_OtherWorkInsideCostCenter(OtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = null;
		}

		private void attach_ActualItemLocationCostCenter(ActualItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = this;
		}
		private void detach_ActualItemLocationCostCenter(ActualItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.CostCenter = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderExpenseCategory")]
	public partial class WorkOrderExpenseCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderExpenseCategory with labelkey='Work Order Expense Category'
		static public string WorkOrderExpenseCategoryLabelKey { get{return WOResourceLabelKdsMBLabel.K("Work Order Expense Category").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<Demand> _DemandWorkOrderExpenseCategory;
		private EntitySet<WorkOrderExpenseModelEntry> _WorkOrderExpenseModelEntryWorkOrderExpenseCategory;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public WorkOrderExpenseCategory()
		{
			this._DemandWorkOrderExpenseCategory = new EntitySet<Demand>(new Action<Demand>(this.attach_DemandWorkOrderExpenseCategory), new Action<Demand>(this.detach_DemandWorkOrderExpenseCategory));
			this._WorkOrderExpenseModelEntryWorkOrderExpenseCategory = new EntitySet<WorkOrderExpenseModelEntry>(new Action<WorkOrderExpenseModelEntry>(this.attach_WorkOrderExpenseModelEntryWorkOrderExpenseCategory), new Action<WorkOrderExpenseModelEntry>(this.detach_WorkOrderExpenseModelEntryWorkOrderExpenseCategory));
			OnCreated();
		}
		/// Denotes the WorkOrderExpenseCategory's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderExpenseCategory_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrderExpenseCategory),Name="WorkOrderExpenseCategory_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderExpenseCategory_Demand", Storage="_DemandWorkOrderExpenseCategory", ThisKey="Id", OtherKey="WorkOrderExpenseCategoryID")]
		public EntitySet<Demand> DemandWorkOrderExpenseCategory
		{
			get
			{
				return this._DemandWorkOrderExpenseCategory;
			}
			set
			{
				this._DemandWorkOrderExpenseCategory.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderExpenseCategory_WorkOrderExpenseModelEntry", Storage="_WorkOrderExpenseModelEntryWorkOrderExpenseCategory", ThisKey="Id", OtherKey="WorkOrderExpenseCategoryID")]
		public EntitySet<WorkOrderExpenseModelEntry> WorkOrderExpenseModelEntryWorkOrderExpenseCategory
		{
			get
			{
				return this._WorkOrderExpenseModelEntryWorkOrderExpenseCategory;
			}
			set
			{
				this._WorkOrderExpenseModelEntryWorkOrderExpenseCategory.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_DemandWorkOrderExpenseCategory(Demand entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderExpenseCategory = this;
		}
		private void detach_DemandWorkOrderExpenseCategory(Demand entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderExpenseCategory = null;
		}

		private void attach_WorkOrderExpenseModelEntryWorkOrderExpenseCategory(WorkOrderExpenseModelEntry entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderExpenseCategory = this;
		}
		private void detach_WorkOrderExpenseModelEntryWorkOrderExpenseCategory(WorkOrderExpenseModelEntry entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderExpenseCategory = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderExpenseModel")]
	public partial class WorkOrderExpenseModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderExpenseModel with labelkey='Work Order Expense Model'
		static public string WorkOrderExpenseModelLabelKey { get{return WOResourceLabelKdsMBLabel.K("Work Order Expense Model").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<WorkOrderExpenseModelEntry> _WorkOrderExpenseModelEntryWorkOrderExpenseModel;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public WorkOrderExpenseModel()
		{
			this._WorkOrderExpenseModelEntryWorkOrderExpenseModel = new EntitySet<WorkOrderExpenseModelEntry>(new Action<WorkOrderExpenseModelEntry>(this.attach_WorkOrderExpenseModelEntryWorkOrderExpenseModel), new Action<WorkOrderExpenseModelEntry>(this.detach_WorkOrderExpenseModelEntryWorkOrderExpenseModel));
			OnCreated();
		}
		/// Denotes the WorkOrderExpenseModel's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderExpenseModel_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrderExpenseModel),Name="WorkOrderExpenseModel_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderExpenseModel_WorkOrderExpenseModelEntry", Storage="_WorkOrderExpenseModelEntryWorkOrderExpenseModel", ThisKey="Id", OtherKey="WorkOrderExpenseModelID")]
		public EntitySet<WorkOrderExpenseModelEntry> WorkOrderExpenseModelEntryWorkOrderExpenseModel
		{
			get
			{
				return this._WorkOrderExpenseModelEntryWorkOrderExpenseModel;
			}
			set
			{
				this._WorkOrderExpenseModelEntryWorkOrderExpenseModel.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_WorkOrderExpenseModelEntryWorkOrderExpenseModel(WorkOrderExpenseModelEntry entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderExpenseModel = this;
		}
		private void detach_WorkOrderExpenseModelEntryWorkOrderExpenseModel(WorkOrderExpenseModelEntry entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderExpenseModel = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessCode")]
	public partial class AccessCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table AccessCode with labelkey='Access Code'
		static public string AccessCodeLabelKey { get{return WOResourceLabelKdsMBLabel.K("Access Code").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public AccessCode()
		{
			OnCreated();
		}
		/// Denotes the AccessCode's Id column with type id(nonnull) with labelkey='Id'
		static public string AccessCode_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.AccessCode),Name="AccessCode_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrder")]
	public partial class WorkOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrder with labelkey='Work Order'
		static public string WorkOrderLabelKey { get{return WOResourceLabelKdsMBLabel.K("Work Order").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Object _Number;
		private System.Object _CurrentWorkOrderStateHistoryID;
		private EntitySet<Demand> _DemandWorkOrder;
		private EntitySet<TemporaryStorage> _TemporaryStorageWorkOrder;
		private EntitySet<TemporaryItemLocation> _TemporaryItemLocationWorkOrder;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnNumberChanging(System.Object value);
	partial void OnNumberChanged();
	partial void OnCurrentWorkOrderStateHistoryIDChanging(System.Object value);
	partial void OnCurrentWorkOrderStateHistoryIDChanged();
	#endregion

		public WorkOrder()
		{
			this._DemandWorkOrder = new EntitySet<Demand>(new Action<Demand>(this.attach_DemandWorkOrder), new Action<Demand>(this.detach_DemandWorkOrder));
			this._TemporaryStorageWorkOrder = new EntitySet<TemporaryStorage>(new Action<TemporaryStorage>(this.attach_TemporaryStorageWorkOrder), new Action<TemporaryStorage>(this.detach_TemporaryStorageWorkOrder));
			this._TemporaryItemLocationWorkOrder = new EntitySet<TemporaryItemLocation>(new Action<TemporaryItemLocation>(this.attach_TemporaryItemLocationWorkOrder), new Action<TemporaryItemLocation>(this.detach_TemporaryItemLocationWorkOrder));
			OnCreated();
		}
		/// Denotes the WorkOrder's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrder_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrder),Name="WorkOrder_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrder's Number column with type null(nonnull) with labelkey='Number'
		static public string WorkOrder_Number{ get{return WOResourceLabelKdsMBLabel.K("Number").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrder),Name="WorkOrder_Number")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged();
					this.OnNumberChanged();
				}
			}
		}
		/// Denotes the WorkOrder's CurrentWorkOrderStateHistoryID column with type null(nonnull) with labelkey='CurrentWorkOrderStateHistoryID'
		static public string WorkOrder_CurrentWorkOrderStateHistoryID{ get{return WOResourceLabelKdsMBLabel.K("CurrentWorkOrderStateHistoryID").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrder),Name="WorkOrder_CurrentWorkOrderStateHistoryID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentWorkOrderStateHistoryID", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object CurrentWorkOrderStateHistoryID
		{
			get
			{
				return this._CurrentWorkOrderStateHistoryID;
			}
			set
			{
				if ((this._CurrentWorkOrderStateHistoryID != value))
				{
					this.OnCurrentWorkOrderStateHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentWorkOrderStateHistoryID = value;
					this.SendPropertyChanged();
					this.OnCurrentWorkOrderStateHistoryIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_Demand", Storage="_DemandWorkOrder", ThisKey="Id", OtherKey="WorkOrderID")]
		public EntitySet<Demand> DemandWorkOrder
		{
			get
			{
				return this._DemandWorkOrder;
			}
			set
			{
				this._DemandWorkOrder.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_TemporaryStorage", Storage="_TemporaryStorageWorkOrder", ThisKey="Id", OtherKey="WorkOrderID")]
		public EntitySet<TemporaryStorage> TemporaryStorageWorkOrder
		{
			get
			{
				return this._TemporaryStorageWorkOrder;
			}
			set
			{
				this._TemporaryStorageWorkOrder.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_TemporaryItemLocation", Storage="_TemporaryItemLocationWorkOrder", ThisKey="Id", OtherKey="WorkOrderID")]
		public EntitySet<TemporaryItemLocation> TemporaryItemLocationWorkOrder
		{
			get
			{
				return this._TemporaryItemLocationWorkOrder;
			}
			set
			{
				this._TemporaryItemLocationWorkOrder.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_DemandWorkOrder(Demand entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = this;
		}
		private void detach_DemandWorkOrder(Demand entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = null;
		}

		private void attach_TemporaryStorageWorkOrder(TemporaryStorage entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = this;
		}
		private void detach_TemporaryStorageWorkOrder(TemporaryStorage entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = null;
		}

		private void attach_TemporaryItemLocationWorkOrder(TemporaryItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = this;
		}
		private void detach_TemporaryItemLocationWorkOrder(TemporaryItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderState")]
	public partial class WorkOrderState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderState with labelkey='Work Order State'
		static public string WorkOrderStateLabelKey { get{return WOResourceLabelKdsMBLabel.K("Work Order State").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public WorkOrderState()
		{
			OnCreated();
		}
		/// Denotes the WorkOrderState's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderState_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrderState),Name="WorkOrderState_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderStateHistory")]
	public partial class WorkOrderStateHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderStateHistory with labelkey='Work Order State History'
		static public string WorkOrderStateHistoryLabelKey { get{return WOResourceLabelKdsMBLabel.K("Work Order State History").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public WorkOrderStateHistory()
		{
			OnCreated();
		}
		/// Denotes the WorkOrderStateHistory's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderStateHistory_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrderStateHistory),Name="WorkOrderStateHistory_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseOrder")]
	public partial class PurchaseOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PurchaseOrder with labelkey='Purchase Order'
		static public string PurchaseOrderLabelKey { get{return WOResourceLabelKdsMBLabel.K("Purchase Order").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Object _CurrentPurchaseOrderStateHistoryID;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCurrentPurchaseOrderStateHistoryIDChanging(System.Object value);
	partial void OnCurrentPurchaseOrderStateHistoryIDChanged();
	#endregion

		public PurchaseOrder()
		{
			OnCreated();
		}
		/// Denotes the PurchaseOrder's Id column with type id(nonnull) with labelkey='Id'
		static public string PurchaseOrder_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PurchaseOrder),Name="PurchaseOrder_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the PurchaseOrder's CurrentPurchaseOrderStateHistoryID column with type null(nonnull) with labelkey='CurrentPurchaseOrderStateHistoryID'
		static public string PurchaseOrder_CurrentPurchaseOrderStateHistoryID{ get{return WOResourceLabelKdsMBLabel.K("CurrentPurchaseOrderStateHistoryID").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PurchaseOrder),Name="PurchaseOrder_CurrentPurchaseOrderStateHistoryID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentPurchaseOrderStateHistoryID", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object CurrentPurchaseOrderStateHistoryID
		{
			get
			{
				return this._CurrentPurchaseOrderStateHistoryID;
			}
			set
			{
				if ((this._CurrentPurchaseOrderStateHistoryID != value))
				{
					this.OnCurrentPurchaseOrderStateHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentPurchaseOrderStateHistoryID = value;
					this.SendPropertyChanged();
					this.OnCurrentPurchaseOrderStateHistoryIDChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseOrderState")]
	public partial class PurchaseOrderState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PurchaseOrderState with labelkey='Purchase Order State'
		static public string PurchaseOrderStateLabelKey { get{return WOResourceLabelKdsMBLabel.K("Purchase Order State").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public PurchaseOrderState()
		{
			OnCreated();
		}
		/// Denotes the PurchaseOrderState's Id column with type id(nonnull) with labelkey='Id'
		static public string PurchaseOrderState_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PurchaseOrderState),Name="PurchaseOrderState_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseOrderStateHistory")]
	public partial class PurchaseOrderStateHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PurchaseOrderStateHistory with labelkey='Purchase Order State History'
		static public string PurchaseOrderStateHistoryLabelKey { get{return WOResourceLabelKdsMBLabel.K("Purchase Order State History").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public PurchaseOrderStateHistory()
		{
			OnCreated();
		}
		/// Denotes the PurchaseOrderStateHistory's Id column with type id(nonnull) with labelkey='Id'
		static public string PurchaseOrderStateHistory_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PurchaseOrderStateHistory),Name="PurchaseOrderStateHistory_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderTemplate")]
	public partial class WorkOrderTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderTemplate with labelkey='Task'
		static public string WorkOrderTemplateLabelKey { get{return WOResourceLabelKdsMBLabel.K("Task").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Object _Code;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(System.Object value);
	partial void OnCodeChanged();
	#endregion

		public WorkOrderTemplate()
		{
			OnCreated();
		}
		/// Denotes the WorkOrderTemplate's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderTemplate_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrderTemplate),Name="WorkOrderTemplate_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrderTemplate's Code column with type null(nonnull) with labelkey='Code'
		static public string WorkOrderTemplate_Code{ get{return WOResourceLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrderTemplate),Name="WorkOrderTemplate_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemporaryStorage")]
	public partial class TemporaryStorage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table TemporaryStorage with labelkey='Temporary Storage'
		static public string TemporaryStorageLabelKey { get{return WOResourceLabelKdsMBLabel.K("Temporary Storage").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _ContainingLocationID;
		private System.Guid _LocationID;
		private System.Guid _WorkOrderID;
		private EntityRef<Location> _BaseLocation;
		private EntityRef<Location> _ContainingLocation;
		private EntityRef<WorkOrder> _WorkOrder;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnContainingLocationIDChanging(System.Guid value);
	partial void OnContainingLocationIDChanged();
	partial void OnLocationIDChanging(System.Guid value);
	partial void OnLocationIDChanged();
	partial void OnWorkOrderIDChanging(System.Guid value);
	partial void OnWorkOrderIDChanged();
	#endregion

		public TemporaryStorage()
		{
			this._BaseLocation = default(EntityRef<Location>);
			this._ContainingLocation = default(EntityRef<Location>);
			this._WorkOrder = default(EntityRef<WorkOrder>);
			OnCreated();
		}
		/// Denotes the TemporaryStorage's Id column with type id(nonnull) with labelkey='Id'
		static public string TemporaryStorage_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.TemporaryStorage),Name="TemporaryStorage_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the TemporaryStorage's ContainingLocationID column with type link(nonnull, field Location.Id) with labelkey='Containing Location'
		static public string TemporaryStorage_ContainingLocationID{ get{return WOResourceLabelKdsMBLabel.K("Containing Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.TemporaryStorage),Name="TemporaryStorage_ContainingLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainingLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ContainingLocationID
		{
			get
			{
				return this._ContainingLocationID;
			}
			set
			{
				if ((this._ContainingLocationID != value))
				{
					if (this._ContainingLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContainingLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ContainingLocationID = value;
					this.SendPropertyChanged();
					this.OnContainingLocationIDChanged();
				}
			}
		}
		/// Denotes the TemporaryStorage's LocationID column with type link(nonnull, field Location.Id) with labelkey='Location'
		static public string TemporaryStorage_LocationID{ get{return WOResourceLabelKdsMBLabel.K("Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.TemporaryStorage),Name="TemporaryStorage_LocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._BaseLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged();
					this.OnLocationIDChanged();
				}
			}
		}
		/// Denotes the TemporaryStorage's WorkOrderID column with type link(nonnull, field WorkOrder.Id) with labelkey='Work Order'
		static public string TemporaryStorage_WorkOrderID{ get{return WOResourceLabelKdsMBLabel.K("Work Order").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.TemporaryStorage),Name="TemporaryStorage_WorkOrderID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid WorkOrderID
		{
			get
			{
				return this._WorkOrderID;
			}
			set
			{
				if ((this._WorkOrderID != value))
				{
					if (this._WorkOrder.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseLocation_TemporaryStorage", Storage="_BaseLocation", ThisKey="LocationID", OtherKey="Id", IsForeignKey=true)]
		public Location BaseLocation
		{
			get
			{
				return this._BaseLocation.Entity;
			}
			set
			{
				Location previousValue = this._BaseLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseLocation.Entity = null;
					}
					this._BaseLocation.Entity = value;
					if ((value != null))
					{
						this._LocationID = value.Id;
					}
					else
					{
						this._LocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContainingLocation_TemporaryStorage", Storage="_ContainingLocation", ThisKey="ContainingLocationID", OtherKey="Id", IsForeignKey=true)]
		public Location ContainingLocation
		{
			get
			{
				return this._ContainingLocation.Entity;
			}
			set
			{
				Location previousValue = this._ContainingLocation.Entity;
				if (((previousValue != value)
							|| (this._ContainingLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContainingLocation.Entity = null;
						previousValue.TemporaryStorageContainingLocation.Remove(this);
					}
					this._ContainingLocation.Entity = value;
					if ((value != null))
					{
						value.TemporaryStorageContainingLocation.Add(this);
						this._ContainingLocationID = value.Id;
					}
					else
					{
						this._ContainingLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_TemporaryStorage", Storage="_WorkOrder", ThisKey="WorkOrderID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrder WorkOrder
		{
			get
			{
				return this._WorkOrder.Entity;
			}
			set
			{
				WorkOrder previousValue = this._WorkOrder.Entity;
				if (((previousValue != value)
							|| (this._WorkOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrder.Entity = null;
						previousValue.TemporaryStorageWorkOrder.Remove(this);
					}
					this._WorkOrder.Entity = value;
					if ((value != null))
					{
						value.TemporaryStorageWorkOrder.Add(this);
						this._WorkOrderID = value.Id;
					}
					else
					{
						this._WorkOrderID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateTemporaryStorage")]
	public partial class TemplateTemporaryStorage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table TemplateTemporaryStorage with labelkey='Task Temporary Storage'
		static public string TemplateTemporaryStorageLabelKey { get{return WOResourceLabelKdsMBLabel.K("Task Temporary Storage").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Object _ContainingLocationID;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnContainingLocationIDChanging(System.Object value);
	partial void OnContainingLocationIDChanged();
	#endregion

		public TemplateTemporaryStorage()
		{
			OnCreated();
		}
		/// Denotes the TemplateTemporaryStorage's Id column with type id(nonnull) with labelkey='Id'
		static public string TemplateTemporaryStorage_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.TemplateTemporaryStorage),Name="TemplateTemporaryStorage_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the TemplateTemporaryStorage's ContainingLocationID column with type null(nonnull) with labelkey='ContainingLocationID'
		static public string TemplateTemporaryStorage_ContainingLocationID{ get{return WOResourceLabelKdsMBLabel.K("ContainingLocationID").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.TemplateTemporaryStorage),Name="TemplateTemporaryStorage_ContainingLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainingLocationID", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object ContainingLocationID
		{
			get
			{
				return this._ContainingLocationID;
			}
			set
			{
				if ((this._ContainingLocationID != value))
				{
					this.OnContainingLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ContainingLocationID = value;
					this.SendPropertyChanged();
					this.OnContainingLocationIDChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemCountValue")]
	public partial class ItemCountValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemCountValue with labelkey='Physical Count'
		static public string ItemCountValueLabelKey { get{return WOResourceLabelKdsMBLabel.K("Physical Count").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Object _VoidingItemCountValueVoidID;
		private EntitySet<PermanentItemLocation> _PermanentItemLocationCurrentItemCountValue;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnVoidingItemCountValueVoidIDChanging(System.Object value);
	partial void OnVoidingItemCountValueVoidIDChanged();
	#endregion

		public ItemCountValue()
		{
			this._PermanentItemLocationCurrentItemCountValue = new EntitySet<PermanentItemLocation>(new Action<PermanentItemLocation>(this.attach_PermanentItemLocationCurrentItemCountValue), new Action<PermanentItemLocation>(this.detach_PermanentItemLocationCurrentItemCountValue));
			OnCreated();
		}
		/// Denotes the ItemCountValue's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemCountValue_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemCountValue),Name="ItemCountValue_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ItemCountValue's VoidingItemCountValueVoidID column with type null(nonnull) with labelkey='VoidingItemCountValueVoidID'
		static public string ItemCountValue_VoidingItemCountValueVoidID{ get{return WOResourceLabelKdsMBLabel.K("VoidingItemCountValueVoidID").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemCountValue),Name="ItemCountValue_VoidingItemCountValueVoidID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoidingItemCountValueVoidID", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object VoidingItemCountValueVoidID
		{
			get
			{
				return this._VoidingItemCountValueVoidID;
			}
			set
			{
				if ((this._VoidingItemCountValueVoidID != value))
				{
					this.OnVoidingItemCountValueVoidIDChanging(value);
					this.SendPropertyChanging();
					this._VoidingItemCountValueVoidID = value;
					this.SendPropertyChanged();
					this.OnVoidingItemCountValueVoidIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCountValue_PermanentItemLocation", Storage="_PermanentItemLocationCurrentItemCountValue", ThisKey="Id", OtherKey="CurrentItemCountValueID")]
		public EntitySet<PermanentItemLocation> PermanentItemLocationCurrentItemCountValue
		{
			get
			{
				return this._PermanentItemLocationCurrentItemCountValue;
			}
			set
			{
				this._PermanentItemLocationCurrentItemCountValue.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_PermanentItemLocationCurrentItemCountValue(PermanentItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.CurrentItemCountValue = this;
		}
		private void detach_PermanentItemLocationCurrentItemCountValue(PermanentItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.CurrentItemCountValue = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemCountValueVoid")]
	public partial class ItemCountValueVoid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemCountValueVoid with labelkey='Physical Count Void'
		static public string ItemCountValueVoidLabelKey { get{return WOResourceLabelKdsMBLabel.K("Physical Count Void").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemCountValueVoid()
		{
			OnCreated();
		}
		/// Denotes the ItemCountValueVoid's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemCountValueVoid_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemCountValueVoid),Name="ItemCountValueVoid_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitOfMeasure")]
	public partial class UnitOfMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table UnitOfMeasure with labelkey='UOM'
		static public string UnitOfMeasureLabelKey { get{return WOResourceLabelKdsMBLabel.K("UOM").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<Item> _ItemUnitOfMeasure;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public UnitOfMeasure()
		{
			this._ItemUnitOfMeasure = new EntitySet<Item>(new Action<Item>(this.attach_ItemUnitOfMeasure), new Action<Item>(this.detach_ItemUnitOfMeasure));
			OnCreated();
		}
		/// Denotes the UnitOfMeasure's Id column with type id(nonnull) with labelkey='Id'
		static public string UnitOfMeasure_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.UnitOfMeasure),Name="UnitOfMeasure_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitOfMeasure_Item", Storage="_ItemUnitOfMeasure", ThisKey="Id", OtherKey="UnitOfMeasureID")]
		public EntitySet<Item> ItemUnitOfMeasure
		{
			get
			{
				return this._ItemUnitOfMeasure;
			}
			set
			{
				this._ItemUnitOfMeasure.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemUnitOfMeasure(Item entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasure = this;
		}
		private void detach_ItemUnitOfMeasure(Item entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasure = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemCategory")]
	public partial class ItemCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemCategory with labelkey='Item Category'
		static public string ItemCategoryLabelKey { get{return WOResourceLabelKdsMBLabel.K("Item Category").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<Item> _ItemItemCategory;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemCategory()
		{
			this._ItemItemCategory = new EntitySet<Item>(new Action<Item>(this.attach_ItemItemCategory), new Action<Item>(this.detach_ItemItemCategory));
			OnCreated();
		}
		/// Denotes the ItemCategory's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemCategory_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemCategory),Name="ItemCategory_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCategory_Item", Storage="_ItemItemCategory", ThisKey="Id", OtherKey="ItemCategoryID")]
		public EntitySet<Item> ItemItemCategory
		{
			get
			{
				return this._ItemItemCategory;
			}
			set
			{
				this._ItemItemCategory.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemItemCategory(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemCategory = this;
		}
		private void detach_ItemItemCategory(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemCategory = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PostalAddress")]
	public partial class PostalAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PostalAddress with labelkey='Postal Address'
		static public string PostalAddressLabelKey { get{return WOResourceLabelKdsMBLabel.K("Postal Address").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Object _Code;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(System.Object value);
	partial void OnCodeChanged();
	#endregion

		public PostalAddress()
		{
			OnCreated();
		}
		/// Denotes the PostalAddress's Id column with type id(nonnull) with labelkey='Id'
		static public string PostalAddress_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PostalAddress),Name="PostalAddress_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the PostalAddress's Code column with type null(nonnull) with labelkey='Code'
		static public string PostalAddress_Code{ get{return WOResourceLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PostalAddress),Name="PostalAddress_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountingTransaction")]
	public partial class AccountingTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table AccountingTransaction with labelkey='Accounting Transaction'
		static public string AccountingTransactionLabelKey { get{return WOResourceLabelKdsMBLabel.K("Accounting Transaction").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.DateTime _EntryDate;
		private System.DateTime _EffectiveDate;
		private System.Guid _UserID;
		private System.Decimal _Cost;
		private System.Guid _FromCostCenterID;
		private System.Guid _ToCostCenterID;
		private string _AccountingSystemTransactionID;
		private EntitySet<RationalizedInventoryActivityDeltas> _RationalizedInventoryActivityDeltasAccountingTransaction;
		private EntityRef<User> _User;
		private EntityRef<CostCenter> _FromCostCenter;
		private EntityRef<CostCenter> _ToCostCenter;
		private EntityRef<ActualItem> _DerivedActualItem;
		private EntityRef<ActualLaborInside> _DerivedActualLaborInside;
		private EntityRef<ActualOtherWorkInside> _DerivedActualOtherWorkInside;
		private EntityRef<ActualMiscellaneousWorkOrderCost> _DerivedActualMiscellaneousWorkOrderCost;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnEntryDateChanging(System.DateTime value);
	partial void OnEntryDateChanged();
	partial void OnEffectiveDateChanging(System.DateTime value);
	partial void OnEffectiveDateChanged();
	partial void OnUserIDChanging(System.Guid value);
	partial void OnUserIDChanged();
	partial void OnCostChanging(System.Decimal value);
	partial void OnCostChanged();
	partial void OnFromCostCenterIDChanging(System.Guid value);
	partial void OnFromCostCenterIDChanged();
	partial void OnToCostCenterIDChanging(System.Guid value);
	partial void OnToCostCenterIDChanged();
	partial void OnAccountingSystemTransactionIDChanging(string value);
	partial void OnAccountingSystemTransactionIDChanged();
	#endregion

		public AccountingTransaction()
		{
			this._RationalizedInventoryActivityDeltasAccountingTransaction = new EntitySet<RationalizedInventoryActivityDeltas>(new Action<RationalizedInventoryActivityDeltas>(this.attach_RationalizedInventoryActivityDeltasAccountingTransaction), new Action<RationalizedInventoryActivityDeltas>(this.detach_RationalizedInventoryActivityDeltasAccountingTransaction));
			this._User = default(EntityRef<User>);
			this._FromCostCenter = default(EntityRef<CostCenter>);
			this._ToCostCenter = default(EntityRef<CostCenter>);
			this._DerivedActualItem = default(EntityRef<ActualItem>);
			this._DerivedActualLaborInside = default(EntityRef<ActualLaborInside>);
			this._DerivedActualOtherWorkInside = default(EntityRef<ActualOtherWorkInside>);
			this._DerivedActualMiscellaneousWorkOrderCost = default(EntityRef<ActualMiscellaneousWorkOrderCost>);
			OnCreated();
		}
		/// Denotes the AccountingTransaction's Id column with type id(nonnull) with labelkey='Id'
		static public string AccountingTransaction_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.AccountingTransaction),Name="AccountingTransaction_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's EntryDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EntryDate'
		static public string AccountingTransaction_EntryDate{ get{return WOResourceLabelKdsMBLabel.K("EntryDate").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.AccountingTransaction),Name="AccountingTransaction_EntryDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged();
					this.OnEntryDateChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's EffectiveDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EffectiveDate'
		static public string AccountingTransaction_EffectiveDate{ get{return WOResourceLabelKdsMBLabel.K("EffectiveDate").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.AccountingTransaction),Name="AccountingTransaction_EffectiveDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged();
					this.OnEffectiveDateChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's UserID column with type link(nonnull, field User.Id) with labelkey='User'
		static public string AccountingTransaction_UserID{ get{return WOResourceLabelKdsMBLabel.K("User").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.AccountingTransaction),Name="AccountingTransaction_UserID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged();
					this.OnUserIDChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's Cost column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
		static public string AccountingTransaction_Cost{ get{return WOResourceLabelKdsMBLabel.K("Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.AccountingTransaction),Name="AccountingTransaction_Cost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged();
					this.OnCostChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's FromCostCenterID column with type link(nonnull, field CostCenter.Id) with labelkey='From Cost Center'
		static public string AccountingTransaction_FromCostCenterID{ get{return WOResourceLabelKdsMBLabel.K("From Cost Center").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.AccountingTransaction),Name="AccountingTransaction_FromCostCenterID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromCostCenterID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid FromCostCenterID
		{
			get
			{
				return this._FromCostCenterID;
			}
			set
			{
				if ((this._FromCostCenterID != value))
				{
					if (this._FromCostCenter.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromCostCenterIDChanging(value);
					this.SendPropertyChanging();
					this._FromCostCenterID = value;
					this.SendPropertyChanged();
					this.OnFromCostCenterIDChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's ToCostCenterID column with type link(nonnull, field CostCenter.Id) with labelkey='To Cost Center'
		static public string AccountingTransaction_ToCostCenterID{ get{return WOResourceLabelKdsMBLabel.K("To Cost Center").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.AccountingTransaction),Name="AccountingTransaction_ToCostCenterID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToCostCenterID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ToCostCenterID
		{
			get
			{
				return this._ToCostCenterID;
			}
			set
			{
				if ((this._ToCostCenterID != value))
				{
					if (this._ToCostCenter.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToCostCenterIDChanging(value);
					this.SendPropertyChanging();
					this._ToCostCenterID = value;
					this.SendPropertyChanged();
					this.OnToCostCenterIDChanged();
				}
			}
		}
		/// Denotes the AccountingTransaction's AccountingSystemTransactionID column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Accounting System Reference'
		static public string AccountingTransaction_AccountingSystemTransactionID{ get{return WOResourceLabelKdsMBLabel.K("Accounting System Reference").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.AccountingTransaction),Name="AccountingTransaction_AccountingSystemTransactionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingSystemTransactionID", DbType="NVARCHAR(MAX)")]
		public string AccountingSystemTransactionID
		{
			get
			{
				return this._AccountingSystemTransactionID;
			}
			set
			{
				if ((this._AccountingSystemTransactionID != value))
				{
					this.OnAccountingSystemTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountingSystemTransactionID = value;
					this.SendPropertyChanged();
					this.OnAccountingSystemTransactionIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_DerivedActualOtherWorkInside", Storage="_DerivedActualOtherWorkInside", ThisKey="Id", OtherKey="AccountingTransactionID", IsUnique=true, IsForeignKey=false)]
		public ActualOtherWorkInside DerivedActualOtherWorkInside
		{
			get
			{
				return this._DerivedActualOtherWorkInside.Entity;
			}
			set
			{
				ActualOtherWorkInside previousValue = this._DerivedActualOtherWorkInside.Entity;
				if (((previousValue != value)
							|| (this._DerivedActualOtherWorkInside.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedActualOtherWorkInside.Entity = null;
						previousValue.BaseAccountingTransaction = null;
					}
					this._DerivedActualOtherWorkInside.Entity = value;
					if ((value != null))
					{
						value.BaseAccountingTransaction = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_DerivedActualItem", Storage="_DerivedActualItem", ThisKey="Id", OtherKey="AccountingTransactionID", IsUnique=true, IsForeignKey=false)]
		public ActualItem DerivedActualItem
		{
			get
			{
				return this._DerivedActualItem.Entity;
			}
			set
			{
				ActualItem previousValue = this._DerivedActualItem.Entity;
				if (((previousValue != value)
							|| (this._DerivedActualItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedActualItem.Entity = null;
						previousValue.BaseAccountingTransaction = null;
					}
					this._DerivedActualItem.Entity = value;
					if ((value != null))
					{
						value.BaseAccountingTransaction = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_DerivedActualLaborInside", Storage="_DerivedActualLaborInside", ThisKey="Id", OtherKey="AccountingTransactionID", IsUnique=true, IsForeignKey=false)]
		public ActualLaborInside DerivedActualLaborInside
		{
			get
			{
				return this._DerivedActualLaborInside.Entity;
			}
			set
			{
				ActualLaborInside previousValue = this._DerivedActualLaborInside.Entity;
				if (((previousValue != value)
							|| (this._DerivedActualLaborInside.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedActualLaborInside.Entity = null;
						previousValue.BaseAccountingTransaction = null;
					}
					this._DerivedActualLaborInside.Entity = value;
					if ((value != null))
					{
						value.BaseAccountingTransaction = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_DerivedActualMiscellaneousWorkOrderCost", Storage="_DerivedActualMiscellaneousWorkOrderCost", ThisKey="Id", OtherKey="AccountingTransactionID", IsUnique=true, IsForeignKey=false)]
		public ActualMiscellaneousWorkOrderCost DerivedActualMiscellaneousWorkOrderCost
		{
			get
			{
				return this._DerivedActualMiscellaneousWorkOrderCost.Entity;
			}
			set
			{
				ActualMiscellaneousWorkOrderCost previousValue = this._DerivedActualMiscellaneousWorkOrderCost.Entity;
				if (((previousValue != value)
							|| (this._DerivedActualMiscellaneousWorkOrderCost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedActualMiscellaneousWorkOrderCost.Entity = null;
						previousValue.BaseAccountingTransaction = null;
					}
					this._DerivedActualMiscellaneousWorkOrderCost.Entity = value;
					if ((value != null))
					{
						value.BaseAccountingTransaction = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_RationalizedInventoryActivityDeltas", Storage="_RationalizedInventoryActivityDeltasAccountingTransaction", ThisKey="Id", OtherKey="AccountingTransactionID")]
		public EntitySet<RationalizedInventoryActivityDeltas> RationalizedInventoryActivityDeltasAccountingTransaction
		{
			get
			{
				return this._RationalizedInventoryActivityDeltasAccountingTransaction;
			}
			set
			{
				this._RationalizedInventoryActivityDeltasAccountingTransaction.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccountingTransaction", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value)
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AccountingTransactionUser.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AccountingTransactionUser.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FromCostCenter_AccountingTransaction", Storage="_FromCostCenter", ThisKey="FromCostCenterID", OtherKey="Id", IsForeignKey=true)]
		public CostCenter FromCostCenter
		{
			get
			{
				return this._FromCostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._FromCostCenter.Entity;
				if (((previousValue != value)
							|| (this._FromCostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FromCostCenter.Entity = null;
						previousValue.AccountingTransactionFromCostCenter.Remove(this);
					}
					this._FromCostCenter.Entity = value;
					if ((value != null))
					{
						value.AccountingTransactionFromCostCenter.Add(this);
						this._FromCostCenterID = value.Id;
					}
					else
					{
						this._FromCostCenterID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToCostCenter_AccountingTransaction", Storage="_ToCostCenter", ThisKey="ToCostCenterID", OtherKey="Id", IsForeignKey=true)]
		public CostCenter ToCostCenter
		{
			get
			{
				return this._ToCostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._ToCostCenter.Entity;
				if (((previousValue != value)
							|| (this._ToCostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToCostCenter.Entity = null;
						previousValue.AccountingTransactionToCostCenter.Remove(this);
					}
					this._ToCostCenter.Entity = value;
					if ((value != null))
					{
						value.AccountingTransactionToCostCenter.Add(this);
						this._ToCostCenterID = value.Id;
					}
					else
					{
						this._ToCostCenterID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_RationalizedInventoryActivityDeltasAccountingTransaction(RationalizedInventoryActivityDeltas entity)
		{
			this.SendPropertyChanging();
			entity.AccountingTransaction = this;
		}
		private void detach_RationalizedInventoryActivityDeltasAccountingTransaction(RationalizedInventoryActivityDeltas entity)
		{
			this.SendPropertyChanging();
			entity.AccountingTransaction = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table User with labelkey='User'
		static public string UserLabelKey { get{return WOResourceLabelKdsMBLabel.K("User").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _ContactID;
		private EntitySet<AccountingTransaction> _AccountingTransactionUser;
		private EntityRef<Contact> _Contact;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnContactIDChanging(System.Guid value);
	partial void OnContactIDChanged();
	#endregion

		public User()
		{
			this._AccountingTransactionUser = new EntitySet<AccountingTransaction>(new Action<AccountingTransaction>(this.attach_AccountingTransactionUser), new Action<AccountingTransaction>(this.detach_AccountingTransactionUser));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		/// Denotes the User's Id column with type id(nonnull) with labelkey='Id'
		static public string User_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.User),Name="User_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the User's ContactID column with type link(nonnull, field Contact.Id) with labelkey='Contact'
		static public string User_ContactID{ get{return WOResourceLabelKdsMBLabel.K("Contact").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.User),Name="User_ContactID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged();
					this.OnContactIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccountingTransaction", Storage="_AccountingTransactionUser", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<AccountingTransaction> AccountingTransactionUser
		{
			get
			{
				return this._AccountingTransactionUser;
			}
			set
			{
				this._AccountingTransactionUser.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_User", Storage="_Contact", ThisKey="ContactID", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value)
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.UserContact.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.UserContact.Add(this);
						this._ContactID = value.Id;
					}
					else
					{
						this._ContactID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_AccountingTransactionUser(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		private void detach_AccountingTransactionUser(AccountingTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Demand")]
	public partial class Demand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Demand with labelkey='Demand'
		static public string DemandLabelKey { get{return WOResourceLabelKdsMBLabel.K("Demand").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _WorkOrderID;
		private byte _DemandActualCalculationInitValue;
		private System.Guid _WorkOrderExpenseCategoryID;
		private System.DateTime _EntryDate;
		private System.Decimal? _CostEstimate;
		private System.Decimal _ActualCost;
		private EntityRef<WorkOrder> _WorkOrder;
		private EntityRef<WorkOrderExpenseCategory> _WorkOrderExpenseCategory;
		private EntityRef<DemandItem> _DerivedDemandItem;
		private EntityRef<DemandLaborInside> _DerivedDemandLaborInside;
		private EntityRef<DemandOtherWorkInside> _DerivedDemandOtherWorkInside;
		private EntityRef<DemandMiscellaneousWorkOrderCost> _DerivedDemandMiscellaneousWorkOrderCost;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnWorkOrderIDChanging(System.Guid value);
	partial void OnWorkOrderIDChanged();
	partial void OnDemandActualCalculationInitValueChanging(byte value);
	partial void OnDemandActualCalculationInitValueChanged();
	partial void OnWorkOrderExpenseCategoryIDChanging(System.Guid value);
	partial void OnWorkOrderExpenseCategoryIDChanged();
	partial void OnEntryDateChanging(System.DateTime value);
	partial void OnEntryDateChanged();
	partial void OnCostEstimateChanging(System.Decimal? value);
	partial void OnCostEstimateChanged();
	partial void OnActualCostChanging(System.Decimal value);
	partial void OnActualCostChanged();
	#endregion

		public Demand()
		{
			this._WorkOrder = default(EntityRef<WorkOrder>);
			this._WorkOrderExpenseCategory = default(EntityRef<WorkOrderExpenseCategory>);
			this._DerivedDemandItem = default(EntityRef<DemandItem>);
			this._DerivedDemandLaborInside = default(EntityRef<DemandLaborInside>);
			this._DerivedDemandOtherWorkInside = default(EntityRef<DemandOtherWorkInside>);
			this._DerivedDemandMiscellaneousWorkOrderCost = default(EntityRef<DemandMiscellaneousWorkOrderCost>);
			OnCreated();
		}
		/// Denotes the Demand's Id column with type id(nonnull) with labelkey='Id'
		static public string Demand_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Demand),Name="Demand_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Demand's WorkOrderID column with type link(nonnull, field WorkOrder.Id) with labelkey='Work Order'
		static public string Demand_WorkOrderID{ get{return WOResourceLabelKdsMBLabel.K("Work Order").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Demand),Name="Demand_WorkOrderID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid WorkOrderID
		{
			get
			{
				return this._WorkOrderID;
			}
			set
			{
				if ((this._WorkOrderID != value))
				{
					if (this._WorkOrder.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderIDChanged();
				}
			}
		}
		/// Denotes the Demand's DemandActualCalculationInitValue column with type integer(nonnull, min 0, max 2) with labelkey='Actual Cost default'
		static public string Demand_DemandActualCalculationInitValue{ get{return WOResourceLabelKdsMBLabel.K("Actual Cost default").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Demand),Name="Demand_DemandActualCalculationInitValue")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandActualCalculationInitValue", DbType="TINYINT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public byte DemandActualCalculationInitValue
		{
			get
			{
				return this._DemandActualCalculationInitValue;
			}
			set
			{
				if ((this._DemandActualCalculationInitValue != value))
				{
					this.OnDemandActualCalculationInitValueChanging(value);
					this.SendPropertyChanging();
					this._DemandActualCalculationInitValue = value;
					this.SendPropertyChanged();
					this.OnDemandActualCalculationInitValueChanged();
				}
			}
		}
		/// Denotes the Demand's WorkOrderExpenseCategoryID column with type link(nonnull, field WorkOrderExpenseCategory.Id) with labelkey='Expense Category'
		static public string Demand_WorkOrderExpenseCategoryID{ get{return WOResourceLabelKdsMBLabel.K("Expense Category").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Demand),Name="Demand_WorkOrderExpenseCategoryID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderExpenseCategoryID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid WorkOrderExpenseCategoryID
		{
			get
			{
				return this._WorkOrderExpenseCategoryID;
			}
			set
			{
				if ((this._WorkOrderExpenseCategoryID != value))
				{
					if (this._WorkOrderExpenseCategory.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderExpenseCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderExpenseCategoryID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderExpenseCategoryIDChanged();
				}
			}
		}
		/// Denotes the Demand's EntryDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EntryDate'
		static public string Demand_EntryDate{ get{return WOResourceLabelKdsMBLabel.K("EntryDate").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Demand),Name="Demand_EntryDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged();
					this.OnEntryDateChanged();
				}
			}
		}
		/// Denotes the Demand's CostEstimate column with type currency(min ¤0., (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Demanded Cost'
		static public string Demand_CostEstimate{ get{return WOResourceLabelKdsMBLabel.K("Demanded Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Demand),Name="Demand_CostEstimate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostEstimate", DbType="MONEY")]
		public System.Decimal? CostEstimate
		{
			get
			{
				return this._CostEstimate;
			}
			set
			{
				if ((this._CostEstimate != value))
				{
					this.OnCostEstimateChanging(value);
					this.SendPropertyChanging();
					this._CostEstimate = value;
					this.SendPropertyChanged();
					this.OnCostEstimateChanged();
				}
			}
		}
		/// Denotes the Demand's ActualCost column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Actual Cost'
		static public string Demand_ActualCost{ get{return WOResourceLabelKdsMBLabel.K("Actual Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Demand),Name="Demand_ActualCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCost", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal ActualCost
		{
			get
			{
				return this._ActualCost;
			}
			set
			{
				if ((this._ActualCost != value))
				{
					this.OnActualCostChanging(value);
					this.SendPropertyChanging();
					this._ActualCost = value;
					this.SendPropertyChanged();
					this.OnActualCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Demand_DerivedDemandItem", Storage="_DerivedDemandItem", ThisKey="Id", OtherKey="DemandID", IsUnique=true, IsForeignKey=false)]
		public DemandItem DerivedDemandItem
		{
			get
			{
				return this._DerivedDemandItem.Entity;
			}
			set
			{
				DemandItem previousValue = this._DerivedDemandItem.Entity;
				if (((previousValue != value)
							|| (this._DerivedDemandItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedDemandItem.Entity = null;
						previousValue.BaseDemand = null;
					}
					this._DerivedDemandItem.Entity = value;
					if ((value != null))
					{
						value.BaseDemand = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Demand_DerivedDemandLaborInside", Storage="_DerivedDemandLaborInside", ThisKey="Id", OtherKey="DemandID", IsUnique=true, IsForeignKey=false)]
		public DemandLaborInside DerivedDemandLaborInside
		{
			get
			{
				return this._DerivedDemandLaborInside.Entity;
			}
			set
			{
				DemandLaborInside previousValue = this._DerivedDemandLaborInside.Entity;
				if (((previousValue != value)
							|| (this._DerivedDemandLaborInside.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedDemandLaborInside.Entity = null;
						previousValue.BaseDemand = null;
					}
					this._DerivedDemandLaborInside.Entity = value;
					if ((value != null))
					{
						value.BaseDemand = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Demand_DerivedDemandOtherWorkInside", Storage="_DerivedDemandOtherWorkInside", ThisKey="Id", OtherKey="DemandID", IsUnique=true, IsForeignKey=false)]
		public DemandOtherWorkInside DerivedDemandOtherWorkInside
		{
			get
			{
				return this._DerivedDemandOtherWorkInside.Entity;
			}
			set
			{
				DemandOtherWorkInside previousValue = this._DerivedDemandOtherWorkInside.Entity;
				if (((previousValue != value)
							|| (this._DerivedDemandOtherWorkInside.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedDemandOtherWorkInside.Entity = null;
						previousValue.BaseDemand = null;
					}
					this._DerivedDemandOtherWorkInside.Entity = value;
					if ((value != null))
					{
						value.BaseDemand = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Demand_DerivedDemandMiscellaneousWorkOrderCost", Storage="_DerivedDemandMiscellaneousWorkOrderCost", ThisKey="Id", OtherKey="DemandID", IsUnique=true, IsForeignKey=false)]
		public DemandMiscellaneousWorkOrderCost DerivedDemandMiscellaneousWorkOrderCost
		{
			get
			{
				return this._DerivedDemandMiscellaneousWorkOrderCost.Entity;
			}
			set
			{
				DemandMiscellaneousWorkOrderCost previousValue = this._DerivedDemandMiscellaneousWorkOrderCost.Entity;
				if (((previousValue != value)
							|| (this._DerivedDemandMiscellaneousWorkOrderCost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedDemandMiscellaneousWorkOrderCost.Entity = null;
						previousValue.BaseDemand = null;
					}
					this._DerivedDemandMiscellaneousWorkOrderCost.Entity = value;
					if ((value != null))
					{
						value.BaseDemand = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_Demand", Storage="_WorkOrder", ThisKey="WorkOrderID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrder WorkOrder
		{
			get
			{
				return this._WorkOrder.Entity;
			}
			set
			{
				WorkOrder previousValue = this._WorkOrder.Entity;
				if (((previousValue != value)
							|| (this._WorkOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrder.Entity = null;
						previousValue.DemandWorkOrder.Remove(this);
					}
					this._WorkOrder.Entity = value;
					if ((value != null))
					{
						value.DemandWorkOrder.Add(this);
						this._WorkOrderID = value.Id;
					}
					else
					{
						this._WorkOrderID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderExpenseCategory_Demand", Storage="_WorkOrderExpenseCategory", ThisKey="WorkOrderExpenseCategoryID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderExpenseCategory WorkOrderExpenseCategory
		{
			get
			{
				return this._WorkOrderExpenseCategory.Entity;
			}
			set
			{
				WorkOrderExpenseCategory previousValue = this._WorkOrderExpenseCategory.Entity;
				if (((previousValue != value)
							|| (this._WorkOrderExpenseCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrderExpenseCategory.Entity = null;
						previousValue.DemandWorkOrderExpenseCategory.Remove(this);
					}
					this._WorkOrderExpenseCategory.Entity = value;
					if ((value != null))
					{
						value.DemandWorkOrderExpenseCategory.Add(this);
						this._WorkOrderExpenseCategoryID = value.Id;
					}
					else
					{
						this._WorkOrderExpenseCategoryID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemandWorkOrderExpenseModelEntry")]
	public partial class DemandWorkOrderExpenseModelEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table DemandWorkOrderExpenseModelEntry with labelkey='Demand'
		static public string DemandWorkOrderExpenseModelEntryLabelKey { get{return WOResourceLabelKdsMBLabel.K("Demand").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid? _DerivedDemandID;
		private System.Guid? _WorkOrderExpenseModelEntryID;
		private EntityRef<WorkOrderExpenseModelEntry> _WorkOrderExpenseModelEntry;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnDerivedDemandIDChanging(System.Guid? value);
	partial void OnDerivedDemandIDChanged();
	partial void OnWorkOrderExpenseModelEntryIDChanging(System.Guid? value);
	partial void OnWorkOrderExpenseModelEntryIDChanged();
	#endregion

		public DemandWorkOrderExpenseModelEntry()
		{
			this._WorkOrderExpenseModelEntry = default(EntityRef<WorkOrderExpenseModelEntry>);
			OnCreated();
		}
		/// Denotes the DemandWorkOrderExpenseModelEntry's Id column with type id(nonnull) with labelkey='Id'
		static public string DemandWorkOrderExpenseModelEntry_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandWorkOrderExpenseModelEntry),Name="DemandWorkOrderExpenseModelEntry_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the DemandWorkOrderExpenseModelEntry's DerivedDemandID column with type id with labelkey=''
		static public string DemandWorkOrderExpenseModelEntry_DerivedDemandID{ get{return WOResourceLabelKdsMBLabel.K("").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandWorkOrderExpenseModelEntry),Name="DemandWorkOrderExpenseModelEntry_DerivedDemandID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DerivedDemandID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? DerivedDemandID
		{
			get
			{
				return this._DerivedDemandID;
			}
			set
			{
				if ((this._DerivedDemandID != value))
				{
					this.OnDerivedDemandIDChanging(value);
					this.SendPropertyChanging();
					this._DerivedDemandID = value;
					this.SendPropertyChanged();
					this.OnDerivedDemandIDChanged();
				}
			}
		}
		/// Denotes the DemandWorkOrderExpenseModelEntry's WorkOrderExpenseModelEntryID column with type link(field WorkOrderExpenseModelEntry.Id) with labelkey='Work Order Expense Model Entry'
		static public string DemandWorkOrderExpenseModelEntry_WorkOrderExpenseModelEntryID{ get{return WOResourceLabelKdsMBLabel.K("Work Order Expense Model Entry").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandWorkOrderExpenseModelEntry),Name="DemandWorkOrderExpenseModelEntry_WorkOrderExpenseModelEntryID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderExpenseModelEntryID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? WorkOrderExpenseModelEntryID
		{
			get
			{
				return this._WorkOrderExpenseModelEntryID;
			}
			set
			{
				if ((this._WorkOrderExpenseModelEntryID != value))
				{
					if (this._WorkOrderExpenseModelEntry.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderExpenseModelEntryIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderExpenseModelEntryID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderExpenseModelEntryIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderExpenseModelEntry_DemandWorkOrderExpenseModelEntry", Storage="_WorkOrderExpenseModelEntry", ThisKey="WorkOrderExpenseModelEntryID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderExpenseModelEntry WorkOrderExpenseModelEntry
		{
			get
			{
				return this._WorkOrderExpenseModelEntry.Entity;
			}
			set
			{
				WorkOrderExpenseModelEntry previousValue = this._WorkOrderExpenseModelEntry.Entity;
				if (((previousValue != value)
							|| (this._WorkOrderExpenseModelEntry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrderExpenseModelEntry.Entity = null;
						previousValue.DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry.Remove(this);
					}
					this._WorkOrderExpenseModelEntry.Entity = value;
					if ((value != null))
					{
						value.DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry.Add(this);
						this._WorkOrderExpenseModelEntryID = value.Id;
					}
					else
					{
						this._WorkOrderExpenseModelEntryID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderExpenseModelEntry")]
	public partial class WorkOrderExpenseModelEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table WorkOrderExpenseModelEntry with labelkey='Work Order Expense Model Entry'
		static public string WorkOrderExpenseModelEntryLabelKey { get{return WOResourceLabelKdsMBLabel.K("Work Order Expense Model Entry").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _WorkOrderExpenseModelID;
		private System.Guid _WorkOrderExpenseCategoryID;
		private System.Guid _CostCenterID;
		private EntitySet<DemandWorkOrderExpenseModelEntry> _DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry;
		private EntityRef<WorkOrderExpenseModel> _WorkOrderExpenseModel;
		private EntityRef<WorkOrderExpenseCategory> _WorkOrderExpenseCategory;
		private EntityRef<CostCenter> _CostCenter;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnWorkOrderExpenseModelIDChanging(System.Guid value);
	partial void OnWorkOrderExpenseModelIDChanged();
	partial void OnWorkOrderExpenseCategoryIDChanging(System.Guid value);
	partial void OnWorkOrderExpenseCategoryIDChanged();
	partial void OnCostCenterIDChanging(System.Guid value);
	partial void OnCostCenterIDChanged();
	#endregion

		public WorkOrderExpenseModelEntry()
		{
			this._DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry = new EntitySet<DemandWorkOrderExpenseModelEntry>(new Action<DemandWorkOrderExpenseModelEntry>(this.attach_DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry), new Action<DemandWorkOrderExpenseModelEntry>(this.detach_DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry));
			this._WorkOrderExpenseModel = default(EntityRef<WorkOrderExpenseModel>);
			this._WorkOrderExpenseCategory = default(EntityRef<WorkOrderExpenseCategory>);
			this._CostCenter = default(EntityRef<CostCenter>);
			OnCreated();
		}
		/// Denotes the WorkOrderExpenseModelEntry's Id column with type id(nonnull) with labelkey='Id'
		static public string WorkOrderExpenseModelEntry_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrderExpenseModelEntry),Name="WorkOrderExpenseModelEntry_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the WorkOrderExpenseModelEntry's WorkOrderExpenseModelID column with type link(nonnull, field WorkOrderExpenseModel.Id) with labelkey='Expense Model'
		static public string WorkOrderExpenseModelEntry_WorkOrderExpenseModelID{ get{return WOResourceLabelKdsMBLabel.K("Expense Model").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrderExpenseModelEntry),Name="WorkOrderExpenseModelEntry_WorkOrderExpenseModelID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderExpenseModelID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid WorkOrderExpenseModelID
		{
			get
			{
				return this._WorkOrderExpenseModelID;
			}
			set
			{
				if ((this._WorkOrderExpenseModelID != value))
				{
					if (this._WorkOrderExpenseModel.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderExpenseModelIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderExpenseModelID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderExpenseModelIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderExpenseModelEntry's WorkOrderExpenseCategoryID column with type link(nonnull, field WorkOrderExpenseCategory.Id) with labelkey='Category'
		static public string WorkOrderExpenseModelEntry_WorkOrderExpenseCategoryID{ get{return WOResourceLabelKdsMBLabel.K("Category").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrderExpenseModelEntry),Name="WorkOrderExpenseModelEntry_WorkOrderExpenseCategoryID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderExpenseCategoryID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid WorkOrderExpenseCategoryID
		{
			get
			{
				return this._WorkOrderExpenseCategoryID;
			}
			set
			{
				if ((this._WorkOrderExpenseCategoryID != value))
				{
					if (this._WorkOrderExpenseCategory.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderExpenseCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderExpenseCategoryID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderExpenseCategoryIDChanged();
				}
			}
		}
		/// Denotes the WorkOrderExpenseModelEntry's CostCenterID column with type link(nonnull, field CostCenter.Id) with labelkey='Cost Center'
		static public string WorkOrderExpenseModelEntry_CostCenterID{ get{return WOResourceLabelKdsMBLabel.K("Cost Center").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.WorkOrderExpenseModelEntry),Name="WorkOrderExpenseModelEntry_CostCenterID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCenterID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CostCenterID
		{
			get
			{
				return this._CostCenterID;
			}
			set
			{
				if ((this._CostCenterID != value))
				{
					if (this._CostCenter.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CostCenterID = value;
					this.SendPropertyChanged();
					this.OnCostCenterIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderExpenseModelEntry_DemandWorkOrderExpenseModelEntry", Storage="_DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry", ThisKey="Id", OtherKey="WorkOrderExpenseModelEntryID")]
		public EntitySet<DemandWorkOrderExpenseModelEntry> DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry
		{
			get
			{
				return this._DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry;
			}
			set
			{
				this._DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderExpenseModel_WorkOrderExpenseModelEntry", Storage="_WorkOrderExpenseModel", ThisKey="WorkOrderExpenseModelID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderExpenseModel WorkOrderExpenseModel
		{
			get
			{
				return this._WorkOrderExpenseModel.Entity;
			}
			set
			{
				WorkOrderExpenseModel previousValue = this._WorkOrderExpenseModel.Entity;
				if (((previousValue != value)
							|| (this._WorkOrderExpenseModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrderExpenseModel.Entity = null;
						previousValue.WorkOrderExpenseModelEntryWorkOrderExpenseModel.Remove(this);
					}
					this._WorkOrderExpenseModel.Entity = value;
					if ((value != null))
					{
						value.WorkOrderExpenseModelEntryWorkOrderExpenseModel.Add(this);
						this._WorkOrderExpenseModelID = value.Id;
					}
					else
					{
						this._WorkOrderExpenseModelID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrderExpenseCategory_WorkOrderExpenseModelEntry", Storage="_WorkOrderExpenseCategory", ThisKey="WorkOrderExpenseCategoryID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrderExpenseCategory WorkOrderExpenseCategory
		{
			get
			{
				return this._WorkOrderExpenseCategory.Entity;
			}
			set
			{
				WorkOrderExpenseCategory previousValue = this._WorkOrderExpenseCategory.Entity;
				if (((previousValue != value)
							|| (this._WorkOrderExpenseCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrderExpenseCategory.Entity = null;
						previousValue.WorkOrderExpenseModelEntryWorkOrderExpenseCategory.Remove(this);
					}
					this._WorkOrderExpenseCategory.Entity = value;
					if ((value != null))
					{
						value.WorkOrderExpenseModelEntryWorkOrderExpenseCategory.Add(this);
						this._WorkOrderExpenseCategoryID = value.Id;
					}
					else
					{
						this._WorkOrderExpenseCategoryID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_WorkOrderExpenseModelEntry", Storage="_CostCenter", ThisKey="CostCenterID", OtherKey="Id", IsForeignKey=true)]
		public CostCenter CostCenter
		{
			get
			{
				return this._CostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._CostCenter.Entity;
				if (((previousValue != value)
							|| (this._CostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCenter.Entity = null;
						previousValue.WorkOrderExpenseModelEntryCostCenter.Remove(this);
					}
					this._CostCenter.Entity = value;
					if ((value != null))
					{
						value.WorkOrderExpenseModelEntryCostCenter.Add(this);
						this._CostCenterID = value.Id;
					}
					else
					{
						this._CostCenterID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry(DemandWorkOrderExpenseModelEntry entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderExpenseModelEntry = this;
		}
		private void detach_DemandWorkOrderExpenseModelEntryWorkOrderExpenseModelEntry(DemandWorkOrderExpenseModelEntry entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrderExpenseModelEntry = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemandItem")]
	public partial class DemandItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table DemandItem with labelkey='Demand Item'
		static public string DemandItemLabelKey { get{return WOResourceLabelKdsMBLabel.K("Demand Item").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _DemandID;
		private System.Guid _ItemLocationID;
		private int? _Quantity;
		private int _ActualQuantity;
		private EntitySet<ActualItem> _ActualItemDemandItem;
		private EntityRef<Demand> _BaseDemand;
		private EntityRef<ItemLocation> _ItemLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnDemandIDChanging(System.Guid value);
	partial void OnDemandIDChanged();
	partial void OnItemLocationIDChanging(System.Guid value);
	partial void OnItemLocationIDChanged();
	partial void OnQuantityChanging(int? value);
	partial void OnQuantityChanged();
	partial void OnActualQuantityChanging(int value);
	partial void OnActualQuantityChanged();
	#endregion

		public DemandItem()
		{
			this._ActualItemDemandItem = new EntitySet<ActualItem>(new Action<ActualItem>(this.attach_ActualItemDemandItem), new Action<ActualItem>(this.detach_ActualItemDemandItem));
			this._BaseDemand = default(EntityRef<Demand>);
			this._ItemLocation = default(EntityRef<ItemLocation>);
			OnCreated();
		}
		/// Denotes the DemandItem's Id column with type id(nonnull) with labelkey='Id'
		static public string DemandItem_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandItem),Name="DemandItem_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the DemandItem's DemandID column with type link(nonnull, field Demand.Id) with labelkey='Demand'
		static public string DemandItem_DemandID{ get{return WOResourceLabelKdsMBLabel.K("Demand").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandItem),Name="DemandItem_DemandID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid DemandID
		{
			get
			{
				return this._DemandID;
			}
			set
			{
				if ((this._DemandID != value))
				{
					if (this._BaseDemand.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemandIDChanging(value);
					this.SendPropertyChanging();
					this._DemandID = value;
					this.SendPropertyChanged();
					this.OnDemandIDChanged();
				}
			}
		}
		/// Denotes the DemandItem's ItemLocationID column with type link(nonnull, field ItemLocation.Id) with labelkey='Storage Assignment'
		static public string DemandItem_ItemLocationID{ get{return WOResourceLabelKdsMBLabel.K("Storage Assignment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandItem),Name="DemandItem_ItemLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ItemLocationID
		{
			get
			{
				return this._ItemLocationID;
			}
			set
			{
				if ((this._ItemLocationID != value))
				{
					if (this._ItemLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ItemLocationID = value;
					this.SendPropertyChanged();
					this.OnItemLocationIDChanged();
				}
			}
		}
		/// Denotes the DemandItem's Quantity column with type integer(min 1, (max 2,147,483,647)) with labelkey='Demanded'
		static public string DemandItem_Quantity{ get{return WOResourceLabelKdsMBLabel.K("Demanded").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandItem),Name="DemandItem_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="INT")]
		public int? Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the DemandItem's ActualQuantity column with type integer(nonnull, 32) with labelkey='Actual'
		static public string DemandItem_ActualQuantity{ get{return WOResourceLabelKdsMBLabel.K("Actual").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandItem),Name="DemandItem_ActualQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualQuantity", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int ActualQuantity
		{
			get
			{
				return this._ActualQuantity;
			}
			set
			{
				if ((this._ActualQuantity != value))
				{
					this.OnActualQuantityChanging(value);
					this.SendPropertyChanging();
					this._ActualQuantity = value;
					this.SendPropertyChanged();
					this.OnActualQuantityChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DemandItem_ActualItem", Storage="_ActualItemDemandItem", ThisKey="Id", OtherKey="DemandItemID")]
		public EntitySet<ActualItem> ActualItemDemandItem
		{
			get
			{
				return this._ActualItemDemandItem;
			}
			set
			{
				this._ActualItemDemandItem.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseDemand_DemandItem", Storage="_BaseDemand", ThisKey="DemandID", OtherKey="Id", IsForeignKey=true)]
		public Demand BaseDemand
		{
			get
			{
				return this._BaseDemand.Entity;
			}
			set
			{
				Demand previousValue = this._BaseDemand.Entity;
				if (((previousValue != value)
							|| (this._BaseDemand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseDemand.Entity = null;
					}
					this._BaseDemand.Entity = value;
					if ((value != null))
					{
						this._DemandID = value.Id;
					}
					else
					{
						this._DemandID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_DemandItem", Storage="_ItemLocation", ThisKey="ItemLocationID", OtherKey="Id", IsForeignKey=true)]
		public ItemLocation ItemLocation
		{
			get
			{
				return this._ItemLocation.Entity;
			}
			set
			{
				ItemLocation previousValue = this._ItemLocation.Entity;
				if (((previousValue != value)
							|| (this._ItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemLocation.Entity = null;
						previousValue.DemandItemItemLocation.Remove(this);
					}
					this._ItemLocation.Entity = value;
					if ((value != null))
					{
						value.DemandItemItemLocation.Add(this);
						this._ItemLocationID = value.Id;
					}
					else
					{
						this._ItemLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ActualItemDemandItem(ActualItem entity)
		{
			this.SendPropertyChanging();
			entity.DemandItem = this;
		}
		private void detach_ActualItemDemandItem(ActualItem entity)
		{
			this.SendPropertyChanging();
			entity.DemandItem = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemandLaborInside")]
	public partial class DemandLaborInside : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table DemandLaborInside with labelkey='Demand Hourly Inside'
		static public string DemandLaborInsideLabelKey { get{return WOResourceLabelKdsMBLabel.K("Demand Hourly Inside").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _DemandID;
		private System.Guid _LaborInsideID;
		private System.DateTime? _Quantity;
		private System.DateTime _ActualQuantity;
		private EntitySet<ActualLaborInside> _ActualLaborInsideDemandLaborInside;
		private EntityRef<Demand> _BaseDemand;
		private EntityRef<LaborInside> _LaborInside;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnDemandIDChanging(System.Guid value);
	partial void OnDemandIDChanged();
	partial void OnLaborInsideIDChanging(System.Guid value);
	partial void OnLaborInsideIDChanged();
	partial void OnQuantityChanging(System.DateTime? value);
	partial void OnQuantityChanged();
	partial void OnActualQuantityChanging(System.DateTime value);
	partial void OnActualQuantityChanged();
	#endregion

		public DemandLaborInside()
		{
			this._ActualLaborInsideDemandLaborInside = new EntitySet<ActualLaborInside>(new Action<ActualLaborInside>(this.attach_ActualLaborInsideDemandLaborInside), new Action<ActualLaborInside>(this.detach_ActualLaborInsideDemandLaborInside));
			this._BaseDemand = default(EntityRef<Demand>);
			this._LaborInside = default(EntityRef<LaborInside>);
			OnCreated();
		}
		/// Denotes the DemandLaborInside's Id column with type id(nonnull) with labelkey='Id'
		static public string DemandLaborInside_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandLaborInside),Name="DemandLaborInside_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the DemandLaborInside's DemandID column with type link(nonnull, field Demand.Id) with labelkey='Demand'
		static public string DemandLaborInside_DemandID{ get{return WOResourceLabelKdsMBLabel.K("Demand").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandLaborInside),Name="DemandLaborInside_DemandID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid DemandID
		{
			get
			{
				return this._DemandID;
			}
			set
			{
				if ((this._DemandID != value))
				{
					if (this._BaseDemand.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemandIDChanging(value);
					this.SendPropertyChanging();
					this._DemandID = value;
					this.SendPropertyChanged();
					this.OnDemandIDChanged();
				}
			}
		}
		/// Denotes the DemandLaborInside's LaborInsideID column with type link(nonnull, field LaborInside.Id) with labelkey='Hourly Inside'
		static public string DemandLaborInside_LaborInsideID{ get{return WOResourceLabelKdsMBLabel.K("Hourly Inside").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandLaborInside),Name="DemandLaborInside_LaborInsideID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LaborInsideID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid LaborInsideID
		{
			get
			{
				return this._LaborInsideID;
			}
			set
			{
				if ((this._LaborInsideID != value))
				{
					if (this._LaborInside.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLaborInsideIDChanging(value);
					this.SendPropertyChanging();
					this._LaborInsideID = value;
					this.SendPropertyChanged();
					this.OnLaborInsideIDChanged();
				}
			}
		}
		/// Denotes the DemandLaborInside's Quantity column with type interval(min 0:01, max 876000:00, by 0:01) with labelkey='Demanded'
		static public string DemandLaborInside_Quantity{ get{return WOResourceLabelKdsMBLabel.K("Demanded").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandLaborInside),Name="DemandLaborInside_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="DATETIME")]
		public System.DateTime? Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the DemandLaborInside's ActualQuantity column with type interval(nonnull, min 0:00, max 876000:00, by 0:01) with labelkey='Actual'
		static public string DemandLaborInside_ActualQuantity{ get{return WOResourceLabelKdsMBLabel.K("Actual").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandLaborInside),Name="DemandLaborInside_ActualQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualQuantity", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime ActualQuantity
		{
			get
			{
				return this._ActualQuantity;
			}
			set
			{
				if ((this._ActualQuantity != value))
				{
					this.OnActualQuantityChanging(value);
					this.SendPropertyChanging();
					this._ActualQuantity = value;
					this.SendPropertyChanged();
					this.OnActualQuantityChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DemandLaborInside_ActualLaborInside", Storage="_ActualLaborInsideDemandLaborInside", ThisKey="Id", OtherKey="DemandLaborInsideID")]
		public EntitySet<ActualLaborInside> ActualLaborInsideDemandLaborInside
		{
			get
			{
				return this._ActualLaborInsideDemandLaborInside;
			}
			set
			{
				this._ActualLaborInsideDemandLaborInside.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseDemand_DemandLaborInside", Storage="_BaseDemand", ThisKey="DemandID", OtherKey="Id", IsForeignKey=true)]
		public Demand BaseDemand
		{
			get
			{
				return this._BaseDemand.Entity;
			}
			set
			{
				Demand previousValue = this._BaseDemand.Entity;
				if (((previousValue != value)
							|| (this._BaseDemand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseDemand.Entity = null;
					}
					this._BaseDemand.Entity = value;
					if ((value != null))
					{
						this._DemandID = value.Id;
					}
					else
					{
						this._DemandID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LaborInside_DemandLaborInside", Storage="_LaborInside", ThisKey="LaborInsideID", OtherKey="Id", IsForeignKey=true)]
		public LaborInside LaborInside
		{
			get
			{
				return this._LaborInside.Entity;
			}
			set
			{
				LaborInside previousValue = this._LaborInside.Entity;
				if (((previousValue != value)
							|| (this._LaborInside.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LaborInside.Entity = null;
						previousValue.DemandLaborInsideLaborInside.Remove(this);
					}
					this._LaborInside.Entity = value;
					if ((value != null))
					{
						value.DemandLaborInsideLaborInside.Add(this);
						this._LaborInsideID = value.Id;
					}
					else
					{
						this._LaborInsideID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ActualLaborInsideDemandLaborInside(ActualLaborInside entity)
		{
			this.SendPropertyChanging();
			entity.DemandLaborInside = this;
		}
		private void detach_ActualLaborInsideDemandLaborInside(ActualLaborInside entity)
		{
			this.SendPropertyChanging();
			entity.DemandLaborInside = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemandOtherWorkInside")]
	public partial class DemandOtherWorkInside : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table DemandOtherWorkInside with labelkey='Demand Per Job Inside'
		static public string DemandOtherWorkInsideLabelKey { get{return WOResourceLabelKdsMBLabel.K("Demand Per Job Inside").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _DemandID;
		private System.Guid _OtherWorkInsideID;
		private int? _Quantity;
		private int _ActualQuantity;
		private EntitySet<ActualOtherWorkInside> _ActualOtherWorkInsideDemandOtherWorkInside;
		private EntityRef<Demand> _BaseDemand;
		private EntityRef<OtherWorkInside> _OtherWorkInside;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnDemandIDChanging(System.Guid value);
	partial void OnDemandIDChanged();
	partial void OnOtherWorkInsideIDChanging(System.Guid value);
	partial void OnOtherWorkInsideIDChanged();
	partial void OnQuantityChanging(int? value);
	partial void OnQuantityChanged();
	partial void OnActualQuantityChanging(int value);
	partial void OnActualQuantityChanged();
	#endregion

		public DemandOtherWorkInside()
		{
			this._ActualOtherWorkInsideDemandOtherWorkInside = new EntitySet<ActualOtherWorkInside>(new Action<ActualOtherWorkInside>(this.attach_ActualOtherWorkInsideDemandOtherWorkInside), new Action<ActualOtherWorkInside>(this.detach_ActualOtherWorkInsideDemandOtherWorkInside));
			this._BaseDemand = default(EntityRef<Demand>);
			this._OtherWorkInside = default(EntityRef<OtherWorkInside>);
			OnCreated();
		}
		/// Denotes the DemandOtherWorkInside's Id column with type id(nonnull) with labelkey='Id'
		static public string DemandOtherWorkInside_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandOtherWorkInside),Name="DemandOtherWorkInside_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the DemandOtherWorkInside's DemandID column with type link(nonnull, field Demand.Id) with labelkey='Demand'
		static public string DemandOtherWorkInside_DemandID{ get{return WOResourceLabelKdsMBLabel.K("Demand").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandOtherWorkInside),Name="DemandOtherWorkInside_DemandID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid DemandID
		{
			get
			{
				return this._DemandID;
			}
			set
			{
				if ((this._DemandID != value))
				{
					if (this._BaseDemand.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemandIDChanging(value);
					this.SendPropertyChanging();
					this._DemandID = value;
					this.SendPropertyChanged();
					this.OnDemandIDChanged();
				}
			}
		}
		/// Denotes the DemandOtherWorkInside's OtherWorkInsideID column with type link(nonnull, field OtherWorkInside.Id) with labelkey='Per Job Inside'
		static public string DemandOtherWorkInside_OtherWorkInsideID{ get{return WOResourceLabelKdsMBLabel.K("Per Job Inside").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandOtherWorkInside),Name="DemandOtherWorkInside_OtherWorkInsideID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherWorkInsideID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid OtherWorkInsideID
		{
			get
			{
				return this._OtherWorkInsideID;
			}
			set
			{
				if ((this._OtherWorkInsideID != value))
				{
					if (this._OtherWorkInside.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOtherWorkInsideIDChanging(value);
					this.SendPropertyChanging();
					this._OtherWorkInsideID = value;
					this.SendPropertyChanged();
					this.OnOtherWorkInsideIDChanged();
				}
			}
		}
		/// Denotes the DemandOtherWorkInside's Quantity column with type integer(min 1, (max 2,147,483,647)) with labelkey='Demanded'
		static public string DemandOtherWorkInside_Quantity{ get{return WOResourceLabelKdsMBLabel.K("Demanded").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandOtherWorkInside),Name="DemandOtherWorkInside_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="INT")]
		public int? Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the DemandOtherWorkInside's ActualQuantity column with type integer(nonnull, 32) with labelkey='Actual'
		static public string DemandOtherWorkInside_ActualQuantity{ get{return WOResourceLabelKdsMBLabel.K("Actual").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandOtherWorkInside),Name="DemandOtherWorkInside_ActualQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualQuantity", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int ActualQuantity
		{
			get
			{
				return this._ActualQuantity;
			}
			set
			{
				if ((this._ActualQuantity != value))
				{
					this.OnActualQuantityChanging(value);
					this.SendPropertyChanging();
					this._ActualQuantity = value;
					this.SendPropertyChanged();
					this.OnActualQuantityChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DemandOtherWorkInside_ActualOtherWorkInside", Storage="_ActualOtherWorkInsideDemandOtherWorkInside", ThisKey="Id", OtherKey="DemandOtherWorkInsideID")]
		public EntitySet<ActualOtherWorkInside> ActualOtherWorkInsideDemandOtherWorkInside
		{
			get
			{
				return this._ActualOtherWorkInsideDemandOtherWorkInside;
			}
			set
			{
				this._ActualOtherWorkInsideDemandOtherWorkInside.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseDemand_DemandOtherWorkInside", Storage="_BaseDemand", ThisKey="DemandID", OtherKey="Id", IsForeignKey=true)]
		public Demand BaseDemand
		{
			get
			{
				return this._BaseDemand.Entity;
			}
			set
			{
				Demand previousValue = this._BaseDemand.Entity;
				if (((previousValue != value)
							|| (this._BaseDemand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseDemand.Entity = null;
					}
					this._BaseDemand.Entity = value;
					if ((value != null))
					{
						this._DemandID = value.Id;
					}
					else
					{
						this._DemandID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OtherWorkInside_DemandOtherWorkInside", Storage="_OtherWorkInside", ThisKey="OtherWorkInsideID", OtherKey="Id", IsForeignKey=true)]
		public OtherWorkInside OtherWorkInside
		{
			get
			{
				return this._OtherWorkInside.Entity;
			}
			set
			{
				OtherWorkInside previousValue = this._OtherWorkInside.Entity;
				if (((previousValue != value)
							|| (this._OtherWorkInside.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OtherWorkInside.Entity = null;
						previousValue.DemandOtherWorkInsideOtherWorkInside.Remove(this);
					}
					this._OtherWorkInside.Entity = value;
					if ((value != null))
					{
						value.DemandOtherWorkInsideOtherWorkInside.Add(this);
						this._OtherWorkInsideID = value.Id;
					}
					else
					{
						this._OtherWorkInsideID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ActualOtherWorkInsideDemandOtherWorkInside(ActualOtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.DemandOtherWorkInside = this;
		}
		private void detach_ActualOtherWorkInsideDemandOtherWorkInside(ActualOtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.DemandOtherWorkInside = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemandLaborOutside")]
	public partial class DemandLaborOutside : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table DemandLaborOutside with labelkey='DemandLaborOutside'
		static public string DemandLaborOutsideLabelKey { get{return WOResourceLabelKdsMBLabel.K("DemandLaborOutside").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public DemandLaborOutside()
		{
			OnCreated();
		}
		/// Denotes the DemandLaborOutside's Id column with type id(nonnull) with labelkey='Id'
		static public string DemandLaborOutside_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandLaborOutside),Name="DemandLaborOutside_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemandOtherWorkOutside")]
	public partial class DemandOtherWorkOutside : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table DemandOtherWorkOutside with labelkey='DemandOtherWorkOutside'
		static public string DemandOtherWorkOutsideLabelKey { get{return WOResourceLabelKdsMBLabel.K("DemandOtherWorkOutside").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public DemandOtherWorkOutside()
		{
			OnCreated();
		}
		/// Denotes the DemandOtherWorkOutside's Id column with type id(nonnull) with labelkey='Id'
		static public string DemandOtherWorkOutside_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandOtherWorkOutside),Name="DemandOtherWorkOutside_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemandMiscellaneousWorkOrderCost")]
	public partial class DemandMiscellaneousWorkOrderCost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table DemandMiscellaneousWorkOrderCost with labelkey='Demand Miscellaneous Cost'
		static public string DemandMiscellaneousWorkOrderCostLabelKey { get{return WOResourceLabelKdsMBLabel.K("Demand Miscellaneous Cost").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _DemandID;
		private System.Guid _MiscellaneousWorkOrderCostID;
		private EntitySet<ActualMiscellaneousWorkOrderCost> _ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost;
		private EntityRef<Demand> _BaseDemand;
		private EntityRef<MiscellaneousWorkOrderCost> _MiscellaneousWorkOrderCost;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnDemandIDChanging(System.Guid value);
	partial void OnDemandIDChanged();
	partial void OnMiscellaneousWorkOrderCostIDChanging(System.Guid value);
	partial void OnMiscellaneousWorkOrderCostIDChanged();
	#endregion

		public DemandMiscellaneousWorkOrderCost()
		{
			this._ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost = new EntitySet<ActualMiscellaneousWorkOrderCost>(new Action<ActualMiscellaneousWorkOrderCost>(this.attach_ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost), new Action<ActualMiscellaneousWorkOrderCost>(this.detach_ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost));
			this._BaseDemand = default(EntityRef<Demand>);
			this._MiscellaneousWorkOrderCost = default(EntityRef<MiscellaneousWorkOrderCost>);
			OnCreated();
		}
		/// Denotes the DemandMiscellaneousWorkOrderCost's Id column with type id(nonnull) with labelkey='Id'
		static public string DemandMiscellaneousWorkOrderCost_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandMiscellaneousWorkOrderCost),Name="DemandMiscellaneousWorkOrderCost_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the DemandMiscellaneousWorkOrderCost's DemandID column with type link(nonnull, field Demand.Id) with labelkey='Demand'
		static public string DemandMiscellaneousWorkOrderCost_DemandID{ get{return WOResourceLabelKdsMBLabel.K("Demand").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandMiscellaneousWorkOrderCost),Name="DemandMiscellaneousWorkOrderCost_DemandID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid DemandID
		{
			get
			{
				return this._DemandID;
			}
			set
			{
				if ((this._DemandID != value))
				{
					if (this._BaseDemand.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemandIDChanging(value);
					this.SendPropertyChanging();
					this._DemandID = value;
					this.SendPropertyChanged();
					this.OnDemandIDChanged();
				}
			}
		}
		/// Denotes the DemandMiscellaneousWorkOrderCost's MiscellaneousWorkOrderCostID column with type link(nonnull, field MiscellaneousWorkOrderCost.Id) with labelkey='Miscellaneous Cost'
		static public string DemandMiscellaneousWorkOrderCost_MiscellaneousWorkOrderCostID{ get{return WOResourceLabelKdsMBLabel.K("Miscellaneous Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.DemandMiscellaneousWorkOrderCost),Name="DemandMiscellaneousWorkOrderCost_MiscellaneousWorkOrderCostID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiscellaneousWorkOrderCostID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid MiscellaneousWorkOrderCostID
		{
			get
			{
				return this._MiscellaneousWorkOrderCostID;
			}
			set
			{
				if ((this._MiscellaneousWorkOrderCostID != value))
				{
					if (this._MiscellaneousWorkOrderCost.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMiscellaneousWorkOrderCostIDChanging(value);
					this.SendPropertyChanging();
					this._MiscellaneousWorkOrderCostID = value;
					this.SendPropertyChanged();
					this.OnMiscellaneousWorkOrderCostIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DemandMiscellaneousWorkOrderCost_ActualMiscellaneousWorkOrderCost", Storage="_ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost", ThisKey="Id", OtherKey="DemandMiscellaneousWorkOrderCostID")]
		public EntitySet<ActualMiscellaneousWorkOrderCost> ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost
		{
			get
			{
				return this._ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost;
			}
			set
			{
				this._ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseDemand_DemandMiscellaneousWorkOrderCost", Storage="_BaseDemand", ThisKey="DemandID", OtherKey="Id", IsForeignKey=true)]
		public Demand BaseDemand
		{
			get
			{
				return this._BaseDemand.Entity;
			}
			set
			{
				Demand previousValue = this._BaseDemand.Entity;
				if (((previousValue != value)
							|| (this._BaseDemand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseDemand.Entity = null;
					}
					this._BaseDemand.Entity = value;
					if ((value != null))
					{
						this._DemandID = value.Id;
					}
					else
					{
						this._DemandID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MiscellaneousWorkOrderCost_DemandMiscellaneousWorkOrderCost", Storage="_MiscellaneousWorkOrderCost", ThisKey="MiscellaneousWorkOrderCostID", OtherKey="Id", IsForeignKey=true)]
		public MiscellaneousWorkOrderCost MiscellaneousWorkOrderCost
		{
			get
			{
				return this._MiscellaneousWorkOrderCost.Entity;
			}
			set
			{
				MiscellaneousWorkOrderCost previousValue = this._MiscellaneousWorkOrderCost.Entity;
				if (((previousValue != value)
							|| (this._MiscellaneousWorkOrderCost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MiscellaneousWorkOrderCost.Entity = null;
						previousValue.DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost.Remove(this);
					}
					this._MiscellaneousWorkOrderCost.Entity = value;
					if ((value != null))
					{
						value.DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost.Add(this);
						this._MiscellaneousWorkOrderCostID = value.Id;
					}
					else
					{
						this._MiscellaneousWorkOrderCostID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost(ActualMiscellaneousWorkOrderCost entity)
		{
			this.SendPropertyChanging();
			entity.DemandMiscellaneousWorkOrderCost = this;
		}
		private void detach_ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost(ActualMiscellaneousWorkOrderCost entity)
		{
			this.SendPropertyChanging();
			entity.DemandMiscellaneousWorkOrderCost = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemLocation")]
	public partial class ItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemLocation with labelkey='Storage Assignment'
		static public string ItemLocationLabelKey { get{return WOResourceLabelKdsMBLabel.K("Storage Assignment").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private System.Guid _ItemID;
		private System.Guid _LocationID;
		private System.Guid? _ItemPriceID;
		private EntitySet<DemandItem> _DemandItemItemLocation;
		private EntitySet<RationalizedInventoryActivityDeltas> _RationalizedInventoryActivityDeltasItemLocation;
		private EntityRef<Item> _Item;
		private EntityRef<Location> _Location;
		private EntityRef<ItemPrice> _ItemPrice;
		private EntityRef<ActualItemLocation> _DerivedActualItemLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnItemIDChanging(System.Guid value);
	partial void OnItemIDChanged();
	partial void OnLocationIDChanging(System.Guid value);
	partial void OnLocationIDChanged();
	partial void OnItemPriceIDChanging(System.Guid? value);
	partial void OnItemPriceIDChanged();
	#endregion

		public ItemLocation()
		{
			this._DemandItemItemLocation = new EntitySet<DemandItem>(new Action<DemandItem>(this.attach_DemandItemItemLocation), new Action<DemandItem>(this.detach_DemandItemItemLocation));
			this._RationalizedInventoryActivityDeltasItemLocation = new EntitySet<RationalizedInventoryActivityDeltas>(new Action<RationalizedInventoryActivityDeltas>(this.attach_RationalizedInventoryActivityDeltasItemLocation), new Action<RationalizedInventoryActivityDeltas>(this.detach_RationalizedInventoryActivityDeltasItemLocation));
			this._Item = default(EntityRef<Item>);
			this._Location = default(EntityRef<Location>);
			this._ItemPrice = default(EntityRef<ItemPrice>);
			this._DerivedActualItemLocation = default(EntityRef<ActualItemLocation>);
			OnCreated();
		}
		/// Denotes the ItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemLocation_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemLocation),Name="ItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ItemLocation's Code column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Code'
		static public string ItemLocation_Code{ get{return WOResourceLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemLocation),Name="ItemLocation_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR(MAX)", IsDbGenerated=true, AutoSync=AutoSync.Always, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the ItemLocation's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string ItemLocation_Hidden{ get{return WOResourceLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemLocation),Name="ItemLocation_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the ItemLocation's ItemID column with type link(nonnull, field Item.Id) with labelkey='Item'
		static public string ItemLocation_ItemID{ get{return WOResourceLabelKdsMBLabel.K("Item").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemLocation),Name="ItemLocation_ItemID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged();
					this.OnItemIDChanged();
				}
			}
		}
		/// Denotes the ItemLocation's LocationID column with type link(nonnull, field Location.Id) with labelkey='Location'
		static public string ItemLocation_LocationID{ get{return WOResourceLabelKdsMBLabel.K("Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemLocation),Name="ItemLocation_LocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged();
					this.OnLocationIDChanged();
				}
			}
		}
		/// Denotes the ItemLocation's ItemPriceID column with type link(field ItemPrice.Id) with labelkey='Preferred Price'
		static public string ItemLocation_ItemPriceID{ get{return WOResourceLabelKdsMBLabel.K("Preferred Price").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemLocation),Name="ItemLocation_ItemPriceID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemPriceID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? ItemPriceID
		{
			get
			{
				return this._ItemPriceID;
			}
			set
			{
				if ((this._ItemPriceID != value))
				{
					if (this._ItemPrice.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemPriceIDChanging(value);
					this.SendPropertyChanging();
					this._ItemPriceID = value;
					this.SendPropertyChanged();
					this.OnItemPriceIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_DemandItem", Storage="_DemandItemItemLocation", ThisKey="Id", OtherKey="ItemLocationID")]
		public EntitySet<DemandItem> DemandItemItemLocation
		{
			get
			{
				return this._DemandItemItemLocation;
			}
			set
			{
				this._DemandItemItemLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_DerivedActualItemLocation", Storage="_DerivedActualItemLocation", ThisKey="Id", OtherKey="ItemLocationID", IsUnique=true, IsForeignKey=false)]
		public ActualItemLocation DerivedActualItemLocation
		{
			get
			{
				return this._DerivedActualItemLocation.Entity;
			}
			set
			{
				ActualItemLocation previousValue = this._DerivedActualItemLocation.Entity;
				if (((previousValue != value)
							|| (this._DerivedActualItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedActualItemLocation.Entity = null;
						previousValue.BaseItemLocation = null;
					}
					this._DerivedActualItemLocation.Entity = value;
					if ((value != null))
					{
						value.BaseItemLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_RationalizedInventoryActivityDeltas", Storage="_RationalizedInventoryActivityDeltasItemLocation", ThisKey="Id", OtherKey="ItemLocationID")]
		public EntitySet<RationalizedInventoryActivityDeltas> RationalizedInventoryActivityDeltasItemLocation
		{
			get
			{
				return this._RationalizedInventoryActivityDeltasItemLocation;
			}
			set
			{
				this._RationalizedInventoryActivityDeltasItemLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemLocation", Storage="_Item", ThisKey="ItemID", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value)
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ItemLocationItem.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ItemLocationItem.Add(this);
						this._ItemID = value.Id;
					}
					else
					{
						this._ItemID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ItemLocation", Storage="_Location", ThisKey="LocationID", OtherKey="Id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value)
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.ItemLocationLocation.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.ItemLocationLocation.Add(this);
						this._LocationID = value.Id;
					}
					else
					{
						this._LocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemPrice_ItemLocation", Storage="_ItemPrice", ThisKey="ItemPriceID", OtherKey="Id", IsForeignKey=true)]
		public ItemPrice ItemPrice
		{
			get
			{
				return this._ItemPrice.Entity;
			}
			set
			{
				ItemPrice previousValue = this._ItemPrice.Entity;
				if (((previousValue != value)
							|| (this._ItemPrice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemPrice.Entity = null;
						previousValue.ItemLocationItemPrice.Remove(this);
					}
					this._ItemPrice.Entity = value;
					if ((value != null))
					{
						value.ItemLocationItemPrice.Add(this);
						this._ItemPriceID = value.Id;
					}
					else
					{
						this._ItemPriceID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_DemandItemItemLocation(DemandItem entity)
		{
			this.SendPropertyChanging();
			entity.ItemLocation = this;
		}
		private void detach_DemandItemItemLocation(DemandItem entity)
		{
			this.SendPropertyChanging();
			entity.ItemLocation = null;
		}

		private void attach_RationalizedInventoryActivityDeltasItemLocation(RationalizedInventoryActivityDeltas entity)
		{
			this.SendPropertyChanging();
			entity.ItemLocation = this;
		}
		private void detach_RationalizedInventoryActivityDeltasItemLocation(RationalizedInventoryActivityDeltas entity)
		{
			this.SendPropertyChanging();
			entity.ItemLocation = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActualItemLocation")]
	public partial class ActualItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ActualItemLocation with labelkey='Actual Item Location'
		static public string ActualItemLocationLabelKey { get{return WOResourceLabelKdsMBLabel.K("Actual Item Location").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _ItemLocationID;
		private System.Guid _CostCenterID;
		private int _EffectiveMinimum;
		private int _EffectiveMaximum;
		private int _OnHand;
		private int _OnOrder;
		private int _OnReserve;
		private int _Available;
		private int _Shortage;
		private System.Decimal? _UnitCost;
		private System.Decimal _TotalCost;
		private EntityRef<ItemLocation> _BaseItemLocation;
		private EntityRef<CostCenter> _CostCenter;
		private EntityRef<PermanentItemLocation> _DerivedPermanentItemLocation;
		private EntityRef<TemporaryItemLocation> _DerivedTemporaryItemLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnItemLocationIDChanging(System.Guid value);
	partial void OnItemLocationIDChanged();
	partial void OnCostCenterIDChanging(System.Guid value);
	partial void OnCostCenterIDChanged();
	partial void OnEffectiveMinimumChanging(int value);
	partial void OnEffectiveMinimumChanged();
	partial void OnEffectiveMaximumChanging(int value);
	partial void OnEffectiveMaximumChanged();
	partial void OnOnHandChanging(int value);
	partial void OnOnHandChanged();
	partial void OnOnOrderChanging(int value);
	partial void OnOnOrderChanged();
	partial void OnOnReserveChanging(int value);
	partial void OnOnReserveChanged();
	partial void OnAvailableChanging(int value);
	partial void OnAvailableChanged();
	partial void OnShortageChanging(int value);
	partial void OnShortageChanged();
	partial void OnUnitCostChanging(System.Decimal? value);
	partial void OnUnitCostChanged();
	partial void OnTotalCostChanging(System.Decimal value);
	partial void OnTotalCostChanged();
	#endregion

		public ActualItemLocation()
		{
			this._BaseItemLocation = default(EntityRef<ItemLocation>);
			this._CostCenter = default(EntityRef<CostCenter>);
			this._DerivedPermanentItemLocation = default(EntityRef<PermanentItemLocation>);
			this._DerivedTemporaryItemLocation = default(EntityRef<TemporaryItemLocation>);
			OnCreated();
		}
		/// Denotes the ActualItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string ActualItemLocation_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's ItemLocationID column with type link(nonnull, field ItemLocation.Id) with labelkey='Storage Assignment'
		static public string ActualItemLocation_ItemLocationID{ get{return WOResourceLabelKdsMBLabel.K("Storage Assignment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_ItemLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ItemLocationID
		{
			get
			{
				return this._ItemLocationID;
			}
			set
			{
				if ((this._ItemLocationID != value))
				{
					if (this._BaseItemLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ItemLocationID = value;
					this.SendPropertyChanged();
					this.OnItemLocationIDChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's CostCenterID column with type link(nonnull, field CostCenter.Id) with labelkey='Cost Center'
		static public string ActualItemLocation_CostCenterID{ get{return WOResourceLabelKdsMBLabel.K("Cost Center").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_CostCenterID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCenterID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CostCenterID
		{
			get
			{
				return this._CostCenterID;
			}
			set
			{
				if ((this._CostCenterID != value))
				{
					if (this._CostCenter.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CostCenterID = value;
					this.SendPropertyChanged();
					this.OnCostCenterIDChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's EffectiveMinimum column with type integer(nonnull, 32) with labelkey='EffectiveMinimum'
		static public string ActualItemLocation_EffectiveMinimum{ get{return WOResourceLabelKdsMBLabel.K("EffectiveMinimum").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_EffectiveMinimum")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveMinimum", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int EffectiveMinimum
		{
			get
			{
				return this._EffectiveMinimum;
			}
			set
			{
				if ((this._EffectiveMinimum != value))
				{
					this.OnEffectiveMinimumChanging(value);
					this.SendPropertyChanging();
					this._EffectiveMinimum = value;
					this.SendPropertyChanged();
					this.OnEffectiveMinimumChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's EffectiveMaximum column with type integer(nonnull, 32) with labelkey='EffectiveMaximum'
		static public string ActualItemLocation_EffectiveMaximum{ get{return WOResourceLabelKdsMBLabel.K("EffectiveMaximum").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_EffectiveMaximum")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveMaximum", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int EffectiveMaximum
		{
			get
			{
				return this._EffectiveMaximum;
			}
			set
			{
				if ((this._EffectiveMaximum != value))
				{
					this.OnEffectiveMaximumChanging(value);
					this.SendPropertyChanging();
					this._EffectiveMaximum = value;
					this.SendPropertyChanged();
					this.OnEffectiveMaximumChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's OnHand column with type integer(nonnull, 32) with labelkey='OnHand'
		static public string ActualItemLocation_OnHand{ get{return WOResourceLabelKdsMBLabel.K("OnHand").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_OnHand")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnHand", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnHand
		{
			get
			{
				return this._OnHand;
			}
			set
			{
				if ((this._OnHand != value))
				{
					this.OnOnHandChanging(value);
					this.SendPropertyChanging();
					this._OnHand = value;
					this.SendPropertyChanged();
					this.OnOnHandChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's OnOrder column with type integer(nonnull, 32) with labelkey='OnOrder'
		static public string ActualItemLocation_OnOrder{ get{return WOResourceLabelKdsMBLabel.K("OnOrder").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_OnOrder")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnOrder", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnOrder
		{
			get
			{
				return this._OnOrder;
			}
			set
			{
				if ((this._OnOrder != value))
				{
					this.OnOnOrderChanging(value);
					this.SendPropertyChanging();
					this._OnOrder = value;
					this.SendPropertyChanged();
					this.OnOnOrderChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's OnReserve column with type integer(nonnull, 32) with labelkey='OnReserve'
		static public string ActualItemLocation_OnReserve{ get{return WOResourceLabelKdsMBLabel.K("OnReserve").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_OnReserve")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnReserve", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnReserve
		{
			get
			{
				return this._OnReserve;
			}
			set
			{
				if ((this._OnReserve != value))
				{
					this.OnOnReserveChanging(value);
					this.SendPropertyChanging();
					this._OnReserve = value;
					this.SendPropertyChanged();
					this.OnOnReserveChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's Available column with type integer(nonnull, 32) with labelkey='Available'
		static public string ActualItemLocation_Available{ get{return WOResourceLabelKdsMBLabel.K("Available").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_Available")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="INT", CanBeNull=false, IsDbGenerated=true, AutoSync=AutoSync.Always, UpdateCheck=UpdateCheck.Never)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged();
					this.OnAvailableChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's Shortage column with type integer(nonnull, 32) with labelkey='Shortage'
		static public string ActualItemLocation_Shortage{ get{return WOResourceLabelKdsMBLabel.K("Shortage").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_Shortage")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shortage", DbType="INT", CanBeNull=false, IsDbGenerated=true, AutoSync=AutoSync.Always, UpdateCheck=UpdateCheck.Never)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Shortage
		{
			get
			{
				return this._Shortage;
			}
			set
			{
				if ((this._Shortage != value))
				{
					this.OnShortageChanging(value);
					this.SendPropertyChanging();
					this._Shortage = value;
					this.SendPropertyChanged();
					this.OnShortageChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's UnitCost column with type currency((min (¤922,337,203,685,477.5808)), (max ¤922,337,203,685,477.5807), by ¤0.0001) with labelkey='UnitCost'
		static public string ActualItemLocation_UnitCost{ get{return WOResourceLabelKdsMBLabel.K("UnitCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_UnitCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCost", DbType="MONEY", IsDbGenerated=true, AutoSync=AutoSync.Always, UpdateCheck=UpdateCheck.Never)]
		public System.Decimal? UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged();
					this.OnUnitCostChanged();
				}
			}
		}
		/// Denotes the ActualItemLocation's TotalCost column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='TotalCost'
		static public string ActualItemLocation_TotalCost{ get{return WOResourceLabelKdsMBLabel.K("TotalCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItemLocation),Name="ActualItemLocation_TotalCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged();
					this.OnTotalCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActualItemLocation_DerivedTemporaryItemLocation", Storage="_DerivedTemporaryItemLocation", ThisKey="Id", OtherKey="ActualItemLocationID", IsUnique=true, IsForeignKey=false)]
		public TemporaryItemLocation DerivedTemporaryItemLocation
		{
			get
			{
				return this._DerivedTemporaryItemLocation.Entity;
			}
			set
			{
				TemporaryItemLocation previousValue = this._DerivedTemporaryItemLocation.Entity;
				if (((previousValue != value)
							|| (this._DerivedTemporaryItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedTemporaryItemLocation.Entity = null;
						previousValue.BaseActualItemLocation = null;
					}
					this._DerivedTemporaryItemLocation.Entity = value;
					if ((value != null))
					{
						value.BaseActualItemLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActualItemLocation_DerivedPermanentItemLocation", Storage="_DerivedPermanentItemLocation", ThisKey="Id", OtherKey="ActualItemLocationID", IsUnique=true, IsForeignKey=false)]
		public PermanentItemLocation DerivedPermanentItemLocation
		{
			get
			{
				return this._DerivedPermanentItemLocation.Entity;
			}
			set
			{
				PermanentItemLocation previousValue = this._DerivedPermanentItemLocation.Entity;
				if (((previousValue != value)
							|| (this._DerivedPermanentItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedPermanentItemLocation.Entity = null;
						previousValue.BaseActualItemLocation = null;
					}
					this._DerivedPermanentItemLocation.Entity = value;
					if ((value != null))
					{
						value.BaseActualItemLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseItemLocation_ActualItemLocation", Storage="_BaseItemLocation", ThisKey="ItemLocationID", OtherKey="Id", IsForeignKey=true)]
		public ItemLocation BaseItemLocation
		{
			get
			{
				return this._BaseItemLocation.Entity;
			}
			set
			{
				ItemLocation previousValue = this._BaseItemLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseItemLocation.Entity = null;
					}
					this._BaseItemLocation.Entity = value;
					if ((value != null))
					{
						this._ItemLocationID = value.Id;
					}
					else
					{
						this._ItemLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_ActualItemLocation", Storage="_CostCenter", ThisKey="CostCenterID", OtherKey="Id", IsForeignKey=true)]
		public CostCenter CostCenter
		{
			get
			{
				return this._CostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._CostCenter.Entity;
				if (((previousValue != value)
							|| (this._CostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCenter.Entity = null;
						previousValue.ActualItemLocationCostCenter.Remove(this);
					}
					this._CostCenter.Entity = value;
					if ((value != null))
					{
						value.ActualItemLocationCostCenter.Add(this);
						this._CostCenterID = value.Id;
					}
					else
					{
						this._CostCenterID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActualItem")]
	public partial class ActualItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ActualItem with labelkey='Actual Item'
		static public string ActualItemLabelKey { get{return WOResourceLabelKdsMBLabel.K("Actual Item").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _AccountingTransactionID;
		private System.Guid _DemandItemID;
		private int _Quantity;
		private System.Guid _CorrectionID;
		private int? _CorrectedQuantity;
		private System.Decimal? _CorrectedCost;
		private int _TotalQuantity;
		private System.Decimal _TotalCost;
		private EntitySet<ActualItem> _ActualItemCorrection;
		private EntityRef<AccountingTransaction> _BaseAccountingTransaction;
		private EntityRef<DemandItem> _DemandItem;
		private EntityRef<ActualItem> _Correction;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnAccountingTransactionIDChanging(System.Guid value);
	partial void OnAccountingTransactionIDChanged();
	partial void OnDemandItemIDChanging(System.Guid value);
	partial void OnDemandItemIDChanged();
	partial void OnQuantityChanging(int value);
	partial void OnQuantityChanged();
	partial void OnCorrectionIDChanging(System.Guid value);
	partial void OnCorrectionIDChanged();
	partial void OnCorrectedQuantityChanging(int? value);
	partial void OnCorrectedQuantityChanged();
	partial void OnCorrectedCostChanging(System.Decimal? value);
	partial void OnCorrectedCostChanged();
	partial void OnTotalQuantityChanging(int value);
	partial void OnTotalQuantityChanged();
	partial void OnTotalCostChanging(System.Decimal value);
	partial void OnTotalCostChanged();
	#endregion

		public ActualItem()
		{
			this._ActualItemCorrection = new EntitySet<ActualItem>(new Action<ActualItem>(this.attach_ActualItemCorrection), new Action<ActualItem>(this.detach_ActualItemCorrection));
			this._BaseAccountingTransaction = default(EntityRef<AccountingTransaction>);
			this._DemandItem = default(EntityRef<DemandItem>);
			this._Correction = default(EntityRef<ActualItem>);
			OnCreated();
		}
		/// Denotes the ActualItem's Id column with type id(nonnull) with labelkey='Id'
		static public string ActualItem_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItem),Name="ActualItem_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ActualItem's AccountingTransactionID column with type link(nonnull, field AccountingTransaction.Id) with labelkey='Accounting Transaction'
		static public string ActualItem_AccountingTransactionID{ get{return WOResourceLabelKdsMBLabel.K("Accounting Transaction").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItem),Name="ActualItem_AccountingTransactionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingTransactionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid AccountingTransactionID
		{
			get
			{
				return this._AccountingTransactionID;
			}
			set
			{
				if ((this._AccountingTransactionID != value))
				{
					if (this._BaseAccountingTransaction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountingTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountingTransactionID = value;
					this.SendPropertyChanged();
					this.OnAccountingTransactionIDChanged();
				}
			}
		}
		/// Denotes the ActualItem's DemandItemID column with type link(nonnull, field DemandItem.Id) with labelkey='Demand Item'
		static public string ActualItem_DemandItemID{ get{return WOResourceLabelKdsMBLabel.K("Demand Item").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItem),Name="ActualItem_DemandItemID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandItemID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid DemandItemID
		{
			get
			{
				return this._DemandItemID;
			}
			set
			{
				if ((this._DemandItemID != value))
				{
					if (this._DemandItem.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemandItemIDChanging(value);
					this.SendPropertyChanging();
					this._DemandItemID = value;
					this.SendPropertyChanged();
					this.OnDemandItemIDChanged();
				}
			}
		}
		/// Denotes the ActualItem's Quantity column with type integer(nonnull, 32) with labelkey='Quantity'
		static public string ActualItem_Quantity{ get{return WOResourceLabelKdsMBLabel.K("Quantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItem),Name="ActualItem_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the ActualItem's CorrectionID column with type link(nonnull, field ActualItem.Id) with labelkey='Actual Item Correction'
		static public string ActualItem_CorrectionID{ get{return WOResourceLabelKdsMBLabel.K("Actual Item Correction").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItem),Name="ActualItem_CorrectionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CorrectionID
		{
			get
			{
				return this._CorrectionID;
			}
			set
			{
				if ((this._CorrectionID != value))
				{
					if (this._Correction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCorrectionIDChanging(value);
					this.SendPropertyChanging();
					this._CorrectionID = value;
					this.SendPropertyChanged();
					this.OnCorrectionIDChanged();
				}
			}
		}
		/// Denotes the ActualItem's CorrectedQuantity column with type integer(32) with labelkey='CorrectedQuantity'
		static public string ActualItem_CorrectedQuantity{ get{return WOResourceLabelKdsMBLabel.K("CorrectedQuantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItem),Name="ActualItem_CorrectedQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectedQuantity", DbType="INT")]
		public int? CorrectedQuantity
		{
			get
			{
				return this._CorrectedQuantity;
			}
			set
			{
				if ((this._CorrectedQuantity != value))
				{
					this.OnCorrectedQuantityChanging(value);
					this.SendPropertyChanging();
					this._CorrectedQuantity = value;
					this.SendPropertyChanged();
					this.OnCorrectedQuantityChanged();
				}
			}
		}
		/// Denotes the ActualItem's CorrectedCost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='CorrectedCost'
		static public string ActualItem_CorrectedCost{ get{return WOResourceLabelKdsMBLabel.K("CorrectedCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItem),Name="ActualItem_CorrectedCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectedCost", DbType="MONEY")]
		public System.Decimal? CorrectedCost
		{
			get
			{
				return this._CorrectedCost;
			}
			set
			{
				if ((this._CorrectedCost != value))
				{
					this.OnCorrectedCostChanging(value);
					this.SendPropertyChanging();
					this._CorrectedCost = value;
					this.SendPropertyChanged();
					this.OnCorrectedCostChanged();
				}
			}
		}
		/// Denotes the ActualItem's TotalQuantity column with type integer(nonnull, 32) with labelkey='TotalQuantity'
		static public string ActualItem_TotalQuantity{ get{return WOResourceLabelKdsMBLabel.K("TotalQuantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItem),Name="ActualItem_TotalQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalQuantity", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int TotalQuantity
		{
			get
			{
				return this._TotalQuantity;
			}
			set
			{
				if ((this._TotalQuantity != value))
				{
					this.OnTotalQuantityChanging(value);
					this.SendPropertyChanging();
					this._TotalQuantity = value;
					this.SendPropertyChanged();
					this.OnTotalQuantityChanged();
				}
			}
		}
		/// Denotes the ActualItem's TotalCost column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='TotalCost'
		static public string ActualItem_TotalCost{ get{return WOResourceLabelKdsMBLabel.K("TotalCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualItem),Name="ActualItem_TotalCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged();
					this.OnTotalCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActualItem_ActualItem", Storage="_ActualItemCorrection", ThisKey="Id", OtherKey="CorrectionID")]
		public EntitySet<ActualItem> ActualItemCorrection
		{
			get
			{
				return this._ActualItemCorrection;
			}
			set
			{
				this._ActualItemCorrection.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseAccountingTransaction_ActualItem", Storage="_BaseAccountingTransaction", ThisKey="AccountingTransactionID", OtherKey="Id", IsForeignKey=true)]
		public AccountingTransaction BaseAccountingTransaction
		{
			get
			{
				return this._BaseAccountingTransaction.Entity;
			}
			set
			{
				AccountingTransaction previousValue = this._BaseAccountingTransaction.Entity;
				if (((previousValue != value)
							|| (this._BaseAccountingTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseAccountingTransaction.Entity = null;
					}
					this._BaseAccountingTransaction.Entity = value;
					if ((value != null))
					{
						this._AccountingTransactionID = value.Id;
					}
					else
					{
						this._AccountingTransactionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DemandItem_ActualItem", Storage="_DemandItem", ThisKey="DemandItemID", OtherKey="Id", IsForeignKey=true)]
		public DemandItem DemandItem
		{
			get
			{
				return this._DemandItem.Entity;
			}
			set
			{
				DemandItem previousValue = this._DemandItem.Entity;
				if (((previousValue != value)
							|| (this._DemandItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DemandItem.Entity = null;
						previousValue.ActualItemDemandItem.Remove(this);
					}
					this._DemandItem.Entity = value;
					if ((value != null))
					{
						value.ActualItemDemandItem.Add(this);
						this._DemandItemID = value.Id;
					}
					else
					{
						this._DemandItemID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Correction_ActualItem", Storage="_Correction", ThisKey="CorrectionID", OtherKey="Id", IsForeignKey=true)]
		public ActualItem Correction
		{
			get
			{
				return this._Correction.Entity;
			}
			set
			{
				ActualItem previousValue = this._Correction.Entity;
				if (((previousValue != value)
							|| (this._Correction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Correction.Entity = null;
						previousValue.ActualItemCorrection.Remove(this);
					}
					this._Correction.Entity = value;
					if ((value != null))
					{
						value.ActualItemCorrection.Add(this);
						this._CorrectionID = value.Id;
					}
					else
					{
						this._CorrectionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ActualItemCorrection(ActualItem entity)
		{
			this.SendPropertyChanging();
			entity.Correction = this;
		}
		private void detach_ActualItemCorrection(ActualItem entity)
		{
			this.SendPropertyChanging();
			entity.Correction = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LaborInside")]
	public partial class LaborInside : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table LaborInside with labelkey='Hourly Inside'
		static public string LaborInsideLabelKey { get{return WOResourceLabelKdsMBLabel.K("Hourly Inside").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.Guid? _EmployeeID;
		private System.Guid? _TradeID;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private System.Guid _CostCenterID;
		private System.Decimal? _Cost;
		private EntitySet<DemandLaborInside> _DemandLaborInsideLaborInside;
		private EntityRef<Employee> _Employee;
		private EntityRef<Trade> _Trade;
		private EntityRef<CostCenter> _CostCenter;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnEmployeeIDChanging(System.Guid? value);
	partial void OnEmployeeIDChanged();
	partial void OnTradeIDChanging(System.Guid? value);
	partial void OnTradeIDChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnCostCenterIDChanging(System.Guid value);
	partial void OnCostCenterIDChanged();
	partial void OnCostChanging(System.Decimal? value);
	partial void OnCostChanged();
	#endregion

		public LaborInside()
		{
			this._DemandLaborInsideLaborInside = new EntitySet<DemandLaborInside>(new Action<DemandLaborInside>(this.attach_DemandLaborInsideLaborInside), new Action<DemandLaborInside>(this.detach_DemandLaborInsideLaborInside));
			this._Employee = default(EntityRef<Employee>);
			this._Trade = default(EntityRef<Trade>);
			this._CostCenter = default(EntityRef<CostCenter>);
			OnCreated();
		}
		/// Denotes the LaborInside's Id column with type id(nonnull) with labelkey='Id'
		static public string LaborInside_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.LaborInside),Name="LaborInside_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the LaborInside's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string LaborInside_Code{ get{return WOResourceLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.LaborInside),Name="LaborInside_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the LaborInside's EmployeeID column with type link(field Employee.Id) with labelkey='Employee'
		static public string LaborInside_EmployeeID{ get{return WOResourceLabelKdsMBLabel.K("Employee").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.LaborInside),Name="LaborInside_EmployeeID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged();
					this.OnEmployeeIDChanged();
				}
			}
		}
		/// Denotes the LaborInside's TradeID column with type link(field Trade.Id) with labelkey='Trade'
		static public string LaborInside_TradeID{ get{return WOResourceLabelKdsMBLabel.K("Trade").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.LaborInside),Name="LaborInside_TradeID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? TradeID
		{
			get
			{
				return this._TradeID;
			}
			set
			{
				if ((this._TradeID != value))
				{
					if (this._Trade.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTradeIDChanging(value);
					this.SendPropertyChanging();
					this._TradeID = value;
					this.SendPropertyChanged();
					this.OnTradeIDChanged();
				}
			}
		}
		/// Denotes the LaborInside's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string LaborInside_Hidden{ get{return WOResourceLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.LaborInside),Name="LaborInside_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the LaborInside's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string LaborInside_Desc{ get{return WOResourceLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.LaborInside),Name="LaborInside_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the LaborInside's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string LaborInside_Comment{ get{return WOResourceLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.LaborInside),Name="LaborInside_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the LaborInside's CostCenterID column with type link(nonnull, field CostCenter.Id) with labelkey='Cost Center'
		static public string LaborInside_CostCenterID{ get{return WOResourceLabelKdsMBLabel.K("Cost Center").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.LaborInside),Name="LaborInside_CostCenterID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCenterID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CostCenterID
		{
			get
			{
				return this._CostCenterID;
			}
			set
			{
				if ((this._CostCenterID != value))
				{
					if (this._CostCenter.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CostCenterID = value;
					this.SendPropertyChanged();
					this.OnCostCenterIDChanged();
				}
			}
		}
		/// Denotes the LaborInside's Cost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
		static public string LaborInside_Cost{ get{return WOResourceLabelKdsMBLabel.K("Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.LaborInside),Name="LaborInside_Cost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="MONEY")]
		public System.Decimal? Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged();
					this.OnCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LaborInside_DemandLaborInside", Storage="_DemandLaborInsideLaborInside", ThisKey="Id", OtherKey="LaborInsideID")]
		public EntitySet<DemandLaborInside> DemandLaborInsideLaborInside
		{
			get
			{
				return this._DemandLaborInsideLaborInside;
			}
			set
			{
				this._DemandLaborInsideLaborInside.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LaborInside", Storage="_Employee", ThisKey="EmployeeID", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value)
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.LaborInsideEmployee.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.LaborInsideEmployee.Add(this);
						this._EmployeeID = value.Id;
					}
					else
					{
						this._EmployeeID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trade_LaborInside", Storage="_Trade", ThisKey="TradeID", OtherKey="Id", IsForeignKey=true)]
		public Trade Trade
		{
			get
			{
				return this._Trade.Entity;
			}
			set
			{
				Trade previousValue = this._Trade.Entity;
				if (((previousValue != value)
							|| (this._Trade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trade.Entity = null;
						previousValue.LaborInsideTrade.Remove(this);
					}
					this._Trade.Entity = value;
					if ((value != null))
					{
						value.LaborInsideTrade.Add(this);
						this._TradeID = value.Id;
					}
					else
					{
						this._TradeID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_LaborInside", Storage="_CostCenter", ThisKey="CostCenterID", OtherKey="Id", IsForeignKey=true)]
		public CostCenter CostCenter
		{
			get
			{
				return this._CostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._CostCenter.Entity;
				if (((previousValue != value)
							|| (this._CostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCenter.Entity = null;
						previousValue.LaborInsideCostCenter.Remove(this);
					}
					this._CostCenter.Entity = value;
					if ((value != null))
					{
						value.LaborInsideCostCenter.Add(this);
						this._CostCenterID = value.Id;
					}
					else
					{
						this._CostCenterID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_DemandLaborInsideLaborInside(DemandLaborInside entity)
		{
			this.SendPropertyChanging();
			entity.LaborInside = this;
		}
		private void detach_DemandLaborInsideLaborInside(DemandLaborInside entity)
		{
			this.SendPropertyChanging();
			entity.LaborInside = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActualLaborInside")]
	public partial class ActualLaborInside : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ActualLaborInside with labelkey='Actual Hourly Inside'
		static public string ActualLaborInsideLabelKey { get{return WOResourceLabelKdsMBLabel.K("Actual Hourly Inside").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _AccountingTransactionID;
		private System.Guid _DemandLaborInsideID;
		private System.DateTime _Quantity;
		private System.Guid _CorrectionID;
		private System.DateTime? _CorrectedQuantity;
		private System.Decimal? _CorrectedCost;
		private EntitySet<ActualLaborInside> _ActualLaborInsideCorrection;
		private EntityRef<AccountingTransaction> _BaseAccountingTransaction;
		private EntityRef<DemandLaborInside> _DemandLaborInside;
		private EntityRef<ActualLaborInside> _Correction;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnAccountingTransactionIDChanging(System.Guid value);
	partial void OnAccountingTransactionIDChanged();
	partial void OnDemandLaborInsideIDChanging(System.Guid value);
	partial void OnDemandLaborInsideIDChanged();
	partial void OnQuantityChanging(System.DateTime value);
	partial void OnQuantityChanged();
	partial void OnCorrectionIDChanging(System.Guid value);
	partial void OnCorrectionIDChanged();
	partial void OnCorrectedQuantityChanging(System.DateTime? value);
	partial void OnCorrectedQuantityChanged();
	partial void OnCorrectedCostChanging(System.Decimal? value);
	partial void OnCorrectedCostChanged();
	#endregion

		public ActualLaborInside()
		{
			this._ActualLaborInsideCorrection = new EntitySet<ActualLaborInside>(new Action<ActualLaborInside>(this.attach_ActualLaborInsideCorrection), new Action<ActualLaborInside>(this.detach_ActualLaborInsideCorrection));
			this._BaseAccountingTransaction = default(EntityRef<AccountingTransaction>);
			this._DemandLaborInside = default(EntityRef<DemandLaborInside>);
			this._Correction = default(EntityRef<ActualLaborInside>);
			OnCreated();
		}
		/// Denotes the ActualLaborInside's Id column with type id(nonnull) with labelkey='Id'
		static public string ActualLaborInside_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualLaborInside),Name="ActualLaborInside_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ActualLaborInside's AccountingTransactionID column with type link(nonnull, field AccountingTransaction.Id) with labelkey='Accounting Transaction'
		static public string ActualLaborInside_AccountingTransactionID{ get{return WOResourceLabelKdsMBLabel.K("Accounting Transaction").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualLaborInside),Name="ActualLaborInside_AccountingTransactionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingTransactionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid AccountingTransactionID
		{
			get
			{
				return this._AccountingTransactionID;
			}
			set
			{
				if ((this._AccountingTransactionID != value))
				{
					if (this._BaseAccountingTransaction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountingTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountingTransactionID = value;
					this.SendPropertyChanged();
					this.OnAccountingTransactionIDChanged();
				}
			}
		}
		/// Denotes the ActualLaborInside's DemandLaborInsideID column with type link(nonnull, field DemandLaborInside.Id) with labelkey='Demand Hourly Inside'
		static public string ActualLaborInside_DemandLaborInsideID{ get{return WOResourceLabelKdsMBLabel.K("Demand Hourly Inside").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualLaborInside),Name="ActualLaborInside_DemandLaborInsideID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandLaborInsideID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid DemandLaborInsideID
		{
			get
			{
				return this._DemandLaborInsideID;
			}
			set
			{
				if ((this._DemandLaborInsideID != value))
				{
					if (this._DemandLaborInside.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemandLaborInsideIDChanging(value);
					this.SendPropertyChanging();
					this._DemandLaborInsideID = value;
					this.SendPropertyChanged();
					this.OnDemandLaborInsideIDChanged();
				}
			}
		}
		/// Denotes the ActualLaborInside's Quantity column with type interval(nonnull, min -876000:00, max 876000:00, by 0:01) with labelkey='Quantity'
		static public string ActualLaborInside_Quantity{ get{return WOResourceLabelKdsMBLabel.K("Quantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualLaborInside),Name="ActualLaborInside_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the ActualLaborInside's CorrectionID column with type link(nonnull, field ActualLaborInside.Id) with labelkey='Actual Hourly Inside Correction'
		static public string ActualLaborInside_CorrectionID{ get{return WOResourceLabelKdsMBLabel.K("Actual Hourly Inside Correction").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualLaborInside),Name="ActualLaborInside_CorrectionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CorrectionID
		{
			get
			{
				return this._CorrectionID;
			}
			set
			{
				if ((this._CorrectionID != value))
				{
					if (this._Correction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCorrectionIDChanging(value);
					this.SendPropertyChanging();
					this._CorrectionID = value;
					this.SendPropertyChanged();
					this.OnCorrectionIDChanged();
				}
			}
		}
		/// Denotes the ActualLaborInside's CorrectedQuantity column with type interval(min 0:00, max 876000:00, by 0:01) with labelkey='CorrectedQuantity'
		static public string ActualLaborInside_CorrectedQuantity{ get{return WOResourceLabelKdsMBLabel.K("CorrectedQuantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualLaborInside),Name="ActualLaborInside_CorrectedQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectedQuantity", DbType="DATETIME")]
		public System.DateTime? CorrectedQuantity
		{
			get
			{
				return this._CorrectedQuantity;
			}
			set
			{
				if ((this._CorrectedQuantity != value))
				{
					this.OnCorrectedQuantityChanging(value);
					this.SendPropertyChanging();
					this._CorrectedQuantity = value;
					this.SendPropertyChanged();
					this.OnCorrectedQuantityChanged();
				}
			}
		}
		/// Denotes the ActualLaborInside's CorrectedCost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='CorrectedCost'
		static public string ActualLaborInside_CorrectedCost{ get{return WOResourceLabelKdsMBLabel.K("CorrectedCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualLaborInside),Name="ActualLaborInside_CorrectedCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectedCost", DbType="MONEY")]
		public System.Decimal? CorrectedCost
		{
			get
			{
				return this._CorrectedCost;
			}
			set
			{
				if ((this._CorrectedCost != value))
				{
					this.OnCorrectedCostChanging(value);
					this.SendPropertyChanging();
					this._CorrectedCost = value;
					this.SendPropertyChanged();
					this.OnCorrectedCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActualLaborInside_ActualLaborInside", Storage="_ActualLaborInsideCorrection", ThisKey="Id", OtherKey="CorrectionID")]
		public EntitySet<ActualLaborInside> ActualLaborInsideCorrection
		{
			get
			{
				return this._ActualLaborInsideCorrection;
			}
			set
			{
				this._ActualLaborInsideCorrection.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseAccountingTransaction_ActualLaborInside", Storage="_BaseAccountingTransaction", ThisKey="AccountingTransactionID", OtherKey="Id", IsForeignKey=true)]
		public AccountingTransaction BaseAccountingTransaction
		{
			get
			{
				return this._BaseAccountingTransaction.Entity;
			}
			set
			{
				AccountingTransaction previousValue = this._BaseAccountingTransaction.Entity;
				if (((previousValue != value)
							|| (this._BaseAccountingTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseAccountingTransaction.Entity = null;
					}
					this._BaseAccountingTransaction.Entity = value;
					if ((value != null))
					{
						this._AccountingTransactionID = value.Id;
					}
					else
					{
						this._AccountingTransactionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DemandLaborInside_ActualLaborInside", Storage="_DemandLaborInside", ThisKey="DemandLaborInsideID", OtherKey="Id", IsForeignKey=true)]
		public DemandLaborInside DemandLaborInside
		{
			get
			{
				return this._DemandLaborInside.Entity;
			}
			set
			{
				DemandLaborInside previousValue = this._DemandLaborInside.Entity;
				if (((previousValue != value)
							|| (this._DemandLaborInside.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DemandLaborInside.Entity = null;
						previousValue.ActualLaborInsideDemandLaborInside.Remove(this);
					}
					this._DemandLaborInside.Entity = value;
					if ((value != null))
					{
						value.ActualLaborInsideDemandLaborInside.Add(this);
						this._DemandLaborInsideID = value.Id;
					}
					else
					{
						this._DemandLaborInsideID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Correction_ActualLaborInside", Storage="_Correction", ThisKey="CorrectionID", OtherKey="Id", IsForeignKey=true)]
		public ActualLaborInside Correction
		{
			get
			{
				return this._Correction.Entity;
			}
			set
			{
				ActualLaborInside previousValue = this._Correction.Entity;
				if (((previousValue != value)
							|| (this._Correction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Correction.Entity = null;
						previousValue.ActualLaborInsideCorrection.Remove(this);
					}
					this._Correction.Entity = value;
					if ((value != null))
					{
						value.ActualLaborInsideCorrection.Add(this);
						this._CorrectionID = value.Id;
					}
					else
					{
						this._CorrectionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ActualLaborInsideCorrection(ActualLaborInside entity)
		{
			this.SendPropertyChanging();
			entity.Correction = this;
		}
		private void detach_ActualLaborInsideCorrection(ActualLaborInside entity)
		{
			this.SendPropertyChanging();
			entity.Correction = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OtherWorkInside")]
	public partial class OtherWorkInside : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table OtherWorkInside with labelkey='Per Job Inside'
		static public string OtherWorkInsideLabelKey { get{return WOResourceLabelKdsMBLabel.K("Per Job Inside").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.Guid? _EmployeeID;
		private System.Guid? _TradeID;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private System.Guid _CostCenterID;
		private System.Decimal? _Cost;
		private EntitySet<DemandOtherWorkInside> _DemandOtherWorkInsideOtherWorkInside;
		private EntityRef<Employee> _Employee;
		private EntityRef<Trade> _Trade;
		private EntityRef<CostCenter> _CostCenter;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnEmployeeIDChanging(System.Guid? value);
	partial void OnEmployeeIDChanged();
	partial void OnTradeIDChanging(System.Guid? value);
	partial void OnTradeIDChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnCostCenterIDChanging(System.Guid value);
	partial void OnCostCenterIDChanged();
	partial void OnCostChanging(System.Decimal? value);
	partial void OnCostChanged();
	#endregion

		public OtherWorkInside()
		{
			this._DemandOtherWorkInsideOtherWorkInside = new EntitySet<DemandOtherWorkInside>(new Action<DemandOtherWorkInside>(this.attach_DemandOtherWorkInsideOtherWorkInside), new Action<DemandOtherWorkInside>(this.detach_DemandOtherWorkInsideOtherWorkInside));
			this._Employee = default(EntityRef<Employee>);
			this._Trade = default(EntityRef<Trade>);
			this._CostCenter = default(EntityRef<CostCenter>);
			OnCreated();
		}
		/// Denotes the OtherWorkInside's Id column with type id(nonnull) with labelkey='Id'
		static public string OtherWorkInside_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.OtherWorkInside),Name="OtherWorkInside_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the OtherWorkInside's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string OtherWorkInside_Code{ get{return WOResourceLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.OtherWorkInside),Name="OtherWorkInside_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the OtherWorkInside's EmployeeID column with type link(field Employee.Id) with labelkey='Employee'
		static public string OtherWorkInside_EmployeeID{ get{return WOResourceLabelKdsMBLabel.K("Employee").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.OtherWorkInside),Name="OtherWorkInside_EmployeeID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged();
					this.OnEmployeeIDChanged();
				}
			}
		}
		/// Denotes the OtherWorkInside's TradeID column with type link(field Trade.Id) with labelkey='Trade'
		static public string OtherWorkInside_TradeID{ get{return WOResourceLabelKdsMBLabel.K("Trade").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.OtherWorkInside),Name="OtherWorkInside_TradeID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? TradeID
		{
			get
			{
				return this._TradeID;
			}
			set
			{
				if ((this._TradeID != value))
				{
					if (this._Trade.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTradeIDChanging(value);
					this.SendPropertyChanging();
					this._TradeID = value;
					this.SendPropertyChanged();
					this.OnTradeIDChanged();
				}
			}
		}
		/// Denotes the OtherWorkInside's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string OtherWorkInside_Hidden{ get{return WOResourceLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.OtherWorkInside),Name="OtherWorkInside_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the OtherWorkInside's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string OtherWorkInside_Desc{ get{return WOResourceLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.OtherWorkInside),Name="OtherWorkInside_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the OtherWorkInside's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string OtherWorkInside_Comment{ get{return WOResourceLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.OtherWorkInside),Name="OtherWorkInside_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the OtherWorkInside's CostCenterID column with type link(nonnull, field CostCenter.Id) with labelkey='Cost Center'
		static public string OtherWorkInside_CostCenterID{ get{return WOResourceLabelKdsMBLabel.K("Cost Center").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.OtherWorkInside),Name="OtherWorkInside_CostCenterID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCenterID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CostCenterID
		{
			get
			{
				return this._CostCenterID;
			}
			set
			{
				if ((this._CostCenterID != value))
				{
					if (this._CostCenter.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CostCenterID = value;
					this.SendPropertyChanged();
					this.OnCostCenterIDChanged();
				}
			}
		}
		/// Denotes the OtherWorkInside's Cost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
		static public string OtherWorkInside_Cost{ get{return WOResourceLabelKdsMBLabel.K("Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.OtherWorkInside),Name="OtherWorkInside_Cost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="MONEY")]
		public System.Decimal? Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged();
					this.OnCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OtherWorkInside_DemandOtherWorkInside", Storage="_DemandOtherWorkInsideOtherWorkInside", ThisKey="Id", OtherKey="OtherWorkInsideID")]
		public EntitySet<DemandOtherWorkInside> DemandOtherWorkInsideOtherWorkInside
		{
			get
			{
				return this._DemandOtherWorkInsideOtherWorkInside;
			}
			set
			{
				this._DemandOtherWorkInsideOtherWorkInside.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OtherWorkInside", Storage="_Employee", ThisKey="EmployeeID", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value)
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OtherWorkInsideEmployee.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OtherWorkInsideEmployee.Add(this);
						this._EmployeeID = value.Id;
					}
					else
					{
						this._EmployeeID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trade_OtherWorkInside", Storage="_Trade", ThisKey="TradeID", OtherKey="Id", IsForeignKey=true)]
		public Trade Trade
		{
			get
			{
				return this._Trade.Entity;
			}
			set
			{
				Trade previousValue = this._Trade.Entity;
				if (((previousValue != value)
							|| (this._Trade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trade.Entity = null;
						previousValue.OtherWorkInsideTrade.Remove(this);
					}
					this._Trade.Entity = value;
					if ((value != null))
					{
						value.OtherWorkInsideTrade.Add(this);
						this._TradeID = value.Id;
					}
					else
					{
						this._TradeID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_OtherWorkInside", Storage="_CostCenter", ThisKey="CostCenterID", OtherKey="Id", IsForeignKey=true)]
		public CostCenter CostCenter
		{
			get
			{
				return this._CostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._CostCenter.Entity;
				if (((previousValue != value)
							|| (this._CostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCenter.Entity = null;
						previousValue.OtherWorkInsideCostCenter.Remove(this);
					}
					this._CostCenter.Entity = value;
					if ((value != null))
					{
						value.OtherWorkInsideCostCenter.Add(this);
						this._CostCenterID = value.Id;
					}
					else
					{
						this._CostCenterID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_DemandOtherWorkInsideOtherWorkInside(DemandOtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.OtherWorkInside = this;
		}
		private void detach_DemandOtherWorkInsideOtherWorkInside(DemandOtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.OtherWorkInside = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActualOtherWorkInside")]
	public partial class ActualOtherWorkInside : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ActualOtherWorkInside with labelkey='Actual Per Job Inside'
		static public string ActualOtherWorkInsideLabelKey { get{return WOResourceLabelKdsMBLabel.K("Actual Per Job Inside").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _AccountingTransactionID;
		private System.Guid _DemandOtherWorkInsideID;
		private int _Quantity;
		private System.Guid _CorrectionID;
		private int? _CorrectedQuantity;
		private System.Decimal? _CorrectedCost;
		private EntitySet<ActualOtherWorkInside> _ActualOtherWorkInsideCorrection;
		private EntityRef<AccountingTransaction> _BaseAccountingTransaction;
		private EntityRef<DemandOtherWorkInside> _DemandOtherWorkInside;
		private EntityRef<ActualOtherWorkInside> _Correction;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnAccountingTransactionIDChanging(System.Guid value);
	partial void OnAccountingTransactionIDChanged();
	partial void OnDemandOtherWorkInsideIDChanging(System.Guid value);
	partial void OnDemandOtherWorkInsideIDChanged();
	partial void OnQuantityChanging(int value);
	partial void OnQuantityChanged();
	partial void OnCorrectionIDChanging(System.Guid value);
	partial void OnCorrectionIDChanged();
	partial void OnCorrectedQuantityChanging(int? value);
	partial void OnCorrectedQuantityChanged();
	partial void OnCorrectedCostChanging(System.Decimal? value);
	partial void OnCorrectedCostChanged();
	#endregion

		public ActualOtherWorkInside()
		{
			this._ActualOtherWorkInsideCorrection = new EntitySet<ActualOtherWorkInside>(new Action<ActualOtherWorkInside>(this.attach_ActualOtherWorkInsideCorrection), new Action<ActualOtherWorkInside>(this.detach_ActualOtherWorkInsideCorrection));
			this._BaseAccountingTransaction = default(EntityRef<AccountingTransaction>);
			this._DemandOtherWorkInside = default(EntityRef<DemandOtherWorkInside>);
			this._Correction = default(EntityRef<ActualOtherWorkInside>);
			OnCreated();
		}
		/// Denotes the ActualOtherWorkInside's Id column with type id(nonnull) with labelkey='Id'
		static public string ActualOtherWorkInside_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualOtherWorkInside),Name="ActualOtherWorkInside_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ActualOtherWorkInside's AccountingTransactionID column with type link(nonnull, field AccountingTransaction.Id) with labelkey='Accounting Transaction'
		static public string ActualOtherWorkInside_AccountingTransactionID{ get{return WOResourceLabelKdsMBLabel.K("Accounting Transaction").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualOtherWorkInside),Name="ActualOtherWorkInside_AccountingTransactionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingTransactionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid AccountingTransactionID
		{
			get
			{
				return this._AccountingTransactionID;
			}
			set
			{
				if ((this._AccountingTransactionID != value))
				{
					if (this._BaseAccountingTransaction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountingTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountingTransactionID = value;
					this.SendPropertyChanged();
					this.OnAccountingTransactionIDChanged();
				}
			}
		}
		/// Denotes the ActualOtherWorkInside's DemandOtherWorkInsideID column with type link(nonnull, field DemandOtherWorkInside.Id) with labelkey='Demand Per Job Inside'
		static public string ActualOtherWorkInside_DemandOtherWorkInsideID{ get{return WOResourceLabelKdsMBLabel.K("Demand Per Job Inside").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualOtherWorkInside),Name="ActualOtherWorkInside_DemandOtherWorkInsideID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandOtherWorkInsideID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid DemandOtherWorkInsideID
		{
			get
			{
				return this._DemandOtherWorkInsideID;
			}
			set
			{
				if ((this._DemandOtherWorkInsideID != value))
				{
					if (this._DemandOtherWorkInside.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemandOtherWorkInsideIDChanging(value);
					this.SendPropertyChanging();
					this._DemandOtherWorkInsideID = value;
					this.SendPropertyChanged();
					this.OnDemandOtherWorkInsideIDChanged();
				}
			}
		}
		/// Denotes the ActualOtherWorkInside's Quantity column with type integer(nonnull, 32) with labelkey='Quantity'
		static public string ActualOtherWorkInside_Quantity{ get{return WOResourceLabelKdsMBLabel.K("Quantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualOtherWorkInside),Name="ActualOtherWorkInside_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the ActualOtherWorkInside's CorrectionID column with type link(nonnull, field ActualOtherWorkInside.Id) with labelkey='Actual Per Job Inside Correction'
		static public string ActualOtherWorkInside_CorrectionID{ get{return WOResourceLabelKdsMBLabel.K("Actual Per Job Inside Correction").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualOtherWorkInside),Name="ActualOtherWorkInside_CorrectionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CorrectionID
		{
			get
			{
				return this._CorrectionID;
			}
			set
			{
				if ((this._CorrectionID != value))
				{
					if (this._Correction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCorrectionIDChanging(value);
					this.SendPropertyChanging();
					this._CorrectionID = value;
					this.SendPropertyChanged();
					this.OnCorrectionIDChanged();
				}
			}
		}
		/// Denotes the ActualOtherWorkInside's CorrectedQuantity column with type integer(32) with labelkey='CorrectedQuantity'
		static public string ActualOtherWorkInside_CorrectedQuantity{ get{return WOResourceLabelKdsMBLabel.K("CorrectedQuantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualOtherWorkInside),Name="ActualOtherWorkInside_CorrectedQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectedQuantity", DbType="INT")]
		public int? CorrectedQuantity
		{
			get
			{
				return this._CorrectedQuantity;
			}
			set
			{
				if ((this._CorrectedQuantity != value))
				{
					this.OnCorrectedQuantityChanging(value);
					this.SendPropertyChanging();
					this._CorrectedQuantity = value;
					this.SendPropertyChanged();
					this.OnCorrectedQuantityChanged();
				}
			}
		}
		/// Denotes the ActualOtherWorkInside's CorrectedCost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='CorrectedCost'
		static public string ActualOtherWorkInside_CorrectedCost{ get{return WOResourceLabelKdsMBLabel.K("CorrectedCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualOtherWorkInside),Name="ActualOtherWorkInside_CorrectedCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectedCost", DbType="MONEY")]
		public System.Decimal? CorrectedCost
		{
			get
			{
				return this._CorrectedCost;
			}
			set
			{
				if ((this._CorrectedCost != value))
				{
					this.OnCorrectedCostChanging(value);
					this.SendPropertyChanging();
					this._CorrectedCost = value;
					this.SendPropertyChanged();
					this.OnCorrectedCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActualOtherWorkInside_ActualOtherWorkInside", Storage="_ActualOtherWorkInsideCorrection", ThisKey="Id", OtherKey="CorrectionID")]
		public EntitySet<ActualOtherWorkInside> ActualOtherWorkInsideCorrection
		{
			get
			{
				return this._ActualOtherWorkInsideCorrection;
			}
			set
			{
				this._ActualOtherWorkInsideCorrection.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseAccountingTransaction_ActualOtherWorkInside", Storage="_BaseAccountingTransaction", ThisKey="AccountingTransactionID", OtherKey="Id", IsForeignKey=true)]
		public AccountingTransaction BaseAccountingTransaction
		{
			get
			{
				return this._BaseAccountingTransaction.Entity;
			}
			set
			{
				AccountingTransaction previousValue = this._BaseAccountingTransaction.Entity;
				if (((previousValue != value)
							|| (this._BaseAccountingTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseAccountingTransaction.Entity = null;
					}
					this._BaseAccountingTransaction.Entity = value;
					if ((value != null))
					{
						this._AccountingTransactionID = value.Id;
					}
					else
					{
						this._AccountingTransactionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DemandOtherWorkInside_ActualOtherWorkInside", Storage="_DemandOtherWorkInside", ThisKey="DemandOtherWorkInsideID", OtherKey="Id", IsForeignKey=true)]
		public DemandOtherWorkInside DemandOtherWorkInside
		{
			get
			{
				return this._DemandOtherWorkInside.Entity;
			}
			set
			{
				DemandOtherWorkInside previousValue = this._DemandOtherWorkInside.Entity;
				if (((previousValue != value)
							|| (this._DemandOtherWorkInside.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DemandOtherWorkInside.Entity = null;
						previousValue.ActualOtherWorkInsideDemandOtherWorkInside.Remove(this);
					}
					this._DemandOtherWorkInside.Entity = value;
					if ((value != null))
					{
						value.ActualOtherWorkInsideDemandOtherWorkInside.Add(this);
						this._DemandOtherWorkInsideID = value.Id;
					}
					else
					{
						this._DemandOtherWorkInsideID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Correction_ActualOtherWorkInside", Storage="_Correction", ThisKey="CorrectionID", OtherKey="Id", IsForeignKey=true)]
		public ActualOtherWorkInside Correction
		{
			get
			{
				return this._Correction.Entity;
			}
			set
			{
				ActualOtherWorkInside previousValue = this._Correction.Entity;
				if (((previousValue != value)
							|| (this._Correction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Correction.Entity = null;
						previousValue.ActualOtherWorkInsideCorrection.Remove(this);
					}
					this._Correction.Entity = value;
					if ((value != null))
					{
						value.ActualOtherWorkInsideCorrection.Add(this);
						this._CorrectionID = value.Id;
					}
					else
					{
						this._CorrectionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ActualOtherWorkInsideCorrection(ActualOtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.Correction = this;
		}
		private void detach_ActualOtherWorkInsideCorrection(ActualOtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.Correction = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MiscellaneousWorkOrderCost")]
	public partial class MiscellaneousWorkOrderCost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table MiscellaneousWorkOrderCost with labelkey='Miscellaneous Cost'
		static public string MiscellaneousWorkOrderCostLabelKey { get{return WOResourceLabelKdsMBLabel.K("Miscellaneous Cost").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private System.Decimal? _Cost;
		private System.Guid _CostCenterID;
		private EntitySet<DemandMiscellaneousWorkOrderCost> _DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost;
		private EntityRef<CostCenter> _CostCenter;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnCostChanging(System.Decimal? value);
	partial void OnCostChanged();
	partial void OnCostCenterIDChanging(System.Guid value);
	partial void OnCostCenterIDChanged();
	#endregion

		public MiscellaneousWorkOrderCost()
		{
			this._DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost = new EntitySet<DemandMiscellaneousWorkOrderCost>(new Action<DemandMiscellaneousWorkOrderCost>(this.attach_DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost), new Action<DemandMiscellaneousWorkOrderCost>(this.detach_DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost));
			this._CostCenter = default(EntityRef<CostCenter>);
			OnCreated();
		}
		/// Denotes the MiscellaneousWorkOrderCost's Id column with type id(nonnull) with labelkey='Id'
		static public string MiscellaneousWorkOrderCost_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.MiscellaneousWorkOrderCost),Name="MiscellaneousWorkOrderCost_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the MiscellaneousWorkOrderCost's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string MiscellaneousWorkOrderCost_Code{ get{return WOResourceLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.MiscellaneousWorkOrderCost),Name="MiscellaneousWorkOrderCost_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the MiscellaneousWorkOrderCost's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string MiscellaneousWorkOrderCost_Hidden{ get{return WOResourceLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.MiscellaneousWorkOrderCost),Name="MiscellaneousWorkOrderCost_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the MiscellaneousWorkOrderCost's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string MiscellaneousWorkOrderCost_Desc{ get{return WOResourceLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.MiscellaneousWorkOrderCost),Name="MiscellaneousWorkOrderCost_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the MiscellaneousWorkOrderCost's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string MiscellaneousWorkOrderCost_Comment{ get{return WOResourceLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.MiscellaneousWorkOrderCost),Name="MiscellaneousWorkOrderCost_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the MiscellaneousWorkOrderCost's Cost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
		static public string MiscellaneousWorkOrderCost_Cost{ get{return WOResourceLabelKdsMBLabel.K("Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.MiscellaneousWorkOrderCost),Name="MiscellaneousWorkOrderCost_Cost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="MONEY")]
		public System.Decimal? Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged();
					this.OnCostChanged();
				}
			}
		}
		/// Denotes the MiscellaneousWorkOrderCost's CostCenterID column with type link(nonnull, field CostCenter.Id) with labelkey='Cost Center'
		static public string MiscellaneousWorkOrderCost_CostCenterID{ get{return WOResourceLabelKdsMBLabel.K("Cost Center").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.MiscellaneousWorkOrderCost),Name="MiscellaneousWorkOrderCost_CostCenterID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCenterID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CostCenterID
		{
			get
			{
				return this._CostCenterID;
			}
			set
			{
				if ((this._CostCenterID != value))
				{
					if (this._CostCenter.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CostCenterID = value;
					this.SendPropertyChanged();
					this.OnCostCenterIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MiscellaneousWorkOrderCost_DemandMiscellaneousWorkOrderCost", Storage="_DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost", ThisKey="Id", OtherKey="MiscellaneousWorkOrderCostID")]
		public EntitySet<DemandMiscellaneousWorkOrderCost> DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost
		{
			get
			{
				return this._DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost;
			}
			set
			{
				this._DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostCenter_MiscellaneousWorkOrderCost", Storage="_CostCenter", ThisKey="CostCenterID", OtherKey="Id", IsForeignKey=true)]
		public CostCenter CostCenter
		{
			get
			{
				return this._CostCenter.Entity;
			}
			set
			{
				CostCenter previousValue = this._CostCenter.Entity;
				if (((previousValue != value)
							|| (this._CostCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CostCenter.Entity = null;
						previousValue.MiscellaneousWorkOrderCostCostCenter.Remove(this);
					}
					this._CostCenter.Entity = value;
					if ((value != null))
					{
						value.MiscellaneousWorkOrderCostCostCenter.Add(this);
						this._CostCenterID = value.Id;
					}
					else
					{
						this._CostCenterID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost(DemandMiscellaneousWorkOrderCost entity)
		{
			this.SendPropertyChanging();
			entity.MiscellaneousWorkOrderCost = this;
		}
		private void detach_DemandMiscellaneousWorkOrderCostMiscellaneousWorkOrderCost(DemandMiscellaneousWorkOrderCost entity)
		{
			this.SendPropertyChanging();
			entity.MiscellaneousWorkOrderCost = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActualMiscellaneousWorkOrderCost")]
	public partial class ActualMiscellaneousWorkOrderCost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ActualMiscellaneousWorkOrderCost with labelkey='Actual Miscellaneous Cost'
		static public string ActualMiscellaneousWorkOrderCostLabelKey { get{return WOResourceLabelKdsMBLabel.K("Actual Miscellaneous Cost").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _AccountingTransactionID;
		private System.Guid _DemandMiscellaneousWorkOrderCostID;
		private System.Guid _CorrectionID;
		private System.Decimal? _CorrectedCost;
		private EntitySet<ActualMiscellaneousWorkOrderCost> _ActualMiscellaneousWorkOrderCostCorrection;
		private EntityRef<AccountingTransaction> _BaseAccountingTransaction;
		private EntityRef<DemandMiscellaneousWorkOrderCost> _DemandMiscellaneousWorkOrderCost;
		private EntityRef<ActualMiscellaneousWorkOrderCost> _Correction;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnAccountingTransactionIDChanging(System.Guid value);
	partial void OnAccountingTransactionIDChanged();
	partial void OnDemandMiscellaneousWorkOrderCostIDChanging(System.Guid value);
	partial void OnDemandMiscellaneousWorkOrderCostIDChanged();
	partial void OnCorrectionIDChanging(System.Guid value);
	partial void OnCorrectionIDChanged();
	partial void OnCorrectedCostChanging(System.Decimal? value);
	partial void OnCorrectedCostChanged();
	#endregion

		public ActualMiscellaneousWorkOrderCost()
		{
			this._ActualMiscellaneousWorkOrderCostCorrection = new EntitySet<ActualMiscellaneousWorkOrderCost>(new Action<ActualMiscellaneousWorkOrderCost>(this.attach_ActualMiscellaneousWorkOrderCostCorrection), new Action<ActualMiscellaneousWorkOrderCost>(this.detach_ActualMiscellaneousWorkOrderCostCorrection));
			this._BaseAccountingTransaction = default(EntityRef<AccountingTransaction>);
			this._DemandMiscellaneousWorkOrderCost = default(EntityRef<DemandMiscellaneousWorkOrderCost>);
			this._Correction = default(EntityRef<ActualMiscellaneousWorkOrderCost>);
			OnCreated();
		}
		/// Denotes the ActualMiscellaneousWorkOrderCost's Id column with type id(nonnull) with labelkey='Id'
		static public string ActualMiscellaneousWorkOrderCost_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualMiscellaneousWorkOrderCost),Name="ActualMiscellaneousWorkOrderCost_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the ActualMiscellaneousWorkOrderCost's AccountingTransactionID column with type link(nonnull, field AccountingTransaction.Id) with labelkey='Accounting Transaction'
		static public string ActualMiscellaneousWorkOrderCost_AccountingTransactionID{ get{return WOResourceLabelKdsMBLabel.K("Accounting Transaction").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualMiscellaneousWorkOrderCost),Name="ActualMiscellaneousWorkOrderCost_AccountingTransactionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingTransactionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid AccountingTransactionID
		{
			get
			{
				return this._AccountingTransactionID;
			}
			set
			{
				if ((this._AccountingTransactionID != value))
				{
					if (this._BaseAccountingTransaction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountingTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountingTransactionID = value;
					this.SendPropertyChanged();
					this.OnAccountingTransactionIDChanged();
				}
			}
		}
		/// Denotes the ActualMiscellaneousWorkOrderCost's DemandMiscellaneousWorkOrderCostID column with type link(nonnull, field DemandMiscellaneousWorkOrderCost.Id) with labelkey='Demand Miscellaneous Cost'
		static public string ActualMiscellaneousWorkOrderCost_DemandMiscellaneousWorkOrderCostID{ get{return WOResourceLabelKdsMBLabel.K("Demand Miscellaneous Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualMiscellaneousWorkOrderCost),Name="ActualMiscellaneousWorkOrderCost_DemandMiscellaneousWorkOrderCostID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemandMiscellaneousWorkOrderCostID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid DemandMiscellaneousWorkOrderCostID
		{
			get
			{
				return this._DemandMiscellaneousWorkOrderCostID;
			}
			set
			{
				if ((this._DemandMiscellaneousWorkOrderCostID != value))
				{
					if (this._DemandMiscellaneousWorkOrderCost.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemandMiscellaneousWorkOrderCostIDChanging(value);
					this.SendPropertyChanging();
					this._DemandMiscellaneousWorkOrderCostID = value;
					this.SendPropertyChanged();
					this.OnDemandMiscellaneousWorkOrderCostIDChanged();
				}
			}
		}
		/// Denotes the ActualMiscellaneousWorkOrderCost's CorrectionID column with type link(nonnull, field ActualMiscellaneousWorkOrderCost.Id) with labelkey='Actual Miscellaneous Cost Correction'
		static public string ActualMiscellaneousWorkOrderCost_CorrectionID{ get{return WOResourceLabelKdsMBLabel.K("Actual Miscellaneous Cost Correction").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualMiscellaneousWorkOrderCost),Name="ActualMiscellaneousWorkOrderCost_CorrectionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid CorrectionID
		{
			get
			{
				return this._CorrectionID;
			}
			set
			{
				if ((this._CorrectionID != value))
				{
					if (this._Correction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCorrectionIDChanging(value);
					this.SendPropertyChanging();
					this._CorrectionID = value;
					this.SendPropertyChanged();
					this.OnCorrectionIDChanged();
				}
			}
		}
		/// Denotes the ActualMiscellaneousWorkOrderCost's CorrectedCost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='CorrectedCost'
		static public string ActualMiscellaneousWorkOrderCost_CorrectedCost{ get{return WOResourceLabelKdsMBLabel.K("CorrectedCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ActualMiscellaneousWorkOrderCost),Name="ActualMiscellaneousWorkOrderCost_CorrectedCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CorrectedCost", DbType="MONEY")]
		public System.Decimal? CorrectedCost
		{
			get
			{
				return this._CorrectedCost;
			}
			set
			{
				if ((this._CorrectedCost != value))
				{
					this.OnCorrectedCostChanging(value);
					this.SendPropertyChanging();
					this._CorrectedCost = value;
					this.SendPropertyChanged();
					this.OnCorrectedCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActualMiscellaneousWorkOrderCost_ActualMiscellaneousWorkOrderCost", Storage="_ActualMiscellaneousWorkOrderCostCorrection", ThisKey="Id", OtherKey="CorrectionID")]
		public EntitySet<ActualMiscellaneousWorkOrderCost> ActualMiscellaneousWorkOrderCostCorrection
		{
			get
			{
				return this._ActualMiscellaneousWorkOrderCostCorrection;
			}
			set
			{
				this._ActualMiscellaneousWorkOrderCostCorrection.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseAccountingTransaction_ActualMiscellaneousWorkOrderCost", Storage="_BaseAccountingTransaction", ThisKey="AccountingTransactionID", OtherKey="Id", IsForeignKey=true)]
		public AccountingTransaction BaseAccountingTransaction
		{
			get
			{
				return this._BaseAccountingTransaction.Entity;
			}
			set
			{
				AccountingTransaction previousValue = this._BaseAccountingTransaction.Entity;
				if (((previousValue != value)
							|| (this._BaseAccountingTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseAccountingTransaction.Entity = null;
					}
					this._BaseAccountingTransaction.Entity = value;
					if ((value != null))
					{
						this._AccountingTransactionID = value.Id;
					}
					else
					{
						this._AccountingTransactionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DemandMiscellaneousWorkOrderCost_ActualMiscellaneousWorkOrderCost", Storage="_DemandMiscellaneousWorkOrderCost", ThisKey="DemandMiscellaneousWorkOrderCostID", OtherKey="Id", IsForeignKey=true)]
		public DemandMiscellaneousWorkOrderCost DemandMiscellaneousWorkOrderCost
		{
			get
			{
				return this._DemandMiscellaneousWorkOrderCost.Entity;
			}
			set
			{
				DemandMiscellaneousWorkOrderCost previousValue = this._DemandMiscellaneousWorkOrderCost.Entity;
				if (((previousValue != value)
							|| (this._DemandMiscellaneousWorkOrderCost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DemandMiscellaneousWorkOrderCost.Entity = null;
						previousValue.ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost.Remove(this);
					}
					this._DemandMiscellaneousWorkOrderCost.Entity = value;
					if ((value != null))
					{
						value.ActualMiscellaneousWorkOrderCostDemandMiscellaneousWorkOrderCost.Add(this);
						this._DemandMiscellaneousWorkOrderCostID = value.Id;
					}
					else
					{
						this._DemandMiscellaneousWorkOrderCostID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Correction_ActualMiscellaneousWorkOrderCost", Storage="_Correction", ThisKey="CorrectionID", OtherKey="Id", IsForeignKey=true)]
		public ActualMiscellaneousWorkOrderCost Correction
		{
			get
			{
				return this._Correction.Entity;
			}
			set
			{
				ActualMiscellaneousWorkOrderCost previousValue = this._Correction.Entity;
				if (((previousValue != value)
							|| (this._Correction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Correction.Entity = null;
						previousValue.ActualMiscellaneousWorkOrderCostCorrection.Remove(this);
					}
					this._Correction.Entity = value;
					if ((value != null))
					{
						value.ActualMiscellaneousWorkOrderCostCorrection.Add(this);
						this._CorrectionID = value.Id;
					}
					else
					{
						this._CorrectionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ActualMiscellaneousWorkOrderCostCorrection(ActualMiscellaneousWorkOrderCost entity)
		{
			this.SendPropertyChanging();
			entity.Correction = this;
		}
		private void detach_ActualMiscellaneousWorkOrderCostCorrection(ActualMiscellaneousWorkOrderCost entity)
		{
			this.SendPropertyChanging();
			entity.Correction = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermanentItemLocation")]
	public partial class PermanentItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PermanentItemLocation with labelkey='Permanent Item Location'
		static public string PermanentItemLocationLabelKey { get{return WOResourceLabelKdsMBLabel.K("Permanent Item Location").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private int _Maximum;
		private int _Minimum;
		private System.Guid _ActualItemLocationID;
		private string _ExternalTag;
		private System.Guid? _CurrentItemCountValueID;
		private EntityRef<ActualItemLocation> _BaseActualItemLocation;
		private EntityRef<ItemCountValue> _CurrentItemCountValue;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnMaximumChanging(int value);
	partial void OnMaximumChanged();
	partial void OnMinimumChanging(int value);
	partial void OnMinimumChanged();
	partial void OnActualItemLocationIDChanging(System.Guid value);
	partial void OnActualItemLocationIDChanged();
	partial void OnExternalTagChanging(string value);
	partial void OnExternalTagChanged();
	partial void OnCurrentItemCountValueIDChanging(System.Guid? value);
	partial void OnCurrentItemCountValueIDChanged();
	#endregion

		public PermanentItemLocation()
		{
			this._BaseActualItemLocation = default(EntityRef<ActualItemLocation>);
			this._CurrentItemCountValue = default(EntityRef<ItemCountValue>);
			OnCreated();
		}
		/// Denotes the PermanentItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string PermanentItemLocation_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PermanentItemLocation),Name="PermanentItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the PermanentItemLocation's Maximum column with type integer(nonnull, 32) with labelkey='Maximum'
		static public string PermanentItemLocation_Maximum{ get{return WOResourceLabelKdsMBLabel.K("Maximum").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PermanentItemLocation),Name="PermanentItemLocation_Maximum")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Maximum", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Maximum
		{
			get
			{
				return this._Maximum;
			}
			set
			{
				if ((this._Maximum != value))
				{
					this.OnMaximumChanging(value);
					this.SendPropertyChanging();
					this._Maximum = value;
					this.SendPropertyChanged();
					this.OnMaximumChanged();
				}
			}
		}
		/// Denotes the PermanentItemLocation's Minimum column with type integer(nonnull, 32) with labelkey='Minimum'
		static public string PermanentItemLocation_Minimum{ get{return WOResourceLabelKdsMBLabel.K("Minimum").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PermanentItemLocation),Name="PermanentItemLocation_Minimum")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Minimum", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Minimum
		{
			get
			{
				return this._Minimum;
			}
			set
			{
				if ((this._Minimum != value))
				{
					this.OnMinimumChanging(value);
					this.SendPropertyChanging();
					this._Minimum = value;
					this.SendPropertyChanged();
					this.OnMinimumChanged();
				}
			}
		}
		/// Denotes the PermanentItemLocation's ActualItemLocationID column with type link(nonnull, field ActualItemLocation.Id) with labelkey='Actual Item Location'
		static public string PermanentItemLocation_ActualItemLocationID{ get{return WOResourceLabelKdsMBLabel.K("Actual Item Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PermanentItemLocation),Name="PermanentItemLocation_ActualItemLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualItemLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ActualItemLocationID
		{
			get
			{
				return this._ActualItemLocationID;
			}
			set
			{
				if ((this._ActualItemLocationID != value))
				{
					if (this._BaseActualItemLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActualItemLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ActualItemLocationID = value;
					this.SendPropertyChanged();
					this.OnActualItemLocationIDChanged();
				}
			}
		}
		/// Denotes the PermanentItemLocation's ExternalTag column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='External Tag'
		static public string PermanentItemLocation_ExternalTag{ get{return WOResourceLabelKdsMBLabel.K("External Tag").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PermanentItemLocation),Name="PermanentItemLocation_ExternalTag")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalTag", DbType="NVARCHAR (50)")]
		public string ExternalTag
		{
			get
			{
				return this._ExternalTag;
			}
			set
			{
				if ((this._ExternalTag != value))
				{
					this.OnExternalTagChanging(value);
					this.SendPropertyChanging();
					this._ExternalTag = value;
					this.SendPropertyChanged();
					this.OnExternalTagChanged();
				}
			}
		}
		/// Denotes the PermanentItemLocation's CurrentItemCountValueID column with type link(field ItemCountValue.Id) with labelkey='Current Physical Count'
		static public string PermanentItemLocation_CurrentItemCountValueID{ get{return WOResourceLabelKdsMBLabel.K("Current Physical Count").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PermanentItemLocation),Name="PermanentItemLocation_CurrentItemCountValueID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentItemCountValueID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? CurrentItemCountValueID
		{
			get
			{
				return this._CurrentItemCountValueID;
			}
			set
			{
				if ((this._CurrentItemCountValueID != value))
				{
					if (this._CurrentItemCountValue.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentItemCountValueIDChanging(value);
					this.SendPropertyChanging();
					this._CurrentItemCountValueID = value;
					this.SendPropertyChanged();
					this.OnCurrentItemCountValueIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseActualItemLocation_PermanentItemLocation", Storage="_BaseActualItemLocation", ThisKey="ActualItemLocationID", OtherKey="Id", IsForeignKey=true)]
		public ActualItemLocation BaseActualItemLocation
		{
			get
			{
				return this._BaseActualItemLocation.Entity;
			}
			set
			{
				ActualItemLocation previousValue = this._BaseActualItemLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseActualItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseActualItemLocation.Entity = null;
					}
					this._BaseActualItemLocation.Entity = value;
					if ((value != null))
					{
						this._ActualItemLocationID = value.Id;
					}
					else
					{
						this._ActualItemLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrentItemCountValue_PermanentItemLocation", Storage="_CurrentItemCountValue", ThisKey="CurrentItemCountValueID", OtherKey="Id", IsForeignKey=true)]
		public ItemCountValue CurrentItemCountValue
		{
			get
			{
				return this._CurrentItemCountValue.Entity;
			}
			set
			{
				ItemCountValue previousValue = this._CurrentItemCountValue.Entity;
				if (((previousValue != value)
							|| (this._CurrentItemCountValue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentItemCountValue.Entity = null;
						previousValue.PermanentItemLocationCurrentItemCountValue.Remove(this);
					}
					this._CurrentItemCountValue.Entity = value;
					if ((value != null))
					{
						value.PermanentItemLocationCurrentItemCountValue.Add(this);
						this._CurrentItemCountValueID = value.Id;
					}
					else
					{
						this._CurrentItemCountValueID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemAdjustment")]
	public partial class ItemAdjustment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemAdjustment with labelkey='ItemAdjustment'
		static public string ItemAdjustmentLabelKey { get{return WOResourceLabelKdsMBLabel.K("ItemAdjustment").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemAdjustment()
		{
			OnCreated();
		}
		/// Denotes the ItemAdjustment's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemAdjustment_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemAdjustment),Name="ItemAdjustment_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemIssue")]
	public partial class ItemIssue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemIssue with labelkey='ItemIssue'
		static public string ItemIssueLabelKey { get{return WOResourceLabelKdsMBLabel.K("ItemIssue").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemIssue()
		{
			OnCreated();
		}
		/// Denotes the ItemIssue's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemIssue_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemIssue),Name="ItemIssue_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemTransfer")]
	public partial class ItemTransfer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemTransfer with labelkey='ItemTransfer'
		static public string ItemTransferLabelKey { get{return WOResourceLabelKdsMBLabel.K("ItemTransfer").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemTransfer()
		{
			OnCreated();
		}
		/// Denotes the ItemTransfer's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemTransfer_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemTransfer),Name="ItemTransfer_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReceiveItemPO")]
	public partial class ReceiveItemPO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ReceiveItemPO with labelkey='ReceiveItemPO'
		static public string ReceiveItemPOLabelKey { get{return WOResourceLabelKdsMBLabel.K("ReceiveItemPO").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ReceiveItemPO()
		{
			OnCreated();
		}
		/// Denotes the ReceiveItemPO's Id column with type id(nonnull) with labelkey='Id'
		static public string ReceiveItemPO_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ReceiveItemPO),Name="ReceiveItemPO_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReceiveItemNonPO")]
	public partial class ReceiveItemNonPO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ReceiveItemNonPO with labelkey='ReceiveItemNonPO'
		static public string ReceiveItemNonPOLabelKey { get{return WOResourceLabelKdsMBLabel.K("ReceiveItemNonPO").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ReceiveItemNonPO()
		{
			OnCreated();
		}
		/// Denotes the ReceiveItemNonPO's Id column with type id(nonnull) with labelkey='Id'
		static public string ReceiveItemNonPO_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ReceiveItemNonPO),Name="ReceiveItemNonPO_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RationalizedInventoryActivityDeltas")]
	public partial class RationalizedInventoryActivityDeltas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table RationalizedInventoryActivityDeltas with labelkey=''
		static public string RationalizedInventoryActivityDeltasLabelKey { get{return WOResourceLabelKdsMBLabel.K("").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _AccountingTransactionID;
		private System.Guid _ItemLocationID;
		private System.DateTime _EffectiveDate;
		private System.DateTime _EntryDate;
		private int? _Quantity;
		private System.Decimal? _Cost;
		private int _TotalQuantity;
		private System.Decimal _TotalCost;
		private EntityRef<AccountingTransaction> _AccountingTransaction;
		private EntityRef<ItemLocation> _ItemLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnAccountingTransactionIDChanging(System.Guid value);
	partial void OnAccountingTransactionIDChanged();
	partial void OnItemLocationIDChanging(System.Guid value);
	partial void OnItemLocationIDChanged();
	partial void OnEffectiveDateChanging(System.DateTime value);
	partial void OnEffectiveDateChanged();
	partial void OnEntryDateChanging(System.DateTime value);
	partial void OnEntryDateChanged();
	partial void OnQuantityChanging(int? value);
	partial void OnQuantityChanged();
	partial void OnCostChanging(System.Decimal? value);
	partial void OnCostChanged();
	partial void OnTotalQuantityChanging(int value);
	partial void OnTotalQuantityChanged();
	partial void OnTotalCostChanging(System.Decimal value);
	partial void OnTotalCostChanged();
	#endregion

		public RationalizedInventoryActivityDeltas()
		{
			this._AccountingTransaction = default(EntityRef<AccountingTransaction>);
			this._ItemLocation = default(EntityRef<ItemLocation>);
			OnCreated();
		}
		/// Denotes the RationalizedInventoryActivityDeltas's Id column with type id(nonnull) with labelkey='Id'
		static public string RationalizedInventoryActivityDeltas_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's AccountingTransactionID column with type link(nonnull, field AccountingTransaction.Id) with labelkey=''
		static public string RationalizedInventoryActivityDeltas_AccountingTransactionID{ get{return WOResourceLabelKdsMBLabel.K("").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_AccountingTransactionID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountingTransactionID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid AccountingTransactionID
		{
			get
			{
				return this._AccountingTransactionID;
			}
			set
			{
				if ((this._AccountingTransactionID != value))
				{
					if (this._AccountingTransaction.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountingTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._AccountingTransactionID = value;
					this.SendPropertyChanged();
					this.OnAccountingTransactionIDChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's ItemLocationID column with type link(nonnull, field ItemLocation.Id) with labelkey='Storage Assignment'
		static public string RationalizedInventoryActivityDeltas_ItemLocationID{ get{return WOResourceLabelKdsMBLabel.K("Storage Assignment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_ItemLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ItemLocationID
		{
			get
			{
				return this._ItemLocationID;
			}
			set
			{
				if ((this._ItemLocationID != value))
				{
					if (this._ItemLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ItemLocationID = value;
					this.SendPropertyChanged();
					this.OnItemLocationIDChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's EffectiveDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EffectiveDate'
		static public string RationalizedInventoryActivityDeltas_EffectiveDate{ get{return WOResourceLabelKdsMBLabel.K("EffectiveDate").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_EffectiveDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged();
					this.OnEffectiveDateChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's EntryDate column with type datetime(nonnull, (min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='EntryDate'
		static public string RationalizedInventoryActivityDeltas_EntryDate{ get{return WOResourceLabelKdsMBLabel.K("EntryDate").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_EntryDate")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DATETIME", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged();
					this.OnEntryDateChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's Quantity column with type integer(32) with labelkey='Quantity'
		static public string RationalizedInventoryActivityDeltas_Quantity{ get{return WOResourceLabelKdsMBLabel.K("Quantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="INT")]
		public int? Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's Cost column with type currency((min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='Cost'
		static public string RationalizedInventoryActivityDeltas_Cost{ get{return WOResourceLabelKdsMBLabel.K("Cost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_Cost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="MONEY")]
		public System.Decimal? Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged();
					this.OnCostChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's TotalQuantity column with type integer(nonnull, 32) with labelkey='TotalQuantity'
		static public string RationalizedInventoryActivityDeltas_TotalQuantity{ get{return WOResourceLabelKdsMBLabel.K("TotalQuantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_TotalQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalQuantity", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int TotalQuantity
		{
			get
			{
				return this._TotalQuantity;
			}
			set
			{
				if ((this._TotalQuantity != value))
				{
					this.OnTotalQuantityChanging(value);
					this.SendPropertyChanging();
					this._TotalQuantity = value;
					this.SendPropertyChanged();
					this.OnTotalQuantityChanged();
				}
			}
		}
		/// Denotes the RationalizedInventoryActivityDeltas's TotalCost column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='TotalCost'
		static public string RationalizedInventoryActivityDeltas_TotalCost{ get{return WOResourceLabelKdsMBLabel.K("TotalCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RationalizedInventoryActivityDeltas),Name="RationalizedInventoryActivityDeltas_TotalCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged();
					this.OnTotalCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountingTransaction_RationalizedInventoryActivityDeltas", Storage="_AccountingTransaction", ThisKey="AccountingTransactionID", OtherKey="Id", IsForeignKey=true)]
		public AccountingTransaction AccountingTransaction
		{
			get
			{
				return this._AccountingTransaction.Entity;
			}
			set
			{
				AccountingTransaction previousValue = this._AccountingTransaction.Entity;
				if (((previousValue != value)
							|| (this._AccountingTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountingTransaction.Entity = null;
						previousValue.RationalizedInventoryActivityDeltasAccountingTransaction.Remove(this);
					}
					this._AccountingTransaction.Entity = value;
					if ((value != null))
					{
						value.RationalizedInventoryActivityDeltasAccountingTransaction.Add(this);
						this._AccountingTransactionID = value.Id;
					}
					else
					{
						this._AccountingTransactionID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemLocation_RationalizedInventoryActivityDeltas", Storage="_ItemLocation", ThisKey="ItemLocationID", OtherKey="Id", IsForeignKey=true)]
		public ItemLocation ItemLocation
		{
			get
			{
				return this._ItemLocation.Entity;
			}
			set
			{
				ItemLocation previousValue = this._ItemLocation.Entity;
				if (((previousValue != value)
							|| (this._ItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemLocation.Entity = null;
						previousValue.RationalizedInventoryActivityDeltasItemLocation.Remove(this);
					}
					this._ItemLocation.Entity = value;
					if ((value != null))
					{
						value.RationalizedInventoryActivityDeltasItemLocation.Add(this);
						this._ItemLocationID = value.Id;
					}
					else
					{
						this._ItemLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Employee with labelkey='Employee'
		static public string EmployeeLabelKey { get{return WOResourceLabelKdsMBLabel.K("Employee").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _ContactID;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private EntitySet<LaborInside> _LaborInsideEmployee;
		private EntitySet<OtherWorkInside> _OtherWorkInsideEmployee;
		private EntityRef<Contact> _Contact;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnContactIDChanging(System.Guid value);
	partial void OnContactIDChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	#endregion

		public Employee()
		{
			this._LaborInsideEmployee = new EntitySet<LaborInside>(new Action<LaborInside>(this.attach_LaborInsideEmployee), new Action<LaborInside>(this.detach_LaborInsideEmployee));
			this._OtherWorkInsideEmployee = new EntitySet<OtherWorkInside>(new Action<OtherWorkInside>(this.attach_OtherWorkInsideEmployee), new Action<OtherWorkInside>(this.detach_OtherWorkInsideEmployee));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		/// Denotes the Employee's Id column with type id(nonnull) with labelkey='Id'
		static public string Employee_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Employee),Name="Employee_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Employee's ContactID column with type link(nonnull, field Contact.Id) with labelkey='Contact'
		static public string Employee_ContactID{ get{return WOResourceLabelKdsMBLabel.K("Contact").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Employee),Name="Employee_ContactID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged();
					this.OnContactIDChanged();
				}
			}
		}
		/// Denotes the Employee's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string Employee_Hidden{ get{return WOResourceLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Employee),Name="Employee_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the Employee's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string Employee_Desc{ get{return WOResourceLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Employee),Name="Employee_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the Employee's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string Employee_Comment{ get{return WOResourceLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Employee),Name="Employee_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_LaborInside", Storage="_LaborInsideEmployee", ThisKey="Id", OtherKey="EmployeeID")]
		public EntitySet<LaborInside> LaborInsideEmployee
		{
			get
			{
				return this._LaborInsideEmployee;
			}
			set
			{
				this._LaborInsideEmployee.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OtherWorkInside", Storage="_OtherWorkInsideEmployee", ThisKey="Id", OtherKey="EmployeeID")]
		public EntitySet<OtherWorkInside> OtherWorkInsideEmployee
		{
			get
			{
				return this._OtherWorkInsideEmployee;
			}
			set
			{
				this._OtherWorkInsideEmployee.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Employee", Storage="_Contact", ThisKey="ContactID", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value)
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.EmployeeContact.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.EmployeeContact.Add(this);
						this._ContactID = value.Id;
					}
					else
					{
						this._ContactID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_LaborInsideEmployee(LaborInside entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		private void detach_LaborInsideEmployee(LaborInside entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}

		private void attach_OtherWorkInsideEmployee(OtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		private void detach_OtherWorkInsideEmployee(OtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trade")]
	public partial class Trade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Trade with labelkey='Trade'
		static public string TradeLabelKey { get{return WOResourceLabelKdsMBLabel.K("Trade").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private EntitySet<LaborInside> _LaborInsideTrade;
		private EntitySet<OtherWorkInside> _OtherWorkInsideTrade;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	#endregion

		public Trade()
		{
			this._LaborInsideTrade = new EntitySet<LaborInside>(new Action<LaborInside>(this.attach_LaborInsideTrade), new Action<LaborInside>(this.detach_LaborInsideTrade));
			this._OtherWorkInsideTrade = new EntitySet<OtherWorkInside>(new Action<OtherWorkInside>(this.attach_OtherWorkInsideTrade), new Action<OtherWorkInside>(this.detach_OtherWorkInsideTrade));
			OnCreated();
		}
		/// Denotes the Trade's Id column with type id(nonnull) with labelkey='Id'
		static public string Trade_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Trade),Name="Trade_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Trade's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string Trade_Code{ get{return WOResourceLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Trade),Name="Trade_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the Trade's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string Trade_Hidden{ get{return WOResourceLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Trade),Name="Trade_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the Trade's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string Trade_Desc{ get{return WOResourceLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Trade),Name="Trade_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the Trade's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string Trade_Comment{ get{return WOResourceLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Trade),Name="Trade_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trade_LaborInside", Storage="_LaborInsideTrade", ThisKey="Id", OtherKey="TradeID")]
		public EntitySet<LaborInside> LaborInsideTrade
		{
			get
			{
				return this._LaborInsideTrade;
			}
			set
			{
				this._LaborInsideTrade.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trade_OtherWorkInside", Storage="_OtherWorkInsideTrade", ThisKey="Id", OtherKey="TradeID")]
		public EntitySet<OtherWorkInside> OtherWorkInsideTrade
		{
			get
			{
				return this._OtherWorkInsideTrade;
			}
			set
			{
				this._OtherWorkInsideTrade.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_LaborInsideTrade(LaborInside entity)
		{
			this.SendPropertyChanging();
			entity.Trade = this;
		}
		private void detach_LaborInsideTrade(LaborInside entity)
		{
			this.SendPropertyChanging();
			entity.Trade = null;
		}

		private void attach_OtherWorkInsideTrade(OtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.Trade = this;
		}
		private void detach_OtherWorkInsideTrade(OtherWorkInside entity)
		{
			this.SendPropertyChanging();
			entity.Trade = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Contact with labelkey='Contact'
		static public string ContactLabelKey { get{return WOResourceLabelKdsMBLabel.K("Contact").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private System.DateTime? _Hidden;
		private string _Comment;
		private string _BusinessPhone;
		private string _FaxPhone;
		private string _HomePhone;
		private string _PagerPhone;
		private string _MobilePhone;
		private string _Email;
		private string _AlternateEmail;
		private string _WebURL;
		private System.Guid? _LDAPGuid;
		private System.Guid? _LocationID;
		private int? _PreferredLanguage;
		private EntitySet<Employee> _EmployeeContact;
		private EntitySet<User> _UserContact;
		private EntityRef<Location> _Location;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnBusinessPhoneChanging(string value);
	partial void OnBusinessPhoneChanged();
	partial void OnFaxPhoneChanging(string value);
	partial void OnFaxPhoneChanged();
	partial void OnHomePhoneChanging(string value);
	partial void OnHomePhoneChanged();
	partial void OnPagerPhoneChanging(string value);
	partial void OnPagerPhoneChanged();
	partial void OnMobilePhoneChanging(string value);
	partial void OnMobilePhoneChanged();
	partial void OnEmailChanging(string value);
	partial void OnEmailChanged();
	partial void OnAlternateEmailChanging(string value);
	partial void OnAlternateEmailChanged();
	partial void OnWebURLChanging(string value);
	partial void OnWebURLChanged();
	partial void OnLDAPGuidChanging(System.Guid? value);
	partial void OnLDAPGuidChanged();
	partial void OnLocationIDChanging(System.Guid? value);
	partial void OnLocationIDChanged();
	partial void OnPreferredLanguageChanging(int? value);
	partial void OnPreferredLanguageChanged();
	#endregion

		public Contact()
		{
			this._EmployeeContact = new EntitySet<Employee>(new Action<Employee>(this.attach_EmployeeContact), new Action<Employee>(this.detach_EmployeeContact));
			this._UserContact = new EntitySet<User>(new Action<User>(this.attach_UserContact), new Action<User>(this.detach_UserContact));
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		/// Denotes the Contact's Id column with type id(nonnull) with labelkey='Id'
		static public string Contact_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Contact's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string Contact_Code{ get{return WOResourceLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the Contact's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string Contact_Hidden{ get{return WOResourceLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the Contact's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string Contact_Comment{ get{return WOResourceLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the Contact's BusinessPhone column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='BusinessPhone'
		static public string Contact_BusinessPhone{ get{return WOResourceLabelKdsMBLabel.K("BusinessPhone").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_BusinessPhone")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessPhone", DbType="NVARCHAR (50)")]
		public string BusinessPhone
		{
			get
			{
				return this._BusinessPhone;
			}
			set
			{
				if ((this._BusinessPhone != value))
				{
					this.OnBusinessPhoneChanging(value);
					this.SendPropertyChanging();
					this._BusinessPhone = value;
					this.SendPropertyChanged();
					this.OnBusinessPhoneChanged();
				}
			}
		}
		/// Denotes the Contact's FaxPhone column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='FaxPhone'
		static public string Contact_FaxPhone{ get{return WOResourceLabelKdsMBLabel.K("FaxPhone").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_FaxPhone")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaxPhone", DbType="NVARCHAR (50)")]
		public string FaxPhone
		{
			get
			{
				return this._FaxPhone;
			}
			set
			{
				if ((this._FaxPhone != value))
				{
					this.OnFaxPhoneChanging(value);
					this.SendPropertyChanging();
					this._FaxPhone = value;
					this.SendPropertyChanged();
					this.OnFaxPhoneChanged();
				}
			}
		}
		/// Denotes the Contact's HomePhone column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='HomePhone'
		static public string Contact_HomePhone{ get{return WOResourceLabelKdsMBLabel.K("HomePhone").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_HomePhone")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="NVARCHAR (50)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged();
					this.OnHomePhoneChanged();
				}
			}
		}
		/// Denotes the Contact's PagerPhone column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='PagerPhone'
		static public string Contact_PagerPhone{ get{return WOResourceLabelKdsMBLabel.K("PagerPhone").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_PagerPhone")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PagerPhone", DbType="NVARCHAR (50)")]
		public string PagerPhone
		{
			get
			{
				return this._PagerPhone;
			}
			set
			{
				if ((this._PagerPhone != value))
				{
					this.OnPagerPhoneChanging(value);
					this.SendPropertyChanging();
					this._PagerPhone = value;
					this.SendPropertyChanged();
					this.OnPagerPhoneChanged();
				}
			}
		}
		/// Denotes the Contact's MobilePhone column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='MobilePhone'
		static public string Contact_MobilePhone{ get{return WOResourceLabelKdsMBLabel.K("MobilePhone").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_MobilePhone")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="NVARCHAR (50)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged();
					this.OnMobilePhoneChanged();
				}
			}
		}
		/// Denotes the Contact's Email column with type string(minlength 1, maxlength 128, maxlines 0, trim) with labelkey='Email'
		static public string Contact_Email{ get{return WOResourceLabelKdsMBLabel.K("Email").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_Email")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVARCHAR (128)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged();
					this.OnEmailChanged();
				}
			}
		}
		/// Denotes the Contact's AlternateEmail column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Alternate Email'
		static public string Contact_AlternateEmail{ get{return WOResourceLabelKdsMBLabel.K("Alternate Email").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_AlternateEmail")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternateEmail", DbType="NVARCHAR(MAX)")]
		public string AlternateEmail
		{
			get
			{
				return this._AlternateEmail;
			}
			set
			{
				if ((this._AlternateEmail != value))
				{
					this.OnAlternateEmailChanging(value);
					this.SendPropertyChanging();
					this._AlternateEmail = value;
					this.SendPropertyChanged();
					this.OnAlternateEmailChanged();
				}
			}
		}
		/// Denotes the Contact's WebURL column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='WebURL'
		static public string Contact_WebURL{ get{return WOResourceLabelKdsMBLabel.K("WebURL").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_WebURL")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebURL", DbType="NVARCHAR(MAX)")]
		public string WebURL
		{
			get
			{
				return this._WebURL;
			}
			set
			{
				if ((this._WebURL != value))
				{
					this.OnWebURLChanging(value);
					this.SendPropertyChanging();
					this._WebURL = value;
					this.SendPropertyChanged();
					this.OnWebURLChanged();
				}
			}
		}
		/// Denotes the Contact's LDAPGuid column with type id with labelkey='AD Reference'
		static public string Contact_LDAPGuid{ get{return WOResourceLabelKdsMBLabel.K("AD Reference").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_LDAPGuid")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LDAPGuid", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? LDAPGuid
		{
			get
			{
				return this._LDAPGuid;
			}
			set
			{
				if ((this._LDAPGuid != value))
				{
					this.OnLDAPGuidChanging(value);
					this.SendPropertyChanging();
					this._LDAPGuid = value;
					this.SendPropertyChanged();
					this.OnLDAPGuidChanged();
				}
			}
		}
		/// Denotes the Contact's LocationID column with type link(field Location.Id) with labelkey='Location'
		static public string Contact_LocationID{ get{return WOResourceLabelKdsMBLabel.K("Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_LocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged();
					this.OnLocationIDChanged();
				}
			}
		}
		/// Denotes the Contact's PreferredLanguage column with type integer(32) with labelkey='PreferredLanguage'
		static public string Contact_PreferredLanguage{ get{return WOResourceLabelKdsMBLabel.K("PreferredLanguage").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Contact),Name="Contact_PreferredLanguage")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferredLanguage", DbType="INT")]
		public int? PreferredLanguage
		{
			get
			{
				return this._PreferredLanguage;
			}
			set
			{
				if ((this._PreferredLanguage != value))
				{
					this.OnPreferredLanguageChanging(value);
					this.SendPropertyChanging();
					this._PreferredLanguage = value;
					this.SendPropertyChanged();
					this.OnPreferredLanguageChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Employee", Storage="_EmployeeContact", ThisKey="Id", OtherKey="ContactID")]
		public EntitySet<Employee> EmployeeContact
		{
			get
			{
				return this._EmployeeContact;
			}
			set
			{
				this._EmployeeContact.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_User", Storage="_UserContact", ThisKey="Id", OtherKey="ContactID")]
		public EntitySet<User> UserContact
		{
			get
			{
				return this._UserContact;
			}
			set
			{
				this._UserContact.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Contact", Storage="_Location", ThisKey="LocationID", OtherKey="Id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value)
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.ContactLocation.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.ContactLocation.Add(this);
						this._LocationID = value.Id;
					}
					else
					{
						this._LocationID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_EmployeeContact(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		private void detach_EmployeeContact(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}

		private void attach_UserContact(User entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		private void detach_UserContact(User entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Location with labelkey='Location'
		static public string LocationLabelKey { get{return WOResourceLabelKdsMBLabel.K("Location").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private string _Code;
		private string _Desc;
		private string _Comment;
		private System.Data.Linq.Binary _GISLocation;
		private byte? _GISZoom;
		private EntitySet<RelativeLocation> _RelativeLocationContainingLocation;
		private EntitySet<TemporaryStorage> _TemporaryStorageContainingLocation;
		private EntitySet<ItemLocation> _ItemLocationLocation;
		private EntitySet<Contact> _ContactLocation;
		private EntityRef<TemporaryStorage> _DerivedTemporaryStorage;
		private EntityRef<RelativeLocation> _DerivedRelativeLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnGISLocationChanging(System.Data.Linq.Binary value);
	partial void OnGISLocationChanged();
	partial void OnGISZoomChanging(byte? value);
	partial void OnGISZoomChanged();
	#endregion

		public Location()
		{
			this._RelativeLocationContainingLocation = new EntitySet<RelativeLocation>(new Action<RelativeLocation>(this.attach_RelativeLocationContainingLocation), new Action<RelativeLocation>(this.detach_RelativeLocationContainingLocation));
			this._TemporaryStorageContainingLocation = new EntitySet<TemporaryStorage>(new Action<TemporaryStorage>(this.attach_TemporaryStorageContainingLocation), new Action<TemporaryStorage>(this.detach_TemporaryStorageContainingLocation));
			this._ItemLocationLocation = new EntitySet<ItemLocation>(new Action<ItemLocation>(this.attach_ItemLocationLocation), new Action<ItemLocation>(this.detach_ItemLocationLocation));
			this._ContactLocation = new EntitySet<Contact>(new Action<Contact>(this.attach_ContactLocation), new Action<Contact>(this.detach_ContactLocation));
			this._DerivedTemporaryStorage = default(EntityRef<TemporaryStorage>);
			this._DerivedRelativeLocation = default(EntityRef<RelativeLocation>);
			OnCreated();
		}
		/// Denotes the Location's Id column with type id(nonnull) with labelkey='Id'
		static public string Location_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Location),Name="Location_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Location's Code column with type string(minlength 1, (maxlength 1,073,741,823), maxlines 0, trim) with labelkey='Path'
		static public string Location_Code{ get{return WOResourceLabelKdsMBLabel.K("Path").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Location),Name="Location_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR(MAX)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the Location's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string Location_Desc{ get{return WOResourceLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Location),Name="Location_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the Location's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string Location_Comment{ get{return WOResourceLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Location),Name="Location_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the Location's GISLocation column with type geography with labelkey='GISLocation'
		static public string Location_GISLocation{ get{return WOResourceLabelKdsMBLabel.K("GISLocation").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Location),Name="Location_GISLocation")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GISLocation", DbType="VARBINARY(MAX)")]
		public System.Data.Linq.Binary GISLocation
		{
			get
			{
				return this._GISLocation;
			}
			set
			{
				if ((this._GISLocation != value))
				{
					this.OnGISLocationChanging(value);
					this.SendPropertyChanging();
					this._GISLocation = value;
					this.SendPropertyChanged();
					this.OnGISLocationChanged();
				}
			}
		}
		/// Denotes the Location's GISZoom column with type integer(min 0, max 20) with labelkey='GISZoom'
		static public string Location_GISZoom{ get{return WOResourceLabelKdsMBLabel.K("GISZoom").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Location),Name="Location_GISZoom")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GISZoom", DbType="TINYINT")]
		public byte? GISZoom
		{
			get
			{
				return this._GISZoom;
			}
			set
			{
				if ((this._GISZoom != value))
				{
					this.OnGISZoomChanging(value);
					this.SendPropertyChanging();
					this._GISZoom = value;
					this.SendPropertyChanged();
					this.OnGISZoomChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_RelativeLocation", Storage="_RelativeLocationContainingLocation", ThisKey="Id", OtherKey="ContainingLocationID")]
		public EntitySet<RelativeLocation> RelativeLocationContainingLocation
		{
			get
			{
				return this._RelativeLocationContainingLocation;
			}
			set
			{
				this._RelativeLocationContainingLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_DerivedRelativeLocation", Storage="_DerivedRelativeLocation", ThisKey="Id", OtherKey="LocationID", IsUnique=true, IsForeignKey=false)]
		public RelativeLocation DerivedRelativeLocation
		{
			get
			{
				return this._DerivedRelativeLocation.Entity;
			}
			set
			{
				RelativeLocation previousValue = this._DerivedRelativeLocation.Entity;
				if (((previousValue != value)
							|| (this._DerivedRelativeLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedRelativeLocation.Entity = null;
						previousValue.BaseLocation = null;
					}
					this._DerivedRelativeLocation.Entity = value;
					if ((value != null))
					{
						value.BaseLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_DerivedTemporaryStorage", Storage="_DerivedTemporaryStorage", ThisKey="Id", OtherKey="LocationID", IsUnique=true, IsForeignKey=false)]
		public TemporaryStorage DerivedTemporaryStorage
		{
			get
			{
				return this._DerivedTemporaryStorage.Entity;
			}
			set
			{
				TemporaryStorage previousValue = this._DerivedTemporaryStorage.Entity;
				if (((previousValue != value)
							|| (this._DerivedTemporaryStorage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedTemporaryStorage.Entity = null;
						previousValue.BaseLocation = null;
					}
					this._DerivedTemporaryStorage.Entity = value;
					if ((value != null))
					{
						value.BaseLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_TemporaryStorage", Storage="_TemporaryStorageContainingLocation", ThisKey="Id", OtherKey="ContainingLocationID")]
		public EntitySet<TemporaryStorage> TemporaryStorageContainingLocation
		{
			get
			{
				return this._TemporaryStorageContainingLocation;
			}
			set
			{
				this._TemporaryStorageContainingLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ItemLocation", Storage="_ItemLocationLocation", ThisKey="Id", OtherKey="LocationID")]
		public EntitySet<ItemLocation> ItemLocationLocation
		{
			get
			{
				return this._ItemLocationLocation;
			}
			set
			{
				this._ItemLocationLocation.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Contact", Storage="_ContactLocation", ThisKey="Id", OtherKey="LocationID")]
		public EntitySet<Contact> ContactLocation
		{
			get
			{
				return this._ContactLocation;
			}
			set
			{
				this._ContactLocation.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_RelativeLocationContainingLocation(RelativeLocation entity)
		{
			this.SendPropertyChanging();
			entity.ContainingLocation = this;
		}
		private void detach_RelativeLocationContainingLocation(RelativeLocation entity)
		{
			this.SendPropertyChanging();
			entity.ContainingLocation = null;
		}

		private void attach_TemporaryStorageContainingLocation(TemporaryStorage entity)
		{
			this.SendPropertyChanging();
			entity.ContainingLocation = this;
		}
		private void detach_TemporaryStorageContainingLocation(TemporaryStorage entity)
		{
			this.SendPropertyChanging();
			entity.ContainingLocation = null;
		}

		private void attach_ItemLocationLocation(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		private void detach_ItemLocationLocation(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}

		private void attach_ContactLocation(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		private void detach_ContactLocation(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationContainment")]
	public partial class LocationContainment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table LocationContainment with labelkey='LocationContainment'
		static public string LocationContainmentLabelKey { get{return WOResourceLabelKdsMBLabel.K("LocationContainment").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public LocationContainment()
		{
			OnCreated();
		}
		/// Denotes the LocationContainment's Id column with type id(nonnull) with labelkey='Id'
		static public string LocationContainment_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.LocationContainment),Name="LocationContainment_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RelativeLocation")]
	public partial class RelativeLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table RelativeLocation with labelkey=''
		static public string RelativeLocationLabelKey { get{return WOResourceLabelKdsMBLabel.K("").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _ContainingLocationID;
		private string _Code;
		private System.Guid _Id;
		private System.DateTime? _Hidden;
		private string _ExternalTag;
		private System.Guid _LocationID;
		private EntityRef<Location> _ContainingLocation;
		private EntityRef<Location> _BaseLocation;
		private EntityRef<PlainRelativeLocation> _DerivedPlainRelativeLocation;
		private EntityRef<PermanentStorage> _DerivedPermanentStorage;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnContainingLocationIDChanging(System.Guid value);
	partial void OnContainingLocationIDChanged();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnExternalTagChanging(string value);
	partial void OnExternalTagChanged();
	partial void OnLocationIDChanging(System.Guid value);
	partial void OnLocationIDChanged();
	#endregion

		public RelativeLocation()
		{
			this._ContainingLocation = default(EntityRef<Location>);
			this._BaseLocation = default(EntityRef<Location>);
			this._DerivedPlainRelativeLocation = default(EntityRef<PlainRelativeLocation>);
			this._DerivedPermanentStorage = default(EntityRef<PermanentStorage>);
			OnCreated();
		}
		/// Denotes the RelativeLocation's ContainingLocationID column with type link(nonnull, field Location.Id) with labelkey='Containing Location'
		static public string RelativeLocation_ContainingLocationID{ get{return WOResourceLabelKdsMBLabel.K("Containing Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RelativeLocation),Name="RelativeLocation_ContainingLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainingLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ContainingLocationID
		{
			get
			{
				return this._ContainingLocationID;
			}
			set
			{
				if ((this._ContainingLocationID != value))
				{
					if (this._ContainingLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContainingLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ContainingLocationID = value;
					this.SendPropertyChanged();
					this.OnContainingLocationIDChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string RelativeLocation_Code{ get{return WOResourceLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RelativeLocation),Name="RelativeLocation_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string RelativeLocation_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RelativeLocation),Name="RelativeLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string RelativeLocation_Hidden{ get{return WOResourceLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RelativeLocation),Name="RelativeLocation_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's ExternalTag column with type string(minlength 1, maxlength 50, maxlines 0, trim) with labelkey='External Tag'
		static public string RelativeLocation_ExternalTag{ get{return WOResourceLabelKdsMBLabel.K("External Tag").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RelativeLocation),Name="RelativeLocation_ExternalTag")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalTag", DbType="NVARCHAR (50)")]
		public string ExternalTag
		{
			get
			{
				return this._ExternalTag;
			}
			set
			{
				if ((this._ExternalTag != value))
				{
					this.OnExternalTagChanging(value);
					this.SendPropertyChanging();
					this._ExternalTag = value;
					this.SendPropertyChanged();
					this.OnExternalTagChanged();
				}
			}
		}
		/// Denotes the RelativeLocation's LocationID column with type link(nonnull, field Location.Id) with labelkey='Location'
		static public string RelativeLocation_LocationID{ get{return WOResourceLabelKdsMBLabel.K("Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.RelativeLocation),Name="RelativeLocation_LocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._BaseLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged();
					this.OnLocationIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelativeLocation_DerivedPlainRelativeLocation", Storage="_DerivedPlainRelativeLocation", ThisKey="Id", OtherKey="RelativeLocationID", IsUnique=true, IsForeignKey=false)]
		public PlainRelativeLocation DerivedPlainRelativeLocation
		{
			get
			{
				return this._DerivedPlainRelativeLocation.Entity;
			}
			set
			{
				PlainRelativeLocation previousValue = this._DerivedPlainRelativeLocation.Entity;
				if (((previousValue != value)
							|| (this._DerivedPlainRelativeLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedPlainRelativeLocation.Entity = null;
						previousValue.BaseRelativeLocation = null;
					}
					this._DerivedPlainRelativeLocation.Entity = value;
					if ((value != null))
					{
						value.BaseRelativeLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RelativeLocation_DerivedPermanentStorage", Storage="_DerivedPermanentStorage", ThisKey="Id", OtherKey="RelativeLocationID", IsUnique=true, IsForeignKey=false)]
		public PermanentStorage DerivedPermanentStorage
		{
			get
			{
				return this._DerivedPermanentStorage.Entity;
			}
			set
			{
				PermanentStorage previousValue = this._DerivedPermanentStorage.Entity;
				if (((previousValue != value)
							|| (this._DerivedPermanentStorage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DerivedPermanentStorage.Entity = null;
						previousValue.BaseRelativeLocation = null;
					}
					this._DerivedPermanentStorage.Entity = value;
					if ((value != null))
					{
						value.BaseRelativeLocation = this;
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContainingLocation_RelativeLocation", Storage="_ContainingLocation", ThisKey="ContainingLocationID", OtherKey="Id", IsForeignKey=true)]
		public Location ContainingLocation
		{
			get
			{
				return this._ContainingLocation.Entity;
			}
			set
			{
				Location previousValue = this._ContainingLocation.Entity;
				if (((previousValue != value)
							|| (this._ContainingLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContainingLocation.Entity = null;
						previousValue.RelativeLocationContainingLocation.Remove(this);
					}
					this._ContainingLocation.Entity = value;
					if ((value != null))
					{
						value.RelativeLocationContainingLocation.Add(this);
						this._ContainingLocationID = value.Id;
					}
					else
					{
						this._ContainingLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseLocation_RelativeLocation", Storage="_BaseLocation", ThisKey="LocationID", OtherKey="Id", IsForeignKey=true)]
		public Location BaseLocation
		{
			get
			{
				return this._BaseLocation.Entity;
			}
			set
			{
				Location previousValue = this._BaseLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseLocation.Entity = null;
					}
					this._BaseLocation.Entity = value;
					if ((value != null))
					{
						this._LocationID = value.Id;
					}
					else
					{
						this._LocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlainRelativeLocation")]
	public partial class PlainRelativeLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PlainRelativeLocation with labelkey='Relative Location'
		static public string PlainRelativeLocationLabelKey { get{return WOResourceLabelKdsMBLabel.K("Relative Location").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _RelativeLocationID;
		private EntityRef<RelativeLocation> _BaseRelativeLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnRelativeLocationIDChanging(System.Guid value);
	partial void OnRelativeLocationIDChanged();
	#endregion

		public PlainRelativeLocation()
		{
			this._BaseRelativeLocation = default(EntityRef<RelativeLocation>);
			OnCreated();
		}
		/// Denotes the PlainRelativeLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string PlainRelativeLocation_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PlainRelativeLocation),Name="PlainRelativeLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the PlainRelativeLocation's RelativeLocationID column with type link(nonnull, field RelativeLocation.Id) with labelkey=''
		static public string PlainRelativeLocation_RelativeLocationID{ get{return WOResourceLabelKdsMBLabel.K("").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PlainRelativeLocation),Name="PlainRelativeLocation_RelativeLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelativeLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid RelativeLocationID
		{
			get
			{
				return this._RelativeLocationID;
			}
			set
			{
				if ((this._RelativeLocationID != value))
				{
					if (this._BaseRelativeLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelativeLocationIDChanging(value);
					this.SendPropertyChanging();
					this._RelativeLocationID = value;
					this.SendPropertyChanged();
					this.OnRelativeLocationIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseRelativeLocation_PlainRelativeLocation", Storage="_BaseRelativeLocation", ThisKey="RelativeLocationID", OtherKey="Id", IsForeignKey=true)]
		public RelativeLocation BaseRelativeLocation
		{
			get
			{
				return this._BaseRelativeLocation.Entity;
			}
			set
			{
				RelativeLocation previousValue = this._BaseRelativeLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseRelativeLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseRelativeLocation.Entity = null;
					}
					this._BaseRelativeLocation.Entity = value;
					if ((value != null))
					{
						this._RelativeLocationID = value.Id;
					}
					else
					{
						this._RelativeLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermanentStorage")]
	public partial class PermanentStorage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table PermanentStorage with labelkey='Storeroom'
		static public string PermanentStorageLabelKey { get{return WOResourceLabelKdsMBLabel.K("Storeroom").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _RelativeLocationID;
		private short? _Rank;
		private EntityRef<RelativeLocation> _BaseRelativeLocation;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnRelativeLocationIDChanging(System.Guid value);
	partial void OnRelativeLocationIDChanged();
	partial void OnRankChanging(short? value);
	partial void OnRankChanged();
	#endregion

		public PermanentStorage()
		{
			this._BaseRelativeLocation = default(EntityRef<RelativeLocation>);
			OnCreated();
		}
		/// Denotes the PermanentStorage's Id column with type id(nonnull) with labelkey='Id'
		static public string PermanentStorage_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PermanentStorage),Name="PermanentStorage_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the PermanentStorage's RelativeLocationID column with type link(nonnull, field RelativeLocation.Id) with labelkey=''
		static public string PermanentStorage_RelativeLocationID{ get{return WOResourceLabelKdsMBLabel.K("").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PermanentStorage),Name="PermanentStorage_RelativeLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelativeLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid RelativeLocationID
		{
			get
			{
				return this._RelativeLocationID;
			}
			set
			{
				if ((this._RelativeLocationID != value))
				{
					if (this._BaseRelativeLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelativeLocationIDChanging(value);
					this.SendPropertyChanging();
					this._RelativeLocationID = value;
					this.SendPropertyChanged();
					this.OnRelativeLocationIDChanged();
				}
			}
		}
		/// Denotes the PermanentStorage's Rank column with type integer(16) with labelkey='Physical Count Sheet Rank'
		static public string PermanentStorage_Rank{ get{return WOResourceLabelKdsMBLabel.K("Physical Count Sheet Rank").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.PermanentStorage),Name="PermanentStorage_Rank")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="SMALLINT")]
		public short? Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged();
					this.OnRankChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseRelativeLocation_PermanentStorage", Storage="_BaseRelativeLocation", ThisKey="RelativeLocationID", OtherKey="Id", IsForeignKey=true)]
		public RelativeLocation BaseRelativeLocation
		{
			get
			{
				return this._BaseRelativeLocation.Entity;
			}
			set
			{
				RelativeLocation previousValue = this._BaseRelativeLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseRelativeLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseRelativeLocation.Entity = null;
					}
					this._BaseRelativeLocation.Entity = value;
					if ((value != null))
					{
						this._RelativeLocationID = value.Id;
					}
					else
					{
						this._RelativeLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table Item with labelkey='Item'
		static public string ItemLabelKey { get{return WOResourceLabelKdsMBLabel.K("Item").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private string _Code;
		private System.Guid _Id;
		private System.DateTime? _Hidden;
		private string _Desc;
		private string _Comment;
		private System.Guid? _ItemCategoryID;
		private System.Guid? _UnitOfMeasureID;
		private int _OnHand;
		private int _OnReserve;
		private int _OnOrder;
		private int _Available;
		private System.Decimal _TotalCost;
		private System.Decimal? _UnitCost;
		private EntitySet<ItemLocation> _ItemLocationItem;
		private EntityRef<ItemCategory> _ItemCategory;
		private EntityRef<UnitOfMeasure> _UnitOfMeasure;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnCodeChanging(string value);
	partial void OnCodeChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnHiddenChanging(System.DateTime? value);
	partial void OnHiddenChanged();
	partial void OnDescChanging(string value);
	partial void OnDescChanged();
	partial void OnCommentChanging(string value);
	partial void OnCommentChanged();
	partial void OnItemCategoryIDChanging(System.Guid? value);
	partial void OnItemCategoryIDChanged();
	partial void OnUnitOfMeasureIDChanging(System.Guid? value);
	partial void OnUnitOfMeasureIDChanged();
	partial void OnOnHandChanging(int value);
	partial void OnOnHandChanged();
	partial void OnOnReserveChanging(int value);
	partial void OnOnReserveChanged();
	partial void OnOnOrderChanging(int value);
	partial void OnOnOrderChanged();
	partial void OnAvailableChanging(int value);
	partial void OnAvailableChanged();
	partial void OnTotalCostChanging(System.Decimal value);
	partial void OnTotalCostChanged();
	partial void OnUnitCostChanging(System.Decimal? value);
	partial void OnUnitCostChanged();
	#endregion

		public Item()
		{
			this._ItemLocationItem = new EntitySet<ItemLocation>(new Action<ItemLocation>(this.attach_ItemLocationItem), new Action<ItemLocation>(this.detach_ItemLocationItem));
			this._ItemCategory = default(EntityRef<ItemCategory>);
			this._UnitOfMeasure = default(EntityRef<UnitOfMeasure>);
			OnCreated();
		}
		/// Denotes the Item's Code column with type string(nonnull, minlength 1, maxlength 50, maxlines 0, trim) with labelkey='Code'
		static public string Item_Code{ get{return WOResourceLabelKdsMBLabel.K("Code").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_Code")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVARCHAR (50)", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged();
					this.OnCodeChanged();
				}
			}
		}
		/// Denotes the Item's Id column with type id(nonnull) with labelkey='Id'
		static public string Item_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the Item's Hidden column with type datetime((min Monday, 01 January 1753 00:00), (max Friday, 31 December 9999 23:59:59.99), divided 100) with labelkey='Hidden'
		static public string Item_Hidden{ get{return WOResourceLabelKdsMBLabel.K("Hidden").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_Hidden")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="DATETIME")]
		public System.DateTime? Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged();
					this.OnHiddenChanged();
				}
			}
		}
		/// Denotes the Item's Desc column with type string(minlength 1, maxlength 150, maxlines 0, trim) with labelkey='Desc'
		static public string Item_Desc{ get{return WOResourceLabelKdsMBLabel.K("Desc").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_Desc")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desc", DbType="NVARCHAR (150)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged();
					this.OnDescChanged();
				}
			}
		}
		/// Denotes the Item's Comment column with type string(minlength 1, (maxlength 1,073,741,823), trim) with labelkey='Comment'
		static public string Item_Comment{ get{return WOResourceLabelKdsMBLabel.K("Comment").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_Comment")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVARCHAR(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged();
					this.OnCommentChanged();
				}
			}
		}
		/// Denotes the Item's ItemCategoryID column with type link(field ItemCategory.Id) with labelkey='Category'
		static public string Item_ItemCategoryID{ get{return WOResourceLabelKdsMBLabel.K("Category").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_ItemCategoryID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemCategoryID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? ItemCategoryID
		{
			get
			{
				return this._ItemCategoryID;
			}
			set
			{
				if ((this._ItemCategoryID != value))
				{
					if (this._ItemCategory.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ItemCategoryID = value;
					this.SendPropertyChanged();
					this.OnItemCategoryIDChanged();
				}
			}
		}
		/// Denotes the Item's UnitOfMeasureID column with type link(field UnitOfMeasure.Id) with labelkey='UOM'
		static public string Item_UnitOfMeasureID{ get{return WOResourceLabelKdsMBLabel.K("UOM").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_UnitOfMeasureID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitOfMeasureID", DbType="UNIQUEIDENTIFIER")]
		public System.Guid? UnitOfMeasureID
		{
			get
			{
				return this._UnitOfMeasureID;
			}
			set
			{
				if ((this._UnitOfMeasureID != value))
				{
					if (this._UnitOfMeasure.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitOfMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._UnitOfMeasureID = value;
					this.SendPropertyChanged();
					this.OnUnitOfMeasureIDChanged();
				}
			}
		}
		/// Denotes the Item's OnHand column with type integer(nonnull, 32) with labelkey='OnHand'
		static public string Item_OnHand{ get{return WOResourceLabelKdsMBLabel.K("OnHand").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_OnHand")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnHand", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnHand
		{
			get
			{
				return this._OnHand;
			}
			set
			{
				if ((this._OnHand != value))
				{
					this.OnOnHandChanging(value);
					this.SendPropertyChanging();
					this._OnHand = value;
					this.SendPropertyChanged();
					this.OnOnHandChanged();
				}
			}
		}
		/// Denotes the Item's OnReserve column with type integer(nonnull, 32) with labelkey='OnReserve'
		static public string Item_OnReserve{ get{return WOResourceLabelKdsMBLabel.K("OnReserve").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_OnReserve")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnReserve", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnReserve
		{
			get
			{
				return this._OnReserve;
			}
			set
			{
				if ((this._OnReserve != value))
				{
					this.OnOnReserveChanging(value);
					this.SendPropertyChanging();
					this._OnReserve = value;
					this.SendPropertyChanged();
					this.OnOnReserveChanged();
				}
			}
		}
		/// Denotes the Item's OnOrder column with type integer(nonnull, 32) with labelkey='OnOrder'
		static public string Item_OnOrder{ get{return WOResourceLabelKdsMBLabel.K("OnOrder").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_OnOrder")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnOrder", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int OnOrder
		{
			get
			{
				return this._OnOrder;
			}
			set
			{
				if ((this._OnOrder != value))
				{
					this.OnOnOrderChanging(value);
					this.SendPropertyChanging();
					this._OnOrder = value;
					this.SendPropertyChanged();
					this.OnOnOrderChanged();
				}
			}
		}
		/// Denotes the Item's Available column with type integer(nonnull, 32) with labelkey='Available'
		static public string Item_Available{ get{return WOResourceLabelKdsMBLabel.K("Available").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_Available")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="INT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public int Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged();
					this.OnAvailableChanged();
				}
			}
		}
		/// Denotes the Item's TotalCost column with type currency(nonnull, (min (¤922,337,203,685,477.58)), (max ¤922,337,203,685,477.58), by ¤0.01) with labelkey='TotalCost'
		static public string Item_TotalCost{ get{return WOResourceLabelKdsMBLabel.K("TotalCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_TotalCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="MONEY", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Decimal TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this.OnTotalCostChanging(value);
					this.SendPropertyChanging();
					this._TotalCost = value;
					this.SendPropertyChanged();
					this.OnTotalCostChanged();
				}
			}
		}
		/// Denotes the Item's UnitCost column with type currency((min (¤922,337,203,685,477.5808)), (max ¤922,337,203,685,477.5807), by ¤0.0001) with labelkey='UnitCost'
		static public string Item_UnitCost{ get{return WOResourceLabelKdsMBLabel.K("UnitCost").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.Item),Name="Item_UnitCost")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCost", DbType="MONEY", IsDbGenerated=true, AutoSync=AutoSync.Always, UpdateCheck=UpdateCheck.Never)]
		public System.Decimal? UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged();
					this.OnUnitCostChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_ItemLocation", Storage="_ItemLocationItem", ThisKey="Id", OtherKey="ItemID")]
		public EntitySet<ItemLocation> ItemLocationItem
		{
			get
			{
				return this._ItemLocationItem;
			}
			set
			{
				this._ItemLocationItem.Assign(value);
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCategory_Item", Storage="_ItemCategory", ThisKey="ItemCategoryID", OtherKey="Id", IsForeignKey=true)]
		public ItemCategory ItemCategory
		{
			get
			{
				return this._ItemCategory.Entity;
			}
			set
			{
				ItemCategory previousValue = this._ItemCategory.Entity;
				if (((previousValue != value)
							|| (this._ItemCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemCategory.Entity = null;
						previousValue.ItemItemCategory.Remove(this);
					}
					this._ItemCategory.Entity = value;
					if ((value != null))
					{
						value.ItemItemCategory.Add(this);
						this._ItemCategoryID = value.Id;
					}
					else
					{
						this._ItemCategoryID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitOfMeasure_Item", Storage="_UnitOfMeasure", ThisKey="UnitOfMeasureID", OtherKey="Id", IsForeignKey=true)]
		public UnitOfMeasure UnitOfMeasure
		{
			get
			{
				return this._UnitOfMeasure.Entity;
			}
			set
			{
				UnitOfMeasure previousValue = this._UnitOfMeasure.Entity;
				if (((previousValue != value)
							|| (this._UnitOfMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitOfMeasure.Entity = null;
						previousValue.ItemUnitOfMeasure.Remove(this);
					}
					this._UnitOfMeasure.Entity = value;
					if ((value != null))
					{
						value.ItemUnitOfMeasure.Add(this);
						this._UnitOfMeasureID = value.Id;
					}
					else
					{
						this._UnitOfMeasureID = default(System.Guid?);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemLocationItem(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		private void detach_ItemLocationItem(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemPrice")]
	public partial class ItemPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table ItemPrice with labelkey='ItemPrice'
		static public string ItemPriceLabelKey { get{return WOResourceLabelKdsMBLabel.K("ItemPrice").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private EntitySet<ItemLocation> _ItemLocationItemPrice;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public ItemPrice()
		{
			this._ItemLocationItemPrice = new EntitySet<ItemLocation>(new Action<ItemLocation>(this.attach_ItemLocationItemPrice), new Action<ItemLocation>(this.detach_ItemLocationItemPrice));
			OnCreated();
		}
		/// Denotes the ItemPrice's Id column with type id(nonnull) with labelkey='Id'
		static public string ItemPrice_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.ItemPrice),Name="ItemPrice_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemPrice_ItemLocation", Storage="_ItemLocationItemPrice", ThisKey="Id", OtherKey="ItemPriceID")]
		public EntitySet<ItemLocation> ItemLocationItemPrice
		{
			get
			{
				return this._ItemLocationItemPrice;
			}
			set
			{
				this._ItemLocationItemPrice.Assign(value);
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_ItemLocationItemPrice(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.ItemPrice = this;
		}
		private void detach_ItemLocationItemPrice(ItemLocation entity)
		{
			this.SendPropertyChanging();
			entity.ItemPrice = null;
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.POLine")]
	public partial class POLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table POLine with labelkey='POLine'
		static public string POLineLabelKey { get{return WOResourceLabelKdsMBLabel.K("POLine").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public POLine()
		{
			OnCreated();
		}
		/// Denotes the POLine's Id column with type id(nonnull) with labelkey='Id'
		static public string POLine_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.POLine),Name="POLine_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.POLineItem")]
	public partial class POLineItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table POLineItem with labelkey='POLineItem'
		static public string POLineItemLabelKey { get{return WOResourceLabelKdsMBLabel.K("POLineItem").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Object _Quantity;
		private System.Object _ReceiveQuantity;
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnQuantityChanging(System.Object value);
	partial void OnQuantityChanged();
	partial void OnReceiveQuantityChanging(System.Object value);
	partial void OnReceiveQuantityChanged();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public POLineItem()
		{
			OnCreated();
		}
		/// Denotes the POLineItem's Quantity column with type null(nonnull) with labelkey='Quantity'
		static public string POLineItem_Quantity{ get{return WOResourceLabelKdsMBLabel.K("Quantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.POLineItem),Name="POLineItem_Quantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged();
					this.OnQuantityChanged();
				}
			}
		}
		/// Denotes the POLineItem's ReceiveQuantity column with type null(nonnull) with labelkey='ReceiveQuantity'
		static public string POLineItem_ReceiveQuantity{ get{return WOResourceLabelKdsMBLabel.K("ReceiveQuantity").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.POLineItem),Name="POLineItem_ReceiveQuantity")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiveQuantity", DbType="BIT", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Object ReceiveQuantity
		{
			get
			{
				return this._ReceiveQuantity;
			}
			set
			{
				if ((this._ReceiveQuantity != value))
				{
					this.OnReceiveQuantityChanging(value);
					this.SendPropertyChanging();
					this._ReceiveQuantity = value;
					this.SendPropertyChanged();
					this.OnReceiveQuantityChanged();
				}
			}
		}
		/// Denotes the POLineItem's Id column with type id(nonnull) with labelkey='Id'
		static public string POLineItem_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.POLineItem),Name="POLineItem_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemporaryItemLocation")]
	public partial class TemporaryItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table TemporaryItemLocation with labelkey='Temporary Item Location'
		static public string TemporaryItemLocationLabelKey { get{return WOResourceLabelKdsMBLabel.K("Temporary Item Location").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
		private System.Guid _ActualItemLocationID;
		private System.Guid _WorkOrderID;
		private EntityRef<ActualItemLocation> _BaseActualItemLocation;
		private EntityRef<WorkOrder> _WorkOrder;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	partial void OnActualItemLocationIDChanging(System.Guid value);
	partial void OnActualItemLocationIDChanged();
	partial void OnWorkOrderIDChanging(System.Guid value);
	partial void OnWorkOrderIDChanged();
	#endregion

		public TemporaryItemLocation()
		{
			this._BaseActualItemLocation = default(EntityRef<ActualItemLocation>);
			this._WorkOrder = default(EntityRef<WorkOrder>);
			OnCreated();
		}
		/// Denotes the TemporaryItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string TemporaryItemLocation_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.TemporaryItemLocation),Name="TemporaryItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		/// Denotes the TemporaryItemLocation's ActualItemLocationID column with type link(nonnull, field ActualItemLocation.Id) with labelkey='Actual Item Location'
		static public string TemporaryItemLocation_ActualItemLocationID{ get{return WOResourceLabelKdsMBLabel.K("Actual Item Location").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.TemporaryItemLocation),Name="TemporaryItemLocation_ActualItemLocationID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualItemLocationID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid ActualItemLocationID
		{
			get
			{
				return this._ActualItemLocationID;
			}
			set
			{
				if ((this._ActualItemLocationID != value))
				{
					if (this._BaseActualItemLocation.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActualItemLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ActualItemLocationID = value;
					this.SendPropertyChanged();
					this.OnActualItemLocationIDChanged();
				}
			}
		}
		/// Denotes the TemporaryItemLocation's WorkOrderID column with type link(nonnull, field WorkOrder.Id) with labelkey='Work Order'
		static public string TemporaryItemLocation_WorkOrderID{ get{return WOResourceLabelKdsMBLabel.K("Work Order").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.TemporaryItemLocation),Name="TemporaryItemLocation_WorkOrderID")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderID", DbType="UNIQUEIDENTIFIER", CanBeNull=false)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid WorkOrderID
		{
			get
			{
				return this._WorkOrderID;
			}
			set
			{
				if ((this._WorkOrderID != value))
				{
					if (this._WorkOrder.HasLoadedOrAssignedValue )
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderID = value;
					this.SendPropertyChanged();
					this.OnWorkOrderIDChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BaseActualItemLocation_TemporaryItemLocation", Storage="_BaseActualItemLocation", ThisKey="ActualItemLocationID", OtherKey="Id", IsForeignKey=true)]
		public ActualItemLocation BaseActualItemLocation
		{
			get
			{
				return this._BaseActualItemLocation.Entity;
			}
			set
			{
				ActualItemLocation previousValue = this._BaseActualItemLocation.Entity;
				if (((previousValue != value)
							|| (this._BaseActualItemLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseActualItemLocation.Entity = null;
					}
					this._BaseActualItemLocation.Entity = value;
					if ((value != null))
					{
						this._ActualItemLocationID = value.Id;
					}
					else
					{
						this._ActualItemLocationID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_TemporaryItemLocation", Storage="_WorkOrder", ThisKey="WorkOrderID", OtherKey="Id", IsForeignKey=true)]
		public WorkOrder WorkOrder
		{
			get
			{
				return this._WorkOrder.Entity;
			}
			set
			{
				WorkOrder previousValue = this._WorkOrder.Entity;
				if (((previousValue != value)
							|| (this._WorkOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrder.Entity = null;
						previousValue.TemporaryItemLocationWorkOrder.Remove(this);
					}
					this._WorkOrder.Entity = value;
					if ((value != null))
					{
						value.TemporaryItemLocationWorkOrder.Add(this);
						this._WorkOrderID = value.Id;
					}
					else
					{
						this._WorkOrderID = default(System.Guid);
					}
					this.SendPropertyChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemplateItemLocation")]
	public partial class TemplateItemLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		// Denotes table TemplateItemLocation with labelkey='TemplateItemLocation'
		static public string TemplateItemLocationLabelKey { get{return WOResourceLabelKdsMBLabel.K("TemplateItemLocation").Translate();}}
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		private System.Guid _Id;
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnIdChanging(System.Guid value);
	partial void OnIdChanged();
	#endregion

		public TemplateItemLocation()
		{
			OnCreated();
		}
		/// Denotes the TemplateItemLocation's Id column with type id(nonnull) with labelkey='Id'
		static public string TemplateItemLocation_Id{ get{return WOResourceLabelKdsMBLabel.K("Id").Translate();}}
		[System.ComponentModel.DataAnnotations.Display(ResourceType=typeof(WOResourceEntities.TemplateItemLocation),Name="TemplateItemLocation_Id")]		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UNIQUEIDENTIFIER", IsPrimaryKey=true)]
		[System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Thinkage.Libraries.MVC.Models.FieldValidationResource))]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged();
					this.OnIdChanged();
				}
			}
		}
		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged([CallerMemberName]String propertyName = null)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	internal class WOResourceLabelKdsMBLabel : Thinkage.Libraries.Translation.GeneralKeyBuilder {
		const string LabelContext = "dsMBLabel";

		static WOResourceLabelKdsMBLabel Instance = new WOResourceLabelKdsMBLabel();
		protected WOResourceLabelKdsMBLabel() {
		}
		protected override Thinkage.Libraries.Translation.ContextReference GetContext() {
			return Thinkage.Libraries.Translation.ContextReference.New(LabelContext);
		}
		public static Thinkage.Libraries.Translation.Key K([Thinkage.Libraries.Translation.Context(LabelContext)]string s) {
			return Instance.BuildKey(s);
		}
	}
}
#pragma warning restore 1591

